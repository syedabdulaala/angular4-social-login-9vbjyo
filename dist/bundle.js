(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name7 in all)
      __defProp(target, name7, { get: all[name7], enumerable: true });
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toESM = (module, isNodeMode) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };
  var __toCommonJS = /* @__PURE__ */ ((cache) => {
    return (module, temp) => {
      return cache && cache.get(module) || (temp = __reExport(__markAsModule({}), module, 1), cache && cache.set(module, temp), temp);
    };
  })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

  // node_modules/@firebase/util/dist/index.esm2017.js
  function deepExtend(target, source) {
    if (!(source instanceof Object)) {
      return source;
    }
    switch (source.constructor) {
      case Date:
        const dateValue = source;
        return new Date(dateValue.getTime());
      case Object:
        if (target === void 0) {
          target = {};
        }
        break;
      case Array:
        target = [];
        break;
      default:
        return source;
    }
    for (const prop in source) {
      if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
        continue;
      }
      target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
  }
  function isValidKey(key) {
    return key !== "__proto__";
  }
  function getUA() {
    if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
      return navigator["userAgent"];
    } else {
      return "";
    }
  }
  function isMobileCordova() {
    return typeof window !== "undefined" && !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
  }
  function isNode() {
    try {
      return Object.prototype.toString.call(global.process) === "[object process]";
    } catch (e) {
      return false;
    }
  }
  function isBrowser() {
    return typeof self === "object" && self.self === self;
  }
  function isBrowserExtension() {
    const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
    return typeof runtime === "object" && runtime.id !== void 0;
  }
  function isReactNative() {
    return typeof navigator === "object" && navigator["product"] === "ReactNative";
  }
  function isIE() {
    const ua = getUA();
    return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
  }
  function isIndexedDBAvailable() {
    return typeof indexedDB === "object";
  }
  function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key) => {
      const value = data[key];
      return value != null ? String(value) : `<${key}?>`;
    });
  }
  function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function isEmpty(obj) {
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return false;
      }
    }
    return true;
  }
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys) {
      if (!bKeys.includes(k)) {
        return false;
      }
      const aProp = a[k];
      const bProp = b[k];
      if (isObject(aProp) && isObject(bProp)) {
        if (!deepEqual(aProp, bProp)) {
          return false;
        }
      } else if (aProp !== bProp) {
        return false;
      }
    }
    for (const k of bKeys) {
      if (!aKeys.includes(k)) {
        return false;
      }
    }
    return true;
  }
  function isObject(thing) {
    return thing !== null && typeof thing === "object";
  }
  function querystring(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams)) {
      if (Array.isArray(value)) {
        value.forEach((arrayVal) => {
          params.push(encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal));
        });
      } else {
        params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
      }
    }
    return params.length ? "&" + params.join("&") : "";
  }
  function querystringDecode(querystring2) {
    const obj = {};
    const tokens = querystring2.replace(/^\?/, "").split("&");
    tokens.forEach((token) => {
      if (token) {
        const [key, value] = token.split("=");
        obj[decodeURIComponent(key)] = decodeURIComponent(value);
      }
    });
    return obj;
  }
  function extractQuerystring(url) {
    const queryStart = url.indexOf("?");
    if (!queryStart) {
      return "";
    }
    const fragmentStart = url.indexOf("#", queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
  }
  function createSubscribe(executor, onNoObservers) {
    const proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
  }
  function implementsAnyMethods(obj, methods) {
    if (typeof obj !== "object" || obj === null) {
      return false;
    }
    for (const method of methods) {
      if (method in obj && typeof obj[method] === "function") {
        return true;
      }
    }
    return false;
  }
  function noop() {
  }
  function getModularInstance(service) {
    if (service && service._delegate) {
      return service._delegate;
    } else {
      return service;
    }
  }
  var stringToByteArray$1, byteArrayToString, base64, base64Decode, Deferred, ERROR_NAME, FirebaseError, ErrorFactory, PATTERN, ObserverProxy, MAX_VALUE_MILLIS;
  var init_index_esm2017 = __esm({
    "node_modules/@firebase/util/dist/index.esm2017.js"() {
      stringToByteArray$1 = function(str) {
        const out = [];
        let p = 0;
        for (let i = 0; i < str.length; i++) {
          let c = str.charCodeAt(i);
          if (c < 128) {
            out[p++] = c;
          } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
          } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
            c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          }
        }
        return out;
      };
      byteArrayToString = function(bytes) {
        const out = [];
        let pos = 0, c = 0;
        while (pos < bytes.length) {
          const c1 = bytes[pos++];
          if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
          } else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
          } else if (c1 > 239 && c1 < 365) {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
            out[c++] = String.fromCharCode(55296 + (u >> 10));
            out[c++] = String.fromCharCode(56320 + (u & 1023));
          } else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
          }
        }
        return out.join("");
      };
      base64 = {
        byteToCharMap_: null,
        charToByteMap_: null,
        byteToCharMapWebSafe_: null,
        charToByteMapWebSafe_: null,
        ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
        get ENCODED_VALS() {
          return this.ENCODED_VALS_BASE + "+/=";
        },
        get ENCODED_VALS_WEBSAFE() {
          return this.ENCODED_VALS_BASE + "-_.";
        },
        HAS_NATIVE_SUPPORT: typeof atob === "function",
        encodeByteArray(input, webSafe) {
          if (!Array.isArray(input)) {
            throw Error("encodeByteArray takes an array as a parameter");
          }
          this.init_();
          const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
          const output = [];
          for (let i = 0; i < input.length; i += 3) {
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
            let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
            let outByte4 = byte3 & 63;
            if (!haveByte3) {
              outByte4 = 64;
              if (!haveByte2) {
                outByte3 = 64;
              }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
          }
          return output.join("");
        },
        encodeString(input, webSafe) {
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return btoa(input);
          }
          return this.encodeByteArray(stringToByteArray$1(input), webSafe);
        },
        decodeString(input, webSafe) {
          if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return atob(input);
          }
          return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        decodeStringToByteArray(input, webSafe) {
          this.init_();
          const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
          const output = [];
          for (let i = 0; i < input.length; ) {
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
              throw Error();
            }
            const outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
              const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
              output.push(outByte2);
              if (byte4 !== 64) {
                const outByte3 = byte3 << 6 & 192 | byte4;
                output.push(outByte3);
              }
            }
          }
          return output;
        },
        init_() {
          if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            for (let i = 0; i < this.ENCODED_VALS.length; i++) {
              this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
              this.charToByteMap_[this.byteToCharMap_[i]] = i;
              this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
              this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
              if (i >= this.ENCODED_VALS_BASE.length) {
                this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
              }
            }
          }
        }
      };
      base64Decode = function(str) {
        try {
          return base64.decodeString(str, true);
        } catch (e) {
          console.error("base64Decode failed: ", e);
        }
        return null;
      };
      Deferred = class {
        constructor() {
          this.reject = () => {
          };
          this.resolve = () => {
          };
          this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
          });
        }
        wrapCallback(callback) {
          return (error, value) => {
            if (error) {
              this.reject(error);
            } else {
              this.resolve(value);
            }
            if (typeof callback === "function") {
              this.promise.catch(() => {
              });
              if (callback.length === 1) {
                callback(error);
              } else {
                callback(error, value);
              }
            }
          };
        }
      };
      ERROR_NAME = "FirebaseError";
      FirebaseError = class extends Error {
        constructor(code, message, customData) {
          super(message);
          this.code = code;
          this.customData = customData;
          this.name = ERROR_NAME;
          Object.setPrototypeOf(this, FirebaseError.prototype);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ErrorFactory.prototype.create);
          }
        }
      };
      ErrorFactory = class {
        constructor(service, serviceName, errors) {
          this.service = service;
          this.serviceName = serviceName;
          this.errors = errors;
        }
        create(code, ...data) {
          const customData = data[0] || {};
          const fullCode = `${this.service}/${code}`;
          const template = this.errors[code];
          const message = template ? replaceTemplate(template, customData) : "Error";
          const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
          const error = new FirebaseError(fullCode, fullMessage, customData);
          return error;
        }
      };
      PATTERN = /\{\$([^}]+)}/g;
      ObserverProxy = class {
        constructor(executor, onNoObservers) {
          this.observers = [];
          this.unsubscribes = [];
          this.observerCount = 0;
          this.task = Promise.resolve();
          this.finalized = false;
          this.onNoObservers = onNoObservers;
          this.task.then(() => {
            executor(this);
          }).catch((e) => {
            this.error(e);
          });
        }
        next(value) {
          this.forEachObserver((observer) => {
            observer.next(value);
          });
        }
        error(error) {
          this.forEachObserver((observer) => {
            observer.error(error);
          });
          this.close(error);
        }
        complete() {
          this.forEachObserver((observer) => {
            observer.complete();
          });
          this.close();
        }
        subscribe(nextOrObserver, error, complete) {
          let observer;
          if (nextOrObserver === void 0 && error === void 0 && complete === void 0) {
            throw new Error("Missing Observer.");
          }
          if (implementsAnyMethods(nextOrObserver, [
            "next",
            "error",
            "complete"
          ])) {
            observer = nextOrObserver;
          } else {
            observer = {
              next: nextOrObserver,
              error,
              complete
            };
          }
          if (observer.next === void 0) {
            observer.next = noop;
          }
          if (observer.error === void 0) {
            observer.error = noop;
          }
          if (observer.complete === void 0) {
            observer.complete = noop;
          }
          const unsub = this.unsubscribeOne.bind(this, this.observers.length);
          if (this.finalized) {
            this.task.then(() => {
              try {
                if (this.finalError) {
                  observer.error(this.finalError);
                } else {
                  observer.complete();
                }
              } catch (e) {
              }
              return;
            });
          }
          this.observers.push(observer);
          return unsub;
        }
        unsubscribeOne(i) {
          if (this.observers === void 0 || this.observers[i] === void 0) {
            return;
          }
          delete this.observers[i];
          this.observerCount -= 1;
          if (this.observerCount === 0 && this.onNoObservers !== void 0) {
            this.onNoObservers(this);
          }
        }
        forEachObserver(fn) {
          if (this.finalized) {
            return;
          }
          for (let i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
          }
        }
        sendOne(i, fn) {
          this.task.then(() => {
            if (this.observers !== void 0 && this.observers[i] !== void 0) {
              try {
                fn(this.observers[i]);
              } catch (e) {
                if (typeof console !== "undefined" && console.error) {
                  console.error(e);
                }
              }
            }
          });
        }
        close(err) {
          if (this.finalized) {
            return;
          }
          this.finalized = true;
          if (err !== void 0) {
            this.finalError = err;
          }
          this.task.then(() => {
            this.observers = void 0;
            this.onNoObservers = void 0;
          });
        }
      };
      MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
    }
  });

  // node_modules/@firebase/component/dist/esm/index.esm2017.js
  function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
  }
  function isComponentEager(component) {
    return component.instantiationMode === "EAGER";
  }
  var Component, DEFAULT_ENTRY_NAME, Provider, ComponentContainer;
  var init_index_esm20172 = __esm({
    "node_modules/@firebase/component/dist/esm/index.esm2017.js"() {
      init_index_esm2017();
      Component = class {
        constructor(name7, instanceFactory, type) {
          this.name = name7;
          this.instanceFactory = instanceFactory;
          this.type = type;
          this.multipleInstances = false;
          this.serviceProps = {};
          this.instantiationMode = "LAZY";
          this.onInstanceCreated = null;
        }
        setInstantiationMode(mode) {
          this.instantiationMode = mode;
          return this;
        }
        setMultipleInstances(multipleInstances) {
          this.multipleInstances = multipleInstances;
          return this;
        }
        setServiceProps(props) {
          this.serviceProps = props;
          return this;
        }
        setInstanceCreatedCallback(callback) {
          this.onInstanceCreated = callback;
          return this;
        }
      };
      DEFAULT_ENTRY_NAME = "[DEFAULT]";
      Provider = class {
        constructor(name7, container) {
          this.name = name7;
          this.container = container;
          this.component = null;
          this.instances = /* @__PURE__ */ new Map();
          this.instancesDeferred = /* @__PURE__ */ new Map();
          this.instancesOptions = /* @__PURE__ */ new Map();
          this.onInitCallbacks = /* @__PURE__ */ new Map();
        }
        get(identifier) {
          const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
              try {
                const instance = this.getOrInitializeService({
                  instanceIdentifier: normalizedIdentifier
                });
                if (instance) {
                  deferred.resolve(instance);
                }
              } catch (e) {
              }
            }
          }
          return this.instancesDeferred.get(normalizedIdentifier).promise;
        }
        getImmediate(options) {
          var _a;
          const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
          const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
            } catch (e) {
              if (optional) {
                return null;
              } else {
                throw e;
              }
            }
          } else {
            if (optional) {
              return null;
            } else {
              throw Error(`Service ${this.name} is not available`);
            }
          }
        }
        getComponent() {
          return this.component;
        }
        setComponent(component) {
          if (component.name !== this.name) {
            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
          }
          if (this.component) {
            throw Error(`Component for ${this.name} has already been provided`);
          }
          this.component = component;
          if (!this.shouldAutoInitialize()) {
            return;
          }
          if (isComponentEager(component)) {
            try {
              this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
            } catch (e) {
            }
          }
          for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
              const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              instanceDeferred.resolve(instance);
            } catch (e) {
            }
          }
        }
        clearInstance(identifier = DEFAULT_ENTRY_NAME) {
          this.instancesDeferred.delete(identifier);
          this.instancesOptions.delete(identifier);
          this.instances.delete(identifier);
        }
        async delete() {
          const services = Array.from(this.instances.values());
          await Promise.all([
            ...services.filter((service) => "INTERNAL" in service).map((service) => service.INTERNAL.delete()),
            ...services.filter((service) => "_delete" in service).map((service) => service._delete())
          ]);
        }
        isComponentSet() {
          return this.component != null;
        }
        isInitialized(identifier = DEFAULT_ENTRY_NAME) {
          return this.instances.has(identifier);
        }
        getOptions(identifier = DEFAULT_ENTRY_NAME) {
          return this.instancesOptions.get(identifier) || {};
        }
        initialize(opts = {}) {
          const { options = {} } = opts;
          const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
          if (this.isInitialized(normalizedIdentifier)) {
            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
          }
          if (!this.isComponentSet()) {
            throw Error(`Component ${this.name} has not been registered yet`);
          }
          const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
          });
          for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) {
              instanceDeferred.resolve(instance);
            }
          }
          return instance;
        }
        onInit(callback, identifier) {
          var _a;
          const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
          const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : /* @__PURE__ */ new Set();
          existingCallbacks.add(callback);
          this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
          const existingInstance = this.instances.get(normalizedIdentifier);
          if (existingInstance) {
            callback(existingInstance, normalizedIdentifier);
          }
          return () => {
            existingCallbacks.delete(callback);
          };
        }
        invokeOnInitCallbacks(instance, identifier) {
          const callbacks = this.onInitCallbacks.get(identifier);
          if (!callbacks) {
            return;
          }
          for (const callback of callbacks) {
            try {
              callback(instance, identifier);
            } catch (_a) {
            }
          }
        }
        getOrInitializeService({ instanceIdentifier, options = {} }) {
          let instance = this.instances.get(instanceIdentifier);
          if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
              instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
              options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            this.invokeOnInitCallbacks(instance, instanceIdentifier);
            if (this.component.onInstanceCreated) {
              try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
              } catch (_a) {
              }
            }
          }
          return instance || null;
        }
        normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
          if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
          } else {
            return identifier;
          }
        }
        shouldAutoInitialize() {
          return !!this.component && this.component.instantiationMode !== "EXPLICIT";
        }
      };
      ComponentContainer = class {
        constructor(name7) {
          this.name = name7;
          this.providers = /* @__PURE__ */ new Map();
        }
        addComponent(component) {
          const provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
          }
          provider.setComponent(component);
        }
        addOrOverwriteComponent(component) {
          const provider = this.getProvider(component.name);
          if (provider.isComponentSet()) {
            this.providers.delete(component.name);
          }
          this.addComponent(component);
        }
        getProvider(name7) {
          if (this.providers.has(name7)) {
            return this.providers.get(name7);
          }
          const provider = new Provider(name7, this);
          this.providers.set(name7, provider);
          return provider;
        }
        getProviders() {
          return Array.from(this.providers.values());
        }
      };
    }
  });

  // node_modules/@firebase/logger/dist/esm/index.esm2017.js
  function setLogLevel(level) {
    instances.forEach((inst) => {
      inst.setLogLevel(level);
    });
  }
  function setUserLogHandler(logCallback, options) {
    for (const instance of instances) {
      let customLogLevel = null;
      if (options && options.level) {
        customLogLevel = levelStringToEnum[options.level];
      }
      if (logCallback === null) {
        instance.userLogHandler = null;
      } else {
        instance.userLogHandler = (instance2, level, ...args) => {
          const message = args.map((arg) => {
            if (arg == null) {
              return null;
            } else if (typeof arg === "string") {
              return arg;
            } else if (typeof arg === "number" || typeof arg === "boolean") {
              return arg.toString();
            } else if (arg instanceof Error) {
              return arg.message;
            } else {
              try {
                return JSON.stringify(arg);
              } catch (ignored) {
                return null;
              }
            }
          }).filter((arg) => arg).join(" ");
          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance2.logLevel)) {
            logCallback({
              level: LogLevel[level].toLowerCase(),
              message,
              args,
              type: instance2.name
            });
          }
        };
      }
    }
  }
  var instances, LogLevel, levelStringToEnum, defaultLogLevel, ConsoleMethod, defaultLogHandler, Logger;
  var init_index_esm20173 = __esm({
    "node_modules/@firebase/logger/dist/esm/index.esm2017.js"() {
      instances = [];
      (function(LogLevel2) {
        LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
        LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
        LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
        LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
        LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
        LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
      })(LogLevel || (LogLevel = {}));
      levelStringToEnum = {
        "debug": LogLevel.DEBUG,
        "verbose": LogLevel.VERBOSE,
        "info": LogLevel.INFO,
        "warn": LogLevel.WARN,
        "error": LogLevel.ERROR,
        "silent": LogLevel.SILENT
      };
      defaultLogLevel = LogLevel.INFO;
      ConsoleMethod = {
        [LogLevel.DEBUG]: "log",
        [LogLevel.VERBOSE]: "log",
        [LogLevel.INFO]: "info",
        [LogLevel.WARN]: "warn",
        [LogLevel.ERROR]: "error"
      };
      defaultLogHandler = (instance, logType, ...args) => {
        if (logType < instance.logLevel) {
          return;
        }
        const now = new Date().toISOString();
        const method = ConsoleMethod[logType];
        if (method) {
          console[method](`[${now}]  ${instance.name}:`, ...args);
        } else {
          throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
        }
      };
      Logger = class {
        constructor(name7) {
          this.name = name7;
          this._logLevel = defaultLogLevel;
          this._logHandler = defaultLogHandler;
          this._userLogHandler = null;
          instances.push(this);
        }
        get logLevel() {
          return this._logLevel;
        }
        set logLevel(val) {
          if (!(val in LogLevel)) {
            throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
          }
          this._logLevel = val;
        }
        setLogLevel(val) {
          this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
        }
        get logHandler() {
          return this._logHandler;
        }
        set logHandler(val) {
          if (typeof val !== "function") {
            throw new TypeError("Value assigned to `logHandler` must be a function");
          }
          this._logHandler = val;
        }
        get userLogHandler() {
          return this._userLogHandler;
        }
        set userLogHandler(val) {
          this._userLogHandler = val;
        }
        debug(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
          this._logHandler(this, LogLevel.DEBUG, ...args);
        }
        log(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
          this._logHandler(this, LogLevel.VERBOSE, ...args);
        }
        info(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
          this._logHandler(this, LogLevel.INFO, ...args);
        }
        warn(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
          this._logHandler(this, LogLevel.WARN, ...args);
        }
        error(...args) {
          this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
          this._logHandler(this, LogLevel.ERROR, ...args);
        }
      };
    }
  });

  // node_modules/@firebase/app/dist/esm/index.esm2017.js
  var index_esm2017_exports = {};
  __export(index_esm2017_exports, {
    FirebaseError: () => FirebaseError,
    SDK_VERSION: () => SDK_VERSION,
    _DEFAULT_ENTRY_NAME: () => DEFAULT_ENTRY_NAME2,
    _addComponent: () => _addComponent,
    _addOrOverwriteComponent: () => _addOrOverwriteComponent,
    _apps: () => _apps,
    _clearComponents: () => _clearComponents,
    _components: () => _components,
    _getProvider: () => _getProvider,
    _registerComponent: () => _registerComponent,
    _removeServiceInstance: () => _removeServiceInstance,
    deleteApp: () => deleteApp,
    getApp: () => getApp,
    getApps: () => getApps,
    initializeApp: () => initializeApp,
    onLog: () => onLog,
    registerVersion: () => registerVersion,
    setLogLevel: () => setLogLevel2
  });
  function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION";
  }
  function _addComponent(app2, component) {
    try {
      app2.container.addComponent(component);
    } catch (e) {
      logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app2.name}`, e);
    }
  }
  function _addOrOverwriteComponent(app2, component) {
    app2.container.addOrOverwriteComponent(component);
  }
  function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
      logger.debug(`There were multiple attempts to register component ${componentName}.`);
      return false;
    }
    _components.set(componentName, component);
    for (const app2 of _apps.values()) {
      _addComponent(app2, component);
    }
    return true;
  }
  function _getProvider(app2, name7) {
    return app2.container.getProvider(name7);
  }
  function _removeServiceInstance(app2, name7, instanceIdentifier = DEFAULT_ENTRY_NAME2) {
    _getProvider(app2, name7).clearInstance(instanceIdentifier);
  }
  function _clearComponents() {
    _components.clear();
  }
  function initializeApp(options, rawConfig = {}) {
    if (typeof rawConfig !== "object") {
      const name8 = rawConfig;
      rawConfig = { name: name8 };
    }
    const config2 = Object.assign({ name: DEFAULT_ENTRY_NAME2, automaticDataCollectionEnabled: false }, rawConfig);
    const name7 = config2.name;
    if (typeof name7 !== "string" || !name7) {
      throw ERROR_FACTORY.create("bad-app-name", {
        appName: String(name7)
      });
    }
    const existingApp = _apps.get(name7);
    if (existingApp) {
      if (deepEqual(options, existingApp.options) && deepEqual(config2, existingApp.config)) {
        return existingApp;
      } else {
        throw ERROR_FACTORY.create("duplicate-app", { appName: name7 });
      }
    }
    const container = new ComponentContainer(name7);
    for (const component of _components.values()) {
      container.addComponent(component);
    }
    const newApp = new FirebaseAppImpl(options, config2, container);
    _apps.set(name7, newApp);
    return newApp;
  }
  function getApp(name7 = DEFAULT_ENTRY_NAME2) {
    const app2 = _apps.get(name7);
    if (!app2) {
      throw ERROR_FACTORY.create("no-app", { appName: name7 });
    }
    return app2;
  }
  function getApps() {
    return Array.from(_apps.values());
  }
  async function deleteApp(app2) {
    const name7 = app2.name;
    if (_apps.has(name7)) {
      _apps.delete(name7);
      await Promise.all(app2.container.getProviders().map((provider) => provider.delete()));
      app2.isDeleted = true;
    }
  }
  function registerVersion(libraryKeyOrName, version7, variant) {
    var _a;
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) {
      library += `-${variant}`;
    }
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version7.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
      const warning = [
        `Unable to register library "${library}" with version "${version7}":`
      ];
      if (libraryMismatch) {
        warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
      }
      if (libraryMismatch && versionMismatch) {
        warning.push("and");
      }
      if (versionMismatch) {
        warning.push(`version name "${version7}" contains illegal characters (whitespace or "/")`);
      }
      logger.warn(warning.join(" "));
      return;
    }
    _registerComponent(new Component(`${library}-version`, () => ({ library, version: version7 }), "VERSION"));
  }
  function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== "function") {
      throw ERROR_FACTORY.create("invalid-log-argument");
    }
    setUserLogHandler(logCallback, options);
  }
  function setLogLevel2(logLevel) {
    setLogLevel(logLevel);
  }
  function registerCoreComponents(variant) {
    _registerComponent(new Component("platform-logger", (container) => new PlatformLoggerServiceImpl(container), "PRIVATE"));
    registerVersion(name$o, version$1, variant);
    registerVersion(name$o, version$1, "esm2017");
    registerVersion("fire-js", "");
  }
  var PlatformLoggerServiceImpl, name$o, version$1, logger, name$n, name$m, name$l, name$k, name$j, name$i, name$h, name$g, name$f, name$e, name$d, name$c, name$b, name$a, name$9, name$8, name$7, name$6, name$5, name$4, name$3, name$2, name$1, name, version, DEFAULT_ENTRY_NAME2, PLATFORM_LOG_STRING, _apps, _components, ERRORS, ERROR_FACTORY, FirebaseAppImpl, SDK_VERSION;
  var init_index_esm20174 = __esm({
    "node_modules/@firebase/app/dist/esm/index.esm2017.js"() {
      init_index_esm20172();
      init_index_esm20173();
      init_index_esm2017();
      init_index_esm2017();
      PlatformLoggerServiceImpl = class {
        constructor(container) {
          this.container = container;
        }
        getPlatformInfoString() {
          const providers = this.container.getProviders();
          return providers.map((provider) => {
            if (isVersionServiceProvider(provider)) {
              const service = provider.getImmediate();
              return `${service.library}/${service.version}`;
            } else {
              return null;
            }
          }).filter((logString) => logString).join(" ");
        }
      };
      name$o = "@firebase/app";
      version$1 = "0.7.13";
      logger = new Logger("@firebase/app");
      name$n = "@firebase/app-compat";
      name$m = "@firebase/analytics-compat";
      name$l = "@firebase/analytics";
      name$k = "@firebase/app-check-compat";
      name$j = "@firebase/app-check";
      name$i = "@firebase/auth";
      name$h = "@firebase/auth-compat";
      name$g = "@firebase/database";
      name$f = "@firebase/database-compat";
      name$e = "@firebase/functions";
      name$d = "@firebase/functions-compat";
      name$c = "@firebase/installations";
      name$b = "@firebase/installations-compat";
      name$a = "@firebase/messaging";
      name$9 = "@firebase/messaging-compat";
      name$8 = "@firebase/performance";
      name$7 = "@firebase/performance-compat";
      name$6 = "@firebase/remote-config";
      name$5 = "@firebase/remote-config-compat";
      name$4 = "@firebase/storage";
      name$3 = "@firebase/storage-compat";
      name$2 = "@firebase/firestore";
      name$1 = "@firebase/firestore-compat";
      name = "firebase";
      version = "9.6.3";
      DEFAULT_ENTRY_NAME2 = "[DEFAULT]";
      PLATFORM_LOG_STRING = {
        [name$o]: "fire-core",
        [name$n]: "fire-core-compat",
        [name$l]: "fire-analytics",
        [name$m]: "fire-analytics-compat",
        [name$j]: "fire-app-check",
        [name$k]: "fire-app-check-compat",
        [name$i]: "fire-auth",
        [name$h]: "fire-auth-compat",
        [name$g]: "fire-rtdb",
        [name$f]: "fire-rtdb-compat",
        [name$e]: "fire-fn",
        [name$d]: "fire-fn-compat",
        [name$c]: "fire-iid",
        [name$b]: "fire-iid-compat",
        [name$a]: "fire-fcm",
        [name$9]: "fire-fcm-compat",
        [name$8]: "fire-perf",
        [name$7]: "fire-perf-compat",
        [name$6]: "fire-rc",
        [name$5]: "fire-rc-compat",
        [name$4]: "fire-gcs",
        [name$3]: "fire-gcs-compat",
        [name$2]: "fire-fst",
        [name$1]: "fire-fst-compat",
        "fire-js": "fire-js",
        [name]: "fire-js-all"
      };
      _apps = /* @__PURE__ */ new Map();
      _components = /* @__PURE__ */ new Map();
      ERRORS = {
        ["no-app"]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
        ["bad-app-name"]: "Illegal App name: '{$appName}",
        ["duplicate-app"]: "Firebase App named '{$appName}' already exists with different options or config",
        ["app-deleted"]: "Firebase App named '{$appName}' already deleted",
        ["invalid-app-argument"]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
        ["invalid-log-argument"]: "First argument to `onLog` must be null or a function."
      };
      ERROR_FACTORY = new ErrorFactory("app", "Firebase", ERRORS);
      FirebaseAppImpl = class {
        constructor(options, config2, container) {
          this._isDeleted = false;
          this._options = Object.assign({}, options);
          this._config = Object.assign({}, config2);
          this._name = config2.name;
          this._automaticDataCollectionEnabled = config2.automaticDataCollectionEnabled;
          this._container = container;
          this.container.addComponent(new Component("app", () => this, "PUBLIC"));
        }
        get automaticDataCollectionEnabled() {
          this.checkDestroyed();
          return this._automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(val) {
          this.checkDestroyed();
          this._automaticDataCollectionEnabled = val;
        }
        get name() {
          this.checkDestroyed();
          return this._name;
        }
        get options() {
          this.checkDestroyed();
          return this._options;
        }
        get config() {
          this.checkDestroyed();
          return this._config;
        }
        get container() {
          return this._container;
        }
        get isDeleted() {
          return this._isDeleted;
        }
        set isDeleted(val) {
          this._isDeleted = val;
        }
        checkDestroyed() {
          if (this.isDeleted) {
            throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
          }
        }
      };
      SDK_VERSION = version;
      registerCoreComponents("");
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __createBinding2;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends2 = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest2 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate2 = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding2(o, m, p);
        };
        __createBinding2 = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values2 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read2(arguments[i]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray2 = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await2 = function(v) {
          return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues2 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet2 = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      });
    }
  });

  // node_modules/tslib/modules/index.js
  var import_tslib, __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __createBinding, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet;
  var init_modules = __esm({
    "node_modules/tslib/modules/index.js"() {
      import_tslib = __toESM(require_tslib(), 1);
      ({
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __metadata,
        __awaiter,
        __generator,
        __exportStar,
        __createBinding,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet
      } = import_tslib.default);
    }
  });

  // node_modules/@firebase/auth/dist/esm2017/index-1679a2b2.js
  function _debugErrorMap() {
    return {
      ["admin-restricted-operation"]: "This operation is restricted to administrators only.",
      ["argument-error"]: "",
      ["app-not-authorized"]: "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
      ["app-not-installed"]: "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
      ["captcha-check-failed"]: "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
      ["code-expired"]: "The SMS code has expired. Please re-send the verification code to try again.",
      ["cordova-not-ready"]: "Cordova framework is not ready.",
      ["cors-unsupported"]: "This browser is not supported.",
      ["credential-already-in-use"]: "This credential is already associated with a different user account.",
      ["custom-token-mismatch"]: "The custom token corresponds to a different audience.",
      ["requires-recent-login"]: "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
      ["dependent-sdk-initialized-before-auth"]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.",
      ["dynamic-link-not-activated"]: "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
      ["email-change-needs-verification"]: "Multi-factor users must always have a verified email.",
      ["email-already-in-use"]: "The email address is already in use by another account.",
      ["emulator-config-failed"]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
      ["expired-action-code"]: "The action code has expired.",
      ["cancelled-popup-request"]: "This operation has been cancelled due to another conflicting popup being opened.",
      ["internal-error"]: "An internal AuthError has occurred.",
      ["invalid-app-credential"]: "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
      ["invalid-app-id"]: "The mobile app identifier is not registed for the current project.",
      ["invalid-user-token"]: "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
      ["invalid-auth-event"]: "An internal AuthError has occurred.",
      ["invalid-verification-code"]: "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
      ["invalid-continue-uri"]: "The continue URL provided in the request is invalid.",
      ["invalid-cordova-configuration"]: "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
      ["invalid-custom-token"]: "The custom token format is incorrect. Please check the documentation.",
      ["invalid-dynamic-link-domain"]: "The provided dynamic link domain is not configured or authorized for the current project.",
      ["invalid-email"]: "The email address is badly formatted.",
      ["invalid-emulator-scheme"]: "Emulator URL must start with a valid scheme (http:// or https://).",
      ["invalid-api-key"]: "Your API key is invalid, please check you have copied it correctly.",
      ["invalid-cert-hash"]: "The SHA-1 certificate hash provided is invalid.",
      ["invalid-credential"]: "The supplied auth credential is malformed or has expired.",
      ["invalid-message-payload"]: "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
      ["invalid-multi-factor-session"]: "The request does not contain a valid proof of first factor successful sign-in.",
      ["invalid-oauth-provider"]: "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
      ["invalid-oauth-client-id"]: "The OAuth client ID provided is either invalid or does not match the specified API key.",
      ["unauthorized-domain"]: "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
      ["invalid-action-code"]: "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
      ["wrong-password"]: "The password is invalid or the user does not have a password.",
      ["invalid-persistence-type"]: "The specified persistence type is invalid. It can only be local, session or none.",
      ["invalid-phone-number"]: "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
      ["invalid-provider-id"]: "The specified provider ID is invalid.",
      ["invalid-recipient-email"]: "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
      ["invalid-sender"]: "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
      ["invalid-verification-id"]: "The verification ID used to create the phone auth credential is invalid.",
      ["invalid-tenant-id"]: "The Auth instance's tenant ID is invalid.",
      ["missing-android-pkg-name"]: "An Android Package Name must be provided if the Android App is required to be installed.",
      ["auth-domain-config-required"]: "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
      ["missing-app-credential"]: "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
      ["missing-verification-code"]: "The phone auth credential was created with an empty SMS verification code.",
      ["missing-continue-uri"]: "A continue URL must be provided in the request.",
      ["missing-iframe-start"]: "An internal AuthError has occurred.",
      ["missing-ios-bundle-id"]: "An iOS Bundle ID must be provided if an App Store ID is provided.",
      ["missing-or-invalid-nonce"]: "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
      ["missing-multi-factor-info"]: "No second factor identifier is provided.",
      ["missing-multi-factor-session"]: "The request is missing proof of first factor successful sign-in.",
      ["missing-phone-number"]: "To send verification codes, provide a phone number for the recipient.",
      ["missing-verification-id"]: "The phone auth credential was created with an empty verification ID.",
      ["app-deleted"]: "This instance of FirebaseApp has been deleted.",
      ["multi-factor-info-not-found"]: "The user does not have a second factor matching the identifier provided.",
      ["multi-factor-auth-required"]: "Proof of ownership of a second factor is required to complete sign-in.",
      ["account-exists-with-different-credential"]: "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
      ["network-request-failed"]: "A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.",
      ["no-auth-event"]: "An internal AuthError has occurred.",
      ["no-such-provider"]: "User was not linked to an account with the given provider.",
      ["null-user"]: "A null user object was provided as the argument for an operation which requires a non-null user object.",
      ["operation-not-allowed"]: "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
      ["operation-not-supported-in-this-environment"]: 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
      ["popup-blocked"]: "Unable to establish a connection with the popup. It may have been blocked by the browser.",
      ["popup-closed-by-user"]: "The popup has been closed by the user before finalizing the operation.",
      ["provider-already-linked"]: "User can only be linked to one identity for the given provider.",
      ["quota-exceeded"]: "The project's quota for this operation has been exceeded.",
      ["redirect-cancelled-by-user"]: "The redirect operation has been cancelled by the user before finalizing.",
      ["redirect-operation-pending"]: "A redirect sign-in operation is already pending.",
      ["rejected-credential"]: "The request contains malformed or mismatching credentials.",
      ["second-factor-already-in-use"]: "The second factor is already enrolled on this account.",
      ["maximum-second-factor-count-exceeded"]: "The maximum allowed number of second factors on a user has been exceeded.",
      ["tenant-id-mismatch"]: "The provided tenant ID does not match the Auth instance's tenant ID",
      ["timeout"]: "The operation has timed out.",
      ["user-token-expired"]: "The user's credential is no longer valid. The user must sign in again.",
      ["too-many-requests"]: "We have blocked all requests from this device due to unusual activity. Try again later.",
      ["unauthorized-continue-uri"]: "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
      ["unsupported-first-factor"]: "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
      ["unsupported-persistence-type"]: "The current environment does not support the specified persistence type.",
      ["unsupported-tenant-operation"]: "This operation is not supported in a multi-tenant context.",
      ["unverified-email"]: "The operation requires a verified email.",
      ["user-cancelled"]: "The user did not grant your application the permissions it requested.",
      ["user-not-found"]: "There is no user record corresponding to this identifier. The user may have been deleted.",
      ["user-disabled"]: "The user account has been disabled by an administrator.",
      ["user-mismatch"]: "The supplied credentials do not correspond to the previously signed in user.",
      ["user-signed-out"]: "",
      ["weak-password"]: "The password must be 6 characters long or more.",
      ["web-storage-unsupported"]: "This browser is not supported or 3rd party cookies and data may be disabled.",
      ["already-initialized"]: "initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance."
    };
  }
  function _prodErrorMap() {
    return {
      ["dependent-sdk-initialized-before-auth"]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
    };
  }
  function _logError(msg, ...args) {
    if (logClient.logLevel <= LogLevel.ERROR) {
      logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);
    }
  }
  function _fail(authOrCode, ...rest) {
    throw createErrorInternal(authOrCode, ...rest);
  }
  function _createError(authOrCode, ...rest) {
    return createErrorInternal(authOrCode, ...rest);
  }
  function _errorWithCustomMessage(auth2, code, message) {
    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
    const factory = new ErrorFactory("auth", "Firebase", errorMap);
    return factory.create(code, {
      appName: auth2.name
    });
  }
  function _assertInstanceOf(auth2, object, instance) {
    const constructorInstance = instance;
    if (!(object instanceof constructorInstance)) {
      if (constructorInstance.name !== object.constructor.name) {
        _fail(auth2, "argument-error");
      }
      throw _errorWithCustomMessage(auth2, "argument-error", `Type of ${object.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`);
    }
  }
  function createErrorInternal(authOrCode, ...rest) {
    if (typeof authOrCode !== "string") {
      const code = rest[0];
      const fullParams = [...rest.slice(1)];
      if (fullParams[0]) {
        fullParams[0].appName = authOrCode.name;
      }
      return authOrCode._errorFactory.create(code, ...fullParams);
    }
    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
  }
  function _assert(assertion, authOrCode, ...rest) {
    if (!assertion) {
      throw createErrorInternal(authOrCode, ...rest);
    }
  }
  function debugFail(failure) {
    const message = `INTERNAL ASSERTION FAILED: ` + failure;
    _logError(message);
    throw new Error(message);
  }
  function debugAssert(assertion, message) {
    if (!assertion) {
      debugFail(message);
    }
  }
  function _getInstance(cls) {
    debugAssert(cls instanceof Function, "Expected a class definition");
    let instance = instanceCache.get(cls);
    if (instance) {
      debugAssert(instance instanceof cls, "Instance stored in cache mismatched with class");
      return instance;
    }
    instance = new cls();
    instanceCache.set(cls, instance);
    return instance;
  }
  function initializeAuth(app2, deps) {
    const provider = _getProvider(app2, "auth");
    if (provider.isInitialized()) {
      const auth3 = provider.getImmediate();
      const initialOptions = provider.getOptions();
      if (deepEqual(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {
        return auth3;
      } else {
        _fail(auth3, "already-initialized");
      }
    }
    const auth2 = provider.initialize({ options: deps });
    return auth2;
  }
  function _initializeAuthInstance(auth2, deps) {
    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
    const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
      auth2._updateErrorMap(deps.errorMap);
    }
    auth2._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
  }
  function _getCurrentUrl() {
    var _a;
    return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || "";
  }
  function _isHttpOrHttps() {
    return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
  }
  function _getCurrentScheme() {
    var _a;
    return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
  }
  function _isOnline() {
    if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && (_isHttpOrHttps() || isBrowserExtension() || "connection" in navigator)) {
      return navigator.onLine;
    }
    return true;
  }
  function _getUserLanguage() {
    if (typeof navigator === "undefined") {
      return null;
    }
    const navigatorLanguage = navigator;
    return navigatorLanguage.languages && navigatorLanguage.languages[0] || navigatorLanguage.language || null;
  }
  function _emulatorUrl(config2, path) {
    debugAssert(config2.emulator, "Emulator should always be set here");
    const { url } = config2.emulator;
    if (!path) {
      return url;
    }
    return `${url}${path.startsWith("/") ? path.slice(1) : path}`;
  }
  function _addTidIfNecessary(auth2, request) {
    if (auth2.tenantId && !request.tenantId) {
      return Object.assign(Object.assign({}, request), { tenantId: auth2.tenantId });
    }
    return request;
  }
  async function _performApiRequest(auth2, method, path, request, customErrorMap = {}) {
    return _performFetchWithErrorHandling(auth2, customErrorMap, async () => {
      let body = {};
      let params = {};
      if (request) {
        if (method === "GET") {
          params = request;
        } else {
          body = {
            body: JSON.stringify(request)
          };
        }
      }
      const query = querystring(Object.assign({ key: auth2.config.apiKey }, params)).slice(1);
      const headers = await auth2._getAdditionalHeaders();
      headers["Content-Type"] = "application/json";
      if (auth2.languageCode) {
        headers["X-Firebase-Locale"] = auth2.languageCode;
      }
      return FetchProvider.fetch()(_getFinalTarget(auth2, auth2.config.apiHost, path, query), Object.assign({
        method,
        headers,
        referrerPolicy: "no-referrer"
      }, body));
    });
  }
  async function _performFetchWithErrorHandling(auth2, customErrorMap, fetchFn) {
    auth2._canInitEmulator = false;
    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
    try {
      const networkTimeout = new NetworkTimeout(auth2);
      const response = await Promise.race([
        fetchFn(),
        networkTimeout.promise
      ]);
      networkTimeout.clearNetworkTimeout();
      const json = await response.json();
      if ("needConfirmation" in json) {
        throw _makeTaggedError(auth2, "account-exists-with-different-credential", json);
      }
      if (response.ok && !("errorMessage" in json)) {
        return json;
      } else {
        const errorMessage = response.ok ? json.errorMessage : json.error.message;
        const [serverErrorCode, serverErrorMessage] = errorMessage.split(" : ");
        if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
          throw _makeTaggedError(auth2, "credential-already-in-use", json);
        } else if (serverErrorCode === "EMAIL_EXISTS") {
          throw _makeTaggedError(auth2, "email-already-in-use", json);
        }
        const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
        if (serverErrorMessage) {
          throw _errorWithCustomMessage(auth2, authError, serverErrorMessage);
        } else {
          _fail(auth2, authError);
        }
      }
    } catch (e) {
      if (e instanceof FirebaseError) {
        throw e;
      }
      _fail(auth2, "network-request-failed");
    }
  }
  async function _performSignInRequest(auth2, method, path, request, customErrorMap = {}) {
    const serverResponse = await _performApiRequest(auth2, method, path, request, customErrorMap);
    if ("mfaPendingCredential" in serverResponse) {
      _fail(auth2, "multi-factor-auth-required", {
        _serverResponse: serverResponse
      });
    }
    return serverResponse;
  }
  function _getFinalTarget(auth2, host, path, query) {
    const base = `${host}${path}?${query}`;
    if (!auth2.config.emulator) {
      return `${auth2.config.apiScheme}://${base}`;
    }
    return _emulatorUrl(auth2.config, base);
  }
  function _makeTaggedError(auth2, code, response) {
    const errorParams = {
      appName: auth2.name
    };
    if (response.email) {
      errorParams.email = response.email;
    }
    if (response.phoneNumber) {
      errorParams.phoneNumber = response.phoneNumber;
    }
    const error = _createError(auth2, code, errorParams);
    error.customData._tokenResponse = response;
    return error;
  }
  async function deleteAccount(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:delete", request);
  }
  async function deleteLinkedAccounts(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:update", request);
  }
  async function getAccountInfo(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:lookup", request);
  }
  function utcTimestampToDateString(utcTimestamp) {
    if (!utcTimestamp) {
      return void 0;
    }
    try {
      const date = new Date(Number(utcTimestamp));
      if (!isNaN(date.getTime())) {
        return date.toUTCString();
      }
    } catch (e) {
    }
    return void 0;
  }
  async function getIdTokenResult(user, forceRefresh = false) {
    const userInternal = getModularInstance(user);
    const token = await userInternal.getIdToken(forceRefresh);
    const claims = _parseToken(token);
    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error");
    const firebase2 = typeof claims.firebase === "object" ? claims.firebase : void 0;
    const signInProvider = firebase2 === null || firebase2 === void 0 ? void 0 : firebase2["sign_in_provider"];
    return {
      claims,
      token,
      authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
      issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
      expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
      signInProvider: signInProvider || null,
      signInSecondFactor: (firebase2 === null || firebase2 === void 0 ? void 0 : firebase2["sign_in_second_factor"]) || null
    };
  }
  function secondsStringToMilliseconds(seconds) {
    return Number(seconds) * 1e3;
  }
  function _parseToken(token) {
    const [algorithm, payload, signature] = token.split(".");
    if (algorithm === void 0 || payload === void 0 || signature === void 0) {
      _logError("JWT malformed, contained fewer than 3 sections");
      return null;
    }
    try {
      const decoded = base64Decode(payload);
      if (!decoded) {
        _logError("Failed to decode base64 JWT payload");
        return null;
      }
      return JSON.parse(decoded);
    } catch (e) {
      _logError("Caught error parsing JWT payload as JSON", e);
      return null;
    }
  }
  function _tokenExpiresIn(token) {
    const parsedToken = _parseToken(token);
    _assert(parsedToken, "internal-error");
    _assert(typeof parsedToken.exp !== "undefined", "internal-error");
    _assert(typeof parsedToken.iat !== "undefined", "internal-error");
    return Number(parsedToken.exp) - Number(parsedToken.iat);
  }
  async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
    if (bypassAuthState) {
      return promise;
    }
    try {
      return await promise;
    } catch (e) {
      if (e instanceof FirebaseError && isUserInvalidated(e)) {
        if (user.auth.currentUser === user) {
          await user.auth.signOut();
        }
      }
      throw e;
    }
  }
  function isUserInvalidated({ code }) {
    return code === `auth/${"user-disabled"}` || code === `auth/${"user-token-expired"}`;
  }
  async function _reloadWithoutSaving(user) {
    var _a;
    const auth2 = user.auth;
    const idToken = await user.getIdToken();
    const response = await _logoutIfInvalidated(user, getAccountInfo(auth2, { idToken }));
    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth2, "internal-error");
    const coreAccount = response.users[0];
    user._notifyReloadListener(coreAccount);
    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
    const providerData = mergeProviderData(user.providerData, newProviderData);
    const oldIsAnonymous = user.isAnonymous;
    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
    const updates = {
      uid: coreAccount.localId,
      displayName: coreAccount.displayName || null,
      photoURL: coreAccount.photoUrl || null,
      email: coreAccount.email || null,
      emailVerified: coreAccount.emailVerified || false,
      phoneNumber: coreAccount.phoneNumber || null,
      tenantId: coreAccount.tenantId || null,
      providerData,
      metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
      isAnonymous
    };
    Object.assign(user, updates);
  }
  async function reload(user) {
    const userInternal = getModularInstance(user);
    await _reloadWithoutSaving(userInternal);
    await userInternal.auth._persistUserIfCurrent(userInternal);
    userInternal.auth._notifyListenersIfCurrent(userInternal);
  }
  function mergeProviderData(original, newData) {
    const deduped = original.filter((o) => !newData.some((n) => n.providerId === o.providerId));
    return [...deduped, ...newData];
  }
  function extractProviderData(providers) {
    return providers.map((_a) => {
      var { providerId } = _a, provider = __rest(_a, ["providerId"]);
      return {
        providerId,
        uid: provider.rawId || "",
        displayName: provider.displayName || null,
        email: provider.email || null,
        phoneNumber: provider.phoneNumber || null,
        photoURL: provider.photoUrl || null
      };
    });
  }
  async function requestStsToken(auth2, refreshToken) {
    const response = await _performFetchWithErrorHandling(auth2, {}, async () => {
      const body = querystring({
        "grant_type": "refresh_token",
        "refresh_token": refreshToken
      }).slice(1);
      const { tokenApiHost, apiKey } = auth2.config;
      const url = _getFinalTarget(auth2, tokenApiHost, "/v1/token", `key=${apiKey}`);
      const headers = await auth2._getAdditionalHeaders();
      headers["Content-Type"] = "application/x-www-form-urlencoded";
      return FetchProvider.fetch()(url, {
        method: "POST",
        headers,
        body
      });
    });
    return {
      accessToken: response.access_token,
      expiresIn: response.expires_in,
      refreshToken: response.refresh_token
    };
  }
  function assertStringOrUndefined(assertion, appName) {
    _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error", { appName });
  }
  function _persistenceKeyName(key, apiKey, appName) {
    return `${"firebase"}:${key}:${apiKey}:${appName}`;
  }
  function _getBrowserName(userAgent) {
    const ua = userAgent.toLowerCase();
    if (ua.includes("opera/") || ua.includes("opr/") || ua.includes("opios/")) {
      return "Opera";
    } else if (_isIEMobile(ua)) {
      return "IEMobile";
    } else if (ua.includes("msie") || ua.includes("trident/")) {
      return "IE";
    } else if (ua.includes("edge/")) {
      return "Edge";
    } else if (_isFirefox(ua)) {
      return "Firefox";
    } else if (ua.includes("silk/")) {
      return "Silk";
    } else if (_isBlackBerry(ua)) {
      return "Blackberry";
    } else if (_isWebOS(ua)) {
      return "Webos";
    } else if (_isSafari(ua)) {
      return "Safari";
    } else if ((ua.includes("chrome/") || _isChromeIOS(ua)) && !ua.includes("edge/")) {
      return "Chrome";
    } else if (_isAndroid(ua)) {
      return "Android";
    } else {
      const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
      const matches = userAgent.match(re);
      if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
        return matches[1];
      }
    }
    return "Other";
  }
  function _isFirefox(ua = getUA()) {
    return /firefox\//i.test(ua);
  }
  function _isSafari(userAgent = getUA()) {
    const ua = userAgent.toLowerCase();
    return ua.includes("safari/") && !ua.includes("chrome/") && !ua.includes("crios/") && !ua.includes("android");
  }
  function _isChromeIOS(ua = getUA()) {
    return /crios\//i.test(ua);
  }
  function _isIEMobile(ua = getUA()) {
    return /iemobile/i.test(ua);
  }
  function _isAndroid(ua = getUA()) {
    return /android/i.test(ua);
  }
  function _isBlackBerry(ua = getUA()) {
    return /blackberry/i.test(ua);
  }
  function _isWebOS(ua = getUA()) {
    return /webos/i.test(ua);
  }
  function _isIOS(ua = getUA()) {
    return /iphone|ipad|ipod/i.test(ua);
  }
  function _isIOS7Or8(ua = getUA()) {
    return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
  }
  function _isIOSStandalone(ua = getUA()) {
    var _a;
    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
  }
  function _isIE10() {
    return isIE() && document.documentMode === 10;
  }
  function _isMobileBrowser(ua = getUA()) {
    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
  }
  function _isIframe() {
    try {
      return !!(window && window !== window.top);
    } catch (e) {
      return false;
    }
  }
  function _getClientVersion(clientPlatform, frameworks = []) {
    let reportedPlatform;
    switch (clientPlatform) {
      case "Browser":
        reportedPlatform = _getBrowserName(getUA());
        break;
      case "Worker":
        reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
        break;
      default:
        reportedPlatform = clientPlatform;
    }
    const reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web";
    return `${reportedPlatform}/${"JsCore"}/${SDK_VERSION}/${reportedFrameworks}`;
  }
  function _castAuth(auth2) {
    return getModularInstance(auth2);
  }
  function connectAuthEmulator(auth2, url, options) {
    const authInternal = _castAuth(auth2);
    _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed");
    _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme");
    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
    const protocol = extractProtocol(url);
    const { host, port } = extractHostAndPort(url);
    const portStr = port === null ? "" : `:${port}`;
    authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
    authInternal.settings.appVerificationDisabledForTesting = true;
    authInternal.emulatorConfig = Object.freeze({
      host,
      port,
      protocol: protocol.replace(":", ""),
      options: Object.freeze({ disableWarnings })
    });
    if (!disableWarnings) {
      emitEmulatorWarning();
    }
  }
  function extractProtocol(url) {
    const protocolEnd = url.indexOf(":");
    return protocolEnd < 0 ? "" : url.substr(0, protocolEnd + 1);
  }
  function extractHostAndPort(url) {
    const protocol = extractProtocol(url);
    const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length));
    if (!authority) {
      return { host: "", port: null };
    }
    const hostAndPort = authority[2].split("@").pop() || "";
    const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
    if (bracketedIPv6) {
      const host = bracketedIPv6[1];
      return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
    } else {
      const [host, port] = hostAndPort.split(":");
      return { host, port: parsePort(port) };
    }
  }
  function parsePort(portStr) {
    if (!portStr) {
      return null;
    }
    const port = Number(portStr);
    if (isNaN(port)) {
      return null;
    }
    return port;
  }
  function emitEmulatorWarning() {
    function attachBanner() {
      const el = document.createElement("p");
      const sty = el.style;
      el.innerText = "Running in emulator mode. Do not use with production credentials.";
      sty.position = "fixed";
      sty.width = "100%";
      sty.backgroundColor = "#ffffff";
      sty.border = ".1em solid #000000";
      sty.color = "#b50000";
      sty.bottom = "0px";
      sty.left = "0px";
      sty.margin = "0px";
      sty.zIndex = "10000";
      sty.textAlign = "center";
      el.classList.add("firebase-emulator-warning");
      document.body.appendChild(el);
    }
    if (typeof console !== "undefined" && typeof console.info === "function") {
      console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    }
    if (typeof window !== "undefined" && typeof document !== "undefined") {
      if (document.readyState === "loading") {
        window.addEventListener("DOMContentLoaded", attachBanner);
      } else {
        attachBanner();
      }
    }
  }
  async function resetPassword(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:resetPassword", _addTidIfNecessary(auth2, request));
  }
  async function updateEmailPassword(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:update", request);
  }
  async function applyActionCode$1(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:update", _addTidIfNecessary(auth2, request));
  }
  async function signInWithPassword(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPassword", _addTidIfNecessary(auth2, request));
  }
  async function sendOobCode(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:sendOobCode", _addTidIfNecessary(auth2, request));
  }
  async function sendEmailVerification$1(auth2, request) {
    return sendOobCode(auth2, request);
  }
  async function sendPasswordResetEmail$1(auth2, request) {
    return sendOobCode(auth2, request);
  }
  async function sendSignInLinkToEmail$1(auth2, request) {
    return sendOobCode(auth2, request);
  }
  async function verifyAndChangeEmail(auth2, request) {
    return sendOobCode(auth2, request);
  }
  async function signInWithEmailLink$1(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth2, request));
  }
  async function signInWithEmailLinkForLinking(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithEmailLink", _addTidIfNecessary(auth2, request));
  }
  async function signInWithIdp(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithIdp", _addTidIfNecessary(auth2, request));
  }
  async function sendPhoneVerificationCode(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:sendVerificationCode", _addTidIfNecessary(auth2, request));
  }
  async function signInWithPhoneNumber$1(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth2, request));
  }
  async function linkWithPhoneNumber$1(auth2, request) {
    const response = await _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth2, request));
    if (response.temporaryProof) {
      throw _makeTaggedError(auth2, "account-exists-with-different-credential", response);
    }
    return response;
  }
  async function verifyPhoneNumberForExisting(auth2, request) {
    const apiRequest = Object.assign(Object.assign({}, request), { operation: "REAUTH" });
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithPhoneNumber", _addTidIfNecessary(auth2, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
  }
  function parseMode(mode) {
    switch (mode) {
      case "recoverEmail":
        return "RECOVER_EMAIL";
      case "resetPassword":
        return "PASSWORD_RESET";
      case "signIn":
        return "EMAIL_SIGNIN";
      case "verifyEmail":
        return "VERIFY_EMAIL";
      case "verifyAndChangeEmail":
        return "VERIFY_AND_CHANGE_EMAIL";
      case "revertSecondFactorAddition":
        return "REVERT_SECOND_FACTOR_ADDITION";
      default:
        return null;
    }
  }
  function parseDeepLink(url) {
    const link = querystringDecode(extractQuerystring(url))["link"];
    const doubleDeepLink = link ? querystringDecode(extractQuerystring(link))["deep_link_id"] : null;
    const iOSDeepLink = querystringDecode(extractQuerystring(url))["deep_link_id"];
    const iOSDoubleDeepLink = iOSDeepLink ? querystringDecode(extractQuerystring(iOSDeepLink))["link"] : null;
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
  }
  async function signUp(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signUp", _addTidIfNecessary(auth2, request));
  }
  function providerIdForResponse(response) {
    if (response.providerId) {
      return response.providerId;
    }
    if ("phoneNumber" in response) {
      return "phone";
    }
    return null;
  }
  async function signInAnonymously(auth2) {
    var _a;
    const authInternal = _castAuth(auth2);
    await authInternal._initializationPromise;
    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
      return new UserCredentialImpl({
        user: authInternal.currentUser,
        providerId: null,
        operationType: "signIn"
      });
    }
    const response = await signUp(authInternal, {
      returnSecureToken: true
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response, true);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
  }
  function _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential, user) {
    const idTokenProvider = operationType === "reauthenticate" ? credential._getReauthenticationResolver(auth2) : credential._getIdTokenResponse(auth2);
    return idTokenProvider.catch((error) => {
      if (error.code === `auth/${"multi-factor-auth-required"}`) {
        throw MultiFactorError._fromErrorAndOperation(auth2, error, operationType, user);
      }
      throw error;
    });
  }
  function providerDataAsNames(providerData) {
    return new Set(providerData.map(({ providerId }) => providerId).filter((pid) => !!pid));
  }
  async function unlink(user, providerId) {
    const userInternal = getModularInstance(user);
    await _assertLinkedStatus(true, userInternal, providerId);
    const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {
      idToken: await userInternal.getIdToken(),
      deleteProvider: [providerId]
    });
    const providersLeft = providerDataAsNames(providerUserInfo || []);
    userInternal.providerData = userInternal.providerData.filter((pd) => providersLeft.has(pd.providerId));
    if (!providersLeft.has("phone")) {
      userInternal.phoneNumber = null;
    }
    await userInternal.auth._persistUserIfCurrent(userInternal);
    return userInternal;
  }
  async function _link$1(user, credential, bypassAuthState = false) {
    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
    return UserCredentialImpl._forOperation(user, "link", response);
  }
  async function _assertLinkedStatus(expected, user, provider) {
    await _reloadWithoutSaving(user);
    const providerIds = providerDataAsNames(user.providerData);
    const code = expected === false ? "provider-already-linked" : "no-such-provider";
    _assert(providerIds.has(provider) === expected, user.auth, code);
  }
  async function _reauthenticate(user, credential, bypassAuthState = false) {
    const { auth: auth2 } = user;
    const operationType = "reauthenticate";
    try {
      const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential, user), bypassAuthState);
      _assert(response.idToken, auth2, "internal-error");
      const parsed = _parseToken(response.idToken);
      _assert(parsed, auth2, "internal-error");
      const { sub: localId } = parsed;
      _assert(user.uid === localId, auth2, "user-mismatch");
      return UserCredentialImpl._forOperation(user, operationType, response);
    } catch (e) {
      if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found"}`) {
        _fail(auth2, "user-mismatch");
      }
      throw e;
    }
  }
  async function _signInWithCredential(auth2, credential, bypassAuthState = false) {
    const operationType = "signIn";
    const response = await _processCredentialSavingMfaContextIfNecessary(auth2, operationType, credential);
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth2, operationType, response);
    if (!bypassAuthState) {
      await auth2._updateCurrentUser(userCredential.user);
    }
    return userCredential;
  }
  async function signInWithCredential(auth2, credential) {
    return _signInWithCredential(_castAuth(auth2), credential);
  }
  async function linkWithCredential(user, credential) {
    const userInternal = getModularInstance(user);
    await _assertLinkedStatus(false, userInternal, credential.providerId);
    return _link$1(userInternal, credential);
  }
  async function reauthenticateWithCredential(user, credential) {
    return _reauthenticate(getModularInstance(user), credential);
  }
  async function signInWithCustomToken$1(auth2, request) {
    return _performSignInRequest(auth2, "POST", "/v1/accounts:signInWithCustomToken", _addTidIfNecessary(auth2, request));
  }
  async function signInWithCustomToken(auth2, customToken) {
    const authInternal = _castAuth(auth2);
    const response = await signInWithCustomToken$1(authInternal, {
      token: customToken,
      returnSecureToken: true
    });
    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response);
    await authInternal._updateCurrentUser(cred.user);
    return cred;
  }
  function _setActionCodeSettingsOnRequest(auth2, request, actionCodeSettings) {
    var _a;
    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth2, "invalid-continue-uri");
    _assert(typeof actionCodeSettings.dynamicLinkDomain === "undefined" || actionCodeSettings.dynamicLinkDomain.length > 0, auth2, "invalid-dynamic-link-domain");
    request.continueUrl = actionCodeSettings.url;
    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
    if (actionCodeSettings.iOS) {
      _assert(actionCodeSettings.iOS.bundleId.length > 0, auth2, "missing-ios-bundle-id");
      request.iOSBundleId = actionCodeSettings.iOS.bundleId;
    }
    if (actionCodeSettings.android) {
      _assert(actionCodeSettings.android.packageName.length > 0, auth2, "missing-android-pkg-name");
      request.androidInstallApp = actionCodeSettings.android.installApp;
      request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
      request.androidPackageName = actionCodeSettings.android.packageName;
    }
  }
  async function sendPasswordResetEmail(auth2, email, actionCodeSettings) {
    const authModular = getModularInstance(auth2);
    const request = {
      requestType: "PASSWORD_RESET",
      email
    };
    if (actionCodeSettings) {
      _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
    }
    await sendPasswordResetEmail$1(authModular, request);
  }
  async function confirmPasswordReset(auth2, oobCode, newPassword) {
    await resetPassword(getModularInstance(auth2), {
      oobCode,
      newPassword
    });
  }
  async function applyActionCode(auth2, oobCode) {
    await applyActionCode$1(getModularInstance(auth2), { oobCode });
  }
  async function checkActionCode(auth2, oobCode) {
    const authModular = getModularInstance(auth2);
    const response = await resetPassword(authModular, { oobCode });
    const operation = response.requestType;
    _assert(operation, authModular, "internal-error");
    switch (operation) {
      case "EMAIL_SIGNIN":
        break;
      case "VERIFY_AND_CHANGE_EMAIL":
        _assert(response.newEmail, authModular, "internal-error");
        break;
      case "REVERT_SECOND_FACTOR_ADDITION":
        _assert(response.mfaInfo, authModular, "internal-error");
      default:
        _assert(response.email, authModular, "internal-error");
    }
    let multiFactorInfo = null;
    if (response.mfaInfo) {
      multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
    }
    return {
      data: {
        email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.newEmail : response.email) || null,
        previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" ? response.email : response.newEmail) || null,
        multiFactorInfo
      },
      operation
    };
  }
  async function verifyPasswordResetCode(auth2, code) {
    const { data } = await checkActionCode(getModularInstance(auth2), code);
    return data.email;
  }
  async function createUserWithEmailAndPassword(auth2, email, password) {
    const authInternal = _castAuth(auth2);
    const response = await signUp(authInternal, {
      returnSecureToken: true,
      email,
      password
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn", response);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
  }
  function signInWithEmailAndPassword(auth2, email, password) {
    return signInWithCredential(getModularInstance(auth2), EmailAuthProvider.credential(email, password));
  }
  async function sendSignInLinkToEmail(auth2, email, actionCodeSettings) {
    const authModular = getModularInstance(auth2);
    const request = {
      requestType: "EMAIL_SIGNIN",
      email
    };
    _assert(actionCodeSettings.handleCodeInApp, authModular, "argument-error");
    if (actionCodeSettings) {
      _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
    }
    await sendSignInLinkToEmail$1(authModular, request);
  }
  function isSignInWithEmailLink(auth2, emailLink) {
    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN";
  }
  async function signInWithEmailLink(auth2, email, emailLink) {
    const authModular = getModularInstance(auth2);
    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
    _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch");
    return signInWithCredential(authModular, credential);
  }
  async function createAuthUri(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:createAuthUri", _addTidIfNecessary(auth2, request));
  }
  async function fetchSignInMethodsForEmail(auth2, email) {
    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : "http://localhost";
    const request = {
      identifier: email,
      continueUri
    };
    const { signinMethods } = await createAuthUri(getModularInstance(auth2), request);
    return signinMethods || [];
  }
  async function sendEmailVerification(user, actionCodeSettings) {
    const userInternal = getModularInstance(user);
    const idToken = await user.getIdToken();
    const request = {
      requestType: "VERIFY_EMAIL",
      idToken
    };
    if (actionCodeSettings) {
      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    }
    const { email } = await sendEmailVerification$1(userInternal.auth, request);
    if (email !== user.email) {
      await user.reload();
    }
  }
  async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
    const userInternal = getModularInstance(user);
    const idToken = await user.getIdToken();
    const request = {
      requestType: "VERIFY_AND_CHANGE_EMAIL",
      idToken,
      newEmail
    };
    if (actionCodeSettings) {
      _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    }
    const { email } = await verifyAndChangeEmail(userInternal.auth, request);
    if (email !== user.email) {
      await user.reload();
    }
  }
  async function updateProfile$1(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v1/accounts:update", request);
  }
  async function updateProfile(user, { displayName, photoURL: photoUrl }) {
    if (displayName === void 0 && photoUrl === void 0) {
      return;
    }
    const userInternal = getModularInstance(user);
    const idToken = await userInternal.getIdToken();
    const profileRequest = {
      idToken,
      displayName,
      photoUrl,
      returnSecureToken: true
    };
    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
    userInternal.displayName = response.displayName || null;
    userInternal.photoURL = response.photoUrl || null;
    const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === "password");
    if (passwordProvider) {
      passwordProvider.displayName = userInternal.displayName;
      passwordProvider.photoURL = userInternal.photoURL;
    }
    await userInternal._updateTokensIfNecessary(response);
  }
  function updateEmail(user, newEmail) {
    return updateEmailOrPassword(getModularInstance(user), newEmail, null);
  }
  function updatePassword(user, newPassword) {
    return updateEmailOrPassword(getModularInstance(user), null, newPassword);
  }
  async function updateEmailOrPassword(user, email, password) {
    const { auth: auth2 } = user;
    const idToken = await user.getIdToken();
    const request = {
      idToken,
      returnSecureToken: true
    };
    if (email) {
      request.email = email;
    }
    if (password) {
      request.password = password;
    }
    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth2, request));
    await user._updateTokensIfNecessary(response, true);
  }
  function _fromIdTokenResponse(idTokenResponse) {
    var _a, _b;
    if (!idTokenResponse) {
      return null;
    }
    const { providerId } = idTokenResponse;
    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse";
    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
      const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b["sign_in_provider"];
      if (signInProvider) {
        const filteredProviderId = signInProvider !== "anonymous" && signInProvider !== "custom" ? signInProvider : null;
        return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
      }
    }
    if (!providerId) {
      return null;
    }
    switch (providerId) {
      case "facebook.com":
        return new FacebookAdditionalUserInfo(isNewUser, profile);
      case "github.com":
        return new GithubAdditionalUserInfo(isNewUser, profile);
      case "google.com":
        return new GoogleAdditionalUserInfo(isNewUser, profile);
      case "twitter.com":
        return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
      case "custom":
      case "anonymous":
        return new GenericAdditionalUserInfo(isNewUser, null);
      default:
        return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
    }
  }
  function getAdditionalUserInfo(userCredential) {
    const { user, _tokenResponse } = userCredential;
    if (user.isAnonymous && !_tokenResponse) {
      return {
        providerId: null,
        isNewUser: false,
        profile: null
      };
    }
    return _fromIdTokenResponse(_tokenResponse);
  }
  function getMultiFactorResolver(auth2, error) {
    var _a;
    const authModular = getModularInstance(auth2);
    const errorInternal = error;
    _assert(error.customData.operationType, authModular, "argument-error");
    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error");
    return MultiFactorResolverImpl._fromError(authModular, errorInternal);
  }
  function startEnrollPhoneMfa(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:start", _addTidIfNecessary(auth2, request));
  }
  function finalizeEnrollPhoneMfa(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:finalize", _addTidIfNecessary(auth2, request));
  }
  function withdrawMfa(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v2/accounts/mfaEnrollment:withdraw", _addTidIfNecessary(auth2, request));
  }
  function multiFactor(user) {
    const userModular = getModularInstance(user);
    if (!multiFactorUserCache.has(userModular)) {
      multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
    }
    return multiFactorUserCache.get(userModular);
  }
  function _iframeCannotSyncWebStorage() {
    const ua = getUA();
    return _isSafari(ua) || _isIOS(ua);
  }
  function _allSettled(promises) {
    return Promise.all(promises.map(async (promise) => {
      try {
        const value = await promise;
        return {
          fulfilled: true,
          value
        };
      } catch (reason) {
        return {
          fulfilled: false,
          reason
        };
      }
    }));
  }
  function _generateEventId(prefix = "", digits = 10) {
    let random = "";
    for (let i = 0; i < digits; i++) {
      random += Math.floor(Math.random() * 10);
    }
    return prefix + random;
  }
  function _window() {
    return window;
  }
  function _setWindowLocation(url) {
    _window().location.href = url;
  }
  function _isWorker() {
    return typeof _window()["WorkerGlobalScope"] !== "undefined" && typeof _window()["importScripts"] === "function";
  }
  async function _getActiveServiceWorker() {
    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
      return null;
    }
    try {
      const registration = await navigator.serviceWorker.ready;
      return registration.active;
    } catch (_a) {
      return null;
    }
  }
  function _getServiceWorkerController() {
    var _a;
    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
  }
  function _getWorkerGlobalScope() {
    return _isWorker() ? self : null;
  }
  function getObjectStore(db, isReadWrite) {
    return db.transaction([DB_OBJECTSTORE_NAME], isReadWrite ? "readwrite" : "readonly").objectStore(DB_OBJECTSTORE_NAME);
  }
  function _deleteDatabase() {
    const request = indexedDB.deleteDatabase(DB_NAME);
    return new DBPromise(request).toPromise();
  }
  function _openDatabase() {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    return new Promise((resolve, reject) => {
      request.addEventListener("error", () => {
        reject(request.error);
      });
      request.addEventListener("upgradeneeded", () => {
        const db = request.result;
        try {
          db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
        } catch (e) {
          reject(e);
        }
      });
      request.addEventListener("success", async () => {
        const db = request.result;
        if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
          db.close();
          await _deleteDatabase();
          resolve(await _openDatabase());
        } else {
          resolve(db);
        }
      });
    });
  }
  async function _putObject(db, key, value) {
    const request = getObjectStore(db, true).put({
      [DB_DATA_KEYPATH]: key,
      value
    });
    return new DBPromise(request).toPromise();
  }
  async function getObject(db, key) {
    const request = getObjectStore(db, false).get(key);
    const data = await new DBPromise(request).toPromise();
    return data === void 0 ? null : data.value;
  }
  function _deleteObject(db, key) {
    const request = getObjectStore(db, true).delete(key);
    return new DBPromise(request).toPromise();
  }
  function startSignInPhoneMfa(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v2/accounts/mfaSignIn:start", _addTidIfNecessary(auth2, request));
  }
  function finalizeSignInPhoneMfa(auth2, request) {
    return _performApiRequest(auth2, "POST", "/v2/accounts/mfaSignIn:finalize", _addTidIfNecessary(auth2, request));
  }
  async function getRecaptchaParams(auth2) {
    return (await _performApiRequest(auth2, "GET", "/v1/recaptchaParams")).recaptchaSiteKey || "";
  }
  function getScriptParentElement() {
    var _a, _b;
    return (_b = (_a = document.getElementsByTagName("head")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
  }
  function _loadJS(url) {
    return new Promise((resolve, reject) => {
      const el = document.createElement("script");
      el.setAttribute("src", url);
      el.onload = resolve;
      el.onerror = (e) => {
        const error = _createError("internal-error");
        error.customData = e;
        reject(error);
      };
      el.type = "text/javascript";
      el.charset = "UTF-8";
      getScriptParentElement().appendChild(el);
    });
  }
  function _generateCallbackName(prefix) {
    return `__${prefix}${Math.floor(Math.random() * 1e6)}`;
  }
  function generateRandomAlphaNumericString(len) {
    const chars = [];
    const allowedChars = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (let i = 0; i < len; i++) {
      chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
    }
    return chars.join("");
  }
  function isHostLanguageValid(hl) {
    return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
  }
  function domReady() {
    let resolver = null;
    return new Promise((resolve) => {
      if (document.readyState === "complete") {
        resolve();
        return;
      }
      resolver = () => resolve();
      window.addEventListener("load", resolver);
    }).catch((e) => {
      if (resolver) {
        window.removeEventListener("load", resolver);
      }
      throw e;
    });
  }
  async function signInWithPhoneNumber(auth2, phoneNumber, appVerifier) {
    const authInternal = _castAuth(auth2);
    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred) => signInWithCredential(authInternal, cred));
  }
  async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = getModularInstance(user);
    await _assertLinkedStatus(false, userInternal, "phone");
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred) => linkWithCredential(userInternal, cred));
  }
  async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = getModularInstance(user);
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred) => reauthenticateWithCredential(userInternal, cred));
  }
  async function _verifyPhoneNumber(auth2, options, verifier) {
    var _a;
    const recaptchaToken = await verifier.verify();
    try {
      _assert(typeof recaptchaToken === "string", auth2, "argument-error");
      _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth2, "argument-error");
      let phoneInfoOptions;
      if (typeof options === "string") {
        phoneInfoOptions = {
          phoneNumber: options
        };
      } else {
        phoneInfoOptions = options;
      }
      if ("session" in phoneInfoOptions) {
        const session = phoneInfoOptions.session;
        if ("phoneNumber" in phoneInfoOptions) {
          _assert(session.type === "enroll", auth2, "internal-error");
          const response = await startEnrollPhoneMfa(auth2, {
            idToken: session.credential,
            phoneEnrollmentInfo: {
              phoneNumber: phoneInfoOptions.phoneNumber,
              recaptchaToken
            }
          });
          return response.phoneSessionInfo.sessionInfo;
        } else {
          _assert(session.type === "signin", auth2, "internal-error");
          const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;
          _assert(mfaEnrollmentId, auth2, "missing-multi-factor-info");
          const response = await startSignInPhoneMfa(auth2, {
            mfaPendingCredential: session.credential,
            mfaEnrollmentId,
            phoneSignInInfo: {
              recaptchaToken
            }
          });
          return response.phoneResponseInfo.sessionInfo;
        }
      } else {
        const { sessionInfo } = await sendPhoneVerificationCode(auth2, {
          phoneNumber: phoneInfoOptions.phoneNumber,
          recaptchaToken
        });
        return sessionInfo;
      }
    } finally {
      verifier._reset();
    }
  }
  async function updatePhoneNumber(user, credential) {
    await _link$1(getModularInstance(user), credential);
  }
  function _withDefaultResolver(auth2, resolverOverride) {
    if (resolverOverride) {
      return _getInstance(resolverOverride);
    }
    _assert(auth2._popupRedirectResolver, auth2, "argument-error");
    return auth2._popupRedirectResolver;
  }
  function _signIn(params) {
    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
  }
  function _reauth(params) {
    const { auth: auth2, user } = params;
    _assert(user, auth2, "internal-error");
    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
  }
  async function _link(params) {
    const { auth: auth2, user } = params;
    _assert(user, auth2, "internal-error");
    return _link$1(user, new IdpCredential(params), params.bypassAuthState);
  }
  async function signInWithPopup(auth2, provider, resolver) {
    const authInternal = _castAuth(auth2);
    _assertInstanceOf(auth2, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    const action = new PopupOperation(authInternal, "signInViaPopup", provider, resolverInternal);
    return action.executeNotNull();
  }
  async function reauthenticateWithPopup(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "reauthViaPopup", provider, resolverInternal, userInternal);
    return action.executeNotNull();
  }
  async function linkWithPopup(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "linkViaPopup", provider, resolverInternal, userInternal);
    return action.executeNotNull();
  }
  async function _getAndClearPendingRedirectStatus(resolver, auth2) {
    const key = pendingRedirectKey(auth2);
    const persistence = resolverPersistence(resolver);
    if (!await persistence._isAvailable()) {
      return false;
    }
    const hasPendingRedirect = await persistence._get(key) === "true";
    await persistence._remove(key);
    return hasPendingRedirect;
  }
  async function _setPendingRedirectStatus(resolver, auth2) {
    return resolverPersistence(resolver)._set(pendingRedirectKey(auth2), "true");
  }
  function _clearRedirectOutcomes() {
    redirectOutcomeMap.clear();
  }
  function resolverPersistence(resolver) {
    return _getInstance(resolver._redirectPersistence);
  }
  function pendingRedirectKey(auth2) {
    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth2.config.apiKey, auth2.name);
  }
  function signInWithRedirect(auth2, provider, resolver) {
    return _signInWithRedirect(auth2, provider, resolver);
  }
  async function _signInWithRedirect(auth2, provider, resolver) {
    const authInternal = _castAuth(auth2);
    _assertInstanceOf(auth2, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    await _setPendingRedirectStatus(resolverInternal, authInternal);
    return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect");
  }
  function reauthenticateWithRedirect(user, provider, resolver) {
    return _reauthenticateWithRedirect(user, provider, resolver);
  }
  async function _reauthenticateWithRedirect(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect", eventId);
  }
  function linkWithRedirect(user, provider, resolver) {
    return _linkWithRedirect(user, provider, resolver);
  }
  async function _linkWithRedirect(user, provider, resolver) {
    const userInternal = getModularInstance(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _assertLinkedStatus(false, userInternal, provider.providerId);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect", eventId);
  }
  async function getRedirectResult(auth2, resolver) {
    await _castAuth(auth2)._initializationPromise;
    return _getRedirectResult(auth2, resolver, false);
  }
  async function _getRedirectResult(auth2, resolverExtern, bypassAuthState = false) {
    const authInternal = _castAuth(auth2);
    const resolver = _withDefaultResolver(authInternal, resolverExtern);
    const action = new RedirectAction(authInternal, resolver, bypassAuthState);
    const result = await action.execute();
    if (result && !bypassAuthState) {
      delete result.user._redirectEventId;
      await authInternal._persistUserIfCurrent(result.user);
      await authInternal._setRedirectUser(null, resolverExtern);
    }
    return result;
  }
  async function prepareUserForRedirect(user) {
    const eventId = _generateEventId(`${user.uid}:::`);
    user._redirectEventId = eventId;
    await user.auth._setRedirectUser(user);
    await user.auth._persistUserIfCurrent(user);
    return eventId;
  }
  function eventUid(e) {
    return [e.type, e.eventId, e.sessionId, e.tenantId].filter((v) => v).join("-");
  }
  function isNullRedirectEvent({ type, error }) {
    return type === "unknown" && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event"}`;
  }
  function isRedirectEvent(event) {
    switch (event.type) {
      case "signInViaRedirect":
      case "linkViaRedirect":
      case "reauthViaRedirect":
        return true;
      case "unknown":
        return isNullRedirectEvent(event);
      default:
        return false;
    }
  }
  async function _getProjectConfig(auth2, request = {}) {
    return _performApiRequest(auth2, "GET", "/v1/projects", request);
  }
  async function _validateOrigin(auth2) {
    if (auth2.config.emulator) {
      return;
    }
    const { authorizedDomains } = await _getProjectConfig(auth2);
    for (const domain of authorizedDomains) {
      try {
        if (matchDomain(domain)) {
          return;
        }
      } catch (_a) {
      }
    }
    _fail(auth2, "unauthorized-domain");
  }
  function matchDomain(expected) {
    const currentUrl = _getCurrentUrl();
    const { protocol, hostname } = new URL(currentUrl);
    if (expected.startsWith("chrome-extension://")) {
      const ceUrl = new URL(expected);
      if (ceUrl.hostname === "" && hostname === "") {
        return protocol === "chrome-extension:" && expected.replace("chrome-extension://", "") === currentUrl.replace("chrome-extension://", "");
      }
      return protocol === "chrome-extension:" && ceUrl.hostname === hostname;
    }
    if (!HTTP_REGEX.test(protocol)) {
      return false;
    }
    if (IP_ADDRESS_REGEX.test(expected)) {
      return hostname === expected;
    }
    const escapedDomainPattern = expected.replace(/\./g, "\\.");
    const re = new RegExp("^(.+\\." + escapedDomainPattern + "|" + escapedDomainPattern + ")$", "i");
    return re.test(hostname);
  }
  function resetUnloadedGapiModules() {
    const beacon = _window().___jsl;
    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
      for (const hint of Object.keys(beacon.H)) {
        beacon.H[hint].r = beacon.H[hint].r || [];
        beacon.H[hint].L = beacon.H[hint].L || [];
        beacon.H[hint].r = [...beacon.H[hint].L];
        if (beacon.CP) {
          for (let i = 0; i < beacon.CP.length; i++) {
            beacon.CP[i] = null;
          }
        }
      }
    }
  }
  function loadGapi(auth2) {
    return new Promise((resolve, reject) => {
      var _a, _b, _c;
      function loadGapiIframe() {
        resetUnloadedGapiModules();
        gapi.load("gapi.iframes", {
          callback: () => {
            resolve(gapi.iframes.getContext());
          },
          ontimeout: () => {
            resetUnloadedGapiModules();
            reject(_createError(auth2, "network-request-failed"));
          },
          timeout: NETWORK_TIMEOUT.get()
        });
      }
      if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
        resolve(gapi.iframes.getContext());
      } else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
        loadGapiIframe();
      } else {
        const cbName = _generateCallbackName("iframefcb");
        _window()[cbName] = () => {
          if (!!gapi.load) {
            loadGapiIframe();
          } else {
            reject(_createError(auth2, "network-request-failed"));
          }
        };
        return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch((e) => reject(e));
      }
    }).catch((error) => {
      cachedGApiLoader = null;
      throw error;
    });
  }
  function _loadGapi(auth2) {
    cachedGApiLoader = cachedGApiLoader || loadGapi(auth2);
    return cachedGApiLoader;
  }
  function getIframeUrl(auth2) {
    const config2 = auth2.config;
    _assert(config2.authDomain, auth2, "auth-domain-config-required");
    const url = config2.emulator ? _emulatorUrl(config2, EMULATED_IFRAME_PATH) : `https://${auth2.config.authDomain}/${IFRAME_PATH}`;
    const params = {
      apiKey: config2.apiKey,
      appName: auth2.name,
      v: SDK_VERSION
    };
    const eid = EID_FROM_APIHOST.get(auth2.config.apiHost);
    if (eid) {
      params.eid = eid;
    }
    const frameworks = auth2._getFrameworks();
    if (frameworks.length) {
      params.fw = frameworks.join(",");
    }
    return `${url}?${querystring(params).slice(1)}`;
  }
  async function _openIframe(auth2) {
    const context = await _loadGapi(auth2);
    const gapi2 = _window().gapi;
    _assert(gapi2, auth2, "internal-error");
    return context.open({
      where: document.body,
      url: getIframeUrl(auth2),
      messageHandlersFilter: gapi2.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
      attributes: IFRAME_ATTRIBUTES,
      dontclear: true
    }, (iframe) => new Promise(async (resolve, reject) => {
      await iframe.restyle({
        setHideOnLeave: false
      });
      const networkError = _createError(auth2, "network-request-failed");
      const networkErrorTimer = _window().setTimeout(() => {
        reject(networkError);
      }, PING_TIMEOUT.get());
      function clearTimerAndResolve() {
        _window().clearTimeout(networkErrorTimer);
        resolve(iframe);
      }
      iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
        reject(networkError);
      });
    }));
  }
  function _open(auth2, url, name7, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
    let target = "";
    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
      width: width.toString(),
      height: height.toString(),
      top,
      left
    });
    const ua = getUA().toLowerCase();
    if (name7) {
      target = _isChromeIOS(ua) ? TARGET_BLANK : name7;
    }
    if (_isFirefox(ua)) {
      url = url || FIREFOX_EMPTY_URL;
      options.scrollbars = "yes";
    }
    const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, "");
    if (_isIOSStandalone(ua) && target !== "_self") {
      openAsNewWindowIOS(url || "", target);
      return new AuthPopup(null);
    }
    const newWin = window.open(url || "", target, optionsString);
    _assert(newWin, auth2, "popup-blocked");
    try {
      newWin.focus();
    } catch (e) {
    }
    return new AuthPopup(newWin);
  }
  function openAsNewWindowIOS(url, target) {
    const el = document.createElement("a");
    el.href = url;
    el.target = target;
    const click = document.createEvent("MouseEvent");
    click.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
    el.dispatchEvent(click);
  }
  function _getRedirectUrl(auth2, provider, authType, redirectUrl, eventId, additionalParams) {
    _assert(auth2.config.authDomain, auth2, "auth-domain-config-required");
    _assert(auth2.config.apiKey, auth2, "invalid-api-key");
    const params = {
      apiKey: auth2.config.apiKey,
      appName: auth2.name,
      authType,
      redirectUrl,
      v: SDK_VERSION,
      eventId
    };
    if (provider instanceof FederatedAuthProvider) {
      provider.setDefaultLanguage(auth2.languageCode);
      params.providerId = provider.providerId || "";
      if (!isEmpty(provider.getCustomParameters())) {
        params.customParameters = JSON.stringify(provider.getCustomParameters());
      }
      for (const [key, value] of Object.entries(additionalParams || {})) {
        params[key] = value;
      }
    }
    if (provider instanceof BaseOAuthProvider) {
      const scopes = provider.getScopes().filter((scope) => scope !== "");
      if (scopes.length > 0) {
        params.scopes = scopes.join(",");
      }
    }
    if (auth2.tenantId) {
      params.tid = auth2.tenantId;
    }
    const paramsDict = params;
    for (const key of Object.keys(paramsDict)) {
      if (paramsDict[key] === void 0) {
        delete paramsDict[key];
      }
    }
    return `${getHandlerBase(auth2)}?${querystring(paramsDict).slice(1)}`;
  }
  function getHandlerBase({ config: config2 }) {
    if (!config2.emulator) {
      return `https://${config2.authDomain}/${WIDGET_PATH}`;
    }
    return _emulatorUrl(config2, EMULATOR_WIDGET_PATH);
  }
  function getVersionForPlatform(clientPlatform) {
    switch (clientPlatform) {
      case "Node":
        return "node";
      case "ReactNative":
        return "rn";
      case "Worker":
        return "webworker";
      case "Cordova":
        return "cordova";
      default:
        return void 0;
    }
  }
  function registerAuth(clientPlatform) {
    _registerComponent(new Component("auth", (container, { options: deps }) => {
      const app2 = container.getProvider("app").getImmediate();
      const { apiKey, authDomain } = app2.options;
      return ((app3) => {
        _assert(apiKey && !apiKey.includes(":"), "invalid-api-key", { appName: app3.name });
        _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(":")), "argument-error", {
          appName: app3.name
        });
        const config2 = {
          apiKey,
          authDomain,
          clientPlatform,
          apiHost: "identitytoolkit.googleapis.com",
          tokenApiHost: "securetoken.googleapis.com",
          apiScheme: "https",
          sdkClientVersion: _getClientVersion(clientPlatform)
        };
        const authInstance = new AuthImpl(app3, config2);
        _initializeAuthInstance(authInstance, deps);
        return authInstance;
      })(app2);
    }, "PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
      const authInternalProvider = container.getProvider("auth-internal");
      authInternalProvider.initialize();
    }));
    _registerComponent(new Component("auth-internal", (container) => {
      const auth2 = _castAuth(container.getProvider("auth").getImmediate());
      return ((auth3) => new AuthInterop(auth3))(auth2);
    }, "PRIVATE").setInstantiationMode("EXPLICIT"));
    registerVersion(name3, version3, getVersionForPlatform(clientPlatform));
    registerVersion(name3, version3, "esm2017");
  }
  function getAuth(app2 = getApp()) {
    const provider = _getProvider(app2, "auth");
    if (provider.isInitialized()) {
      return provider.getImmediate();
    }
    return initializeAuth(app2, {
      popupRedirectResolver: browserPopupRedirectResolver,
      persistence: [
        indexedDBLocalPersistence,
        browserLocalPersistence,
        browserSessionPersistence
      ]
    });
  }
  var ProviderId, ActionCodeOperation, debugErrorMap, prodErrorMap, _DEFAULT_AUTH_ERROR_FACTORY, logClient, instanceCache, Delay, FetchProvider, SERVER_ERROR_MAP, DEFAULT_API_TIMEOUT_MS, NetworkTimeout, ProactiveRefresh, UserMetadata, StsTokenManager, UserImpl, InMemoryPersistence, inMemoryPersistence, PersistenceUserManager, AuthImpl, Subscription, AuthCredential, EmailAuthCredential, IDP_REQUEST_URI$1, OAuthCredential, VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_, PhoneAuthCredential, ActionCodeURL, EmailAuthProvider, FederatedAuthProvider, BaseOAuthProvider, OAuthProvider, FacebookAuthProvider, GoogleAuthProvider, GithubAuthProvider, IDP_REQUEST_URI, SAMLAuthCredential, SAML_PROVIDER_PREFIX, SAMLAuthProvider, TwitterAuthProvider, UserCredentialImpl, MultiFactorError, MultiFactorInfoImpl, PhoneMultiFactorInfo, GenericAdditionalUserInfo, FederatedAdditionalUserInfoWithUsername, FacebookAdditionalUserInfo, GithubAdditionalUserInfo, GoogleAdditionalUserInfo, TwitterAdditionalUserInfo, MultiFactorSessionImpl, MultiFactorResolverImpl, MultiFactorUserImpl, multiFactorUserCache, STORAGE_AVAILABLE_KEY, BrowserPersistenceClass, _POLLING_INTERVAL_MS$1, IE10_LOCAL_STORAGE_SYNC_DELAY, BrowserLocalPersistence, browserLocalPersistence, BrowserSessionPersistence, browserSessionPersistence, Receiver, Sender, DB_NAME, DB_VERSION, DB_OBJECTSTORE_NAME, DB_DATA_KEYPATH, DBPromise, _POLLING_INTERVAL_MS, _TRANSACTION_RETRY_COUNT, IndexedDBLocalPersistence, indexedDBLocalPersistence, _SOLVE_TIME_MS, _EXPIRATION_TIME_MS, _WIDGET_ID_START, MockReCaptcha, MockWidget, _JSLOAD_CALLBACK, NETWORK_TIMEOUT_DELAY, RECAPTCHA_BASE, ReCaptchaLoaderImpl, MockReCaptchaLoaderImpl, RECAPTCHA_VERIFIER_TYPE, DEFAULT_PARAMS, RecaptchaVerifier, ConfirmationResultImpl, PhoneAuthProvider, IdpCredential, AbstractPopupRedirectOperation, _POLL_WINDOW_CLOSE_TIMEOUT, PopupOperation, PENDING_REDIRECT_KEY, redirectOutcomeMap, RedirectAction, EVENT_DUPLICATION_CACHE_DURATION_MS, AuthEventManager, IP_ADDRESS_REGEX, HTTP_REGEX, NETWORK_TIMEOUT, cachedGApiLoader, PING_TIMEOUT, IFRAME_PATH, EMULATED_IFRAME_PATH, IFRAME_ATTRIBUTES, EID_FROM_APIHOST, BASE_POPUP_OPTIONS, DEFAULT_WIDTH, DEFAULT_HEIGHT, TARGET_BLANK, FIREFOX_EMPTY_URL, AuthPopup, WIDGET_PATH, EMULATOR_WIDGET_PATH, WEB_STORAGE_SUPPORT_KEY, BrowserPopupRedirectResolver, browserPopupRedirectResolver, MultiFactorAssertionImpl, PhoneMultiFactorAssertionImpl, PhoneMultiFactorGenerator, name3, version3, AuthInterop;
  var init_index_1679a2b2 = __esm({
    "node_modules/@firebase/auth/dist/esm2017/index-1679a2b2.js"() {
      init_index_esm2017();
      init_index_esm20174();
      init_modules();
      init_index_esm20173();
      init_index_esm20172();
      ProviderId = {
        FACEBOOK: "facebook.com",
        GITHUB: "github.com",
        GOOGLE: "google.com",
        PASSWORD: "password",
        PHONE: "phone",
        TWITTER: "twitter.com"
      };
      ActionCodeOperation = {
        EMAIL_SIGNIN: "EMAIL_SIGNIN",
        PASSWORD_RESET: "PASSWORD_RESET",
        RECOVER_EMAIL: "RECOVER_EMAIL",
        REVERT_SECOND_FACTOR_ADDITION: "REVERT_SECOND_FACTOR_ADDITION",
        VERIFY_AND_CHANGE_EMAIL: "VERIFY_AND_CHANGE_EMAIL",
        VERIFY_EMAIL: "VERIFY_EMAIL"
      };
      debugErrorMap = _debugErrorMap;
      prodErrorMap = _prodErrorMap;
      _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory("auth", "Firebase", _prodErrorMap());
      logClient = new Logger("@firebase/auth");
      instanceCache = /* @__PURE__ */ new Map();
      Delay = class {
        constructor(shortDelay, longDelay) {
          this.shortDelay = shortDelay;
          this.longDelay = longDelay;
          debugAssert(longDelay > shortDelay, "Short delay should be less than long delay!");
          this.isMobile = isMobileCordova() || isReactNative();
        }
        get() {
          if (!_isOnline()) {
            return Math.min(5e3, this.shortDelay);
          }
          return this.isMobile ? this.longDelay : this.shortDelay;
        }
      };
      FetchProvider = class {
        static initialize(fetchImpl, headersImpl, responseImpl) {
          this.fetchImpl = fetchImpl;
          if (headersImpl) {
            this.headersImpl = headersImpl;
          }
          if (responseImpl) {
            this.responseImpl = responseImpl;
          }
        }
        static fetch() {
          if (this.fetchImpl) {
            return this.fetchImpl;
          }
          if (typeof self !== "undefined" && "fetch" in self) {
            return self.fetch;
          }
          debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
        }
        static headers() {
          if (this.headersImpl) {
            return this.headersImpl;
          }
          if (typeof self !== "undefined" && "Headers" in self) {
            return self.Headers;
          }
          debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
        }
        static response() {
          if (this.responseImpl) {
            return this.responseImpl;
          }
          if (typeof self !== "undefined" && "Response" in self) {
            return self.Response;
          }
          debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
        }
      };
      SERVER_ERROR_MAP = {
        ["CREDENTIAL_MISMATCH"]: "custom-token-mismatch",
        ["MISSING_CUSTOM_TOKEN"]: "internal-error",
        ["INVALID_IDENTIFIER"]: "invalid-email",
        ["MISSING_CONTINUE_URI"]: "internal-error",
        ["INVALID_PASSWORD"]: "wrong-password",
        ["MISSING_PASSWORD"]: "internal-error",
        ["EMAIL_EXISTS"]: "email-already-in-use",
        ["PASSWORD_LOGIN_DISABLED"]: "operation-not-allowed",
        ["INVALID_IDP_RESPONSE"]: "invalid-credential",
        ["INVALID_PENDING_TOKEN"]: "invalid-credential",
        ["FEDERATED_USER_ID_ALREADY_LINKED"]: "credential-already-in-use",
        ["MISSING_REQ_TYPE"]: "internal-error",
        ["EMAIL_NOT_FOUND"]: "user-not-found",
        ["RESET_PASSWORD_EXCEED_LIMIT"]: "too-many-requests",
        ["EXPIRED_OOB_CODE"]: "expired-action-code",
        ["INVALID_OOB_CODE"]: "invalid-action-code",
        ["MISSING_OOB_CODE"]: "internal-error",
        ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN"]: "requires-recent-login",
        ["INVALID_ID_TOKEN"]: "invalid-user-token",
        ["TOKEN_EXPIRED"]: "user-token-expired",
        ["USER_NOT_FOUND"]: "user-token-expired",
        ["TOO_MANY_ATTEMPTS_TRY_LATER"]: "too-many-requests",
        ["INVALID_CODE"]: "invalid-verification-code",
        ["INVALID_SESSION_INFO"]: "invalid-verification-id",
        ["INVALID_TEMPORARY_PROOF"]: "invalid-credential",
        ["MISSING_SESSION_INFO"]: "missing-verification-id",
        ["SESSION_EXPIRED"]: "code-expired",
        ["MISSING_ANDROID_PACKAGE_NAME"]: "missing-android-pkg-name",
        ["UNAUTHORIZED_DOMAIN"]: "unauthorized-continue-uri",
        ["INVALID_OAUTH_CLIENT_ID"]: "invalid-oauth-client-id",
        ["ADMIN_ONLY_OPERATION"]: "admin-restricted-operation",
        ["INVALID_MFA_PENDING_CREDENTIAL"]: "invalid-multi-factor-session",
        ["MFA_ENROLLMENT_NOT_FOUND"]: "multi-factor-info-not-found",
        ["MISSING_MFA_ENROLLMENT_ID"]: "missing-multi-factor-info",
        ["MISSING_MFA_PENDING_CREDENTIAL"]: "missing-multi-factor-session",
        ["SECOND_FACTOR_EXISTS"]: "second-factor-already-in-use",
        ["SECOND_FACTOR_LIMIT_EXCEEDED"]: "maximum-second-factor-count-exceeded",
        ["BLOCKING_FUNCTION_ERROR_RESPONSE"]: "internal-error"
      };
      DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);
      NetworkTimeout = class {
        constructor(auth2) {
          this.auth = auth2;
          this.timer = null;
          this.promise = new Promise((_, reject) => {
            this.timer = setTimeout(() => {
              return reject(_createError(this.auth, "timeout"));
            }, DEFAULT_API_TIMEOUT_MS.get());
          });
        }
        clearNetworkTimeout() {
          clearTimeout(this.timer);
        }
      };
      ProactiveRefresh = class {
        constructor(user) {
          this.user = user;
          this.isRunning = false;
          this.timerId = null;
          this.errorBackoff = 3e4;
        }
        _start() {
          if (this.isRunning) {
            return;
          }
          this.isRunning = true;
          this.schedule();
        }
        _stop() {
          if (!this.isRunning) {
            return;
          }
          this.isRunning = false;
          if (this.timerId !== null) {
            clearTimeout(this.timerId);
          }
        }
        getInterval(wasError) {
          var _a;
          if (wasError) {
            const interval = this.errorBackoff;
            this.errorBackoff = Math.min(this.errorBackoff * 2, 96e4);
            return interval;
          } else {
            this.errorBackoff = 3e4;
            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
            const interval = expTime - Date.now() - 3e5;
            return Math.max(0, interval);
          }
        }
        schedule(wasError = false) {
          if (!this.isRunning) {
            return;
          }
          const interval = this.getInterval(wasError);
          this.timerId = setTimeout(async () => {
            await this.iteration();
          }, interval);
        }
        async iteration() {
          try {
            await this.user.getIdToken(true);
          } catch (e) {
            if (e.code === `auth/${"network-request-failed"}`) {
              this.schedule(true);
            }
            return;
          }
          this.schedule();
        }
      };
      UserMetadata = class {
        constructor(createdAt, lastLoginAt) {
          this.createdAt = createdAt;
          this.lastLoginAt = lastLoginAt;
          this._initializeTime();
        }
        _initializeTime() {
          this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
          this.creationTime = utcTimestampToDateString(this.createdAt);
        }
        _copy(metadata) {
          this.createdAt = metadata.createdAt;
          this.lastLoginAt = metadata.lastLoginAt;
          this._initializeTime();
        }
        toJSON() {
          return {
            createdAt: this.createdAt,
            lastLoginAt: this.lastLoginAt
          };
        }
      };
      StsTokenManager = class {
        constructor() {
          this.refreshToken = null;
          this.accessToken = null;
          this.expirationTime = null;
        }
        get isExpired() {
          return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
        }
        updateFromServerResponse(response) {
          _assert(response.idToken, "internal-error");
          _assert(typeof response.idToken !== "undefined", "internal-error");
          _assert(typeof response.refreshToken !== "undefined", "internal-error");
          const expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
          this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
        }
        async getToken(auth2, forceRefresh = false) {
          _assert(!this.accessToken || this.refreshToken, auth2, "user-token-expired");
          if (!forceRefresh && this.accessToken && !this.isExpired) {
            return this.accessToken;
          }
          if (this.refreshToken) {
            await this.refresh(auth2, this.refreshToken);
            return this.accessToken;
          }
          return null;
        }
        clearRefreshToken() {
          this.refreshToken = null;
        }
        async refresh(auth2, oldToken) {
          const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth2, oldToken);
          this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
        }
        updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
          this.refreshToken = refreshToken || null;
          this.accessToken = accessToken || null;
          this.expirationTime = Date.now() + expiresInSec * 1e3;
        }
        static fromJSON(appName, object) {
          const { refreshToken, accessToken, expirationTime } = object;
          const manager = new StsTokenManager();
          if (refreshToken) {
            _assert(typeof refreshToken === "string", "internal-error", {
              appName
            });
            manager.refreshToken = refreshToken;
          }
          if (accessToken) {
            _assert(typeof accessToken === "string", "internal-error", {
              appName
            });
            manager.accessToken = accessToken;
          }
          if (expirationTime) {
            _assert(typeof expirationTime === "number", "internal-error", {
              appName
            });
            manager.expirationTime = expirationTime;
          }
          return manager;
        }
        toJSON() {
          return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expirationTime: this.expirationTime
          };
        }
        _assign(stsTokenManager) {
          this.accessToken = stsTokenManager.accessToken;
          this.refreshToken = stsTokenManager.refreshToken;
          this.expirationTime = stsTokenManager.expirationTime;
        }
        _clone() {
          return Object.assign(new StsTokenManager(), this.toJSON());
        }
        _performRefresh() {
          return debugFail("not implemented");
        }
      };
      UserImpl = class {
        constructor(_a) {
          var { uid, auth: auth2, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
          this.providerId = "firebase";
          this.emailVerified = false;
          this.isAnonymous = false;
          this.tenantId = null;
          this.providerData = [];
          this.proactiveRefresh = new ProactiveRefresh(this);
          this.reloadUserInfo = null;
          this.reloadListener = null;
          this.uid = uid;
          this.auth = auth2;
          this.stsTokenManager = stsTokenManager;
          this.accessToken = stsTokenManager.accessToken;
          this.displayName = opt.displayName || null;
          this.email = opt.email || null;
          this.emailVerified = opt.emailVerified || false;
          this.phoneNumber = opt.phoneNumber || null;
          this.photoURL = opt.photoURL || null;
          this.isAnonymous = opt.isAnonymous || false;
          this.tenantId = opt.tenantId || null;
          this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);
        }
        async getIdToken(forceRefresh) {
          const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
          _assert(accessToken, this.auth, "internal-error");
          if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            await this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
          }
          return accessToken;
        }
        getIdTokenResult(forceRefresh) {
          return getIdTokenResult(this, forceRefresh);
        }
        reload() {
          return reload(this);
        }
        _assign(user) {
          if (this === user) {
            return;
          }
          _assert(this.uid === user.uid, this.auth, "internal-error");
          this.displayName = user.displayName;
          this.photoURL = user.photoURL;
          this.email = user.email;
          this.emailVerified = user.emailVerified;
          this.phoneNumber = user.phoneNumber;
          this.isAnonymous = user.isAnonymous;
          this.tenantId = user.tenantId;
          this.providerData = user.providerData.map((userInfo) => Object.assign({}, userInfo));
          this.metadata._copy(user.metadata);
          this.stsTokenManager._assign(user.stsTokenManager);
        }
        _clone(auth2) {
          return new UserImpl(Object.assign(Object.assign({}, this), { auth: auth2, stsTokenManager: this.stsTokenManager._clone() }));
        }
        _onReload(callback) {
          _assert(!this.reloadListener, this.auth, "internal-error");
          this.reloadListener = callback;
          if (this.reloadUserInfo) {
            this._notifyReloadListener(this.reloadUserInfo);
            this.reloadUserInfo = null;
          }
        }
        _notifyReloadListener(userInfo) {
          if (this.reloadListener) {
            this.reloadListener(userInfo);
          } else {
            this.reloadUserInfo = userInfo;
          }
        }
        _startProactiveRefresh() {
          this.proactiveRefresh._start();
        }
        _stopProactiveRefresh() {
          this.proactiveRefresh._stop();
        }
        async _updateTokensIfNecessary(response, reload2 = false) {
          let tokensRefreshed = false;
          if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
          }
          if (reload2) {
            await _reloadWithoutSaving(this);
          }
          await this.auth._persistUserIfCurrent(this);
          if (tokensRefreshed) {
            this.auth._notifyListenersIfCurrent(this);
          }
        }
        async delete() {
          const idToken = await this.getIdToken();
          await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
          this.stsTokenManager.clearRefreshToken();
          return this.auth.signOut();
        }
        toJSON() {
          return Object.assign(Object.assign({
            uid: this.uid,
            email: this.email || void 0,
            emailVerified: this.emailVerified,
            displayName: this.displayName || void 0,
            isAnonymous: this.isAnonymous,
            photoURL: this.photoURL || void 0,
            phoneNumber: this.phoneNumber || void 0,
            tenantId: this.tenantId || void 0,
            providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),
            stsTokenManager: this.stsTokenManager.toJSON(),
            _redirectEventId: this._redirectEventId
          }, this.metadata.toJSON()), {
            apiKey: this.auth.config.apiKey,
            appName: this.auth.name
          });
        }
        get refreshToken() {
          return this.stsTokenManager.refreshToken || "";
        }
        static _fromJSON(auth2, object) {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : void 0;
          const email = (_b = object.email) !== null && _b !== void 0 ? _b : void 0;
          const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : void 0;
          const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : void 0;
          const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : void 0;
          const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : void 0;
          const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : void 0;
          const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;
          const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
          _assert(uid && plainObjectTokenManager, auth2, "internal-error");
          const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
          _assert(typeof uid === "string", auth2, "internal-error");
          assertStringOrUndefined(displayName, auth2.name);
          assertStringOrUndefined(email, auth2.name);
          _assert(typeof emailVerified === "boolean", auth2, "internal-error");
          _assert(typeof isAnonymous === "boolean", auth2, "internal-error");
          assertStringOrUndefined(phoneNumber, auth2.name);
          assertStringOrUndefined(photoURL, auth2.name);
          assertStringOrUndefined(tenantId, auth2.name);
          assertStringOrUndefined(_redirectEventId, auth2.name);
          assertStringOrUndefined(createdAt, auth2.name);
          assertStringOrUndefined(lastLoginAt, auth2.name);
          const user = new UserImpl({
            uid,
            auth: auth2,
            email,
            emailVerified,
            displayName,
            isAnonymous,
            photoURL,
            phoneNumber,
            tenantId,
            stsTokenManager,
            createdAt,
            lastLoginAt
          });
          if (providerData && Array.isArray(providerData)) {
            user.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));
          }
          if (_redirectEventId) {
            user._redirectEventId = _redirectEventId;
          }
          return user;
        }
        static async _fromIdTokenResponse(auth2, idTokenResponse, isAnonymous = false) {
          const stsTokenManager = new StsTokenManager();
          stsTokenManager.updateFromServerResponse(idTokenResponse);
          const user = new UserImpl({
            uid: idTokenResponse.localId,
            auth: auth2,
            stsTokenManager,
            isAnonymous
          });
          await _reloadWithoutSaving(user);
          return user;
        }
      };
      InMemoryPersistence = class {
        constructor() {
          this.type = "NONE";
          this.storage = {};
        }
        async _isAvailable() {
          return true;
        }
        async _set(key, value) {
          this.storage[key] = value;
        }
        async _get(key) {
          const value = this.storage[key];
          return value === void 0 ? null : value;
        }
        async _remove(key) {
          delete this.storage[key];
        }
        _addListener(_key, _listener) {
          return;
        }
        _removeListener(_key, _listener) {
          return;
        }
      };
      InMemoryPersistence.type = "NONE";
      inMemoryPersistence = InMemoryPersistence;
      PersistenceUserManager = class {
        constructor(persistence, auth2, userKey) {
          this.persistence = persistence;
          this.auth = auth2;
          this.userKey = userKey;
          const { config: config2, name: name7 } = this.auth;
          this.fullUserKey = _persistenceKeyName(this.userKey, config2.apiKey, name7);
          this.fullPersistenceKey = _persistenceKeyName("persistence", config2.apiKey, name7);
          this.boundEventHandler = auth2._onStorageEvent.bind(auth2);
          this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        setCurrentUser(user) {
          return this.persistence._set(this.fullUserKey, user.toJSON());
        }
        async getCurrentUser() {
          const blob = await this.persistence._get(this.fullUserKey);
          return blob ? UserImpl._fromJSON(this.auth, blob) : null;
        }
        removeCurrentUser() {
          return this.persistence._remove(this.fullUserKey);
        }
        savePersistenceForRedirect() {
          return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        }
        async setPersistence(newPersistence) {
          if (this.persistence === newPersistence) {
            return;
          }
          const currentUser = await this.getCurrentUser();
          await this.removeCurrentUser();
          this.persistence = newPersistence;
          if (currentUser) {
            return this.setCurrentUser(currentUser);
          }
        }
        delete() {
          this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        }
        static async create(auth2, persistenceHierarchy, userKey = "authUser") {
          if (!persistenceHierarchy.length) {
            return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth2, userKey);
          }
          const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
            if (await persistence._isAvailable()) {
              return persistence;
            }
            return void 0;
          }))).filter((persistence) => persistence);
          let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
          const key = _persistenceKeyName(userKey, auth2.config.apiKey, auth2.name);
          let userToMigrate = null;
          for (const persistence of persistenceHierarchy) {
            try {
              const blob = await persistence._get(key);
              if (blob) {
                const user = UserImpl._fromJSON(auth2, blob);
                if (persistence !== selectedPersistence) {
                  userToMigrate = user;
                }
                selectedPersistence = persistence;
                break;
              }
            } catch (_a) {
            }
          }
          const migrationHierarchy = availablePersistences.filter((p) => p._shouldAllowMigration);
          if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
            return new PersistenceUserManager(selectedPersistence, auth2, userKey);
          }
          selectedPersistence = migrationHierarchy[0];
          if (userToMigrate) {
            await selectedPersistence._set(key, userToMigrate.toJSON());
          }
          await Promise.all(persistenceHierarchy.map(async (persistence) => {
            if (persistence !== selectedPersistence) {
              try {
                await persistence._remove(key);
              } catch (_a) {
              }
            }
          }));
          return new PersistenceUserManager(selectedPersistence, auth2, userKey);
        }
      };
      AuthImpl = class {
        constructor(app2, config2) {
          this.app = app2;
          this.config = config2;
          this.currentUser = null;
          this.emulatorConfig = null;
          this.operations = Promise.resolve();
          this.authStateSubscription = new Subscription(this);
          this.idTokenSubscription = new Subscription(this);
          this.redirectUser = null;
          this.isProactiveRefreshEnabled = false;
          this._canInitEmulator = true;
          this._isInitialized = false;
          this._deleted = false;
          this._initializationPromise = null;
          this._popupRedirectResolver = null;
          this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
          this.lastNotifiedUid = void 0;
          this.languageCode = null;
          this.tenantId = null;
          this.settings = { appVerificationDisabledForTesting: false };
          this.frameworks = [];
          this.name = app2.name;
          this.clientVersion = config2.sdkClientVersion;
        }
        _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
          if (popupRedirectResolver) {
            this._popupRedirectResolver = _getInstance(popupRedirectResolver);
          }
          this._initializationPromise = this.queue(async () => {
            var _a, _b;
            if (this._deleted) {
              return;
            }
            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
            if (this._deleted) {
              return;
            }
            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
              try {
                await this._popupRedirectResolver._initialize(this);
              } catch (e) {
              }
            }
            await this.initializeCurrentUser(popupRedirectResolver);
            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
            if (this._deleted) {
              return;
            }
            this._isInitialized = true;
          });
          return this._initializationPromise;
        }
        async _onStorageEvent() {
          if (this._deleted) {
            return;
          }
          const user = await this.assertedPersistence.getCurrentUser();
          if (!this.currentUser && !user) {
            return;
          }
          if (this.currentUser && user && this.currentUser.uid === user.uid) {
            this._currentUser._assign(user);
            await this.currentUser.getIdToken();
            return;
          }
          await this._updateCurrentUser(user);
        }
        async initializeCurrentUser(popupRedirectResolver) {
          var _a;
          let storedUser = await this.assertedPersistence.getCurrentUser();
          if (popupRedirectResolver && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            const storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
            const result = await this.tryRedirectSignIn(popupRedirectResolver);
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
              storedUser = result.user;
            }
          }
          if (!storedUser) {
            return this.directlySetCurrentUser(null);
          }
          if (!storedUser._redirectEventId) {
            return this.reloadAndSetCurrentUserOrClear(storedUser);
          }
          _assert(this._popupRedirectResolver, this, "argument-error");
          await this.getOrInitRedirectPersistenceManager();
          if (this.redirectUser && this.redirectUser._redirectEventId === storedUser._redirectEventId) {
            return this.directlySetCurrentUser(storedUser);
          }
          return this.reloadAndSetCurrentUserOrClear(storedUser);
        }
        async tryRedirectSignIn(redirectResolver) {
          let result = null;
          try {
            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
          } catch (e) {
            await this._setRedirectUser(null);
          }
          return result;
        }
        async reloadAndSetCurrentUserOrClear(user) {
          try {
            await _reloadWithoutSaving(user);
          } catch (e) {
            if (e.code !== `auth/${"network-request-failed"}`) {
              return this.directlySetCurrentUser(null);
            }
          }
          return this.directlySetCurrentUser(user);
        }
        useDeviceLanguage() {
          this.languageCode = _getUserLanguage();
        }
        async _delete() {
          this._deleted = true;
        }
        async updateCurrentUser(userExtern) {
          const user = userExtern ? getModularInstance(userExtern) : null;
          if (user) {
            _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token");
          }
          return this._updateCurrentUser(user && user._clone(this));
        }
        async _updateCurrentUser(user) {
          if (this._deleted) {
            return;
          }
          if (user) {
            _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch");
          }
          return this.queue(async () => {
            await this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
          });
        }
        async signOut() {
          if (this.redirectPersistenceManager || this._popupRedirectResolver) {
            await this._setRedirectUser(null);
          }
          return this._updateCurrentUser(null);
        }
        setPersistence(persistence) {
          return this.queue(async () => {
            await this.assertedPersistence.setPersistence(_getInstance(persistence));
          });
        }
        _getPersistence() {
          return this.assertedPersistence.persistence.type;
        }
        _updateErrorMap(errorMap) {
          this._errorFactory = new ErrorFactory("auth", "Firebase", errorMap());
        }
        onAuthStateChanged(nextOrObserver, error, completed) {
          return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
        }
        onIdTokenChanged(nextOrObserver, error, completed) {
          return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
        }
        toJSON() {
          var _a;
          return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
          };
        }
        async _setRedirectUser(user, popupRedirectResolver) {
          const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
          return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
        }
        async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
          if (!this.redirectPersistenceManager) {
            const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
            _assert(resolver, this, "argument-error");
            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser");
            this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
          }
          return this.redirectPersistenceManager;
        }
        async _redirectUserForId(id) {
          var _a, _b;
          if (this._isInitialized) {
            await this.queue(async () => {
            });
          }
          if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
            return this._currentUser;
          }
          if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
            return this.redirectUser;
          }
          return null;
        }
        async _persistUserIfCurrent(user) {
          if (user === this.currentUser) {
            return this.queue(async () => this.directlySetCurrentUser(user));
          }
        }
        _notifyListenersIfCurrent(user) {
          if (user === this.currentUser) {
            this.notifyAuthListeners();
          }
        }
        _key() {
          return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
        }
        _startProactiveRefresh() {
          this.isProactiveRefreshEnabled = true;
          if (this.currentUser) {
            this._currentUser._startProactiveRefresh();
          }
        }
        _stopProactiveRefresh() {
          this.isProactiveRefreshEnabled = false;
          if (this.currentUser) {
            this._currentUser._stopProactiveRefresh();
          }
        }
        get _currentUser() {
          return this.currentUser;
        }
        notifyAuthListeners() {
          var _a, _b;
          if (!this._isInitialized) {
            return;
          }
          this.idTokenSubscription.next(this.currentUser);
          const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
          if (this.lastNotifiedUid !== currentUid) {
            this.lastNotifiedUid = currentUid;
            this.authStateSubscription.next(this.currentUser);
          }
        }
        registerStateListener(subscription, nextOrObserver, error, completed) {
          if (this._deleted) {
            return () => {
            };
          }
          const cb = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
          const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
          _assert(promise, this, "internal-error");
          promise.then(() => cb(this.currentUser));
          if (typeof nextOrObserver === "function") {
            return subscription.addObserver(nextOrObserver, error, completed);
          } else {
            return subscription.addObserver(nextOrObserver);
          }
        }
        async directlySetCurrentUser(user) {
          if (this.currentUser && this.currentUser !== user) {
            this._currentUser._stopProactiveRefresh();
            if (user && this.isProactiveRefreshEnabled) {
              user._startProactiveRefresh();
            }
          }
          this.currentUser = user;
          if (user) {
            await this.assertedPersistence.setCurrentUser(user);
          } else {
            await this.assertedPersistence.removeCurrentUser();
          }
        }
        queue(action) {
          this.operations = this.operations.then(action, action);
          return this.operations;
        }
        get assertedPersistence() {
          _assert(this.persistenceManager, this, "internal-error");
          return this.persistenceManager;
        }
        _logFramework(framework) {
          if (!framework || this.frameworks.includes(framework)) {
            return;
          }
          this.frameworks.push(framework);
          this.frameworks.sort();
          this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
        }
        _getFrameworks() {
          return this.frameworks;
        }
        async _getAdditionalHeaders() {
          const headers = {
            ["X-Client-Version"]: this.clientVersion
          };
          if (this.app.options.appId) {
            headers["X-Firebase-gmpid"] = this.app.options.appId;
          }
          return headers;
        }
      };
      Subscription = class {
        constructor(auth2) {
          this.auth = auth2;
          this.observer = null;
          this.addObserver = createSubscribe((observer) => this.observer = observer);
        }
        get next() {
          _assert(this.observer, this.auth, "internal-error");
          return this.observer.next.bind(this.observer);
        }
      };
      AuthCredential = class {
        constructor(providerId, signInMethod) {
          this.providerId = providerId;
          this.signInMethod = signInMethod;
        }
        toJSON() {
          return debugFail("not implemented");
        }
        _getIdTokenResponse(_auth) {
          return debugFail("not implemented");
        }
        _linkToIdToken(_auth, _idToken) {
          return debugFail("not implemented");
        }
        _getReauthenticationResolver(_auth) {
          return debugFail("not implemented");
        }
      };
      EmailAuthCredential = class extends AuthCredential {
        constructor(_email, _password, signInMethod, _tenantId = null) {
          super("password", signInMethod);
          this._email = _email;
          this._password = _password;
          this._tenantId = _tenantId;
        }
        static _fromEmailAndPassword(email, password) {
          return new EmailAuthCredential(email, password, "password");
        }
        static _fromEmailAndCode(email, oobCode, tenantId = null) {
          return new EmailAuthCredential(email, oobCode, "emailLink", tenantId);
        }
        toJSON() {
          return {
            email: this._email,
            password: this._password,
            signInMethod: this.signInMethod,
            tenantId: this._tenantId
          };
        }
        static fromJSON(json) {
          const obj = typeof json === "string" ? JSON.parse(json) : json;
          if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
            if (obj.signInMethod === "password") {
              return this._fromEmailAndPassword(obj.email, obj.password);
            } else if (obj.signInMethod === "emailLink") {
              return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
            }
          }
          return null;
        }
        async _getIdTokenResponse(auth2) {
          switch (this.signInMethod) {
            case "password":
              return signInWithPassword(auth2, {
                returnSecureToken: true,
                email: this._email,
                password: this._password
              });
            case "emailLink":
              return signInWithEmailLink$1(auth2, {
                email: this._email,
                oobCode: this._password
              });
            default:
              _fail(auth2, "internal-error");
          }
        }
        async _linkToIdToken(auth2, idToken) {
          switch (this.signInMethod) {
            case "password":
              return updateEmailPassword(auth2, {
                idToken,
                returnSecureToken: true,
                email: this._email,
                password: this._password
              });
            case "emailLink":
              return signInWithEmailLinkForLinking(auth2, {
                idToken,
                email: this._email,
                oobCode: this._password
              });
            default:
              _fail(auth2, "internal-error");
          }
        }
        _getReauthenticationResolver(auth2) {
          return this._getIdTokenResponse(auth2);
        }
      };
      IDP_REQUEST_URI$1 = "http://localhost";
      OAuthCredential = class extends AuthCredential {
        constructor() {
          super(...arguments);
          this.pendingToken = null;
        }
        static _fromParams(params) {
          const cred = new OAuthCredential(params.providerId, params.signInMethod);
          if (params.idToken || params.accessToken) {
            if (params.idToken) {
              cred.idToken = params.idToken;
            }
            if (params.accessToken) {
              cred.accessToken = params.accessToken;
            }
            if (params.nonce && !params.pendingToken) {
              cred.nonce = params.nonce;
            }
            if (params.pendingToken) {
              cred.pendingToken = params.pendingToken;
            }
          } else if (params.oauthToken && params.oauthTokenSecret) {
            cred.accessToken = params.oauthToken;
            cred.secret = params.oauthTokenSecret;
          } else {
            _fail("argument-error");
          }
          return cred;
        }
        toJSON() {
          return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
          };
        }
        static fromJSON(json) {
          const obj = typeof json === "string" ? JSON.parse(json) : json;
          const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
          if (!providerId || !signInMethod) {
            return null;
          }
          const cred = new OAuthCredential(providerId, signInMethod);
          cred.idToken = rest.idToken || void 0;
          cred.accessToken = rest.accessToken || void 0;
          cred.secret = rest.secret;
          cred.nonce = rest.nonce;
          cred.pendingToken = rest.pendingToken || null;
          return cred;
        }
        _getIdTokenResponse(auth2) {
          const request = this.buildRequest();
          return signInWithIdp(auth2, request);
        }
        _linkToIdToken(auth2, idToken) {
          const request = this.buildRequest();
          request.idToken = idToken;
          return signInWithIdp(auth2, request);
        }
        _getReauthenticationResolver(auth2) {
          const request = this.buildRequest();
          request.autoCreate = false;
          return signInWithIdp(auth2, request);
        }
        buildRequest() {
          const request = {
            requestUri: IDP_REQUEST_URI$1,
            returnSecureToken: true
          };
          if (this.pendingToken) {
            request.pendingToken = this.pendingToken;
          } else {
            const postBody = {};
            if (this.idToken) {
              postBody["id_token"] = this.idToken;
            }
            if (this.accessToken) {
              postBody["access_token"] = this.accessToken;
            }
            if (this.secret) {
              postBody["oauth_token_secret"] = this.secret;
            }
            postBody["providerId"] = this.providerId;
            if (this.nonce && !this.pendingToken) {
              postBody["nonce"] = this.nonce;
            }
            request.postBody = querystring(postBody);
          }
          return request;
        }
      };
      VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
        ["USER_NOT_FOUND"]: "user-not-found"
      };
      PhoneAuthCredential = class extends AuthCredential {
        constructor(params) {
          super("phone", "phone");
          this.params = params;
        }
        static _fromVerification(verificationId, verificationCode) {
          return new PhoneAuthCredential({ verificationId, verificationCode });
        }
        static _fromTokenResponse(phoneNumber, temporaryProof) {
          return new PhoneAuthCredential({ phoneNumber, temporaryProof });
        }
        _getIdTokenResponse(auth2) {
          return signInWithPhoneNumber$1(auth2, this._makeVerificationRequest());
        }
        _linkToIdToken(auth2, idToken) {
          return linkWithPhoneNumber$1(auth2, Object.assign({ idToken }, this._makeVerificationRequest()));
        }
        _getReauthenticationResolver(auth2) {
          return verifyPhoneNumberForExisting(auth2, this._makeVerificationRequest());
        }
        _makeVerificationRequest() {
          const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;
          if (temporaryProof && phoneNumber) {
            return { temporaryProof, phoneNumber };
          }
          return {
            sessionInfo: verificationId,
            code: verificationCode
          };
        }
        toJSON() {
          const obj = {
            providerId: this.providerId
          };
          if (this.params.phoneNumber) {
            obj.phoneNumber = this.params.phoneNumber;
          }
          if (this.params.temporaryProof) {
            obj.temporaryProof = this.params.temporaryProof;
          }
          if (this.params.verificationCode) {
            obj.verificationCode = this.params.verificationCode;
          }
          if (this.params.verificationId) {
            obj.verificationId = this.params.verificationId;
          }
          return obj;
        }
        static fromJSON(json) {
          if (typeof json === "string") {
            json = JSON.parse(json);
          }
          const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;
          if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {
            return null;
          }
          return new PhoneAuthCredential({
            verificationId,
            verificationCode,
            phoneNumber,
            temporaryProof
          });
        }
      };
      ActionCodeURL = class {
        constructor(actionLink) {
          var _a, _b, _c, _d, _e, _f;
          const searchParams = querystringDecode(extractQuerystring(actionLink));
          const apiKey = (_a = searchParams["apiKey"]) !== null && _a !== void 0 ? _a : null;
          const code = (_b = searchParams["oobCode"]) !== null && _b !== void 0 ? _b : null;
          const operation = parseMode((_c = searchParams["mode"]) !== null && _c !== void 0 ? _c : null);
          _assert(apiKey && code && operation, "argument-error");
          this.apiKey = apiKey;
          this.operation = operation;
          this.code = code;
          this.continueUrl = (_d = searchParams["continueUrl"]) !== null && _d !== void 0 ? _d : null;
          this.languageCode = (_e = searchParams["languageCode"]) !== null && _e !== void 0 ? _e : null;
          this.tenantId = (_f = searchParams["tenantId"]) !== null && _f !== void 0 ? _f : null;
        }
        static parseLink(link) {
          const actionLink = parseDeepLink(link);
          try {
            return new ActionCodeURL(actionLink);
          } catch (_a) {
            return null;
          }
        }
      };
      EmailAuthProvider = class {
        constructor() {
          this.providerId = EmailAuthProvider.PROVIDER_ID;
        }
        static credential(email, password) {
          return EmailAuthCredential._fromEmailAndPassword(email, password);
        }
        static credentialWithLink(email, emailLink) {
          const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
          _assert(actionCodeUrl, "argument-error");
          return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
        }
      };
      EmailAuthProvider.PROVIDER_ID = "password";
      EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password";
      EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink";
      FederatedAuthProvider = class {
        constructor(providerId) {
          this.providerId = providerId;
          this.defaultLanguageCode = null;
          this.customParameters = {};
        }
        setDefaultLanguage(languageCode) {
          this.defaultLanguageCode = languageCode;
        }
        setCustomParameters(customOAuthParameters) {
          this.customParameters = customOAuthParameters;
          return this;
        }
        getCustomParameters() {
          return this.customParameters;
        }
      };
      BaseOAuthProvider = class extends FederatedAuthProvider {
        constructor() {
          super(...arguments);
          this.scopes = [];
        }
        addScope(scope) {
          if (!this.scopes.includes(scope)) {
            this.scopes.push(scope);
          }
          return this;
        }
        getScopes() {
          return [...this.scopes];
        }
      };
      OAuthProvider = class extends BaseOAuthProvider {
        static credentialFromJSON(json) {
          const obj = typeof json === "string" ? JSON.parse(json) : json;
          _assert("providerId" in obj && "signInMethod" in obj, "argument-error");
          return OAuthCredential._fromParams(obj);
        }
        credential(params) {
          return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));
        }
        _credential(params) {
          _assert(params.idToken || params.accessToken, "argument-error");
          return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));
        }
        static credentialFromResult(userCredential) {
          return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
        }
        static credentialFromError(error) {
          return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
        }
        static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
            return null;
          }
          const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;
          if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
            return null;
          }
          if (!providerId) {
            return null;
          }
          try {
            return new OAuthProvider(providerId)._credential({
              idToken: oauthIdToken,
              accessToken: oauthAccessToken,
              nonce,
              pendingToken
            });
          } catch (e) {
            return null;
          }
        }
      };
      FacebookAuthProvider = class extends BaseOAuthProvider {
        constructor() {
          super("facebook.com");
        }
        static credential(accessToken) {
          return OAuthCredential._fromParams({
            providerId: FacebookAuthProvider.PROVIDER_ID,
            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
            accessToken
          });
        }
        static credentialFromResult(userCredential) {
          return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
        }
        static credentialFromError(error) {
          return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
            return null;
          }
          if (!tokenResponse.oauthAccessToken) {
            return null;
          }
          try {
            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
          } catch (_a) {
            return null;
          }
        }
      };
      FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com";
      FacebookAuthProvider.PROVIDER_ID = "facebook.com";
      GoogleAuthProvider = class extends BaseOAuthProvider {
        constructor() {
          super("google.com");
          this.addScope("profile");
        }
        static credential(idToken, accessToken) {
          return OAuthCredential._fromParams({
            providerId: GoogleAuthProvider.PROVIDER_ID,
            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
            idToken,
            accessToken
          });
        }
        static credentialFromResult(userCredential) {
          return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
        }
        static credentialFromError(error) {
          return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
            return null;
          }
          const { oauthIdToken, oauthAccessToken } = tokenResponse;
          if (!oauthIdToken && !oauthAccessToken) {
            return null;
          }
          try {
            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
          } catch (_a) {
            return null;
          }
        }
      };
      GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com";
      GoogleAuthProvider.PROVIDER_ID = "google.com";
      GithubAuthProvider = class extends BaseOAuthProvider {
        constructor() {
          super("github.com");
        }
        static credential(accessToken) {
          return OAuthCredential._fromParams({
            providerId: GithubAuthProvider.PROVIDER_ID,
            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
            accessToken
          });
        }
        static credentialFromResult(userCredential) {
          return GithubAuthProvider.credentialFromTaggedObject(userCredential);
        }
        static credentialFromError(error) {
          return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) {
            return null;
          }
          if (!tokenResponse.oauthAccessToken) {
            return null;
          }
          try {
            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
          } catch (_a) {
            return null;
          }
        }
      };
      GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com";
      GithubAuthProvider.PROVIDER_ID = "github.com";
      IDP_REQUEST_URI = "http://localhost";
      SAMLAuthCredential = class extends AuthCredential {
        constructor(providerId, pendingToken) {
          super(providerId, providerId);
          this.pendingToken = pendingToken;
        }
        _getIdTokenResponse(auth2) {
          const request = this.buildRequest();
          return signInWithIdp(auth2, request);
        }
        _linkToIdToken(auth2, idToken) {
          const request = this.buildRequest();
          request.idToken = idToken;
          return signInWithIdp(auth2, request);
        }
        _getReauthenticationResolver(auth2) {
          const request = this.buildRequest();
          request.autoCreate = false;
          return signInWithIdp(auth2, request);
        }
        toJSON() {
          return {
            signInMethod: this.signInMethod,
            providerId: this.providerId,
            pendingToken: this.pendingToken
          };
        }
        static fromJSON(json) {
          const obj = typeof json === "string" ? JSON.parse(json) : json;
          const { providerId, signInMethod, pendingToken } = obj;
          if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {
            return null;
          }
          return new SAMLAuthCredential(providerId, pendingToken);
        }
        static _create(providerId, pendingToken) {
          return new SAMLAuthCredential(providerId, pendingToken);
        }
        buildRequest() {
          return {
            requestUri: IDP_REQUEST_URI,
            returnSecureToken: true,
            pendingToken: this.pendingToken
          };
        }
      };
      SAML_PROVIDER_PREFIX = "saml.";
      SAMLAuthProvider = class extends FederatedAuthProvider {
        constructor(providerId) {
          _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error");
          super(providerId);
        }
        static credentialFromResult(userCredential) {
          return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
        }
        static credentialFromError(error) {
          return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
        }
        static credentialFromJSON(json) {
          const credential = SAMLAuthCredential.fromJSON(json);
          _assert(credential, "argument-error");
          return credential;
        }
        static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
            return null;
          }
          const { pendingToken, providerId } = tokenResponse;
          if (!pendingToken || !providerId) {
            return null;
          }
          try {
            return SAMLAuthCredential._create(providerId, pendingToken);
          } catch (e) {
            return null;
          }
        }
      };
      TwitterAuthProvider = class extends BaseOAuthProvider {
        constructor() {
          super("twitter.com");
        }
        static credential(token, secret) {
          return OAuthCredential._fromParams({
            providerId: TwitterAuthProvider.PROVIDER_ID,
            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
            oauthToken: token,
            oauthTokenSecret: secret
          });
        }
        static credentialFromResult(userCredential) {
          return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
        }
        static credentialFromError(error) {
          return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
            return null;
          }
          const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
          if (!oauthAccessToken || !oauthTokenSecret) {
            return null;
          }
          try {
            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
          } catch (_a) {
            return null;
          }
        }
      };
      TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com";
      TwitterAuthProvider.PROVIDER_ID = "twitter.com";
      UserCredentialImpl = class {
        constructor(params) {
          this.user = params.user;
          this.providerId = params.providerId;
          this._tokenResponse = params._tokenResponse;
          this.operationType = params.operationType;
        }
        static async _fromIdTokenResponse(auth2, operationType, idTokenResponse, isAnonymous = false) {
          const user = await UserImpl._fromIdTokenResponse(auth2, idTokenResponse, isAnonymous);
          const providerId = providerIdForResponse(idTokenResponse);
          const userCred = new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: idTokenResponse,
            operationType
          });
          return userCred;
        }
        static async _forOperation(user, operationType, response) {
          await user._updateTokensIfNecessary(response, true);
          const providerId = providerIdForResponse(response);
          return new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: response,
            operationType
          });
        }
      };
      MultiFactorError = class extends FirebaseError {
        constructor(auth2, error, operationType, user) {
          var _a;
          super(error.code, error.message);
          this.operationType = operationType;
          this.user = user;
          Object.setPrototypeOf(this, MultiFactorError.prototype);
          this.customData = {
            appName: auth2.name,
            tenantId: (_a = auth2.tenantId) !== null && _a !== void 0 ? _a : void 0,
            _serverResponse: error.customData._serverResponse,
            operationType
          };
        }
        static _fromErrorAndOperation(auth2, error, operationType, user) {
          return new MultiFactorError(auth2, error, operationType, user);
        }
      };
      MultiFactorInfoImpl = class {
        constructor(factorId, response) {
          this.factorId = factorId;
          this.uid = response.mfaEnrollmentId;
          this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
          this.displayName = response.displayName;
        }
        static _fromServerResponse(auth2, enrollment) {
          if ("phoneInfo" in enrollment) {
            return PhoneMultiFactorInfo._fromServerResponse(auth2, enrollment);
          }
          return _fail(auth2, "internal-error");
        }
      };
      PhoneMultiFactorInfo = class extends MultiFactorInfoImpl {
        constructor(response) {
          super("phone", response);
          this.phoneNumber = response.phoneInfo;
        }
        static _fromServerResponse(_auth, enrollment) {
          return new PhoneMultiFactorInfo(enrollment);
        }
      };
      GenericAdditionalUserInfo = class {
        constructor(isNewUser, providerId, profile = {}) {
          this.isNewUser = isNewUser;
          this.providerId = providerId;
          this.profile = profile;
        }
      };
      FederatedAdditionalUserInfoWithUsername = class extends GenericAdditionalUserInfo {
        constructor(isNewUser, providerId, profile, username) {
          super(isNewUser, providerId, profile);
          this.username = username;
        }
      };
      FacebookAdditionalUserInfo = class extends GenericAdditionalUserInfo {
        constructor(isNewUser, profile) {
          super(isNewUser, "facebook.com", profile);
        }
      };
      GithubAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {
        constructor(isNewUser, profile) {
          super(isNewUser, "github.com", profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === "string" ? profile === null || profile === void 0 ? void 0 : profile.login : null);
        }
      };
      GoogleAdditionalUserInfo = class extends GenericAdditionalUserInfo {
        constructor(isNewUser, profile) {
          super(isNewUser, "google.com", profile);
        }
      };
      TwitterAdditionalUserInfo = class extends FederatedAdditionalUserInfoWithUsername {
        constructor(isNewUser, profile, screenName) {
          super(isNewUser, "twitter.com", profile, screenName);
        }
      };
      MultiFactorSessionImpl = class {
        constructor(type, credential) {
          this.type = type;
          this.credential = credential;
        }
        static _fromIdtoken(idToken) {
          return new MultiFactorSessionImpl("enroll", idToken);
        }
        static _fromMfaPendingCredential(mfaPendingCredential) {
          return new MultiFactorSessionImpl("signin", mfaPendingCredential);
        }
        toJSON() {
          const key = this.type === "enroll" ? "idToken" : "pendingCredential";
          return {
            multiFactorSession: {
              [key]: this.credential
            }
          };
        }
        static fromJSON(obj) {
          var _a, _b;
          if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
              return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
            } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
              return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
            }
          }
          return null;
        }
      };
      MultiFactorResolverImpl = class {
        constructor(session, hints, signInResolver) {
          this.session = session;
          this.hints = hints;
          this.signInResolver = signInResolver;
        }
        static _fromError(authExtern, error) {
          const auth2 = _castAuth(authExtern);
          const serverResponse = error.customData._serverResponse;
          const hints = (serverResponse.mfaInfo || []).map((enrollment) => MultiFactorInfoImpl._fromServerResponse(auth2, enrollment));
          _assert(serverResponse.mfaPendingCredential, auth2, "internal-error");
          const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
          return new MultiFactorResolverImpl(session, hints, async (assertion) => {
            const mfaResponse = await assertion._process(auth2, session);
            delete serverResponse.mfaInfo;
            delete serverResponse.mfaPendingCredential;
            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });
            switch (error.operationType) {
              case "signIn":
                const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth2, error.operationType, idTokenResponse);
                await auth2._updateCurrentUser(userCredential.user);
                return userCredential;
              case "reauthenticate":
                _assert(error.user, auth2, "internal-error");
                return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
              default:
                _fail(auth2, "internal-error");
            }
          });
        }
        async resolveSignIn(assertionExtern) {
          const assertion = assertionExtern;
          return this.signInResolver(assertion);
        }
      };
      MultiFactorUserImpl = class {
        constructor(user) {
          this.user = user;
          this.enrolledFactors = [];
          user._onReload((userInfo) => {
            if (userInfo.mfaInfo) {
              this.enrolledFactors = userInfo.mfaInfo.map((enrollment) => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
            }
          });
        }
        static _fromUser(user) {
          return new MultiFactorUserImpl(user);
        }
        async getSession() {
          return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken());
        }
        async enroll(assertionExtern, displayName) {
          const assertion = assertionExtern;
          const session = await this.getSession();
          const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
          await this.user._updateTokensIfNecessary(finalizeMfaResponse);
          return this.user.reload();
        }
        async unenroll(infoOrUid) {
          const mfaEnrollmentId = typeof infoOrUid === "string" ? infoOrUid : infoOrUid.uid;
          const idToken = await this.user.getIdToken();
          const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
            idToken,
            mfaEnrollmentId
          }));
          this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);
          await this.user._updateTokensIfNecessary(idTokenResponse);
          try {
            await this.user.reload();
          } catch (e) {
            if (e.code !== `auth/${"user-token-expired"}`) {
              throw e;
            }
          }
        }
      };
      multiFactorUserCache = /* @__PURE__ */ new WeakMap();
      STORAGE_AVAILABLE_KEY = "__sak";
      BrowserPersistenceClass = class {
        constructor(storageRetriever, type) {
          this.storageRetriever = storageRetriever;
          this.type = type;
        }
        _isAvailable() {
          try {
            if (!this.storage) {
              return Promise.resolve(false);
            }
            this.storage.setItem(STORAGE_AVAILABLE_KEY, "1");
            this.storage.removeItem(STORAGE_AVAILABLE_KEY);
            return Promise.resolve(true);
          } catch (_a) {
            return Promise.resolve(false);
          }
        }
        _set(key, value) {
          this.storage.setItem(key, JSON.stringify(value));
          return Promise.resolve();
        }
        _get(key) {
          const json = this.storage.getItem(key);
          return Promise.resolve(json ? JSON.parse(json) : null);
        }
        _remove(key) {
          this.storage.removeItem(key);
          return Promise.resolve();
        }
        get storage() {
          return this.storageRetriever();
        }
      };
      _POLLING_INTERVAL_MS$1 = 1e3;
      IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
      BrowserLocalPersistence = class extends BrowserPersistenceClass {
        constructor() {
          super(() => window.localStorage, "LOCAL");
          this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
          this.listeners = {};
          this.localCache = {};
          this.pollTimer = null;
          this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
          this.fallbackToPolling = _isMobileBrowser();
          this._shouldAllowMigration = true;
        }
        forAllChangedKeys(cb) {
          for (const key of Object.keys(this.listeners)) {
            const newValue = this.storage.getItem(key);
            const oldValue = this.localCache[key];
            if (newValue !== oldValue) {
              cb(key, oldValue, newValue);
            }
          }
        }
        onStorageEvent(event, poll = false) {
          if (!event.key) {
            this.forAllChangedKeys((key2, _oldValue, newValue) => {
              this.notifyListeners(key2, newValue);
            });
            return;
          }
          const key = event.key;
          if (poll) {
            this.detachListener();
          } else {
            this.stopPolling();
          }
          if (this.safariLocalStorageNotSynced) {
            const storedValue2 = this.storage.getItem(key);
            if (event.newValue !== storedValue2) {
              if (event.newValue !== null) {
                this.storage.setItem(key, event.newValue);
              } else {
                this.storage.removeItem(key);
              }
            } else if (this.localCache[key] === event.newValue && !poll) {
              return;
            }
          }
          const triggerListeners = () => {
            const storedValue2 = this.storage.getItem(key);
            if (!poll && this.localCache[key] === storedValue2) {
              return;
            }
            this.notifyListeners(key, storedValue2);
          };
          const storedValue = this.storage.getItem(key);
          if (_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) {
            setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
          } else {
            triggerListeners();
          }
        }
        notifyListeners(key, value) {
          this.localCache[key] = value;
          const listeners = this.listeners[key];
          if (listeners) {
            for (const listener of Array.from(listeners)) {
              listener(value ? JSON.parse(value) : value);
            }
          }
        }
        startPolling() {
          this.stopPolling();
          this.pollTimer = setInterval(() => {
            this.forAllChangedKeys((key, oldValue, newValue) => {
              this.onStorageEvent(new StorageEvent("storage", {
                key,
                oldValue,
                newValue
              }), true);
            });
          }, _POLLING_INTERVAL_MS$1);
        }
        stopPolling() {
          if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
          }
        }
        attachListener() {
          window.addEventListener("storage", this.boundEventHandler);
        }
        detachListener() {
          window.removeEventListener("storage", this.boundEventHandler);
        }
        _addListener(key, listener) {
          if (Object.keys(this.listeners).length === 0) {
            if (this.fallbackToPolling) {
              this.startPolling();
            } else {
              this.attachListener();
            }
          }
          if (!this.listeners[key]) {
            this.listeners[key] = /* @__PURE__ */ new Set();
            this.localCache[key] = this.storage.getItem(key);
          }
          this.listeners[key].add(listener);
        }
        _removeListener(key, listener) {
          if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) {
              delete this.listeners[key];
            }
          }
          if (Object.keys(this.listeners).length === 0) {
            this.detachListener();
            this.stopPolling();
          }
        }
        async _set(key, value) {
          await super._set(key, value);
          this.localCache[key] = JSON.stringify(value);
        }
        async _get(key) {
          const value = await super._get(key);
          this.localCache[key] = JSON.stringify(value);
          return value;
        }
        async _remove(key) {
          await super._remove(key);
          delete this.localCache[key];
        }
      };
      BrowserLocalPersistence.type = "LOCAL";
      browserLocalPersistence = BrowserLocalPersistence;
      BrowserSessionPersistence = class extends BrowserPersistenceClass {
        constructor() {
          super(() => window.sessionStorage, "SESSION");
        }
        _addListener(_key, _listener) {
          return;
        }
        _removeListener(_key, _listener) {
          return;
        }
      };
      BrowserSessionPersistence.type = "SESSION";
      browserSessionPersistence = BrowserSessionPersistence;
      Receiver = class {
        constructor(eventTarget) {
          this.eventTarget = eventTarget;
          this.handlersMap = {};
          this.boundEventHandler = this.handleEvent.bind(this);
        }
        static _getInstance(eventTarget) {
          const existingInstance = this.receivers.find((receiver) => receiver.isListeningto(eventTarget));
          if (existingInstance) {
            return existingInstance;
          }
          const newInstance = new Receiver(eventTarget);
          this.receivers.push(newInstance);
          return newInstance;
        }
        isListeningto(eventTarget) {
          return this.eventTarget === eventTarget;
        }
        async handleEvent(event) {
          const messageEvent = event;
          const { eventId, eventType, data } = messageEvent.data;
          const handlers = this.handlersMap[eventType];
          if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
            return;
          }
          messageEvent.ports[0].postMessage({
            status: "ack",
            eventId,
            eventType
          });
          const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
          const response = await _allSettled(promises);
          messageEvent.ports[0].postMessage({
            status: "done",
            eventId,
            eventType,
            response
          });
        }
        _subscribe(eventType, eventHandler) {
          if (Object.keys(this.handlersMap).length === 0) {
            this.eventTarget.addEventListener("message", this.boundEventHandler);
          }
          if (!this.handlersMap[eventType]) {
            this.handlersMap[eventType] = /* @__PURE__ */ new Set();
          }
          this.handlersMap[eventType].add(eventHandler);
        }
        _unsubscribe(eventType, eventHandler) {
          if (this.handlersMap[eventType] && eventHandler) {
            this.handlersMap[eventType].delete(eventHandler);
          }
          if (!eventHandler || this.handlersMap[eventType].size === 0) {
            delete this.handlersMap[eventType];
          }
          if (Object.keys(this.handlersMap).length === 0) {
            this.eventTarget.removeEventListener("message", this.boundEventHandler);
          }
        }
      };
      Receiver.receivers = [];
      Sender = class {
        constructor(target) {
          this.target = target;
          this.handlers = /* @__PURE__ */ new Set();
        }
        removeMessageHandler(handler) {
          if (handler.messageChannel) {
            handler.messageChannel.port1.removeEventListener("message", handler.onMessage);
            handler.messageChannel.port1.close();
          }
          this.handlers.delete(handler);
        }
        async _send(eventType, data, timeout = 50) {
          const messageChannel = typeof MessageChannel !== "undefined" ? new MessageChannel() : null;
          if (!messageChannel) {
            throw new Error("connection_unavailable");
          }
          let completionTimer;
          let handler;
          return new Promise((resolve, reject) => {
            const eventId = _generateEventId("", 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(() => {
              reject(new Error("unsupported_event"));
            }, timeout);
            handler = {
              messageChannel,
              onMessage(event) {
                const messageEvent = event;
                if (messageEvent.data.eventId !== eventId) {
                  return;
                }
                switch (messageEvent.data.status) {
                  case "ack":
                    clearTimeout(ackTimer);
                    completionTimer = setTimeout(() => {
                      reject(new Error("timeout"));
                    }, 3e3);
                    break;
                  case "done":
                    clearTimeout(completionTimer);
                    resolve(messageEvent.data.response);
                    break;
                  default:
                    clearTimeout(ackTimer);
                    clearTimeout(completionTimer);
                    reject(new Error("invalid_response"));
                    break;
                }
              }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener("message", handler.onMessage);
            this.target.postMessage({
              eventType,
              eventId,
              data
            }, [messageChannel.port2]);
          }).finally(() => {
            if (handler) {
              this.removeMessageHandler(handler);
            }
          });
        }
      };
      DB_NAME = "firebaseLocalStorageDb";
      DB_VERSION = 1;
      DB_OBJECTSTORE_NAME = "firebaseLocalStorage";
      DB_DATA_KEYPATH = "fbase_key";
      DBPromise = class {
        constructor(request) {
          this.request = request;
        }
        toPromise() {
          return new Promise((resolve, reject) => {
            this.request.addEventListener("success", () => {
              resolve(this.request.result);
            });
            this.request.addEventListener("error", () => {
              reject(this.request.error);
            });
          });
        }
      };
      _POLLING_INTERVAL_MS = 800;
      _TRANSACTION_RETRY_COUNT = 3;
      IndexedDBLocalPersistence = class {
        constructor() {
          this.type = "LOCAL";
          this._shouldAllowMigration = true;
          this.listeners = {};
          this.localCache = {};
          this.pollTimer = null;
          this.pendingWrites = 0;
          this.receiver = null;
          this.sender = null;
          this.serviceWorkerReceiverAvailable = false;
          this.activeServiceWorker = null;
          this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(() => {
          }, () => {
          });
        }
        async _openDb() {
          if (this.db) {
            return this.db;
          }
          this.db = await _openDatabase();
          return this.db;
        }
        async _withRetries(op) {
          let numAttempts = 0;
          while (true) {
            try {
              const db = await this._openDb();
              return await op(db);
            } catch (e) {
              if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                throw e;
              }
              if (this.db) {
                this.db.close();
                this.db = void 0;
              }
            }
          }
        }
        async initializeServiceWorkerMessaging() {
          return _isWorker() ? this.initializeReceiver() : this.initializeSender();
        }
        async initializeReceiver() {
          this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
          this.receiver._subscribe("keyChanged", async (_origin, data) => {
            const keys = await this._poll();
            return {
              keyProcessed: keys.includes(data.key)
            };
          });
          this.receiver._subscribe("ping", async (_origin, _data) => {
            return ["keyChanged"];
          });
        }
        async initializeSender() {
          var _a, _b;
          this.activeServiceWorker = await _getActiveServiceWorker();
          if (!this.activeServiceWorker) {
            return;
          }
          this.sender = new Sender(this.activeServiceWorker);
          const results = await this.sender._send("ping", {}, 800);
          if (!results) {
            return;
          }
          if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged"))) {
            this.serviceWorkerReceiverAvailable = true;
          }
        }
        async notifyServiceWorker(key) {
          if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) {
            return;
          }
          try {
            await this.sender._send("keyChanged", { key }, this.serviceWorkerReceiverAvailable ? 800 : 50);
          } catch (_a) {
          }
        }
        async _isAvailable() {
          try {
            if (!indexedDB) {
              return false;
            }
            const db = await _openDatabase();
            await _putObject(db, STORAGE_AVAILABLE_KEY, "1");
            await _deleteObject(db, STORAGE_AVAILABLE_KEY);
            return true;
          } catch (_a) {
          }
          return false;
        }
        async _withPendingWrite(write) {
          this.pendingWrites++;
          try {
            await write();
          } finally {
            this.pendingWrites--;
          }
        }
        async _set(key, value) {
          return this._withPendingWrite(async () => {
            await this._withRetries((db) => _putObject(db, key, value));
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
          });
        }
        async _get(key) {
          const obj = await this._withRetries((db) => getObject(db, key));
          this.localCache[key] = obj;
          return obj;
        }
        async _remove(key) {
          return this._withPendingWrite(async () => {
            await this._withRetries((db) => _deleteObject(db, key));
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
          });
        }
        async _poll() {
          const result = await this._withRetries((db) => {
            const getAllRequest = getObjectStore(db, false).getAll();
            return new DBPromise(getAllRequest).toPromise();
          });
          if (!result) {
            return [];
          }
          if (this.pendingWrites !== 0) {
            return [];
          }
          const keys = [];
          const keysInResult = /* @__PURE__ */ new Set();
          for (const { fbase_key: key, value } of result) {
            keysInResult.add(key);
            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
              this.notifyListeners(key, value);
              keys.push(key);
            }
          }
          for (const localKey of Object.keys(this.localCache)) {
            if (this.localCache[localKey] && !keysInResult.has(localKey)) {
              this.notifyListeners(localKey, null);
              keys.push(localKey);
            }
          }
          return keys;
        }
        notifyListeners(key, newValue) {
          this.localCache[key] = newValue;
          const listeners = this.listeners[key];
          if (listeners) {
            for (const listener of Array.from(listeners)) {
              listener(newValue);
            }
          }
        }
        startPolling() {
          this.stopPolling();
          this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
        }
        stopPolling() {
          if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
          }
        }
        _addListener(key, listener) {
          if (Object.keys(this.listeners).length === 0) {
            this.startPolling();
          }
          if (!this.listeners[key]) {
            this.listeners[key] = /* @__PURE__ */ new Set();
            void this._get(key);
          }
          this.listeners[key].add(listener);
        }
        _removeListener(key, listener) {
          if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) {
              delete this.listeners[key];
            }
          }
          if (Object.keys(this.listeners).length === 0) {
            this.stopPolling();
          }
        }
      };
      IndexedDBLocalPersistence.type = "LOCAL";
      indexedDBLocalPersistence = IndexedDBLocalPersistence;
      _SOLVE_TIME_MS = 500;
      _EXPIRATION_TIME_MS = 6e4;
      _WIDGET_ID_START = 1e12;
      MockReCaptcha = class {
        constructor(auth2) {
          this.auth = auth2;
          this.counter = _WIDGET_ID_START;
          this._widgets = /* @__PURE__ */ new Map();
        }
        render(container, parameters) {
          const id = this.counter;
          this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
          this.counter++;
          return id;
        }
        reset(optWidgetId) {
          var _a;
          const id = optWidgetId || _WIDGET_ID_START;
          void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());
          this._widgets.delete(id);
        }
        getResponse(optWidgetId) {
          var _a;
          const id = optWidgetId || _WIDGET_ID_START;
          return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || "";
        }
        async execute(optWidgetId) {
          var _a;
          const id = optWidgetId || _WIDGET_ID_START;
          void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
          return "";
        }
      };
      MockWidget = class {
        constructor(containerOrId, appName, params) {
          this.params = params;
          this.timerId = null;
          this.deleted = false;
          this.responseToken = null;
          this.clickHandler = () => {
            this.execute();
          };
          const container = typeof containerOrId === "string" ? document.getElementById(containerOrId) : containerOrId;
          _assert(container, "argument-error", { appName });
          this.container = container;
          this.isVisible = this.params.size !== "invisible";
          if (this.isVisible) {
            this.execute();
          } else {
            this.container.addEventListener("click", this.clickHandler);
          }
        }
        getResponse() {
          this.checkIfDeleted();
          return this.responseToken;
        }
        delete() {
          this.checkIfDeleted();
          this.deleted = true;
          if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
          }
          this.container.removeEventListener("click", this.clickHandler);
        }
        execute() {
          this.checkIfDeleted();
          if (this.timerId) {
            return;
          }
          this.timerId = window.setTimeout(() => {
            this.responseToken = generateRandomAlphaNumericString(50);
            const { callback, "expired-callback": expiredCallback } = this.params;
            if (callback) {
              try {
                callback(this.responseToken);
              } catch (e) {
              }
            }
            this.timerId = window.setTimeout(() => {
              this.timerId = null;
              this.responseToken = null;
              if (expiredCallback) {
                try {
                  expiredCallback();
                } catch (e) {
                }
              }
              if (this.isVisible) {
                this.execute();
              }
            }, _EXPIRATION_TIME_MS);
          }, _SOLVE_TIME_MS);
        }
        checkIfDeleted() {
          if (this.deleted) {
            throw new Error("reCAPTCHA mock was already deleted!");
          }
        }
      };
      _JSLOAD_CALLBACK = _generateCallbackName("rcb");
      NETWORK_TIMEOUT_DELAY = new Delay(3e4, 6e4);
      RECAPTCHA_BASE = "https://www.google.com/recaptcha/api.js?";
      ReCaptchaLoaderImpl = class {
        constructor() {
          this.hostLanguage = "";
          this.counter = 0;
          this.librarySeparatelyLoaded = !!_window().grecaptcha;
        }
        load(auth2, hl = "") {
          _assert(isHostLanguageValid(hl), auth2, "argument-error");
          if (this.shouldResolveImmediately(hl)) {
            return Promise.resolve(_window().grecaptcha);
          }
          return new Promise((resolve, reject) => {
            const networkTimeout = _window().setTimeout(() => {
              reject(_createError(auth2, "network-request-failed"));
            }, NETWORK_TIMEOUT_DELAY.get());
            _window()[_JSLOAD_CALLBACK] = () => {
              _window().clearTimeout(networkTimeout);
              delete _window()[_JSLOAD_CALLBACK];
              const recaptcha = _window().grecaptcha;
              if (!recaptcha) {
                reject(_createError(auth2, "internal-error"));
                return;
              }
              const render = recaptcha.render;
              recaptcha.render = (container, params) => {
                const widgetId = render(container, params);
                this.counter++;
                return widgetId;
              };
              this.hostLanguage = hl;
              resolve(recaptcha);
            };
            const url = `${RECAPTCHA_BASE}?${querystring({
              onload: _JSLOAD_CALLBACK,
              render: "explicit",
              hl
            })}`;
            _loadJS(url).catch(() => {
              clearTimeout(networkTimeout);
              reject(_createError(auth2, "internal-error"));
            });
          });
        }
        clearedOneInstance() {
          this.counter--;
        }
        shouldResolveImmediately(hl) {
          return !!_window().grecaptcha && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
        }
      };
      MockReCaptchaLoaderImpl = class {
        async load(auth2) {
          return new MockReCaptcha(auth2);
        }
        clearedOneInstance() {
        }
      };
      RECAPTCHA_VERIFIER_TYPE = "recaptcha";
      DEFAULT_PARAMS = {
        theme: "light",
        type: "image"
      };
      RecaptchaVerifier = class {
        constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {
          this.parameters = parameters;
          this.type = RECAPTCHA_VERIFIER_TYPE;
          this.destroyed = false;
          this.widgetId = null;
          this.tokenChangeListeners = /* @__PURE__ */ new Set();
          this.renderPromise = null;
          this.recaptcha = null;
          this.auth = _castAuth(authExtern);
          this.isInvisible = this.parameters.size === "invisible";
          _assert(typeof document !== "undefined", this.auth, "operation-not-supported-in-this-environment");
          const container = typeof containerOrId === "string" ? document.getElementById(containerOrId) : containerOrId;
          _assert(container, this.auth, "argument-error");
          this.container = container;
          this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
          this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();
          this.validateStartingState();
        }
        async verify() {
          this.assertNotDestroyed();
          const id = await this.render();
          const recaptcha = this.getAssertedRecaptcha();
          const response = recaptcha.getResponse(id);
          if (response) {
            return response;
          }
          return new Promise((resolve) => {
            const tokenChange = (token) => {
              if (!token) {
                return;
              }
              this.tokenChangeListeners.delete(tokenChange);
              resolve(token);
            };
            this.tokenChangeListeners.add(tokenChange);
            if (this.isInvisible) {
              recaptcha.execute(id);
            }
          });
        }
        render() {
          try {
            this.assertNotDestroyed();
          } catch (e) {
            return Promise.reject(e);
          }
          if (this.renderPromise) {
            return this.renderPromise;
          }
          this.renderPromise = this.makeRenderPromise().catch((e) => {
            this.renderPromise = null;
            throw e;
          });
          return this.renderPromise;
        }
        _reset() {
          this.assertNotDestroyed();
          if (this.widgetId !== null) {
            this.getAssertedRecaptcha().reset(this.widgetId);
          }
        }
        clear() {
          this.assertNotDestroyed();
          this.destroyed = true;
          this._recaptchaLoader.clearedOneInstance();
          if (!this.isInvisible) {
            this.container.childNodes.forEach((node) => {
              this.container.removeChild(node);
            });
          }
        }
        validateStartingState() {
          _assert(!this.parameters.sitekey, this.auth, "argument-error");
          _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error");
          _assert(typeof document !== "undefined", this.auth, "operation-not-supported-in-this-environment");
        }
        makeTokenCallback(existing) {
          return (token) => {
            this.tokenChangeListeners.forEach((listener) => listener(token));
            if (typeof existing === "function") {
              existing(token);
            } else if (typeof existing === "string") {
              const globalFunc = _window()[existing];
              if (typeof globalFunc === "function") {
                globalFunc(token);
              }
            }
          };
        }
        assertNotDestroyed() {
          _assert(!this.destroyed, this.auth, "internal-error");
        }
        async makeRenderPromise() {
          await this.init();
          if (!this.widgetId) {
            let container = this.container;
            if (!this.isInvisible) {
              const guaranteedEmpty = document.createElement("div");
              container.appendChild(guaranteedEmpty);
              container = guaranteedEmpty;
            }
            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
          }
          return this.widgetId;
        }
        async init() {
          _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error");
          await domReady();
          this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || void 0);
          const siteKey = await getRecaptchaParams(this.auth);
          _assert(siteKey, this.auth, "internal-error");
          this.parameters.sitekey = siteKey;
        }
        getAssertedRecaptcha() {
          _assert(this.recaptcha, this.auth, "internal-error");
          return this.recaptcha;
        }
      };
      ConfirmationResultImpl = class {
        constructor(verificationId, onConfirmation) {
          this.verificationId = verificationId;
          this.onConfirmation = onConfirmation;
        }
        confirm(verificationCode) {
          const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
          return this.onConfirmation(authCredential);
        }
      };
      PhoneAuthProvider = class {
        constructor(auth2) {
          this.providerId = PhoneAuthProvider.PROVIDER_ID;
          this.auth = _castAuth(auth2);
        }
        verifyPhoneNumber(phoneOptions, applicationVerifier) {
          return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));
        }
        static credential(verificationId, verificationCode) {
          return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
        }
        static credentialFromResult(userCredential) {
          const credential = userCredential;
          return PhoneAuthProvider.credentialFromTaggedObject(credential);
        }
        static credentialFromError(error) {
          return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
          if (!tokenResponse) {
            return null;
          }
          const { phoneNumber, temporaryProof } = tokenResponse;
          if (phoneNumber && temporaryProof) {
            return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
          }
          return null;
        }
      };
      PhoneAuthProvider.PROVIDER_ID = "phone";
      PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone";
      IdpCredential = class extends AuthCredential {
        constructor(params) {
          super("custom", "custom");
          this.params = params;
        }
        _getIdTokenResponse(auth2) {
          return signInWithIdp(auth2, this._buildIdpRequest());
        }
        _linkToIdToken(auth2, idToken) {
          return signInWithIdp(auth2, this._buildIdpRequest(idToken));
        }
        _getReauthenticationResolver(auth2) {
          return signInWithIdp(auth2, this._buildIdpRequest());
        }
        _buildIdpRequest(idToken) {
          const request = {
            requestUri: this.params.requestUri,
            sessionId: this.params.sessionId,
            postBody: this.params.postBody,
            tenantId: this.params.tenantId,
            pendingToken: this.params.pendingToken,
            returnSecureToken: true,
            returnIdpCredential: true
          };
          if (idToken) {
            request.idToken = idToken;
          }
          return request;
        }
      };
      AbstractPopupRedirectOperation = class {
        constructor(auth2, filter, resolver, user, bypassAuthState = false) {
          this.auth = auth2;
          this.resolver = resolver;
          this.user = user;
          this.bypassAuthState = bypassAuthState;
          this.pendingPromise = null;
          this.eventManager = null;
          this.filter = Array.isArray(filter) ? filter : [filter];
        }
        execute() {
          return new Promise(async (resolve, reject) => {
            this.pendingPromise = { resolve, reject };
            try {
              this.eventManager = await this.resolver._initialize(this.auth);
              await this.onExecution();
              this.eventManager.registerConsumer(this);
            } catch (e) {
              this.reject(e);
            }
          });
        }
        async onAuthEvent(event) {
          const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
          if (error) {
            this.reject(error);
            return;
          }
          const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId,
            tenantId: tenantId || void 0,
            postBody: postBody || void 0,
            user: this.user,
            bypassAuthState: this.bypassAuthState
          };
          try {
            this.resolve(await this.getIdpTask(type)(params));
          } catch (e) {
            this.reject(e);
          }
        }
        onError(error) {
          this.reject(error);
        }
        getIdpTask(type) {
          switch (type) {
            case "signInViaPopup":
            case "signInViaRedirect":
              return _signIn;
            case "linkViaPopup":
            case "linkViaRedirect":
              return _link;
            case "reauthViaPopup":
            case "reauthViaRedirect":
              return _reauth;
            default:
              _fail(this.auth, "internal-error");
          }
        }
        resolve(cred) {
          debugAssert(this.pendingPromise, "Pending promise was never set");
          this.pendingPromise.resolve(cred);
          this.unregisterAndCleanUp();
        }
        reject(error) {
          debugAssert(this.pendingPromise, "Pending promise was never set");
          this.pendingPromise.reject(error);
          this.unregisterAndCleanUp();
        }
        unregisterAndCleanUp() {
          if (this.eventManager) {
            this.eventManager.unregisterConsumer(this);
          }
          this.pendingPromise = null;
          this.cleanUp();
        }
      };
      _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2e3, 1e4);
      PopupOperation = class extends AbstractPopupRedirectOperation {
        constructor(auth2, filter, provider, resolver, user) {
          super(auth2, filter, resolver, user);
          this.provider = provider;
          this.authWindow = null;
          this.pollId = null;
          if (PopupOperation.currentPopupAction) {
            PopupOperation.currentPopupAction.cancel();
          }
          PopupOperation.currentPopupAction = this;
        }
        async executeNotNull() {
          const result = await this.execute();
          _assert(result, this.auth, "internal-error");
          return result;
        }
        async onExecution() {
          debugAssert(this.filter.length === 1, "Popup operations only handle one event");
          const eventId = _generateEventId();
          this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], eventId);
          this.authWindow.associatedEvent = eventId;
          this.resolver._originValidation(this.auth).catch((e) => {
            this.reject(e);
          });
          this.resolver._isIframeWebStorageSupported(this.auth, (isSupported) => {
            if (!isSupported) {
              this.reject(_createError(this.auth, "web-storage-unsupported"));
            }
          });
          this.pollUserCancellation();
        }
        get eventId() {
          var _a;
          return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
        }
        cancel() {
          this.reject(_createError(this.auth, "cancelled-popup-request"));
        }
        cleanUp() {
          if (this.authWindow) {
            this.authWindow.close();
          }
          if (this.pollId) {
            window.clearTimeout(this.pollId);
          }
          this.authWindow = null;
          this.pollId = null;
          PopupOperation.currentPopupAction = null;
        }
        pollUserCancellation() {
          const poll = () => {
            var _a, _b;
            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
              this.pollId = window.setTimeout(() => {
                this.pollId = null;
                this.reject(_createError(this.auth, "popup-closed-by-user"));
              }, 2e3);
              return;
            }
            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
          };
          poll();
        }
      };
      PopupOperation.currentPopupAction = null;
      PENDING_REDIRECT_KEY = "pendingRedirect";
      redirectOutcomeMap = /* @__PURE__ */ new Map();
      RedirectAction = class extends AbstractPopupRedirectOperation {
        constructor(auth2, resolver, bypassAuthState = false) {
          super(auth2, [
            "signInViaRedirect",
            "linkViaRedirect",
            "reauthViaRedirect",
            "unknown"
          ], resolver, void 0, bypassAuthState);
          this.eventId = null;
        }
        async execute() {
          let readyOutcome = redirectOutcomeMap.get(this.auth._key());
          if (!readyOutcome) {
            try {
              const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
              const result = hasPendingRedirect ? await super.execute() : null;
              readyOutcome = () => Promise.resolve(result);
            } catch (e) {
              readyOutcome = () => Promise.reject(e);
            }
            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
          }
          if (!this.bypassAuthState) {
            redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
          }
          return readyOutcome();
        }
        async onAuthEvent(event) {
          if (event.type === "signInViaRedirect") {
            return super.onAuthEvent(event);
          } else if (event.type === "unknown") {
            this.resolve(null);
            return;
          }
          if (event.eventId) {
            const user = await this.auth._redirectUserForId(event.eventId);
            if (user) {
              this.user = user;
              return super.onAuthEvent(event);
            } else {
              this.resolve(null);
            }
          }
        }
        async onExecution() {
        }
        cleanUp() {
        }
      };
      EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1e3;
      AuthEventManager = class {
        constructor(auth2) {
          this.auth = auth2;
          this.cachedEventUids = /* @__PURE__ */ new Set();
          this.consumers = /* @__PURE__ */ new Set();
          this.queuedRedirectEvent = null;
          this.hasHandledPotentialRedirect = false;
          this.lastProcessedEventTime = Date.now();
        }
        registerConsumer(authEventConsumer) {
          this.consumers.add(authEventConsumer);
          if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
            this.saveEventToCache(this.queuedRedirectEvent);
            this.queuedRedirectEvent = null;
          }
        }
        unregisterConsumer(authEventConsumer) {
          this.consumers.delete(authEventConsumer);
        }
        onEvent(event) {
          if (this.hasEventBeenHandled(event)) {
            return false;
          }
          let handled = false;
          this.consumers.forEach((consumer) => {
            if (this.isEventForConsumer(event, consumer)) {
              handled = true;
              this.sendToConsumer(event, consumer);
              this.saveEventToCache(event);
            }
          });
          if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
            return handled;
          }
          this.hasHandledPotentialRedirect = true;
          if (!handled) {
            this.queuedRedirectEvent = event;
            handled = true;
          }
          return handled;
        }
        sendToConsumer(event, consumer) {
          var _a;
          if (event.error && !isNullRedirectEvent(event)) {
            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split("auth/")[1]) || "internal-error";
            consumer.onError(_createError(this.auth, code));
          } else {
            consumer.onAuthEvent(event);
          }
        }
        isEventForConsumer(event, consumer) {
          const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
          return consumer.filter.includes(event.type) && eventIdMatches;
        }
        hasEventBeenHandled(event) {
          if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) {
            this.cachedEventUids.clear();
          }
          return this.cachedEventUids.has(eventUid(event));
        }
        saveEventToCache(event) {
          this.cachedEventUids.add(eventUid(event));
          this.lastProcessedEventTime = Date.now();
        }
      };
      IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
      HTTP_REGEX = /^https?/;
      NETWORK_TIMEOUT = new Delay(3e4, 6e4);
      cachedGApiLoader = null;
      PING_TIMEOUT = new Delay(5e3, 15e3);
      IFRAME_PATH = "__/auth/iframe";
      EMULATED_IFRAME_PATH = "emulator/auth/iframe";
      IFRAME_ATTRIBUTES = {
        style: {
          position: "absolute",
          top: "-100px",
          width: "1px",
          height: "1px"
        },
        "aria-hidden": "true",
        tabindex: "-1"
      };
      EID_FROM_APIHOST = /* @__PURE__ */ new Map([
        ["identitytoolkit.googleapis.com", "p"],
        ["staging-identitytoolkit.sandbox.googleapis.com", "s"],
        ["test-identitytoolkit.sandbox.googleapis.com", "t"]
      ]);
      BASE_POPUP_OPTIONS = {
        location: "yes",
        resizable: "yes",
        statusbar: "yes",
        toolbar: "no"
      };
      DEFAULT_WIDTH = 500;
      DEFAULT_HEIGHT = 600;
      TARGET_BLANK = "_blank";
      FIREFOX_EMPTY_URL = "http://localhost";
      AuthPopup = class {
        constructor(window2) {
          this.window = window2;
          this.associatedEvent = null;
        }
        close() {
          if (this.window) {
            try {
              this.window.close();
            } catch (e) {
            }
          }
        }
      };
      WIDGET_PATH = "__/auth/handler";
      EMULATOR_WIDGET_PATH = "emulator/auth/handler";
      WEB_STORAGE_SUPPORT_KEY = "webStorageSupport";
      BrowserPopupRedirectResolver = class {
        constructor() {
          this.eventManagers = {};
          this.iframes = {};
          this.originValidationPromises = {};
          this._redirectPersistence = browserSessionPersistence;
          this._completeRedirectFn = _getRedirectResult;
        }
        async _openPopup(auth2, provider, authType, eventId) {
          var _a;
          debugAssert((_a = this.eventManagers[auth2._key()]) === null || _a === void 0 ? void 0 : _a.manager, "_initialize() not called before _openPopup()");
          const url = _getRedirectUrl(auth2, provider, authType, _getCurrentUrl(), eventId);
          return _open(auth2, url, _generateEventId());
        }
        async _openRedirect(auth2, provider, authType, eventId) {
          await this._originValidation(auth2);
          _setWindowLocation(_getRedirectUrl(auth2, provider, authType, _getCurrentUrl(), eventId));
          return new Promise(() => {
          });
        }
        _initialize(auth2) {
          const key = auth2._key();
          if (this.eventManagers[key]) {
            const { manager, promise: promise2 } = this.eventManagers[key];
            if (manager) {
              return Promise.resolve(manager);
            } else {
              debugAssert(promise2, "If manager is not set, promise should be");
              return promise2;
            }
          }
          const promise = this.initAndGetManager(auth2);
          this.eventManagers[key] = { promise };
          promise.catch(() => {
            delete this.eventManagers[key];
          });
          return promise;
        }
        async initAndGetManager(auth2) {
          const iframe = await _openIframe(auth2);
          const manager = new AuthEventManager(auth2);
          iframe.register("authEvent", (iframeEvent) => {
            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth2, "invalid-auth-event");
            const handled = manager.onEvent(iframeEvent.authEvent);
            return { status: handled ? "ACK" : "ERROR" };
          }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
          this.eventManagers[auth2._key()] = { manager };
          this.iframes[auth2._key()] = iframe;
          return manager;
        }
        _isIframeWebStorageSupported(auth2, cb) {
          const iframe = this.iframes[auth2._key()];
          iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, (result) => {
            var _a;
            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
            if (isSupported !== void 0) {
              cb(!!isSupported);
            }
            _fail(auth2, "internal-error");
          }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        }
        _originValidation(auth2) {
          const key = auth2._key();
          if (!this.originValidationPromises[key]) {
            this.originValidationPromises[key] = _validateOrigin(auth2);
          }
          return this.originValidationPromises[key];
        }
        get _shouldInitProactively() {
          return _isMobileBrowser() || _isSafari() || _isIOS();
        }
      };
      browserPopupRedirectResolver = BrowserPopupRedirectResolver;
      MultiFactorAssertionImpl = class {
        constructor(factorId) {
          this.factorId = factorId;
        }
        _process(auth2, session, displayName) {
          switch (session.type) {
            case "enroll":
              return this._finalizeEnroll(auth2, session.credential, displayName);
            case "signin":
              return this._finalizeSignIn(auth2, session.credential);
            default:
              return debugFail("unexpected MultiFactorSessionType");
          }
        }
      };
      PhoneMultiFactorAssertionImpl = class extends MultiFactorAssertionImpl {
        constructor(credential) {
          super("phone");
          this.credential = credential;
        }
        static _fromCredential(credential) {
          return new PhoneMultiFactorAssertionImpl(credential);
        }
        _finalizeEnroll(auth2, idToken, displayName) {
          return finalizeEnrollPhoneMfa(auth2, {
            idToken,
            displayName,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
          });
        }
        _finalizeSignIn(auth2, mfaPendingCredential) {
          return finalizeSignInPhoneMfa(auth2, {
            mfaPendingCredential,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
          });
        }
      };
      PhoneMultiFactorGenerator = class {
        constructor() {
        }
        static assertion(credential) {
          return PhoneMultiFactorAssertionImpl._fromCredential(credential);
        }
      };
      PhoneMultiFactorGenerator.FACTOR_ID = "phone";
      name3 = "@firebase/auth";
      version3 = "0.19.5";
      AuthInterop = class {
        constructor(auth2) {
          this.auth = auth2;
          this.internalListeners = /* @__PURE__ */ new Map();
        }
        getUid() {
          var _a;
          this.assertAuthConfigured();
          return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
        }
        async getToken(forceRefresh) {
          this.assertAuthConfigured();
          await this.auth._initializationPromise;
          if (!this.auth.currentUser) {
            return null;
          }
          const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
          return { accessToken };
        }
        addAuthTokenListener(listener) {
          this.assertAuthConfigured();
          if (this.internalListeners.has(listener)) {
            return;
          }
          const unsubscribe = this.auth.onIdTokenChanged((user) => {
            var _a;
            listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
          });
          this.internalListeners.set(listener, unsubscribe);
          this.updateProactiveRefresh();
        }
        removeAuthTokenListener(listener) {
          this.assertAuthConfigured();
          const unsubscribe = this.internalListeners.get(listener);
          if (!unsubscribe) {
            return;
          }
          this.internalListeners.delete(listener);
          unsubscribe();
          this.updateProactiveRefresh();
        }
        assertAuthConfigured() {
          _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth");
        }
        updateProactiveRefresh() {
          if (this.internalListeners.size > 0) {
            this.auth._startProactiveRefresh();
          } else {
            this.auth._stopProactiveRefresh();
          }
        }
      };
      registerAuth("Browser");
    }
  });

  // node_modules/@firebase/app-compat/dist/esm/index.esm2017.js
  function createFirebaseNamespaceCore(firebaseAppImpl) {
    const apps = {};
    const namespace = {
      __esModule: true,
      initializeApp: initializeAppCompat,
      app: app2,
      registerVersion,
      setLogLevel: setLogLevel2,
      onLog,
      apps: null,
      SDK_VERSION,
      INTERNAL: {
        registerComponent: registerComponentCompat,
        removeApp,
        useAsService,
        modularAPIs: index_esm2017_exports
      }
    };
    namespace["default"] = namespace;
    Object.defineProperty(namespace, "apps", {
      get: getApps2
    });
    function removeApp(name7) {
      delete apps[name7];
    }
    function app2(name7) {
      name7 = name7 || DEFAULT_ENTRY_NAME2;
      if (!contains(apps, name7)) {
        throw ERROR_FACTORY2.create("no-app", { appName: name7 });
      }
      return apps[name7];
    }
    app2["App"] = firebaseAppImpl;
    function initializeAppCompat(options, rawConfig = {}) {
      const app3 = initializeApp(options, rawConfig);
      if (contains(apps, app3.name)) {
        return apps[app3.name];
      }
      const appCompat = new firebaseAppImpl(app3, namespace);
      apps[app3.name] = appCompat;
      return appCompat;
    }
    function getApps2() {
      return Object.keys(apps).map((name7) => apps[name7]);
    }
    function registerComponentCompat(component) {
      const componentName = component.name;
      const componentNameWithoutCompat = componentName.replace("-compat", "");
      if (_registerComponent(component) && component.type === "PUBLIC") {
        const serviceNamespace = (appArg = app2()) => {
          if (typeof appArg[componentNameWithoutCompat] !== "function") {
            throw ERROR_FACTORY2.create("invalid-app-argument", {
              appName: componentName
            });
          }
          return appArg[componentNameWithoutCompat]();
        };
        if (component.serviceProps !== void 0) {
          deepExtend(serviceNamespace, component.serviceProps);
        }
        namespace[componentNameWithoutCompat] = serviceNamespace;
        firebaseAppImpl.prototype[componentNameWithoutCompat] = function(...args) {
          const serviceFxn = this._getService.bind(this, componentName);
          return serviceFxn.apply(this, component.multipleInstances ? args : []);
        };
      }
      return component.type === "PUBLIC" ? namespace[componentNameWithoutCompat] : null;
    }
    function useAsService(app3, name7) {
      if (name7 === "serverAuth") {
        return null;
      }
      const useService = name7;
      return useService;
    }
    return namespace;
  }
  function createFirebaseNamespace() {
    const namespace = createFirebaseNamespaceCore(FirebaseAppImpl2);
    namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), {
      createFirebaseNamespace,
      extendNamespace,
      createSubscribe,
      ErrorFactory,
      deepExtend
    });
    function extendNamespace(props) {
      deepExtend(namespace, props);
    }
    return namespace;
  }
  function registerCoreComponents2(variant) {
    registerVersion(name4, version4, variant);
  }
  var FirebaseAppImpl2, ERRORS2, ERROR_FACTORY2, firebase$1, logger2, name4, version4, firebase;
  var init_index_esm20175 = __esm({
    "node_modules/@firebase/app-compat/dist/esm/index.esm2017.js"() {
      init_index_esm2017();
      init_index_esm20172();
      init_index_esm20174();
      init_index_esm20174();
      init_index_esm20173();
      FirebaseAppImpl2 = class {
        constructor(_delegate, firebase2) {
          this._delegate = _delegate;
          this.firebase = firebase2;
          _addComponent(_delegate, new Component("app-compat", () => this, "PUBLIC"));
          this.container = _delegate.container;
        }
        get automaticDataCollectionEnabled() {
          return this._delegate.automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(val) {
          this._delegate.automaticDataCollectionEnabled = val;
        }
        get name() {
          return this._delegate.name;
        }
        get options() {
          return this._delegate.options;
        }
        delete() {
          return new Promise((resolve) => {
            this._delegate.checkDestroyed();
            resolve();
          }).then(() => {
            this.firebase.INTERNAL.removeApp(this.name);
            return deleteApp(this._delegate);
          });
        }
        _getService(name7, instanceIdentifier = DEFAULT_ENTRY_NAME2) {
          var _a;
          this._delegate.checkDestroyed();
          const provider = this._delegate.container.getProvider(name7);
          if (!provider.isInitialized() && ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === "EXPLICIT") {
            provider.initialize();
          }
          return provider.getImmediate({
            identifier: instanceIdentifier
          });
        }
        _removeServiceInstance(name7, instanceIdentifier = DEFAULT_ENTRY_NAME2) {
          this._delegate.container.getProvider(name7).clearInstance(instanceIdentifier);
        }
        _addComponent(component) {
          _addComponent(this._delegate, component);
        }
        _addOrOverwriteComponent(component) {
          _addOrOverwriteComponent(this._delegate, component);
        }
        toJSON() {
          return {
            name: this.name,
            automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
            options: this.options
          };
        }
      };
      ERRORS2 = {
        ["no-app"]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
        ["invalid-app-argument"]: "firebase.{$appName}() takes either no argument or a Firebase App instance."
      };
      ERROR_FACTORY2 = new ErrorFactory("app-compat", "Firebase", ERRORS2);
      firebase$1 = createFirebaseNamespace();
      logger2 = new Logger("@firebase/app-compat");
      name4 = "@firebase/app-compat";
      version4 = "0.1.14";
      if (isBrowser() && self.firebase !== void 0) {
        logger2.warn(`
    Warning: Firebase is already defined in the global scope. Please make sure
    Firebase library is only loaded once.
  `);
        const sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf("LITE") >= 0) {
          logger2.warn(`
    Warning: You are trying to load Firebase while using Firebase Performance standalone script.
    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.
    `);
        }
      }
      firebase = firebase$1;
      registerCoreComponents2();
    }
  });

  // node_modules/firebase/compat/app/dist/index.esm.js
  var index_esm_exports = {};
  __export(index_esm_exports, {
    default: () => firebase
  });
  var name5, version5;
  var init_index_esm = __esm({
    "node_modules/firebase/compat/app/dist/index.esm.js"() {
      init_index_esm20175();
      init_index_esm20175();
      name5 = "firebase";
      version5 = "9.6.3";
      firebase.registerVersion(name5, version5, "app-compat");
    }
  });

  // node_modules/@firebase/auth/dist/esm2017/internal.js
  function _cordovaWindow() {
    return window;
  }
  async function _generateHandlerUrl(auth2, event, provider) {
    var _a;
    const { BuildInfo } = _cordovaWindow();
    debugAssert(event.sessionId, "AuthEvent did not contain a session ID");
    const sessionDigest = await computeSha256(event.sessionId);
    const additionalParams = {};
    if (_isIOS()) {
      additionalParams["ibi"] = BuildInfo.packageName;
    } else if (_isAndroid()) {
      additionalParams["apn"] = BuildInfo.packageName;
    } else {
      _fail(auth2, "operation-not-supported-in-this-environment");
    }
    if (BuildInfo.displayName) {
      additionalParams["appDisplayName"] = BuildInfo.displayName;
    }
    additionalParams["sessionId"] = sessionDigest;
    return _getRedirectUrl(auth2, provider, event.type, void 0, (_a = event.eventId) !== null && _a !== void 0 ? _a : void 0, additionalParams);
  }
  async function _validateOrigin2(auth2) {
    const { BuildInfo } = _cordovaWindow();
    const request = {};
    if (_isIOS()) {
      request.iosBundleId = BuildInfo.packageName;
    } else if (_isAndroid()) {
      request.androidPackageName = BuildInfo.packageName;
    } else {
      _fail(auth2, "operation-not-supported-in-this-environment");
    }
    await _getProjectConfig(auth2, request);
  }
  function _performRedirect(handlerUrl) {
    const { cordova } = _cordovaWindow();
    return new Promise((resolve) => {
      cordova.plugins.browsertab.isAvailable((browserTabIsAvailable) => {
        let iabRef = null;
        if (browserTabIsAvailable) {
          cordova.plugins.browsertab.openUrl(handlerUrl);
        } else {
          iabRef = cordova.InAppBrowser.open(handlerUrl, _isIOS7Or8() ? "_blank" : "_system", "location=yes");
        }
        resolve(iabRef);
      });
    });
  }
  async function _waitForAppResume(auth2, eventListener, iabRef) {
    const { cordova } = _cordovaWindow();
    let cleanup = () => {
    };
    try {
      await new Promise((resolve, reject) => {
        let onCloseTimer = null;
        function authEventSeen() {
          var _a;
          resolve();
          const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;
          if (typeof closeBrowserTab === "function") {
            closeBrowserTab();
          }
          if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === "function") {
            iabRef.close();
          }
        }
        function resumed() {
          if (onCloseTimer) {
            return;
          }
          onCloseTimer = window.setTimeout(() => {
            reject(_createError(auth2, "redirect-cancelled-by-user"));
          }, REDIRECT_TIMEOUT_MS);
        }
        function visibilityChanged() {
          if ((document === null || document === void 0 ? void 0 : document.visibilityState) === "visible") {
            resumed();
          }
        }
        eventListener.addPassiveListener(authEventSeen);
        document.addEventListener("resume", resumed, false);
        if (_isAndroid()) {
          document.addEventListener("visibilitychange", visibilityChanged, false);
        }
        cleanup = () => {
          eventListener.removePassiveListener(authEventSeen);
          document.removeEventListener("resume", resumed, false);
          document.removeEventListener("visibilitychange", visibilityChanged, false);
          if (onCloseTimer) {
            window.clearTimeout(onCloseTimer);
          }
        };
      });
    } finally {
      cleanup();
    }
  }
  function _checkCordovaConfiguration(auth2) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const win = _cordovaWindow();
    _assert(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === "function", auth2, "invalid-cordova-configuration", {
      missingPlugin: "cordova-universal-links-plugin-fix"
    });
    _assert(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== "undefined", auth2, "invalid-cordova-configuration", {
      missingPlugin: "cordova-plugin-buildInfo"
    });
    _assert(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === "function", auth2, "invalid-cordova-configuration", {
      missingPlugin: "cordova-plugin-browsertab"
    });
    _assert(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === "function", auth2, "invalid-cordova-configuration", {
      missingPlugin: "cordova-plugin-browsertab"
    });
    _assert(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === "function", auth2, "invalid-cordova-configuration", {
      missingPlugin: "cordova-plugin-inappbrowser"
    });
  }
  async function computeSha256(sessionId) {
    const bytes = stringToArrayBuffer(sessionId);
    const buf = await crypto.subtle.digest("SHA-256", bytes);
    const arr = Array.from(new Uint8Array(buf));
    return arr.map((num) => num.toString(16).padStart(2, "0")).join("");
  }
  function stringToArrayBuffer(str) {
    debugAssert(/[0-9a-zA-Z]+/.test(str), "Can only convert alpha-numeric strings");
    if (typeof TextEncoder !== "undefined") {
      return new TextEncoder().encode(str);
    }
    const buff = new ArrayBuffer(str.length);
    const view = new Uint8Array(buff);
    for (let i = 0; i < str.length; i++) {
      view[i] = str.charCodeAt(i);
    }
    return view;
  }
  function _generateNewEvent(auth2, type, eventId = null) {
    return {
      type,
      eventId,
      urlResponse: null,
      sessionId: generateSessionId(),
      postBody: null,
      tenantId: auth2.tenantId,
      error: _createError(auth2, "no-auth-event")
    };
  }
  function _savePartialEvent(auth2, event) {
    return storage()._set(persistenceKey(auth2), event);
  }
  async function _getAndRemoveEvent(auth2) {
    const event = await storage()._get(persistenceKey(auth2));
    if (event) {
      await storage()._remove(persistenceKey(auth2));
    }
    return event;
  }
  function _eventFromPartialAndUrl(partialEvent, url) {
    var _a, _b;
    const callbackUrl = _getDeepLinkFromCallback(url);
    if (callbackUrl.includes("/__/auth/callback")) {
      const params = searchParamsOrEmpty(callbackUrl);
      const errorObject = params["firebaseError"] ? parseJsonOrNull(decodeURIComponent(params["firebaseError"])) : null;
      const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject["code"]) === null || _a === void 0 ? void 0 : _a.split("auth/")) === null || _b === void 0 ? void 0 : _b[1];
      const error = code ? _createError(code) : null;
      if (error) {
        return {
          type: partialEvent.type,
          eventId: partialEvent.eventId,
          tenantId: partialEvent.tenantId,
          error,
          urlResponse: null,
          sessionId: null,
          postBody: null
        };
      } else {
        return {
          type: partialEvent.type,
          eventId: partialEvent.eventId,
          tenantId: partialEvent.tenantId,
          sessionId: partialEvent.sessionId,
          urlResponse: callbackUrl,
          postBody: null
        };
      }
    }
    return null;
  }
  function generateSessionId() {
    const chars = [];
    const allowedChars = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (let i = 0; i < SESSION_ID_LENGTH; i++) {
      const idx = Math.floor(Math.random() * allowedChars.length);
      chars.push(allowedChars.charAt(idx));
    }
    return chars.join("");
  }
  function storage() {
    return _getInstance(browserLocalPersistence);
  }
  function persistenceKey(auth2) {
    return _persistenceKeyName("authEvent", auth2.config.apiKey, auth2.name);
  }
  function parseJsonOrNull(json) {
    try {
      return JSON.parse(json);
    } catch (e) {
      return null;
    }
  }
  function _getDeepLinkFromCallback(url) {
    const params = searchParamsOrEmpty(url);
    const link = params["link"] ? decodeURIComponent(params["link"]) : void 0;
    const doubleDeepLink = searchParamsOrEmpty(link)["link"];
    const iOSDeepLink = params["deep_link_id"] ? decodeURIComponent(params["deep_link_id"]) : void 0;
    const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)["link"];
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
  }
  function searchParamsOrEmpty(url) {
    if (!(url === null || url === void 0 ? void 0 : url.includes("?"))) {
      return {};
    }
    const [_, ...rest] = url.split("?");
    return querystringDecode(rest.join("?"));
  }
  function generateNoEvent() {
    return {
      type: "unknown",
      eventId: null,
      sessionId: null,
      urlResponse: null,
      postBody: null,
      tenantId: null,
      error: _createError("no-auth-event")
    };
  }
  function addFrameworkForLogging(auth2, framework) {
    _castAuth(auth2)._logFramework(framework);
  }
  var REDIRECT_TIMEOUT_MS, SESSION_ID_LENGTH, CordovaAuthEventManager, INITIAL_EVENT_TIMEOUT_MS, CordovaPopupRedirectResolver, cordovaPopupRedirectResolver;
  var init_internal = __esm({
    "node_modules/@firebase/auth/dist/esm2017/internal.js"() {
      init_index_1679a2b2();
      init_index_1679a2b2();
      init_index_esm2017();
      init_index_esm20174();
      init_modules();
      init_index_esm20173();
      init_index_esm20172();
      REDIRECT_TIMEOUT_MS = 2e3;
      SESSION_ID_LENGTH = 20;
      CordovaAuthEventManager = class extends AuthEventManager {
        constructor() {
          super(...arguments);
          this.passiveListeners = /* @__PURE__ */ new Set();
          this.initPromise = new Promise((resolve) => {
            this.resolveInialized = resolve;
          });
        }
        addPassiveListener(cb) {
          this.passiveListeners.add(cb);
        }
        removePassiveListener(cb) {
          this.passiveListeners.delete(cb);
        }
        resetRedirect() {
          this.queuedRedirectEvent = null;
          this.hasHandledPotentialRedirect = false;
        }
        onEvent(event) {
          this.resolveInialized();
          this.passiveListeners.forEach((cb) => cb(event));
          return super.onEvent(event);
        }
        async initialized() {
          await this.initPromise;
        }
      };
      INITIAL_EVENT_TIMEOUT_MS = 500;
      CordovaPopupRedirectResolver = class {
        constructor() {
          this._redirectPersistence = browserSessionPersistence;
          this._shouldInitProactively = true;
          this.eventManagers = /* @__PURE__ */ new Map();
          this.originValidationPromises = {};
          this._completeRedirectFn = _getRedirectResult;
        }
        async _initialize(auth2) {
          const key = auth2._key();
          let manager = this.eventManagers.get(key);
          if (!manager) {
            manager = new CordovaAuthEventManager(auth2);
            this.eventManagers.set(key, manager);
            this.attachCallbackListeners(auth2, manager);
          }
          return manager;
        }
        _openPopup(auth2) {
          _fail(auth2, "operation-not-supported-in-this-environment");
        }
        async _openRedirect(auth2, provider, authType, eventId) {
          _checkCordovaConfiguration(auth2);
          const manager = await this._initialize(auth2);
          await manager.initialized();
          manager.resetRedirect();
          _clearRedirectOutcomes();
          await this._originValidation(auth2);
          const event = _generateNewEvent(auth2, authType, eventId);
          await _savePartialEvent(auth2, event);
          const url = await _generateHandlerUrl(auth2, event, provider);
          const iabRef = await _performRedirect(url);
          return _waitForAppResume(auth2, manager, iabRef);
        }
        _isIframeWebStorageSupported(_auth, _cb) {
          throw new Error("Method not implemented.");
        }
        _originValidation(auth2) {
          const key = auth2._key();
          if (!this.originValidationPromises[key]) {
            this.originValidationPromises[key] = _validateOrigin2(auth2);
          }
          return this.originValidationPromises[key];
        }
        attachCallbackListeners(auth2, manager) {
          const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();
          const noEventTimeout = setTimeout(async () => {
            await _getAndRemoveEvent(auth2);
            manager.onEvent(generateNoEvent());
          }, INITIAL_EVENT_TIMEOUT_MS);
          const universalLinksCb = async (eventData) => {
            clearTimeout(noEventTimeout);
            const partialEvent = await _getAndRemoveEvent(auth2);
            let finalEvent = null;
            if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData["url"])) {
              finalEvent = _eventFromPartialAndUrl(partialEvent, eventData["url"]);
            }
            manager.onEvent(finalEvent || generateNoEvent());
          };
          if (typeof universalLinks !== "undefined" && typeof universalLinks.subscribe === "function") {
            universalLinks.subscribe(null, universalLinksCb);
          }
          const existingHandleOpenURL = handleOpenURL;
          const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;
          _cordovaWindow().handleOpenURL = async (url) => {
            if (url.toLowerCase().startsWith(packagePrefix)) {
              universalLinksCb({ url });
            }
            if (typeof existingHandleOpenURL === "function") {
              try {
                existingHandleOpenURL(url);
              } catch (e) {
                console.error(e);
              }
            }
          };
        }
      };
      cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;
    }
  });

  // node_modules/@firebase/auth-compat/dist/index.esm2017.js
  function _getCurrentScheme2() {
    var _a;
    return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
  }
  function _isHttpOrHttps2() {
    return _getCurrentScheme2() === "http:" || _getCurrentScheme2() === "https:";
  }
  function _isAndroidOrIosCordovaScheme(ua = getUA()) {
    return !!((_getCurrentScheme2() === "file:" || _getCurrentScheme2() === "ionic:") && ua.toLowerCase().match(/iphone|ipad|ipod|android/));
  }
  function _isNativeEnvironment() {
    return isReactNative() || isNode();
  }
  function _isIe11() {
    return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;
  }
  function _isEdge(ua = getUA()) {
    return /Edge\/\d+/.test(ua);
  }
  function _isLocalStorageNotSynchronized(ua = getUA()) {
    return _isIe11() || _isEdge(ua);
  }
  function _isWebStorageSupported() {
    try {
      const storage2 = self.localStorage;
      const key = _generateEventId();
      if (storage2) {
        storage2["setItem"](key, "1");
        storage2["removeItem"](key);
        if (_isLocalStorageNotSynchronized()) {
          return isIndexedDBAvailable();
        }
        return true;
      }
    } catch (e) {
      return _isWorker2() && isIndexedDBAvailable();
    }
    return false;
  }
  function _isWorker2() {
    return typeof global !== "undefined" && "WorkerGlobalScope" in global && "importScripts" in global;
  }
  function _isPopupRedirectSupported() {
    return (_isHttpOrHttps2() || isBrowserExtension() || _isAndroidOrIosCordovaScheme()) && !_isNativeEnvironment() && _isWebStorageSupported() && !_isWorker2();
  }
  function _isLikelyCordova() {
    return _isAndroidOrIosCordovaScheme() && typeof document !== "undefined";
  }
  async function _isCordova() {
    if (!_isLikelyCordova()) {
      return false;
    }
    return new Promise((resolve) => {
      const timeoutId = setTimeout(() => {
        resolve(false);
      }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);
      document.addEventListener("deviceready", () => {
        clearTimeout(timeoutId);
        resolve(true);
      });
    });
  }
  function _validatePersistenceArgument(auth2, persistence) {
    _assert$3(Object.values(Persistence).includes(persistence), auth2, "invalid-persistence-type");
    if (isReactNative()) {
      _assert$3(persistence !== Persistence.SESSION, auth2, "unsupported-persistence-type");
      return;
    }
    if (isNode()) {
      _assert$3(persistence === Persistence.NONE, auth2, "unsupported-persistence-type");
      return;
    }
    if (_isWorker2()) {
      _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && isIndexedDBAvailable(), auth2, "unsupported-persistence-type");
      return;
    }
    _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth2, "unsupported-persistence-type");
  }
  async function _savePersistenceForRedirect(auth2) {
    await auth2._initializationPromise;
    const win = getSelfWindow();
    const key = _persistenceKeyName(PERSISTENCE_KEY, auth2.config.apiKey, auth2.name);
    if (win === null || win === void 0 ? void 0 : win.sessionStorage) {
      win.sessionStorage.setItem(key, auth2._getPersistence());
    }
  }
  function _getPersistencesFromRedirect(apiKey, appName) {
    const win = getSelfWindow();
    if (!(win === null || win === void 0 ? void 0 : win.sessionStorage)) {
      return [];
    }
    const key = _persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);
    const persistence = win.sessionStorage.getItem(key);
    switch (persistence) {
      case Persistence.NONE:
        return [inMemoryPersistence];
      case Persistence.LOCAL:
        return [indexedDBLocalPersistence, browserSessionPersistence];
      case Persistence.SESSION:
        return [browserSessionPersistence];
      default:
        return [];
    }
  }
  function getSelfWindow() {
    return typeof window !== "undefined" ? window : null;
  }
  function unwrap(object) {
    return object.unwrap();
  }
  function wrapped(object) {
    return object.wrapped();
  }
  function credentialFromResponse(userCredential) {
    return credentialFromObject(userCredential);
  }
  function attachExtraErrorFields(auth2, e) {
    var _a;
    const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;
    if (e.code === "auth/multi-factor-auth-required") {
      const mfaErr = e;
      mfaErr.resolver = new MultiFactorResolver(auth2, getMultiFactorResolver(auth2, e));
    } else if (response) {
      const credential = credentialFromObject(e);
      const credErr = e;
      if (credential) {
        credErr.credential = credential;
        credErr.tenantId = response.tenantId || void 0;
        credErr.email = response.email || void 0;
        credErr.phoneNumber = response.phoneNumber || void 0;
      }
    }
  }
  function credentialFromObject(object) {
    const { _tokenResponse } = object instanceof FirebaseError ? object.customData : object;
    if (!_tokenResponse) {
      return null;
    }
    if (!(object instanceof FirebaseError)) {
      if ("temporaryProof" in _tokenResponse && "phoneNumber" in _tokenResponse) {
        return PhoneAuthProvider.credentialFromResult(object);
      }
    }
    const providerId = _tokenResponse.providerId;
    if (!providerId || providerId === ProviderId.PASSWORD) {
      return null;
    }
    let provider;
    switch (providerId) {
      case ProviderId.GOOGLE:
        provider = GoogleAuthProvider;
        break;
      case ProviderId.FACEBOOK:
        provider = FacebookAuthProvider;
        break;
      case ProviderId.GITHUB:
        provider = GithubAuthProvider;
        break;
      case ProviderId.TWITTER:
        provider = TwitterAuthProvider;
        break;
      default:
        const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce } = _tokenResponse;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {
          return null;
        }
        if (pendingToken) {
          if (providerId.startsWith("saml.")) {
            return SAMLAuthCredential._create(providerId, pendingToken);
          } else {
            return OAuthCredential._fromParams({
              providerId,
              signInMethod: providerId,
              pendingToken,
              idToken: oauthIdToken,
              accessToken: oauthAccessToken
            });
          }
        }
        return new OAuthProvider(providerId).credential({
          idToken: oauthIdToken,
          accessToken: oauthAccessToken,
          rawNonce: nonce
        });
    }
    return object instanceof FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);
  }
  function convertCredential(auth2, credentialPromise) {
    return credentialPromise.catch((e) => {
      if (e instanceof FirebaseError) {
        attachExtraErrorFields(auth2, e);
      }
      throw e;
    }).then((credential) => {
      const operationType = credential.operationType;
      const user = credential.user;
      return {
        operationType,
        credential: credentialFromResponse(credential),
        additionalUserInfo: getAdditionalUserInfo(credential),
        user: User.getOrCreate(user)
      };
    });
  }
  async function convertConfirmationResult(auth2, confirmationResultPromise) {
    const confirmationResultExp = await confirmationResultPromise;
    return {
      verificationId: confirmationResultExp.verificationId,
      confirm: (verificationCode) => convertCredential(auth2, confirmationResultExp.confirm(verificationCode))
    };
  }
  function wrapObservers(nextOrObserver, error, complete) {
    let next = nextOrObserver;
    if (typeof nextOrObserver !== "function") {
      ({ next, error, complete } = nextOrObserver);
    }
    const oldNext = next;
    const newNext = (user) => oldNext(user && User.getOrCreate(user));
    return {
      next: newNext,
      error,
      complete
    };
  }
  function buildPersistenceHierarchy(apiKey, appName) {
    const persistences = _getPersistencesFromRedirect(apiKey, appName);
    if (typeof self !== "undefined" && !persistences.includes(indexedDBLocalPersistence)) {
      persistences.push(indexedDBLocalPersistence);
    }
    if (typeof window !== "undefined") {
      for (const persistence of [
        browserLocalPersistence,
        browserSessionPersistence
      ]) {
        if (!persistences.includes(persistence)) {
          persistences.push(persistence);
        }
      }
    }
    if (!persistences.includes(inMemoryPersistence)) {
      persistences.push(inMemoryPersistence);
    }
    return persistences;
  }
  function registerAuthCompat(instance) {
    instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, (container) => {
      const app2 = container.getProvider("app-compat").getImmediate();
      const authProvider = container.getProvider("auth");
      return new Auth(app2, authProvider);
    }, "PUBLIC").setServiceProps({
      ActionCodeInfo: {
        Operation: {
          EMAIL_SIGNIN: ActionCodeOperation.EMAIL_SIGNIN,
          PASSWORD_RESET: ActionCodeOperation.PASSWORD_RESET,
          RECOVER_EMAIL: ActionCodeOperation.RECOVER_EMAIL,
          REVERT_SECOND_FACTOR_ADDITION: ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,
          VERIFY_AND_CHANGE_EMAIL: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,
          VERIFY_EMAIL: ActionCodeOperation.VERIFY_EMAIL
        }
      },
      EmailAuthProvider,
      FacebookAuthProvider,
      GithubAuthProvider,
      GoogleAuthProvider,
      OAuthProvider,
      SAMLAuthProvider,
      PhoneAuthProvider: PhoneAuthProvider2,
      PhoneMultiFactorGenerator,
      RecaptchaVerifier: RecaptchaVerifier2,
      TwitterAuthProvider,
      Auth,
      AuthCredential,
      Error: FirebaseError
    }).setInstantiationMode("LAZY").setMultipleInstances(false));
    instance.registerVersion(name6, version6);
  }
  var name6, version6, CORDOVA_ONDEVICEREADY_TIMEOUT_MS, Persistence, _assert$3, PERSISTENCE_KEY, _assert$2, CompatPopupRedirectResolver, MultiFactorResolver, User, _assert$1, Auth, PhoneAuthProvider2, _assert2, RecaptchaVerifier2, AUTH_TYPE;
  var init_index_esm20176 = __esm({
    "node_modules/@firebase/auth-compat/dist/index.esm2017.js"() {
      init_index_esm20175();
      init_internal();
      init_index_esm20172();
      init_index_esm2017();
      name6 = "@firebase/auth-compat";
      version6 = "0.2.5";
      CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1e3;
      Persistence = {
        LOCAL: "local",
        NONE: "none",
        SESSION: "session"
      };
      _assert$3 = _assert;
      PERSISTENCE_KEY = "persistence";
      _assert$2 = _assert;
      CompatPopupRedirectResolver = class {
        constructor() {
          this.browserResolver = _getInstance(browserPopupRedirectResolver);
          this.cordovaResolver = _getInstance(cordovaPopupRedirectResolver);
          this.underlyingResolver = null;
          this._redirectPersistence = browserSessionPersistence;
          this._completeRedirectFn = _getRedirectResult;
        }
        async _initialize(auth2) {
          await this.selectUnderlyingResolver();
          return this.assertedUnderlyingResolver._initialize(auth2);
        }
        async _openPopup(auth2, provider, authType, eventId) {
          await this.selectUnderlyingResolver();
          return this.assertedUnderlyingResolver._openPopup(auth2, provider, authType, eventId);
        }
        async _openRedirect(auth2, provider, authType, eventId) {
          await this.selectUnderlyingResolver();
          return this.assertedUnderlyingResolver._openRedirect(auth2, provider, authType, eventId);
        }
        _isIframeWebStorageSupported(auth2, cb) {
          this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth2, cb);
        }
        _originValidation(auth2) {
          return this.assertedUnderlyingResolver._originValidation(auth2);
        }
        get _shouldInitProactively() {
          return _isLikelyCordova() || this.browserResolver._shouldInitProactively;
        }
        get assertedUnderlyingResolver() {
          _assert$2(this.underlyingResolver, "internal-error");
          return this.underlyingResolver;
        }
        async selectUnderlyingResolver() {
          if (this.underlyingResolver) {
            return;
          }
          const isCordova = await _isCordova();
          this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;
        }
      };
      MultiFactorResolver = class {
        constructor(auth2, resolver) {
          this.resolver = resolver;
          this.auth = wrapped(auth2);
        }
        get session() {
          return this.resolver.session;
        }
        get hints() {
          return this.resolver.hints;
        }
        resolveSignIn(assertion) {
          return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));
        }
      };
      User = class {
        constructor(_delegate) {
          this._delegate = _delegate;
          this.multiFactor = multiFactor(_delegate);
        }
        static getOrCreate(user) {
          if (!User.USER_MAP.has(user)) {
            User.USER_MAP.set(user, new User(user));
          }
          return User.USER_MAP.get(user);
        }
        delete() {
          return this._delegate.delete();
        }
        reload() {
          return this._delegate.reload();
        }
        toJSON() {
          return this._delegate.toJSON();
        }
        getIdTokenResult(forceRefresh) {
          return this._delegate.getIdTokenResult(forceRefresh);
        }
        getIdToken(forceRefresh) {
          return this._delegate.getIdToken(forceRefresh);
        }
        linkAndRetrieveDataWithCredential(credential) {
          return this.linkWithCredential(credential);
        }
        async linkWithCredential(credential) {
          return convertCredential(this.auth, linkWithCredential(this._delegate, credential));
        }
        async linkWithPhoneNumber(phoneNumber, applicationVerifier) {
          return convertConfirmationResult(this.auth, linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
        }
        async linkWithPopup(provider) {
          return convertCredential(this.auth, linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
        }
        async linkWithRedirect(provider) {
          await _savePersistenceForRedirect(_castAuth(this.auth));
          return linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
        }
        reauthenticateAndRetrieveDataWithCredential(credential) {
          return this.reauthenticateWithCredential(credential);
        }
        async reauthenticateWithCredential(credential) {
          return convertCredential(this.auth, reauthenticateWithCredential(this._delegate, credential));
        }
        reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {
          return convertConfirmationResult(this.auth, reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
        }
        reauthenticateWithPopup(provider) {
          return convertCredential(this.auth, reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
        }
        async reauthenticateWithRedirect(provider) {
          await _savePersistenceForRedirect(_castAuth(this.auth));
          return reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
        }
        sendEmailVerification(actionCodeSettings) {
          return sendEmailVerification(this._delegate, actionCodeSettings);
        }
        async unlink(providerId) {
          await unlink(this._delegate, providerId);
          return this;
        }
        updateEmail(newEmail) {
          return updateEmail(this._delegate, newEmail);
        }
        updatePassword(newPassword) {
          return updatePassword(this._delegate, newPassword);
        }
        updatePhoneNumber(phoneCredential) {
          return updatePhoneNumber(this._delegate, phoneCredential);
        }
        updateProfile(profile) {
          return updateProfile(this._delegate, profile);
        }
        verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {
          return verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);
        }
        get emailVerified() {
          return this._delegate.emailVerified;
        }
        get isAnonymous() {
          return this._delegate.isAnonymous;
        }
        get metadata() {
          return this._delegate.metadata;
        }
        get phoneNumber() {
          return this._delegate.phoneNumber;
        }
        get providerData() {
          return this._delegate.providerData;
        }
        get refreshToken() {
          return this._delegate.refreshToken;
        }
        get tenantId() {
          return this._delegate.tenantId;
        }
        get displayName() {
          return this._delegate.displayName;
        }
        get email() {
          return this._delegate.email;
        }
        get photoURL() {
          return this._delegate.photoURL;
        }
        get providerId() {
          return this._delegate.providerId;
        }
        get uid() {
          return this._delegate.uid;
        }
        get auth() {
          return this._delegate.auth;
        }
      };
      User.USER_MAP = /* @__PURE__ */ new WeakMap();
      _assert$1 = _assert;
      Auth = class {
        constructor(app2, provider) {
          this.app = app2;
          if (provider.isInitialized()) {
            this._delegate = provider.getImmediate();
            this.linkUnderlyingAuth();
            return;
          }
          const { apiKey } = app2.options;
          _assert$1(apiKey, "invalid-api-key", {
            appName: app2.name
          });
          _assert$1(apiKey, "invalid-api-key", {
            appName: app2.name
          });
          const resolver = typeof window !== "undefined" ? CompatPopupRedirectResolver : void 0;
          this._delegate = provider.initialize({
            options: {
              persistence: buildPersistenceHierarchy(apiKey, app2.name),
              popupRedirectResolver: resolver
            }
          });
          this._delegate._updateErrorMap(debugErrorMap);
          this.linkUnderlyingAuth();
        }
        get emulatorConfig() {
          return this._delegate.emulatorConfig;
        }
        get currentUser() {
          if (!this._delegate.currentUser) {
            return null;
          }
          return User.getOrCreate(this._delegate.currentUser);
        }
        get languageCode() {
          return this._delegate.languageCode;
        }
        set languageCode(languageCode) {
          this._delegate.languageCode = languageCode;
        }
        get settings() {
          return this._delegate.settings;
        }
        get tenantId() {
          return this._delegate.tenantId;
        }
        set tenantId(tid) {
          this._delegate.tenantId = tid;
        }
        useDeviceLanguage() {
          this._delegate.useDeviceLanguage();
        }
        signOut() {
          return this._delegate.signOut();
        }
        useEmulator(url, options) {
          connectAuthEmulator(this._delegate, url, options);
        }
        applyActionCode(code) {
          return applyActionCode(this._delegate, code);
        }
        checkActionCode(code) {
          return checkActionCode(this._delegate, code);
        }
        confirmPasswordReset(code, newPassword) {
          return confirmPasswordReset(this._delegate, code, newPassword);
        }
        async createUserWithEmailAndPassword(email, password) {
          return convertCredential(this._delegate, createUserWithEmailAndPassword(this._delegate, email, password));
        }
        fetchProvidersForEmail(email) {
          return this.fetchSignInMethodsForEmail(email);
        }
        fetchSignInMethodsForEmail(email) {
          return fetchSignInMethodsForEmail(this._delegate, email);
        }
        isSignInWithEmailLink(emailLink) {
          return isSignInWithEmailLink(this._delegate, emailLink);
        }
        async getRedirectResult() {
          _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment");
          const credential = await getRedirectResult(this._delegate, CompatPopupRedirectResolver);
          if (!credential) {
            return {
              credential: null,
              user: null
            };
          }
          return convertCredential(this._delegate, Promise.resolve(credential));
        }
        addFrameworkForLogging(framework) {
          addFrameworkForLogging(this._delegate, framework);
        }
        onAuthStateChanged(nextOrObserver, errorFn, completed) {
          const { next, error, complete } = wrapObservers(nextOrObserver, errorFn, completed);
          return this._delegate.onAuthStateChanged(next, error, complete);
        }
        onIdTokenChanged(nextOrObserver, errorFn, completed) {
          const { next, error, complete } = wrapObservers(nextOrObserver, errorFn, completed);
          return this._delegate.onIdTokenChanged(next, error, complete);
        }
        sendSignInLinkToEmail(email, actionCodeSettings) {
          return sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);
        }
        sendPasswordResetEmail(email, actionCodeSettings) {
          return sendPasswordResetEmail(this._delegate, email, actionCodeSettings || void 0);
        }
        async setPersistence(persistence) {
          _validatePersistenceArgument(this._delegate, persistence);
          let converted;
          switch (persistence) {
            case Persistence.SESSION:
              converted = browserSessionPersistence;
              break;
            case Persistence.LOCAL:
              const isIndexedDBFullySupported = await _getInstance(indexedDBLocalPersistence)._isAvailable();
              converted = isIndexedDBFullySupported ? indexedDBLocalPersistence : browserLocalPersistence;
              break;
            case Persistence.NONE:
              converted = inMemoryPersistence;
              break;
            default:
              return _fail("argument-error", {
                appName: this._delegate.name
              });
          }
          return this._delegate.setPersistence(converted);
        }
        signInAndRetrieveDataWithCredential(credential) {
          return this.signInWithCredential(credential);
        }
        signInAnonymously() {
          return convertCredential(this._delegate, signInAnonymously(this._delegate));
        }
        signInWithCredential(credential) {
          return convertCredential(this._delegate, signInWithCredential(this._delegate, credential));
        }
        signInWithCustomToken(token) {
          return convertCredential(this._delegate, signInWithCustomToken(this._delegate, token));
        }
        signInWithEmailAndPassword(email, password) {
          return convertCredential(this._delegate, signInWithEmailAndPassword(this._delegate, email, password));
        }
        signInWithEmailLink(email, emailLink) {
          return convertCredential(this._delegate, signInWithEmailLink(this._delegate, email, emailLink));
        }
        signInWithPhoneNumber(phoneNumber, applicationVerifier) {
          return convertConfirmationResult(this._delegate, signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
        }
        async signInWithPopup(provider) {
          _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment");
          return convertCredential(this._delegate, signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
        }
        async signInWithRedirect(provider) {
          _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment");
          await _savePersistenceForRedirect(this._delegate);
          return signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
        }
        updateCurrentUser(user) {
          return this._delegate.updateCurrentUser(user);
        }
        verifyPasswordResetCode(code) {
          return verifyPasswordResetCode(this._delegate, code);
        }
        unwrap() {
          return this._delegate;
        }
        _delete() {
          return this._delegate._delete();
        }
        linkUnderlyingAuth() {
          this._delegate.wrapped = () => this;
        }
      };
      Auth.Persistence = Persistence;
      PhoneAuthProvider2 = class {
        constructor() {
          this.providerId = "phone";
          this._delegate = new PhoneAuthProvider(unwrap(firebase.auth()));
        }
        static credential(verificationId, verificationCode) {
          return PhoneAuthProvider.credential(verificationId, verificationCode);
        }
        verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {
          return this._delegate.verifyPhoneNumber(phoneInfoOptions, applicationVerifier);
        }
        unwrap() {
          return this._delegate;
        }
      };
      PhoneAuthProvider2.PHONE_SIGN_IN_METHOD = PhoneAuthProvider.PHONE_SIGN_IN_METHOD;
      PhoneAuthProvider2.PROVIDER_ID = PhoneAuthProvider.PROVIDER_ID;
      _assert2 = _assert;
      RecaptchaVerifier2 = class {
        constructor(container, parameters, app2 = firebase.app()) {
          var _a;
          _assert2((_a = app2.options) === null || _a === void 0 ? void 0 : _a.apiKey, "invalid-api-key", {
            appName: app2.name
          });
          this._delegate = new RecaptchaVerifier(container, parameters, app2.auth());
          this.type = this._delegate.type;
        }
        clear() {
          this._delegate.clear();
        }
        render() {
          return this._delegate.render();
        }
        verify() {
          return this._delegate.verify();
        }
      };
      AUTH_TYPE = "auth-compat";
      registerAuthCompat(firebase);
    }
  });

  // node_modules/firebase/compat/auth/dist/index.esm.js
  var index_esm_exports2 = {};
  var init_index_esm2 = __esm({
    "node_modules/firebase/compat/auth/dist/index.esm.js"() {
      init_index_esm20176();
    }
  });

  // node_modules/dialog-polyfill/dialog-polyfill.js
  var require_dialog_polyfill = __commonJS({
    "node_modules/dialog-polyfill/dialog-polyfill.js"(exports, module) {
      (function() {
        var supportCustomEvent = window.CustomEvent;
        if (!supportCustomEvent || typeof supportCustomEvent === "object") {
          supportCustomEvent = function CustomEvent2(event, x) {
            x = x || {};
            var ev = document.createEvent("CustomEvent");
            ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
            return ev;
          };
          supportCustomEvent.prototype = window.Event.prototype;
        }
        function createsStackingContext(el) {
          while (el && el !== document.body) {
            var s = window.getComputedStyle(el);
            var invalid = function(k, ok) {
              return !(s[k] === void 0 || s[k] === ok);
            };
            if (s.opacity < 1 || invalid("zIndex", "auto") || invalid("transform", "none") || invalid("mixBlendMode", "normal") || invalid("filter", "none") || invalid("perspective", "none") || s["isolation"] === "isolate" || s.position === "fixed" || s.webkitOverflowScrolling === "touch") {
              return true;
            }
            el = el.parentElement;
          }
          return false;
        }
        function findNearestDialog(el) {
          while (el) {
            if (el.localName === "dialog") {
              return el;
            }
            el = el.parentElement;
          }
          return null;
        }
        function safeBlur(el) {
          if (el && el.blur && el !== document.body) {
            el.blur();
          }
        }
        function inNodeList(nodeList, node) {
          for (var i = 0; i < nodeList.length; ++i) {
            if (nodeList[i] === node) {
              return true;
            }
          }
          return false;
        }
        function isFormMethodDialog(el) {
          if (!el || !el.hasAttribute("method")) {
            return false;
          }
          return el.getAttribute("method").toLowerCase() === "dialog";
        }
        function dialogPolyfillInfo(dialog) {
          this.dialog_ = dialog;
          this.replacedStyleTop_ = false;
          this.openAsModal_ = false;
          if (!dialog.hasAttribute("role")) {
            dialog.setAttribute("role", "dialog");
          }
          dialog.show = this.show.bind(this);
          dialog.showModal = this.showModal.bind(this);
          dialog.close = this.close.bind(this);
          if (!("returnValue" in dialog)) {
            dialog.returnValue = "";
          }
          if ("MutationObserver" in window) {
            var mo = new MutationObserver(this.maybeHideModal.bind(this));
            mo.observe(dialog, { attributes: true, attributeFilter: ["open"] });
          } else {
            var removed = false;
            var cb = function() {
              removed ? this.downgradeModal() : this.maybeHideModal();
              removed = false;
            }.bind(this);
            var timeout;
            var delayModel = function(ev) {
              if (ev.target !== dialog) {
                return;
              }
              var cand = "DOMNodeRemoved";
              removed |= ev.type.substr(0, cand.length) === cand;
              window.clearTimeout(timeout);
              timeout = window.setTimeout(cb, 0);
            };
            ["DOMAttrModified", "DOMNodeRemoved", "DOMNodeRemovedFromDocument"].forEach(function(name7) {
              dialog.addEventListener(name7, delayModel);
            });
          }
          Object.defineProperty(dialog, "open", {
            set: this.setOpen.bind(this),
            get: dialog.hasAttribute.bind(dialog, "open")
          });
          this.backdrop_ = document.createElement("div");
          this.backdrop_.className = "backdrop";
          this.backdrop_.addEventListener("click", this.backdropClick_.bind(this));
        }
        dialogPolyfillInfo.prototype = {
          get dialog() {
            return this.dialog_;
          },
          maybeHideModal: function() {
            if (this.dialog_.hasAttribute("open") && document.body.contains(this.dialog_)) {
              return;
            }
            this.downgradeModal();
          },
          downgradeModal: function() {
            if (!this.openAsModal_) {
              return;
            }
            this.openAsModal_ = false;
            this.dialog_.style.zIndex = "";
            if (this.replacedStyleTop_) {
              this.dialog_.style.top = "";
              this.replacedStyleTop_ = false;
            }
            this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);
            dialogPolyfill.dm.removeDialog(this);
          },
          setOpen: function(value) {
            if (value) {
              this.dialog_.hasAttribute("open") || this.dialog_.setAttribute("open", "");
            } else {
              this.dialog_.removeAttribute("open");
              this.maybeHideModal();
            }
          },
          backdropClick_: function(e) {
            if (!this.dialog_.hasAttribute("tabindex")) {
              var fake = document.createElement("div");
              this.dialog_.insertBefore(fake, this.dialog_.firstChild);
              fake.tabIndex = -1;
              fake.focus();
              this.dialog_.removeChild(fake);
            } else {
              this.dialog_.focus();
            }
            var redirectedEvent = document.createEvent("MouseEvents");
            redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
            this.dialog_.dispatchEvent(redirectedEvent);
            e.stopPropagation();
          },
          focus_: function() {
            var target = this.dialog_.querySelector("[autofocus]:not([disabled])");
            if (!target && this.dialog_.tabIndex >= 0) {
              target = this.dialog_;
            }
            if (!target) {
              var opts = ["button", "input", "keygen", "select", "textarea"];
              var query = opts.map(function(el) {
                return el + ":not([disabled])";
              });
              query.push('[tabindex]:not([disabled]):not([tabindex=""])');
              target = this.dialog_.querySelector(query.join(", "));
            }
            safeBlur(document.activeElement);
            target && target.focus();
          },
          updateZIndex: function(dialogZ, backdropZ) {
            if (dialogZ < backdropZ) {
              throw new Error("dialogZ should never be < backdropZ");
            }
            this.dialog_.style.zIndex = dialogZ;
            this.backdrop_.style.zIndex = backdropZ;
          },
          show: function() {
            if (!this.dialog_.open) {
              this.setOpen(true);
              this.focus_();
            }
          },
          showModal: function() {
            if (this.dialog_.hasAttribute("open")) {
              throw new Error("Failed to execute 'showModal' on dialog: The element is already open, and therefore cannot be opened modally.");
            }
            if (!document.body.contains(this.dialog_)) {
              throw new Error("Failed to execute 'showModal' on dialog: The element is not in a Document.");
            }
            if (!dialogPolyfill.dm.pushDialog(this)) {
              throw new Error("Failed to execute 'showModal' on dialog: There are too many open modal dialogs.");
            }
            if (createsStackingContext(this.dialog_.parentElement)) {
              console.warn("A dialog is being shown inside a stacking context. This may cause it to be unusable. For more information, see this link: https://github.com/GoogleChrome/dialog-polyfill/#stacking-context");
            }
            this.setOpen(true);
            this.openAsModal_ = true;
            if (dialogPolyfill.needsCentering(this.dialog_)) {
              dialogPolyfill.reposition(this.dialog_);
              this.replacedStyleTop_ = true;
            } else {
              this.replacedStyleTop_ = false;
            }
            this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);
            this.focus_();
          },
          close: function(opt_returnValue) {
            if (!this.dialog_.hasAttribute("open")) {
              throw new Error("Failed to execute 'close' on dialog: The element does not have an 'open' attribute, and therefore cannot be closed.");
            }
            this.setOpen(false);
            if (opt_returnValue !== void 0) {
              this.dialog_.returnValue = opt_returnValue;
            }
            var closeEvent = new supportCustomEvent("close", {
              bubbles: false,
              cancelable: false
            });
            this.dialog_.dispatchEvent(closeEvent);
          }
        };
        var dialogPolyfill = {};
        dialogPolyfill.reposition = function(element) {
          var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
          var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
          element.style.top = Math.max(scrollTop, topValue) + "px";
        };
        dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {
          for (var i = 0; i < document.styleSheets.length; ++i) {
            var styleSheet = document.styleSheets[i];
            var cssRules = null;
            try {
              cssRules = styleSheet.cssRules;
            } catch (e) {
            }
            if (!cssRules) {
              continue;
            }
            for (var j = 0; j < cssRules.length; ++j) {
              var rule = cssRules[j];
              var selectedNodes = null;
              try {
                selectedNodes = document.querySelectorAll(rule.selectorText);
              } catch (e) {
              }
              if (!selectedNodes || !inNodeList(selectedNodes, element)) {
                continue;
              }
              var cssTop = rule.style.getPropertyValue("top");
              var cssBottom = rule.style.getPropertyValue("bottom");
              if (cssTop && cssTop !== "auto" || cssBottom && cssBottom !== "auto") {
                return true;
              }
            }
          }
          return false;
        };
        dialogPolyfill.needsCentering = function(dialog) {
          var computedStyle = window.getComputedStyle(dialog);
          if (computedStyle.position !== "absolute") {
            return false;
          }
          if (dialog.style.top !== "auto" && dialog.style.top !== "" || dialog.style.bottom !== "auto" && dialog.style.bottom !== "") {
            return false;
          }
          return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
        };
        dialogPolyfill.forceRegisterDialog = function(element) {
          if (window.HTMLDialogElement || element.showModal) {
            console.warn("This browser already supports <dialog>, the polyfill may not work correctly", element);
          }
          if (element.localName !== "dialog") {
            throw new Error("Failed to register dialog: The element is not a dialog.");
          }
          new dialogPolyfillInfo(element);
        };
        dialogPolyfill.registerDialog = function(element) {
          if (!element.showModal) {
            dialogPolyfill.forceRegisterDialog(element);
          }
        };
        dialogPolyfill.DialogManager = function() {
          this.pendingDialogStack = [];
          var checkDOM = this.checkDOM_.bind(this);
          this.overlay = document.createElement("div");
          this.overlay.className = "_dialog_overlay";
          this.overlay.addEventListener("click", function(e) {
            this.forwardTab_ = void 0;
            e.stopPropagation();
            checkDOM([]);
          }.bind(this));
          this.handleKey_ = this.handleKey_.bind(this);
          this.handleFocus_ = this.handleFocus_.bind(this);
          this.zIndexLow_ = 1e5;
          this.zIndexHigh_ = 1e5 + 150;
          this.forwardTab_ = void 0;
          if ("MutationObserver" in window) {
            this.mo_ = new MutationObserver(function(records) {
              var removed = [];
              records.forEach(function(rec) {
                for (var i = 0, c; c = rec.removedNodes[i]; ++i) {
                  if (!(c instanceof Element)) {
                    continue;
                  } else if (c.localName === "dialog") {
                    removed.push(c);
                  }
                  removed = removed.concat(c.querySelectorAll("dialog"));
                }
              });
              removed.length && checkDOM(removed);
            });
          }
        };
        dialogPolyfill.DialogManager.prototype.blockDocument = function() {
          document.documentElement.addEventListener("focus", this.handleFocus_, true);
          document.addEventListener("keydown", this.handleKey_);
          this.mo_ && this.mo_.observe(document, { childList: true, subtree: true });
        };
        dialogPolyfill.DialogManager.prototype.unblockDocument = function() {
          document.documentElement.removeEventListener("focus", this.handleFocus_, true);
          document.removeEventListener("keydown", this.handleKey_);
          this.mo_ && this.mo_.disconnect();
        };
        dialogPolyfill.DialogManager.prototype.updateStacking = function() {
          var zIndex = this.zIndexHigh_;
          for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
            dpi.updateZIndex(--zIndex, --zIndex);
            if (i === 0) {
              this.overlay.style.zIndex = --zIndex;
            }
          }
          var last = this.pendingDialogStack[0];
          if (last) {
            var p = last.dialog.parentNode || document.body;
            p.appendChild(this.overlay);
          } else if (this.overlay.parentNode) {
            this.overlay.parentNode.removeChild(this.overlay);
          }
        };
        dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {
          while (candidate = findNearestDialog(candidate)) {
            for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
              if (dpi.dialog === candidate) {
                return i === 0;
              }
            }
            candidate = candidate.parentElement;
          }
          return false;
        };
        dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {
          if (this.containedByTopDialog_(event.target)) {
            return;
          }
          event.preventDefault();
          event.stopPropagation();
          safeBlur(event.target);
          if (this.forwardTab_ === void 0) {
            return;
          }
          var dpi = this.pendingDialogStack[0];
          var dialog = dpi.dialog;
          var position = dialog.compareDocumentPosition(event.target);
          if (position & Node.DOCUMENT_POSITION_PRECEDING) {
            if (this.forwardTab_) {
              dpi.focus_();
            } else {
              document.documentElement.focus();
            }
          } else {
          }
          return false;
        };
        dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {
          this.forwardTab_ = void 0;
          if (event.keyCode === 27) {
            event.preventDefault();
            event.stopPropagation();
            var cancelEvent = new supportCustomEvent("cancel", {
              bubbles: false,
              cancelable: true
            });
            var dpi = this.pendingDialogStack[0];
            if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {
              dpi.dialog.close();
            }
          } else if (event.keyCode === 9) {
            this.forwardTab_ = !event.shiftKey;
          }
        };
        dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {
          var clone = this.pendingDialogStack.slice();
          clone.forEach(function(dpi) {
            if (removed.indexOf(dpi.dialog) !== -1) {
              dpi.downgradeModal();
            } else {
              dpi.maybeHideModal();
            }
          });
        };
        dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {
          var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
          if (this.pendingDialogStack.length >= allowed) {
            return false;
          }
          if (this.pendingDialogStack.unshift(dpi) === 1) {
            this.blockDocument();
          }
          this.updateStacking();
          return true;
        };
        dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {
          var index = this.pendingDialogStack.indexOf(dpi);
          if (index === -1) {
            return;
          }
          this.pendingDialogStack.splice(index, 1);
          if (this.pendingDialogStack.length === 0) {
            this.unblockDocument();
          }
          this.updateStacking();
        };
        dialogPolyfill.dm = new dialogPolyfill.DialogManager();
        dialogPolyfill.formSubmitter = null;
        dialogPolyfill.useValue = null;
        if (window.HTMLDialogElement === void 0) {
          var testForm = document.createElement("form");
          testForm.setAttribute("method", "dialog");
          if (testForm.method !== "dialog") {
            var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, "method");
            if (methodDescriptor) {
              var realGet = methodDescriptor.get;
              methodDescriptor.get = function() {
                if (isFormMethodDialog(this)) {
                  return "dialog";
                }
                return realGet.call(this);
              };
              var realSet = methodDescriptor.set;
              methodDescriptor.set = function(v) {
                if (typeof v === "string" && v.toLowerCase() === "dialog") {
                  return this.setAttribute("method", v);
                }
                return realSet.call(this, v);
              };
              Object.defineProperty(HTMLFormElement.prototype, "method", methodDescriptor);
            }
          }
          document.addEventListener("click", function(ev) {
            dialogPolyfill.formSubmitter = null;
            dialogPolyfill.useValue = null;
            if (ev.defaultPrevented) {
              return;
            }
            var target = ev.target;
            if (!target || !isFormMethodDialog(target.form)) {
              return;
            }
            var valid = target.type === "submit" && ["button", "input"].indexOf(target.localName) > -1;
            if (!valid) {
              if (!(target.localName === "input" && target.type === "image")) {
                return;
              }
              dialogPolyfill.useValue = ev.offsetX + "," + ev.offsetY;
            }
            var dialog = findNearestDialog(target);
            if (!dialog) {
              return;
            }
            dialogPolyfill.formSubmitter = target;
          }, false);
          var nativeFormSubmit = HTMLFormElement.prototype.submit;
          var replacementFormSubmit = function() {
            if (!isFormMethodDialog(this)) {
              return nativeFormSubmit.call(this);
            }
            var dialog = findNearestDialog(this);
            dialog && dialog.close();
          };
          HTMLFormElement.prototype.submit = replacementFormSubmit;
          document.addEventListener("submit", function(ev) {
            var form = ev.target;
            if (!isFormMethodDialog(form)) {
              return;
            }
            ev.preventDefault();
            var dialog = findNearestDialog(form);
            if (!dialog) {
              return;
            }
            var s = dialogPolyfill.formSubmitter;
            if (s && s.form === form) {
              dialog.close(dialogPolyfill.useValue || s.value);
            } else {
              dialog.close();
            }
            dialogPolyfill.formSubmitter = null;
          }, true);
        }
        dialogPolyfill["forceRegisterDialog"] = dialogPolyfill.forceRegisterDialog;
        dialogPolyfill["registerDialog"] = dialogPolyfill.registerDialog;
        if (typeof define === "function" && "amd" in define) {
          define(function() {
            return dialogPolyfill;
          });
        } else if (typeof module === "object" && typeof module["exports"] === "object") {
          module["exports"] = dialogPolyfill;
        } else {
          window["dialogPolyfill"] = dialogPolyfill;
        }
      })();
    }
  });

  // node_modules/firebaseui/dist/npm.js
  var require_npm = __commonJS({
    "node_modules/firebaseui/dist/npm.js"(exports, module) {
      (function() {
        var firebase2 = (init_index_esm(), __toCommonJS(index_esm_exports));
        init_index_esm2();
        if (typeof firebase2.default !== "undefined") {
          firebase2 = firebase2.default;
        }
        (function() {
          var supportCustomEvent = window.CustomEvent;
          if (!supportCustomEvent || typeof supportCustomEvent === "object") {
            supportCustomEvent = function CustomEvent2(event, x) {
              x = x || {};
              var ev = document.createEvent("CustomEvent");
              ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
              return ev;
            };
            supportCustomEvent.prototype = window.Event.prototype;
          }
          function createsStackingContext(el) {
            while (el && el !== document.body) {
              var s = window.getComputedStyle(el);
              var invalid = function(k, ok) {
                return !(s[k] === void 0 || s[k] === ok);
              };
              if (s.opacity < 1 || invalid("zIndex", "auto") || invalid("transform", "none") || invalid("mixBlendMode", "normal") || invalid("filter", "none") || invalid("perspective", "none") || s["isolation"] === "isolate" || s.position === "fixed" || s.webkitOverflowScrolling === "touch")
                return true;
              el = el.parentElement;
            }
            return false;
          }
          function findNearestDialog(el) {
            while (el) {
              if (el.localName === "dialog")
                return el;
              el = el.parentElement;
            }
            return null;
          }
          function safeBlur(el) {
            if (el && el.blur && el !== document.body)
              el.blur();
          }
          function inNodeList(nodeList, node) {
            for (var i = 0; i < nodeList.length; ++i)
              if (nodeList[i] === node)
                return true;
            return false;
          }
          function isFormMethodDialog(el) {
            if (!el || !el.hasAttribute("method"))
              return false;
            return el.getAttribute("method").toLowerCase() === "dialog";
          }
          function dialogPolyfillInfo(dialog) {
            this.dialog_ = dialog;
            this.replacedStyleTop_ = false;
            this.openAsModal_ = false;
            if (!dialog.hasAttribute("role"))
              dialog.setAttribute("role", "dialog");
            dialog.show = this.show.bind(this);
            dialog.showModal = this.showModal.bind(this);
            dialog.close = this.close.bind(this);
            if (!("returnValue" in dialog))
              dialog.returnValue = "";
            if ("MutationObserver" in window) {
              var mo = new MutationObserver(this.maybeHideModal.bind(this));
              mo.observe(dialog, { attributes: true, attributeFilter: ["open"] });
            } else {
              var removed = false;
              var cb = function() {
                removed ? this.downgradeModal() : this.maybeHideModal();
                removed = false;
              }.bind(this);
              var timeout;
              var delayModel = function(ev) {
                if (ev.target !== dialog)
                  return;
                var cand = "DOMNodeRemoved";
                removed |= ev.type.substr(0, cand.length) === cand;
                window.clearTimeout(timeout);
                timeout = window.setTimeout(cb, 0);
              };
              ["DOMAttrModified", "DOMNodeRemoved", "DOMNodeRemovedFromDocument"].forEach(function(name7) {
                dialog.addEventListener(name7, delayModel);
              });
            }
            Object.defineProperty(dialog, "open", { set: this.setOpen.bind(this), get: dialog.hasAttribute.bind(dialog, "open") });
            this.backdrop_ = document.createElement("div");
            this.backdrop_.className = "backdrop";
            this.backdrop_.addEventListener("click", this.backdropClick_.bind(this));
          }
          dialogPolyfillInfo.prototype = {
            get dialog() {
              return this.dialog_;
            },
            maybeHideModal: function() {
              if (this.dialog_.hasAttribute("open") && document.body.contains(this.dialog_))
                return;
              this.downgradeModal();
            },
            downgradeModal: function() {
              if (!this.openAsModal_)
                return;
              this.openAsModal_ = false;
              this.dialog_.style.zIndex = "";
              if (this.replacedStyleTop_) {
                this.dialog_.style.top = "";
                this.replacedStyleTop_ = false;
              }
              this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);
              dialogPolyfill.dm.removeDialog(this);
            },
            setOpen: function(value) {
              if (value)
                this.dialog_.hasAttribute("open") || this.dialog_.setAttribute("open", "");
              else {
                this.dialog_.removeAttribute("open");
                this.maybeHideModal();
              }
            },
            backdropClick_: function(e) {
              if (!this.dialog_.hasAttribute("tabindex")) {
                var fake = document.createElement("div");
                this.dialog_.insertBefore(fake, this.dialog_.firstChild);
                fake.tabIndex = -1;
                fake.focus();
                this.dialog_.removeChild(fake);
              } else
                this.dialog_.focus();
              var redirectedEvent = document.createEvent("MouseEvents");
              redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
              this.dialog_.dispatchEvent(redirectedEvent);
              e.stopPropagation();
            },
            focus_: function() {
              var target = this.dialog_.querySelector("[autofocus]:not([disabled])");
              if (!target && this.dialog_.tabIndex >= 0)
                target = this.dialog_;
              if (!target) {
                var opts = ["button", "input", "keygen", "select", "textarea"];
                var query = opts.map(function(el) {
                  return el + ":not([disabled])";
                });
                query.push('[tabindex]:not([disabled]):not([tabindex=""])');
                target = this.dialog_.querySelector(query.join(", "));
              }
              safeBlur(document.activeElement);
              target && target.focus();
            },
            updateZIndex: function(dialogZ, backdropZ) {
              if (dialogZ < backdropZ)
                throw new Error("dialogZ should never be < backdropZ");
              this.dialog_.style.zIndex = dialogZ;
              this.backdrop_.style.zIndex = backdropZ;
            },
            show: function() {
              if (!this.dialog_.open) {
                this.setOpen(true);
                this.focus_();
              }
            },
            showModal: function() {
              if (this.dialog_.hasAttribute("open"))
                throw new Error("Failed to execute 'showModal' on dialog: The element is already open, and therefore cannot be opened modally.");
              if (!document.body.contains(this.dialog_))
                throw new Error("Failed to execute 'showModal' on dialog: The element is not in a Document.");
              if (!dialogPolyfill.dm.pushDialog(this))
                throw new Error("Failed to execute 'showModal' on dialog: There are too many open modal dialogs.");
              if (createsStackingContext(this.dialog_.parentElement))
                console.warn("A dialog is being shown inside a stacking context. This may cause it to be unusable. For more information, see this link: https://github.com/GoogleChrome/dialog-polyfill/#stacking-context");
              this.setOpen(true);
              this.openAsModal_ = true;
              if (dialogPolyfill.needsCentering(this.dialog_)) {
                dialogPolyfill.reposition(this.dialog_);
                this.replacedStyleTop_ = true;
              } else
                this.replacedStyleTop_ = false;
              this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);
              this.focus_();
            },
            close: function(opt_returnValue) {
              if (!this.dialog_.hasAttribute("open"))
                throw new Error("Failed to execute 'close' on dialog: The element does not have an 'open' attribute, and therefore cannot be closed.");
              this.setOpen(false);
              if (opt_returnValue !== void 0)
                this.dialog_.returnValue = opt_returnValue;
              var closeEvent = new supportCustomEvent("close", {
                bubbles: false,
                cancelable: false
              });
              this.dialog_.dispatchEvent(closeEvent);
            }
          };
          var dialogPolyfill = {};
          dialogPolyfill.reposition = function(element) {
            var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
            var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
            element.style.top = Math.max(scrollTop, topValue) + "px";
          };
          dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {
            for (var i = 0; i < document.styleSheets.length; ++i) {
              var styleSheet = document.styleSheets[i];
              var cssRules = null;
              try {
                cssRules = styleSheet.cssRules;
              } catch (e) {
              }
              if (!cssRules)
                continue;
              for (var j = 0; j < cssRules.length; ++j) {
                var rule = cssRules[j];
                var selectedNodes = null;
                try {
                  selectedNodes = document.querySelectorAll(rule.selectorText);
                } catch (e$0) {
                }
                if (!selectedNodes || !inNodeList(selectedNodes, element))
                  continue;
                var cssTop = rule.style.getPropertyValue("top");
                var cssBottom = rule.style.getPropertyValue("bottom");
                if (cssTop && cssTop !== "auto" || cssBottom && cssBottom !== "auto")
                  return true;
              }
            }
            return false;
          };
          dialogPolyfill.needsCentering = function(dialog) {
            var computedStyle = window.getComputedStyle(dialog);
            if (computedStyle.position !== "absolute")
              return false;
            if (dialog.style.top !== "auto" && dialog.style.top !== "" || dialog.style.bottom !== "auto" && dialog.style.bottom !== "")
              return false;
            return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
          };
          dialogPolyfill.forceRegisterDialog = function(element) {
            if (window.HTMLDialogElement || element.showModal)
              console.warn("This browser already supports <dialog>, the polyfill may not work correctly", element);
            if (element.localName !== "dialog")
              throw new Error("Failed to register dialog: The element is not a dialog.");
            new dialogPolyfillInfo(element);
          };
          dialogPolyfill.registerDialog = function(element) {
            if (!element.showModal)
              dialogPolyfill.forceRegisterDialog(element);
          };
          dialogPolyfill.DialogManager = function() {
            this.pendingDialogStack = [];
            var checkDOM = this.checkDOM_.bind(this);
            this.overlay = document.createElement("div");
            this.overlay.className = "_dialog_overlay";
            this.overlay.addEventListener("click", function(e) {
              this.forwardTab_ = void 0;
              e.stopPropagation();
              checkDOM([]);
            }.bind(this));
            this.handleKey_ = this.handleKey_.bind(this);
            this.handleFocus_ = this.handleFocus_.bind(this);
            this.zIndexLow_ = 1e5;
            this.zIndexHigh_ = 1e5 + 150;
            this.forwardTab_ = void 0;
            if ("MutationObserver" in window)
              this.mo_ = new MutationObserver(function(records) {
                var removed = [];
                records.forEach(function(rec) {
                  for (var i = 0, c; c = rec.removedNodes[i]; ++i) {
                    if (!(c instanceof Element))
                      continue;
                    else if (c.localName === "dialog")
                      removed.push(c);
                    removed = removed.concat(c.querySelectorAll("dialog"));
                  }
                });
                removed.length && checkDOM(removed);
              });
          };
          dialogPolyfill.DialogManager.prototype.blockDocument = function() {
            document.documentElement.addEventListener("focus", this.handleFocus_, true);
            document.addEventListener("keydown", this.handleKey_);
            this.mo_ && this.mo_.observe(document, { childList: true, subtree: true });
          };
          dialogPolyfill.DialogManager.prototype.unblockDocument = function() {
            document.documentElement.removeEventListener("focus", this.handleFocus_, true);
            document.removeEventListener("keydown", this.handleKey_);
            this.mo_ && this.mo_.disconnect();
          };
          dialogPolyfill.DialogManager.prototype.updateStacking = function() {
            var zIndex = this.zIndexHigh_;
            for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {
              dpi.updateZIndex(--zIndex, --zIndex);
              if (i === 0)
                this.overlay.style.zIndex = --zIndex;
            }
            var last = this.pendingDialogStack[0];
            if (last) {
              var p = last.dialog.parentNode || document.body;
              p.appendChild(this.overlay);
            } else if (this.overlay.parentNode)
              this.overlay.parentNode.removeChild(this.overlay);
          };
          dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {
            while (candidate = findNearestDialog(candidate)) {
              for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i)
                if (dpi.dialog === candidate)
                  return i === 0;
              candidate = candidate.parentElement;
            }
            return false;
          };
          dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {
            if (this.containedByTopDialog_(event.target))
              return;
            event.preventDefault();
            event.stopPropagation();
            safeBlur(event.target);
            if (this.forwardTab_ === void 0)
              return;
            var dpi = this.pendingDialogStack[0];
            var dialog = dpi.dialog;
            var position = dialog.compareDocumentPosition(event.target);
            if (position & Node.DOCUMENT_POSITION_PRECEDING)
              if (this.forwardTab_)
                dpi.focus_();
              else
                document.documentElement.focus();
            else
              ;
            return false;
          };
          dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {
            this.forwardTab_ = void 0;
            if (event.keyCode === 27) {
              event.preventDefault();
              event.stopPropagation();
              var cancelEvent = new supportCustomEvent("cancel", { bubbles: false, cancelable: true });
              var dpi = this.pendingDialogStack[0];
              if (dpi && dpi.dialog.dispatchEvent(cancelEvent))
                dpi.dialog.close();
            } else if (event.keyCode === 9)
              this.forwardTab_ = !event.shiftKey;
          };
          dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {
            var clone = this.pendingDialogStack.slice();
            clone.forEach(function(dpi) {
              if (removed.indexOf(dpi.dialog) !== -1)
                dpi.downgradeModal();
              else
                dpi.maybeHideModal();
            });
          };
          dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {
            var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
            if (this.pendingDialogStack.length >= allowed)
              return false;
            if (this.pendingDialogStack.unshift(dpi) === 1)
              this.blockDocument();
            this.updateStacking();
            return true;
          };
          dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {
            var index = this.pendingDialogStack.indexOf(dpi);
            if (index === -1)
              return;
            this.pendingDialogStack.splice(index, 1);
            if (this.pendingDialogStack.length === 0)
              this.unblockDocument();
            this.updateStacking();
          };
          dialogPolyfill.dm = new dialogPolyfill.DialogManager();
          dialogPolyfill.formSubmitter = null;
          dialogPolyfill.useValue = null;
          if (window.HTMLDialogElement === void 0) {
            var testForm = document.createElement("form");
            testForm.setAttribute("method", "dialog");
            if (testForm.method !== "dialog") {
              var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, "method");
              if (methodDescriptor) {
                var realGet = methodDescriptor.get;
                methodDescriptor.get = function() {
                  if (isFormMethodDialog(this))
                    return "dialog";
                  return realGet.call(this);
                };
                var realSet = methodDescriptor.set;
                methodDescriptor.set = function(v) {
                  if (typeof v === "string" && v.toLowerCase() === "dialog")
                    return this.setAttribute("method", v);
                  return realSet.call(this, v);
                };
                Object.defineProperty(HTMLFormElement.prototype, "method", methodDescriptor);
              }
            }
            document.addEventListener("click", function(ev) {
              dialogPolyfill.formSubmitter = null;
              dialogPolyfill.useValue = null;
              if (ev.defaultPrevented)
                return;
              var target = ev.target;
              if (!target || !isFormMethodDialog(target.form))
                return;
              var valid = target.type === "submit" && ["button", "input"].indexOf(target.localName) > -1;
              if (!valid) {
                if (!(target.localName === "input" && target.type === "image"))
                  return;
                dialogPolyfill.useValue = ev.offsetX + "," + ev.offsetY;
              }
              var dialog = findNearestDialog(target);
              if (!dialog)
                return;
              dialogPolyfill.formSubmitter = target;
            }, false);
            var nativeFormSubmit = HTMLFormElement.prototype.submit;
            var replacementFormSubmit = function() {
              if (!isFormMethodDialog(this))
                return nativeFormSubmit.call(this);
              var dialog = findNearestDialog(this);
              dialog && dialog.close();
            };
            HTMLFormElement.prototype.submit = replacementFormSubmit;
            document.addEventListener("submit", function(ev) {
              var form = ev.target;
              if (!isFormMethodDialog(form))
                return;
              ev.preventDefault();
              var dialog = findNearestDialog(form);
              if (!dialog)
                return;
              var s = dialogPolyfill.formSubmitter;
              if (s && s.form === form)
                dialog.close(dialogPolyfill.useValue || s.value);
              else
                dialog.close();
              dialogPolyfill.formSubmitter = null;
            }, true);
          }
          dialogPolyfill["forceRegisterDialog"] = dialogPolyfill.forceRegisterDialog;
          dialogPolyfill["registerDialog"] = dialogPolyfill.registerDialog;
          if (typeof define === "function" && "amd" in define)
            define(function() {
              return dialogPolyfill;
            });
          else if (typeof module === "object" && typeof module["exports"] === "object")
            module["exports"] = dialogPolyfill;
          else
            window["dialogPolyfill"] = dialogPolyfill;
        })();
        var componentHandler = { upgradeDom: function(optJsClass, optCssClass) {
        }, upgradeElement: function(element, optJsClass) {
        }, upgradeElements: function(elements) {
        }, upgradeAllRegistered: function() {
        }, registerUpgradedCallback: function(jsClass, callback) {
        }, register: function(config2) {
        }, downgradeElements: function(nodes) {
        } };
        componentHandler = function() {
          var registeredComponents_ = [];
          var createdComponents_ = [];
          var componentConfigProperty_ = "mdlComponentConfigInternal_";
          function findRegisteredClass_(name7, optReplace) {
            for (var i = 0; i < registeredComponents_.length; i++)
              if (registeredComponents_[i].className === name7) {
                if (typeof optReplace !== "undefined")
                  registeredComponents_[i] = optReplace;
                return registeredComponents_[i];
              }
            return false;
          }
          function getUpgradedListOfElement_(element) {
            var dataUpgraded = element.getAttribute("data-upgraded");
            return dataUpgraded === null ? [""] : dataUpgraded.split(",");
          }
          function isElementUpgraded_(element, jsClass) {
            var upgradedList = getUpgradedListOfElement_(element);
            return upgradedList.indexOf(jsClass) !== -1;
          }
          function createEvent_(eventType, bubbles, cancelable) {
            if ("CustomEvent" in window && typeof window.CustomEvent === "function")
              return new CustomEvent(eventType, { bubbles, cancelable });
            else {
              var ev = document.createEvent("Events");
              ev.initEvent(eventType, bubbles, cancelable);
              return ev;
            }
          }
          function upgradeDomInternal(optJsClass, optCssClass) {
            if (typeof optJsClass === "undefined" && typeof optCssClass === "undefined")
              for (var i = 0; i < registeredComponents_.length; i++)
                upgradeDomInternal(registeredComponents_[i].className, registeredComponents_[i].cssClass);
            else {
              var jsClass = optJsClass;
              if (typeof optCssClass === "undefined") {
                var registeredClass = findRegisteredClass_(jsClass);
                if (registeredClass)
                  optCssClass = registeredClass.cssClass;
              }
              var elements = document.querySelectorAll("." + optCssClass);
              for (var n = 0; n < elements.length; n++)
                upgradeElementInternal(elements[n], jsClass);
            }
          }
          function upgradeElementInternal(element, optJsClass) {
            if (!(typeof element === "object" && element instanceof Element))
              throw new Error("Invalid argument provided to upgrade MDL element.");
            var upgradingEv = createEvent_("mdl-componentupgrading", true, true);
            element.dispatchEvent(upgradingEv);
            if (upgradingEv.defaultPrevented)
              return;
            var upgradedList = getUpgradedListOfElement_(element);
            var classesToUpgrade = [];
            if (!optJsClass) {
              var classList = element.classList;
              registeredComponents_.forEach(function(component) {
                if (classList.contains(component.cssClass) && classesToUpgrade.indexOf(component) === -1 && !isElementUpgraded_(element, component.className))
                  classesToUpgrade.push(component);
              });
            } else if (!isElementUpgraded_(element, optJsClass))
              classesToUpgrade.push(findRegisteredClass_(optJsClass));
            for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {
              registeredClass = classesToUpgrade[i];
              if (registeredClass) {
                upgradedList.push(registeredClass.className);
                element.setAttribute("data-upgraded", upgradedList.join(","));
                var instance = new registeredClass.classConstructor(element);
                instance[componentConfigProperty_] = registeredClass;
                createdComponents_.push(instance);
                for (var j = 0, m = registeredClass.callbacks.length; j < m; j++)
                  registeredClass.callbacks[j](element);
                if (registeredClass.widget)
                  element[registeredClass.className] = instance;
              } else
                throw new Error("Unable to find a registered component for the given class.");
              var upgradedEv = createEvent_("mdl-componentupgraded", true, false);
              element.dispatchEvent(upgradedEv);
            }
          }
          function upgradeElementsInternal(elements) {
            if (!Array.isArray(elements))
              if (elements instanceof Element)
                elements = [elements];
              else
                elements = Array.prototype.slice.call(elements);
            for (var i = 0, n = elements.length, element; i < n; i++) {
              element = elements[i];
              if (element instanceof HTMLElement) {
                upgradeElementInternal(element);
                if (element.children.length > 0)
                  upgradeElementsInternal(element.children);
              }
            }
          }
          function registerInternal(config2) {
            var widgetMissing = typeof config2.widget === "undefined" && typeof config2["widget"] === "undefined";
            var widget = true;
            if (!widgetMissing)
              widget = config2.widget || config2["widget"];
            var newConfig = { classConstructor: config2.constructor || config2["constructor"], className: config2.classAsString || config2["classAsString"], cssClass: config2.cssClass || config2["cssClass"], widget, callbacks: [] };
            registeredComponents_.forEach(function(item) {
              if (item.cssClass === newConfig.cssClass)
                throw new Error("The provided cssClass has already been registered: " + item.cssClass);
              if (item.className === newConfig.className)
                throw new Error("The provided className has already been registered");
            });
            if (config2.constructor.prototype.hasOwnProperty(componentConfigProperty_))
              throw new Error("MDL component classes must not have " + componentConfigProperty_ + " defined as a property.");
            var found = findRegisteredClass_(config2.classAsString, newConfig);
            if (!found)
              registeredComponents_.push(newConfig);
          }
          function registerUpgradedCallbackInternal(jsClass, callback) {
            var regClass = findRegisteredClass_(jsClass);
            if (regClass)
              regClass.callbacks.push(callback);
          }
          function upgradeAllRegisteredInternal() {
            for (var n = 0; n < registeredComponents_.length; n++)
              upgradeDomInternal(registeredComponents_[n].className);
          }
          function deconstructComponentInternal(component) {
            if (component) {
              var componentIndex = createdComponents_.indexOf(component);
              createdComponents_.splice(componentIndex, 1);
              var upgrades = component.element_.getAttribute("data-upgraded").split(",");
              var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);
              upgrades.splice(componentPlace, 1);
              component.element_.setAttribute("data-upgraded", upgrades.join(","));
              var ev = createEvent_("mdl-componentdowngraded", true, false);
              component.element_.dispatchEvent(ev);
            }
          }
          function downgradeNodesInternal(nodes) {
            var downgradeNode = function(node) {
              createdComponents_.filter(function(item) {
                return item.element_ === node;
              }).forEach(deconstructComponentInternal);
            };
            if (nodes instanceof Array || nodes instanceof NodeList)
              for (var n = 0; n < nodes.length; n++)
                downgradeNode(nodes[n]);
            else if (nodes instanceof Node)
              downgradeNode(nodes);
            else
              throw new Error("Invalid argument provided to downgrade MDL nodes.");
          }
          return {
            upgradeDom: upgradeDomInternal,
            upgradeElement: upgradeElementInternal,
            upgradeElements: upgradeElementsInternal,
            upgradeAllRegistered: upgradeAllRegisteredInternal,
            registerUpgradedCallback: registerUpgradedCallbackInternal,
            register: registerInternal,
            downgradeElements: downgradeNodesInternal
          };
        }();
        componentHandler.ComponentConfigPublic;
        componentHandler.ComponentConfig;
        componentHandler.Component;
        componentHandler["upgradeDom"] = componentHandler.upgradeDom;
        componentHandler["upgradeElement"] = componentHandler.upgradeElement;
        componentHandler["upgradeElements"] = componentHandler.upgradeElements;
        componentHandler["upgradeAllRegistered"] = componentHandler.upgradeAllRegistered;
        componentHandler["registerUpgradedCallback"] = componentHandler.registerUpgradedCallback;
        componentHandler["register"] = componentHandler.register;
        componentHandler["downgradeElements"] = componentHandler.downgradeElements;
        window.componentHandler = componentHandler;
        window["componentHandler"] = componentHandler;
        window.addEventListener("load", function() {
          if ("classList" in document.createElement("div") && "querySelector" in document && "addEventListener" in window && Array.prototype.forEach) {
            document.documentElement.classList.add("mdl-js");
            componentHandler.upgradeAllRegistered();
          } else {
            componentHandler.upgradeElement = function() {
            };
            componentHandler.register = function() {
            };
          }
        });
        (function() {
          var MaterialButton = function MaterialButton2(element) {
            this.element_ = element;
            this.init();
          };
          window["MaterialButton"] = MaterialButton;
          MaterialButton.prototype.Constant_ = {};
          MaterialButton.prototype.CssClasses_ = { RIPPLE_EFFECT: "mdl-js-ripple-effect", RIPPLE_CONTAINER: "mdl-button__ripple-container", RIPPLE: "mdl-ripple" };
          MaterialButton.prototype.blurHandler_ = function(event) {
            if (event)
              this.element_.blur();
          };
          MaterialButton.prototype.disable = function() {
            this.element_.disabled = true;
          };
          MaterialButton.prototype["disable"] = MaterialButton.prototype.disable;
          MaterialButton.prototype.enable = function() {
            this.element_.disabled = false;
          };
          MaterialButton.prototype["enable"] = MaterialButton.prototype.enable;
          MaterialButton.prototype.init = function() {
            if (this.element_) {
              if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
                var rippleContainer = document.createElement("span");
                rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
                this.rippleElement_ = document.createElement("span");
                this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);
                rippleContainer.appendChild(this.rippleElement_);
                this.boundRippleBlurHandler = this.blurHandler_.bind(this);
                this.rippleElement_.addEventListener("mouseup", this.boundRippleBlurHandler);
                this.element_.appendChild(rippleContainer);
              }
              this.boundButtonBlurHandler = this.blurHandler_.bind(this);
              this.element_.addEventListener("mouseup", this.boundButtonBlurHandler);
              this.element_.addEventListener("mouseleave", this.boundButtonBlurHandler);
            }
          };
          componentHandler.register({
            constructor: MaterialButton,
            classAsString: "MaterialButton",
            cssClass: "mdl-js-button",
            widget: true
          });
        })();
        (function() {
          var MaterialProgress = function MaterialProgress2(element) {
            this.element_ = element;
            this.init();
          };
          window["MaterialProgress"] = MaterialProgress;
          MaterialProgress.prototype.Constant_ = {};
          MaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: "mdl-progress__indeterminate" };
          MaterialProgress.prototype.setProgress = function(p) {
            if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS))
              return;
            this.progressbar_.style.width = p + "%";
          };
          MaterialProgress.prototype["setProgress"] = MaterialProgress.prototype.setProgress;
          MaterialProgress.prototype.setBuffer = function(p) {
            this.bufferbar_.style.width = p + "%";
            this.auxbar_.style.width = 100 - p + "%";
          };
          MaterialProgress.prototype["setBuffer"] = MaterialProgress.prototype.setBuffer;
          MaterialProgress.prototype.init = function() {
            if (this.element_) {
              var el = document.createElement("div");
              el.className = "progressbar bar bar1";
              this.element_.appendChild(el);
              this.progressbar_ = el;
              el = document.createElement("div");
              el.className = "bufferbar bar bar2";
              this.element_.appendChild(el);
              this.bufferbar_ = el;
              el = document.createElement("div");
              el.className = "auxbar bar bar3";
              this.element_.appendChild(el);
              this.auxbar_ = el;
              this.progressbar_.style.width = "0%";
              this.bufferbar_.style.width = "100%";
              this.auxbar_.style.width = "0%";
              this.element_.classList.add("is-upgraded");
            }
          };
          componentHandler.register({ constructor: MaterialProgress, classAsString: "MaterialProgress", cssClass: "mdl-js-progress", widget: true });
        })();
        (function() {
          var MaterialSpinner = function MaterialSpinner2(element) {
            this.element_ = element;
            this.init();
          };
          window["MaterialSpinner"] = MaterialSpinner;
          MaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };
          MaterialSpinner.prototype.CssClasses_ = { MDL_SPINNER_LAYER: "mdl-spinner__layer", MDL_SPINNER_CIRCLE_CLIPPER: "mdl-spinner__circle-clipper", MDL_SPINNER_CIRCLE: "mdl-spinner__circle", MDL_SPINNER_GAP_PATCH: "mdl-spinner__gap-patch", MDL_SPINNER_LEFT: "mdl-spinner__left", MDL_SPINNER_RIGHT: "mdl-spinner__right" };
          MaterialSpinner.prototype.createLayer = function(index) {
            var layer = document.createElement("div");
            layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);
            layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + "-" + index);
            var leftClipper = document.createElement("div");
            leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);
            leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);
            var gapPatch = document.createElement("div");
            gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);
            var rightClipper = document.createElement("div");
            rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);
            rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);
            var circleOwners = [leftClipper, gapPatch, rightClipper];
            for (var i = 0; i < circleOwners.length; i++) {
              var circle = document.createElement("div");
              circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);
              circleOwners[i].appendChild(circle);
            }
            layer.appendChild(leftClipper);
            layer.appendChild(gapPatch);
            layer.appendChild(rightClipper);
            this.element_.appendChild(layer);
          };
          MaterialSpinner.prototype["createLayer"] = MaterialSpinner.prototype.createLayer;
          MaterialSpinner.prototype.stop = function() {
            this.element_.classList.remove("is-active");
          };
          MaterialSpinner.prototype["stop"] = MaterialSpinner.prototype.stop;
          MaterialSpinner.prototype.start = function() {
            this.element_.classList.add("is-active");
          };
          MaterialSpinner.prototype["start"] = MaterialSpinner.prototype.start;
          MaterialSpinner.prototype.init = function() {
            if (this.element_) {
              for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++)
                this.createLayer(i);
              this.element_.classList.add("is-upgraded");
            }
          };
          componentHandler.register({ constructor: MaterialSpinner, classAsString: "MaterialSpinner", cssClass: "mdl-js-spinner", widget: true });
        })();
        (function() {
          var MaterialTextfield = function MaterialTextfield2(element) {
            this.element_ = element;
            this.maxRows = this.Constant_.NO_MAX_ROWS;
            this.init();
          };
          window["MaterialTextfield"] = MaterialTextfield;
          MaterialTextfield.prototype.Constant_ = { NO_MAX_ROWS: -1, MAX_ROWS_ATTRIBUTE: "maxrows" };
          MaterialTextfield.prototype.CssClasses_ = { LABEL: "mdl-textfield__label", INPUT: "mdl-textfield__input", IS_DIRTY: "is-dirty", IS_FOCUSED: "is-focused", IS_DISABLED: "is-disabled", IS_INVALID: "is-invalid", IS_UPGRADED: "is-upgraded", HAS_PLACEHOLDER: "has-placeholder" };
          MaterialTextfield.prototype.onKeyDown_ = function(event) {
            var currentRowCount = event.target.value.split("\n").length;
            if (event.keyCode === 13) {
              if (currentRowCount >= this.maxRows)
                event.preventDefault();
            }
          };
          MaterialTextfield.prototype.onFocus_ = function(event) {
            this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
          };
          MaterialTextfield.prototype.onBlur_ = function(event) {
            this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
          };
          MaterialTextfield.prototype.onReset_ = function(event) {
            this.updateClasses_();
          };
          MaterialTextfield.prototype.updateClasses_ = function() {
            this.checkDisabled();
            this.checkValidity();
            this.checkDirty();
            this.checkFocus();
          };
          MaterialTextfield.prototype.checkDisabled = function() {
            if (this.input_.disabled)
              this.element_.classList.add(this.CssClasses_.IS_DISABLED);
            else
              this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
          };
          MaterialTextfield.prototype["checkDisabled"] = MaterialTextfield.prototype.checkDisabled;
          MaterialTextfield.prototype.checkFocus = function() {
            if (Boolean(this.element_.querySelector(":focus")))
              this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
            else
              this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
          };
          MaterialTextfield.prototype["checkFocus"] = MaterialTextfield.prototype.checkFocus;
          MaterialTextfield.prototype.checkValidity = function() {
            if (this.input_.validity)
              if (this.input_.validity.valid)
                this.element_.classList.remove(this.CssClasses_.IS_INVALID);
              else
                this.element_.classList.add(this.CssClasses_.IS_INVALID);
          };
          MaterialTextfield.prototype["checkValidity"] = MaterialTextfield.prototype.checkValidity;
          MaterialTextfield.prototype.checkDirty = function() {
            if (this.input_.value && this.input_.value.length > 0)
              this.element_.classList.add(this.CssClasses_.IS_DIRTY);
            else
              this.element_.classList.remove(this.CssClasses_.IS_DIRTY);
          };
          MaterialTextfield.prototype["checkDirty"] = MaterialTextfield.prototype.checkDirty;
          MaterialTextfield.prototype.disable = function() {
            this.input_.disabled = true;
            this.updateClasses_();
          };
          MaterialTextfield.prototype["disable"] = MaterialTextfield.prototype.disable;
          MaterialTextfield.prototype.enable = function() {
            this.input_.disabled = false;
            this.updateClasses_();
          };
          MaterialTextfield.prototype["enable"] = MaterialTextfield.prototype.enable;
          MaterialTextfield.prototype.change = function(value) {
            this.input_.value = value || "";
            this.updateClasses_();
          };
          MaterialTextfield.prototype["change"] = MaterialTextfield.prototype.change;
          MaterialTextfield.prototype.init = function() {
            if (this.element_) {
              this.label_ = this.element_.querySelector("." + this.CssClasses_.LABEL);
              this.input_ = this.element_.querySelector("." + this.CssClasses_.INPUT);
              if (this.input_) {
                if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {
                  this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);
                  if (isNaN(this.maxRows))
                    this.maxRows = this.Constant_.NO_MAX_ROWS;
                }
                if (this.input_.hasAttribute("placeholder"))
                  this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);
                this.boundUpdateClassesHandler = this.updateClasses_.bind(this);
                this.boundFocusHandler = this.onFocus_.bind(this);
                this.boundBlurHandler = this.onBlur_.bind(this);
                this.boundResetHandler = this.onReset_.bind(this);
                this.input_.addEventListener("input", this.boundUpdateClassesHandler);
                this.input_.addEventListener("focus", this.boundFocusHandler);
                this.input_.addEventListener("blur", this.boundBlurHandler);
                this.input_.addEventListener("reset", this.boundResetHandler);
                if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {
                  this.boundKeyDownHandler = this.onKeyDown_.bind(this);
                  this.input_.addEventListener("keydown", this.boundKeyDownHandler);
                }
                var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);
                this.updateClasses_();
                this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
                if (invalid)
                  this.element_.classList.add(this.CssClasses_.IS_INVALID);
                if (this.input_.hasAttribute("autofocus")) {
                  this.element_.focus();
                  this.checkFocus();
                }
              }
            }
          };
          componentHandler.register({ constructor: MaterialTextfield, classAsString: "MaterialTextfield", cssClass: "mdl-js-textfield", widget: true });
        })();
        (function() {
          var l, aa = typeof Object.create == "function" ? Object.create : function(a) {
            function b() {
            }
            b.prototype = a;
            return new b();
          }, ba;
          if (typeof Object.setPrototypeOf == "function")
            ba = Object.setPrototypeOf;
          else {
            var ca;
            a: {
              var da = { xb: true }, ea = {};
              try {
                ea.__proto__ = da;
                ca = ea.xb;
                break a;
              } catch (a) {
              }
              ca = false;
            }
            ba = ca ? function(a, b) {
              a.__proto__ = b;
              if (a.__proto__ !== b)
                throw new TypeError(a + " is not extensible");
              return a;
            } : null;
          }
          var fa = ba;
          function m(a, b) {
            a.prototype = aa(b.prototype);
            a.prototype.constructor = a;
            if (fa)
              fa(a, b);
            else
              for (var c in b)
                if (c != "prototype")
                  if (Object.defineProperties) {
                    var d = Object.getOwnPropertyDescriptor(b, c);
                    d && Object.defineProperty(a, c, d);
                  } else
                    a[c] = b[c];
            a.K = b.prototype;
          }
          var ha = typeof Object.defineProperties == "function" ? Object.defineProperty : function(a, b, c) {
            a != Array.prototype && a != Object.prototype && (a[b] = c.value);
          }, ia = typeof window != "undefined" && window === this ? this : typeof global != "undefined" && global != null ? global : this;
          function ja(a, b) {
            if (b) {
              var c = ia;
              a = a.split(".");
              for (var d = 0; d < a.length - 1; d++) {
                var e = a[d];
                e in c || (c[e] = {});
                c = c[e];
              }
              a = a[a.length - 1];
              d = c[a];
              b = b(d);
              b != d && b != null && ha(c, a, { configurable: true, writable: true, value: b });
            }
          }
          ja("Object.is", function(a) {
            return a ? a : function(b, c) {
              return b === c ? b !== 0 || 1 / b === 1 / c : b !== b && c !== c;
            };
          });
          ja("Array.prototype.includes", function(a) {
            return a ? a : function(b, c) {
              var d = this;
              d instanceof String && (d = String(d));
              var e = d.length;
              c = c || 0;
              for (0 > c && (c = Math.max(c + e, 0)); c < e; c++) {
                var f = d[c];
                if (f === b || Object.is(f, b))
                  return true;
              }
              return false;
            };
          });
          var n = this;
          function ka(a) {
            return a !== void 0;
          }
          function q(a) {
            return typeof a == "string";
          }
          var la = /^[\w+/_-]+[=]{0,2}$/, ma = null;
          function na() {
          }
          function oa(a) {
            a.W = void 0;
            a.Xa = function() {
              return a.W ? a.W : a.W = new a();
            };
          }
          function pa(a) {
            var b = typeof a;
            if (b == "object")
              if (a) {
                if (a instanceof Array)
                  return "array";
                if (a instanceof Object)
                  return b;
                var c = Object.prototype.toString.call(a);
                if (c == "[object Window]")
                  return "object";
                if (c == "[object Array]" || typeof a.length == "number" && typeof a.splice != "undefined" && typeof a.propertyIsEnumerable != "undefined" && !a.propertyIsEnumerable("splice"))
                  return "array";
                if (c == "[object Function]" || typeof a.call != "undefined" && typeof a.propertyIsEnumerable != "undefined" && !a.propertyIsEnumerable("call"))
                  return "function";
              } else
                return "null";
            else if (b == "function" && typeof a.call == "undefined")
              return "object";
            return b;
          }
          function qa(a) {
            return pa(a) == "array";
          }
          function ra(a) {
            var b = pa(a);
            return b == "array" || b == "object" && typeof a.length == "number";
          }
          function sa(a) {
            return pa(a) == "function";
          }
          function ta(a) {
            var b = typeof a;
            return b == "object" && a != null || b == "function";
          }
          var ua = "closure_uid_" + (1e9 * Math.random() >>> 0), va = 0;
          function wa(a, b, c) {
            return a.call.apply(a.bind, arguments);
          }
          function xa(a, b, c) {
            if (!a)
              throw Error();
            if (2 < arguments.length) {
              var d = Array.prototype.slice.call(arguments, 2);
              return function() {
                var e = Array.prototype.slice.call(arguments);
                Array.prototype.unshift.apply(e, d);
                return a.apply(b, e);
              };
            }
            return function() {
              return a.apply(b, arguments);
            };
          }
          function r(a, b, c) {
            Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? r = wa : r = xa;
            return r.apply(null, arguments);
          }
          function za(a, b) {
            var c = Array.prototype.slice.call(arguments, 1);
            return function() {
              var d = c.slice();
              d.push.apply(d, arguments);
              return a.apply(this, d);
            };
          }
          function u(a, b) {
            for (var c in b)
              a[c] = b[c];
          }
          var Aa = Date.now || function() {
            return +new Date();
          };
          function v(a, b) {
            a = a.split(".");
            var c = n;
            a[0] in c || typeof c.execScript == "undefined" || c.execScript("var " + a[0]);
            for (var d; a.length && (d = a.shift()); )
              !a.length && ka(b) ? c[d] = b : c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {};
          }
          function w(a, b) {
            function c() {
            }
            c.prototype = b.prototype;
            a.K = b.prototype;
            a.prototype = new c();
            a.prototype.constructor = a;
            a.vc = function(d, e, f) {
              for (var g = Array(arguments.length - 2), h = 2; h < arguments.length; h++)
                g[h - 2] = arguments[h];
              return b.prototype[e].apply(d, g);
            };
          }
          function Ba(a) {
            if (Error.captureStackTrace)
              Error.captureStackTrace(this, Ba);
            else {
              var b = Error().stack;
              b && (this.stack = b);
            }
            a && (this.message = String(a));
          }
          w(Ba, Error);
          Ba.prototype.name = "CustomError";
          var Da;
          function Ea(a, b) {
            a = a.split("%s");
            for (var c = "", d = a.length - 1, e = 0; e < d; e++)
              c += a[e] + (e < b.length ? b[e] : "%s");
            Ba.call(this, c + a[d]);
          }
          w(Ea, Ba);
          Ea.prototype.name = "AssertionError";
          function Fa(a, b) {
            throw new Ea("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
          }
          var Ga = Array.prototype.indexOf ? function(a, b) {
            return Array.prototype.indexOf.call(a, b, void 0);
          } : function(a, b) {
            if (q(a))
              return q(b) && b.length == 1 ? a.indexOf(b, 0) : -1;
            for (var c = 0; c < a.length; c++)
              if (c in a && a[c] === b)
                return c;
            return -1;
          }, Ha = Array.prototype.forEach ? function(a, b, c) {
            Array.prototype.forEach.call(a, b, c);
          } : function(a, b, c) {
            for (var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++)
              f in e && b.call(c, e[f], f, a);
          };
          function Ia(a, b) {
            for (var c = q(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d)
              d in c && b.call(void 0, c[d], d, a);
          }
          var Ja = Array.prototype.filter ? function(a, b) {
            return Array.prototype.filter.call(a, b, void 0);
          } : function(a, b) {
            for (var c = a.length, d = [], e = 0, f = q(a) ? a.split("") : a, g = 0; g < c; g++)
              if (g in f) {
                var h = f[g];
                b.call(void 0, h, g, a) && (d[e++] = h);
              }
            return d;
          }, Ka = Array.prototype.map ? function(a, b) {
            return Array.prototype.map.call(a, b, void 0);
          } : function(a, b) {
            for (var c = a.length, d = Array(c), e = q(a) ? a.split("") : a, f = 0; f < c; f++)
              f in e && (d[f] = b.call(void 0, e[f], f, a));
            return d;
          }, La = Array.prototype.some ? function(a, b) {
            return Array.prototype.some.call(a, b, void 0);
          } : function(a, b) {
            for (var c = a.length, d = q(a) ? a.split("") : a, e = 0; e < c; e++)
              if (e in d && b.call(void 0, d[e], e, a))
                return true;
            return false;
          };
          function Ma(a, b) {
            return 0 <= Ga(a, b);
          }
          function Na(a, b) {
            b = Ga(a, b);
            var c;
            (c = 0 <= b) && Oa(a, b);
            return c;
          }
          function Oa(a, b) {
            return Array.prototype.splice.call(a, b, 1).length == 1;
          }
          function Pa(a, b) {
            a: {
              for (var c = a.length, d = q(a) ? a.split("") : a, e = 0; e < c; e++)
                if (e in d && b.call(void 0, d[e], e, a)) {
                  b = e;
                  break a;
                }
              b = -1;
            }
            0 <= b && Oa(a, b);
          }
          function Qa(a, b) {
            var c = 0;
            Ia(a, function(d, e) {
              b.call(void 0, d, e, a) && Oa(a, e) && c++;
            });
          }
          function Ra(a) {
            return Array.prototype.concat.apply([], arguments);
          }
          function Sa(a) {
            var b = a.length;
            if (0 < b) {
              for (var c = Array(b), d = 0; d < b; d++)
                c[d] = a[d];
              return c;
            }
            return [];
          }
          function Ta(a, b, c) {
            return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
          }
          var Ua = String.prototype.trim ? function(a) {
            return a.trim();
          } : function(a) {
            return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
          }, Va = /&/g, Wa = /</g, Xa = />/g, Ya = /"/g, Za = /'/g, $a = /\x00/g, ab = /[\x00&<>"']/;
          function bb(a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
          }
          function cb(a) {
            ab.test(a) && (a.indexOf("&") != -1 && (a = a.replace(Va, "&amp;")), a.indexOf("<") != -1 && (a = a.replace(Wa, "&lt;")), a.indexOf(">") != -1 && (a = a.replace(Xa, "&gt;")), a.indexOf('"') != -1 && (a = a.replace(Ya, "&quot;")), a.indexOf("'") != -1 && (a = a.replace(Za, "&#39;")), a.indexOf("\0") != -1 && (a = a.replace($a, "&#0;")));
            return a;
          }
          function db(a, b, c) {
            for (var d in a)
              b.call(c, a[d], d, a);
          }
          function eb(a) {
            var b = {}, c;
            for (c in a)
              b[c] = a[c];
            return b;
          }
          var fb = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
          function gb(a, b) {
            for (var c, d, e = 1; e < arguments.length; e++) {
              d = arguments[e];
              for (c in d)
                a[c] = d[c];
              for (var f = 0; f < fb.length; f++)
                c = fb[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
            }
          }
          var hb = "StopIteration" in n ? n.StopIteration : { message: "StopIteration", stack: "" };
          function ib() {
          }
          ib.prototype.next = function() {
            throw hb;
          };
          ib.prototype.ha = function() {
            return this;
          };
          function jb(a) {
            if (a instanceof ib)
              return a;
            if (typeof a.ha == "function")
              return a.ha(false);
            if (ra(a)) {
              var b = 0, c = new ib();
              c.next = function() {
                for (; ; ) {
                  if (b >= a.length)
                    throw hb;
                  if (b in a)
                    return a[b++];
                  b++;
                }
              };
              return c;
            }
            throw Error("Not implemented");
          }
          function kb(a, b) {
            if (ra(a))
              try {
                Ha(a, b, void 0);
              } catch (c) {
                if (c !== hb)
                  throw c;
              }
            else {
              a = jb(a);
              try {
                for (; ; )
                  b.call(void 0, a.next(), void 0, a);
              } catch (c$1) {
                if (c$1 !== hb)
                  throw c$1;
              }
            }
          }
          function lb(a) {
            if (ra(a))
              return Sa(a);
            a = jb(a);
            var b = [];
            kb(a, function(c) {
              b.push(c);
            });
            return b;
          }
          function mb(a, b) {
            this.g = {};
            this.a = [];
            this.j = this.h = 0;
            var c = arguments.length;
            if (1 < c) {
              if (c % 2)
                throw Error("Uneven number of arguments");
              for (var d = 0; d < c; d += 2)
                this.set(arguments[d], arguments[d + 1]);
            } else if (a)
              if (a instanceof mb)
                for (c = a.ja(), d = 0; d < c.length; d++)
                  this.set(c[d], a.get(c[d]));
              else
                for (d in a)
                  this.set(d, a[d]);
          }
          l = mb.prototype;
          l.la = function() {
            nb(this);
            for (var a = [], b = 0; b < this.a.length; b++)
              a.push(this.g[this.a[b]]);
            return a;
          };
          l.ja = function() {
            nb(this);
            return this.a.concat();
          };
          l.clear = function() {
            this.g = {};
            this.j = this.h = this.a.length = 0;
          };
          function nb(a) {
            if (a.h != a.a.length) {
              for (var b = 0, c = 0; b < a.a.length; ) {
                var d = a.a[b];
                ob(a.g, d) && (a.a[c++] = d);
                b++;
              }
              a.a.length = c;
            }
            if (a.h != a.a.length) {
              var e = {};
              for (c = b = 0; b < a.a.length; )
                d = a.a[b], ob(e, d) || (a.a[c++] = d, e[d] = 1), b++;
              a.a.length = c;
            }
          }
          l.get = function(a, b) {
            return ob(this.g, a) ? this.g[a] : b;
          };
          l.set = function(a, b) {
            ob(this.g, a) || (this.h++, this.a.push(a), this.j++);
            this.g[a] = b;
          };
          l.forEach = function(a, b) {
            for (var c = this.ja(), d = 0; d < c.length; d++) {
              var e = c[d], f = this.get(e);
              a.call(b, f, e, this);
            }
          };
          l.ha = function(a) {
            nb(this);
            var b = 0, c = this.j, d = this, e = new ib();
            e.next = function() {
              if (c != d.j)
                throw Error("The map has changed since the iterator was created");
              if (b >= d.a.length)
                throw hb;
              var f = d.a[b++];
              return a ? f : d.g[f];
            };
            return e;
          };
          function ob(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
          }
          var pb = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
          function qb(a, b) {
            if (a) {
              a = a.split("&");
              for (var c = 0; c < a.length; c++) {
                var d = a[c].indexOf("="), e = null;
                if (0 <= d) {
                  var f = a[c].substring(0, d);
                  e = a[c].substring(d + 1);
                } else
                  f = a[c];
                b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
              }
            }
          }
          function rb(a, b, c, d) {
            for (var e = c.length; 0 <= (b = a.indexOf(c, b)) && b < d; ) {
              var f = a.charCodeAt(b - 1);
              if (f == 38 || f == 63) {
                if (f = a.charCodeAt(b + e), !f || f == 61 || f == 38 || f == 35)
                  return b;
              }
              b += e + 1;
            }
            return -1;
          }
          var sb = /#|$/;
          function tb(a, b) {
            var c = a.search(sb), d = rb(a, 0, b, c);
            if (0 > d)
              return null;
            var e = a.indexOf("&", d);
            if (0 > e || e > c)
              e = c;
            d += b.length + 1;
            return decodeURIComponent(a.substr(d, e - d).replace(/\+/g, " "));
          }
          var ub = /[?&]($|#)/;
          function vb(a, b) {
            this.h = this.A = this.j = "";
            this.C = null;
            this.s = this.g = "";
            this.i = false;
            var c;
            a instanceof vb ? (this.i = ka(b) ? b : a.i, wb(this, a.j), this.A = a.A, this.h = a.h, xb(this, a.C), this.g = a.g, yb(this, zb(a.a)), this.s = a.s) : a && (c = String(a).match(pb)) ? (this.i = !!b, wb(this, c[1] || "", true), this.A = Ab(c[2] || ""), this.h = Ab(c[3] || "", true), xb(this, c[4]), this.g = Ab(c[5] || "", true), yb(this, c[6] || "", true), this.s = Ab(c[7] || "")) : (this.i = !!b, this.a = new Bb(null, this.i));
          }
          vb.prototype.toString = function() {
            var a = [], b = this.j;
            b && a.push(Cb(b, Db, true), ":");
            var c = this.h;
            if (c || b == "file")
              a.push("//"), (b = this.A) && a.push(Cb(b, Db, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.C, c != null && a.push(":", String(c));
            if (c = this.g)
              this.h && c.charAt(0) != "/" && a.push("/"), a.push(Cb(c, c.charAt(0) == "/" ? Eb : Fb, true));
            (c = this.a.toString()) && a.push("?", c);
            (c = this.s) && a.push("#", Cb(c, Gb));
            return a.join("");
          };
          function wb(a, b, c) {
            a.j = c ? Ab(b, true) : b;
            a.j && (a.j = a.j.replace(/:$/, ""));
          }
          function xb(a, b) {
            if (b) {
              b = Number(b);
              if (isNaN(b) || 0 > b)
                throw Error("Bad port number " + b);
              a.C = b;
            } else
              a.C = null;
          }
          function yb(a, b, c) {
            b instanceof Bb ? (a.a = b, Hb(a.a, a.i)) : (c || (b = Cb(b, Ib)), a.a = new Bb(b, a.i));
          }
          function Jb(a) {
            return a instanceof vb ? new vb(a) : new vb(a, void 0);
          }
          function Ab(a, b) {
            return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
          }
          function Cb(a, b, c) {
            return q(a) ? (a = encodeURI(a).replace(b, Kb), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
          }
          function Kb(a) {
            a = a.charCodeAt(0);
            return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
          }
          var Db = /[#\/\?@]/g, Fb = /[#\?:]/g, Eb = /[#\?]/g, Ib = /[#\?@]/g, Gb = /#/g;
          function Bb(a, b) {
            this.g = this.a = null;
            this.h = a || null;
            this.j = !!b;
          }
          function Lb(a) {
            a.a || (a.a = new mb(), a.g = 0, a.h && qb(a.h, function(b, c) {
              a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
            }));
          }
          l = Bb.prototype;
          l.add = function(a, b) {
            Lb(this);
            this.h = null;
            a = Mb(this, a);
            var c = this.a.get(a);
            c || this.a.set(a, c = []);
            c.push(b);
            this.g += 1;
            return this;
          };
          function Nb(a, b) {
            Lb(a);
            b = Mb(a, b);
            ob(a.a.g, b) && (a.h = null, a.g -= a.a.get(b).length, a = a.a, ob(a.g, b) && (delete a.g[b], a.h--, a.j++, a.a.length > 2 * a.h && nb(a)));
          }
          l.clear = function() {
            this.a = this.h = null;
            this.g = 0;
          };
          function Ob(a, b) {
            Lb(a);
            b = Mb(a, b);
            return ob(a.a.g, b);
          }
          l.forEach = function(a, b) {
            Lb(this);
            this.a.forEach(function(c, d) {
              Ha(c, function(e) {
                a.call(b, e, d, this);
              }, this);
            }, this);
          };
          l.ja = function() {
            Lb(this);
            for (var a = this.a.la(), b = this.a.ja(), c = [], d = 0; d < b.length; d++)
              for (var e = a[d], f = 0; f < e.length; f++)
                c.push(b[d]);
            return c;
          };
          l.la = function(a) {
            Lb(this);
            var b = [];
            if (q(a))
              Ob(this, a) && (b = Ra(b, this.a.get(Mb(this, a))));
            else {
              a = this.a.la();
              for (var c = 0; c < a.length; c++)
                b = Ra(b, a[c]);
            }
            return b;
          };
          l.set = function(a, b) {
            Lb(this);
            this.h = null;
            a = Mb(this, a);
            Ob(this, a) && (this.g -= this.a.get(a).length);
            this.a.set(a, [b]);
            this.g += 1;
            return this;
          };
          l.get = function(a, b) {
            if (!a)
              return b;
            a = this.la(a);
            return 0 < a.length ? String(a[0]) : b;
          };
          l.toString = function() {
            if (this.h)
              return this.h;
            if (!this.a)
              return "";
            for (var a = [], b = this.a.ja(), c = 0; c < b.length; c++) {
              var d = b[c], e = encodeURIComponent(String(d));
              d = this.la(d);
              for (var f = 0; f < d.length; f++) {
                var g = e;
                d[f] !== "" && (g += "=" + encodeURIComponent(String(d[f])));
                a.push(g);
              }
            }
            return this.h = a.join("&");
          };
          function zb(a) {
            var b = new Bb();
            b.h = a.h;
            a.a && (b.a = new mb(a.a), b.g = a.g);
            return b;
          }
          function Mb(a, b) {
            b = String(b);
            a.j && (b = b.toLowerCase());
            return b;
          }
          function Hb(a, b) {
            b && !a.j && (Lb(a), a.h = null, a.a.forEach(function(c, d) {
              var e = d.toLowerCase();
              d != e && (Nb(this, d), Nb(this, e), 0 < c.length && (this.h = null, this.a.set(Mb(this, e), Sa(c)), this.g += c.length));
            }, a));
            a.j = b;
          }
          function Pb(a) {
            this.a = Jb(a);
          }
          function Qb(a, b) {
            b ? a.a.a.set(x.Sa, b) : Nb(a.a.a, x.Sa);
          }
          function Rb(a, b) {
            b !== null ? a.a.a.set(x.Qa, b ? "1" : "0") : Nb(a.a.a, x.Qa);
          }
          function Sb(a) {
            return a.a.a.get(x.Pa) || null;
          }
          function Tb(a, b) {
            b ? a.a.a.set(x.PROVIDER_ID, b) : Nb(a.a.a, x.PROVIDER_ID);
          }
          Pb.prototype.toString = function() {
            return this.a.toString();
          };
          var x = { Pa: "ui_auid", lc: "apiKey", Qa: "ui_sd", ub: "mode", $a: "oobCode", PROVIDER_ID: "ui_pid", Sa: "ui_sid", vb: "tenantId" };
          var Ub;
          a: {
            var Vb = n.navigator;
            if (Vb) {
              var Wb = Vb.userAgent;
              if (Wb) {
                Ub = Wb;
                break a;
              }
            }
            Ub = "";
          }
          function y(a) {
            return Ub.indexOf(a) != -1;
          }
          function Xb() {
            return (y("Chrome") || y("CriOS")) && !y("Edge");
          }
          function Yb(a) {
            Yb[" "](a);
            return a;
          }
          Yb[" "] = na;
          function Zb(a, b) {
            var c = $b;
            return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
          }
          var ac = y("Opera"), z = y("Trident") || y("MSIE"), bc = y("Edge"), cc = bc || z, dc = y("Gecko") && !(Ub.toLowerCase().indexOf("webkit") != -1 && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"), ec = Ub.toLowerCase().indexOf("webkit") != -1 && !y("Edge"), fc = ec && y("Mobile"), gc = y("Macintosh");
          function hc() {
            var a = n.document;
            return a ? a.documentMode : void 0;
          }
          var ic;
          a: {
            var jc = "", kc = function() {
              var a = Ub;
              if (dc)
                return /rv:([^\);]+)(\)|;)/.exec(a);
              if (bc)
                return /Edge\/([\d\.]+)/.exec(a);
              if (z)
                return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
              if (ec)
                return /WebKit\/(\S+)/.exec(a);
              if (ac)
                return /(?:Version)[ \/]?(\S+)/.exec(a);
            }();
            kc && (jc = kc ? kc[1] : "");
            if (z) {
              var lc = hc();
              if (lc != null && lc > parseFloat(jc)) {
                ic = String(lc);
                break a;
              }
            }
            ic = jc;
          }
          var $b = {};
          function mc(a) {
            return Zb(a, function() {
              for (var b = 0, c = Ua(String(ic)).split("."), d = Ua(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; b == 0 && f < e; f++) {
                var g = c[f] || "", h = d[f] || "";
                do {
                  g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
                  h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
                  if (g[0].length == 0 && h[0].length == 0)
                    break;
                  b = bb(g[1].length == 0 ? 0 : parseInt(g[1], 10), h[1].length == 0 ? 0 : parseInt(h[1], 10)) || bb(g[2].length == 0, h[2].length == 0) || bb(g[2], h[2]);
                  g = g[3];
                  h = h[3];
                } while (b == 0);
              }
              return 0 <= b;
            });
          }
          var nc;
          var oc = n.document;
          nc = oc && z ? hc() || (oc.compatMode == "CSS1Compat" ? parseInt(ic, 10) : 5) : void 0;
          function pc(a, b) {
            this.a = a === qc && b || "";
            this.g = rc;
          }
          pc.prototype.ma = true;
          pc.prototype.ka = function() {
            return this.a;
          };
          pc.prototype.toString = function() {
            return "Const{" + this.a + "}";
          };
          var rc = {}, qc = {};
          function sc() {
            this.a = "";
            this.h = tc;
          }
          sc.prototype.ma = true;
          sc.prototype.ka = function() {
            return this.a.toString();
          };
          sc.prototype.g = function() {
            return 1;
          };
          sc.prototype.toString = function() {
            return "TrustedResourceUrl{" + this.a + "}";
          };
          function uc(a) {
            if (a instanceof sc && a.constructor === sc && a.h === tc)
              return a.a;
            Fa("expected object of type TrustedResourceUrl, got '" + a + "' of type " + pa(a));
            return "type_error:TrustedResourceUrl";
          }
          function vc() {
            var a = wc;
            a instanceof pc && a.constructor === pc && a.g === rc ? a = a.a : (Fa("expected object of type Const, got '" + a + "'"), a = "type_error:Const");
            var b = new sc();
            b.a = a;
            return b;
          }
          var tc = {};
          function xc() {
            this.a = "";
            this.h = yc;
          }
          xc.prototype.ma = true;
          xc.prototype.ka = function() {
            return this.a.toString();
          };
          xc.prototype.g = function() {
            return 1;
          };
          xc.prototype.toString = function() {
            return "SafeUrl{" + this.a + "}";
          };
          function zc(a) {
            if (a instanceof xc && a.constructor === xc && a.h === yc)
              return a.a;
            Fa("expected object of type SafeUrl, got '" + a + "' of type " + pa(a));
            return "type_error:SafeUrl";
          }
          var Ac = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
          function Bc(a) {
            if (a instanceof xc)
              return a;
            a = typeof a == "object" && a.ma ? a.ka() : String(a);
            Ac.test(a) || (a = "about:invalid#zClosurez");
            return Cc(a);
          }
          function Dc(a) {
            if (a instanceof xc)
              return a;
            a = typeof a == "object" && a.ma ? a.ka() : String(a);
            Ac.test(a) || (a = "about:invalid#zClosurez");
            return Cc(a);
          }
          var yc = {};
          function Cc(a) {
            var b = new xc();
            b.a = a;
            return b;
          }
          Cc("about:blank");
          function Ec() {
            this.a = "";
            this.g = Fc;
          }
          Ec.prototype.ma = true;
          var Fc = {};
          Ec.prototype.ka = function() {
            return this.a;
          };
          Ec.prototype.toString = function() {
            return "SafeStyle{" + this.a + "}";
          };
          function Gc() {
            this.a = "";
            this.j = Hc;
            this.h = null;
          }
          Gc.prototype.g = function() {
            return this.h;
          };
          Gc.prototype.ma = true;
          Gc.prototype.ka = function() {
            return this.a.toString();
          };
          Gc.prototype.toString = function() {
            return "SafeHtml{" + this.a + "}";
          };
          function Ic(a) {
            if (a instanceof Gc && a.constructor === Gc && a.j === Hc)
              return a.a;
            Fa("expected object of type SafeHtml, got '" + a + "' of type " + pa(a));
            return "type_error:SafeHtml";
          }
          var Hc = {};
          function Jc(a, b) {
            var c = new Gc();
            c.a = a;
            c.h = b;
            return c;
          }
          Jc("<!DOCTYPE html>", 0);
          var Kc = Jc("", 0);
          Jc("<br>", 0);
          var Lc = function(a) {
            var b = false, c;
            return function() {
              b || (c = a(), b = true);
              return c;
            };
          }(function() {
            if (typeof document === "undefined")
              return false;
            var a = document.createElement("div"), b = document.createElement("div");
            b.appendChild(document.createElement("div"));
            a.appendChild(b);
            if (!a.firstChild)
              return false;
            b = a.firstChild.firstChild;
            a.innerHTML = Ic(Kc);
            return !b.parentElement;
          });
          function Mc(a, b) {
            a.src = uc(b);
            if (ma === null)
              b: {
                b = n.document;
                if ((b = b.querySelector && b.querySelector("script[nonce]")) && (b = b.nonce || b.getAttribute("nonce")) && la.test(b)) {
                  ma = b;
                  break b;
                }
                ma = "";
              }
            b = ma;
            b && a.setAttribute("nonce", b);
          }
          function Nc(a, b) {
            b = b instanceof xc ? b : Dc(b);
            a.assign(zc(b));
          }
          function Oc(a, b) {
            this.a = ka(a) ? a : 0;
            this.g = ka(b) ? b : 0;
          }
          Oc.prototype.toString = function() {
            return "(" + this.a + ", " + this.g + ")";
          };
          Oc.prototype.ceil = function() {
            this.a = Math.ceil(this.a);
            this.g = Math.ceil(this.g);
            return this;
          };
          Oc.prototype.floor = function() {
            this.a = Math.floor(this.a);
            this.g = Math.floor(this.g);
            return this;
          };
          Oc.prototype.round = function() {
            this.a = Math.round(this.a);
            this.g = Math.round(this.g);
            return this;
          };
          function Pc(a, b) {
            this.width = a;
            this.height = b;
          }
          l = Pc.prototype;
          l.toString = function() {
            return "(" + this.width + " x " + this.height + ")";
          };
          l.aspectRatio = function() {
            return this.width / this.height;
          };
          l.ceil = function() {
            this.width = Math.ceil(this.width);
            this.height = Math.ceil(this.height);
            return this;
          };
          l.floor = function() {
            this.width = Math.floor(this.width);
            this.height = Math.floor(this.height);
            return this;
          };
          l.round = function() {
            this.width = Math.round(this.width);
            this.height = Math.round(this.height);
            return this;
          };
          function Qc(a) {
            return a ? new Rc(Sc(a)) : Da || (Da = new Rc());
          }
          function Tc(a, b) {
            var c = b || document;
            return c.querySelectorAll && c.querySelector ? c.querySelectorAll("." + a) : Uc(document, a, b);
          }
          function Vc(a, b) {
            var c = b || document;
            if (c.getElementsByClassName)
              a = c.getElementsByClassName(a)[0];
            else {
              c = document;
              var d = b || c;
              a = d.querySelectorAll && d.querySelector && a ? d.querySelector(a ? "." + a : "") : Uc(c, a, b)[0] || null;
            }
            return a || null;
          }
          function Uc(a, b, c) {
            var d;
            a = c || a;
            if (a.querySelectorAll && a.querySelector && b)
              return a.querySelectorAll(b ? "." + b : "");
            if (b && a.getElementsByClassName) {
              var e = a.getElementsByClassName(b);
              return e;
            }
            e = a.getElementsByTagName("*");
            if (b) {
              var f = {};
              for (c = d = 0; a = e[c]; c++) {
                var g = a.className;
                typeof g.split == "function" && Ma(g.split(/\s+/), b) && (f[d++] = a);
              }
              f.length = d;
              return f;
            }
            return e;
          }
          function Wc(a, b) {
            db(b, function(c, d) {
              c && typeof c == "object" && c.ma && (c = c.ka());
              d == "style" ? a.style.cssText = c : d == "class" ? a.className = c : d == "for" ? a.htmlFor = c : Xc.hasOwnProperty(d) ? a.setAttribute(Xc[d], c) : d.lastIndexOf("aria-", 0) == 0 || d.lastIndexOf("data-", 0) == 0 ? a.setAttribute(d, c) : a[d] = c;
            });
          }
          var Xc = {
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            colspan: "colSpan",
            frameborder: "frameBorder",
            height: "height",
            maxlength: "maxLength",
            nonce: "nonce",
            role: "role",
            rowspan: "rowSpan",
            type: "type",
            usemap: "useMap",
            valign: "vAlign",
            width: "width"
          };
          function Yc(a) {
            return a.scrollingElement ? a.scrollingElement : ec || a.compatMode != "CSS1Compat" ? a.body || a.documentElement : a.documentElement;
          }
          function Zc(a) {
            a && a.parentNode && a.parentNode.removeChild(a);
          }
          function Sc(a) {
            return a.nodeType == 9 ? a : a.ownerDocument || a.document;
          }
          function $c(a, b) {
            if ("textContent" in a)
              a.textContent = b;
            else if (a.nodeType == 3)
              a.data = String(b);
            else if (a.firstChild && a.firstChild.nodeType == 3) {
              for (; a.lastChild != a.firstChild; )
                a.removeChild(a.lastChild);
              a.firstChild.data = String(b);
            } else {
              for (var c; c = a.firstChild; )
                a.removeChild(c);
              a.appendChild(Sc(a).createTextNode(String(b)));
            }
          }
          function ad(a, b) {
            return b ? bd(a, function(c) {
              return !b || q(c.className) && Ma(c.className.split(/\s+/), b);
            }) : null;
          }
          function bd(a, b) {
            for (var c = 0; a; ) {
              if (b(a))
                return a;
              a = a.parentNode;
              c++;
            }
            return null;
          }
          function Rc(a) {
            this.a = a || n.document || document;
          }
          Rc.prototype.N = function() {
            return q(void 0) ? this.a.getElementById(void 0) : void 0;
          };
          var cd = { Fc: true }, dd = { Hc: true }, ed = { Ec: true }, fd = { Gc: true };
          function gd() {
            throw Error("Do not instantiate directly");
          }
          gd.prototype.va = null;
          gd.prototype.toString = function() {
            return this.content;
          };
          function hd(a, b, c, d) {
            a = a(b || id, void 0, c);
            d = (d || Qc()).a.createElement("DIV");
            a = jd(a);
            a.match(kd);
            a = Jc(a, null);
            if (Lc())
              for (; d.lastChild; )
                d.removeChild(d.lastChild);
            d.innerHTML = Ic(a);
            d.childNodes.length == 1 && (a = d.firstChild, a.nodeType == 1 && (d = a));
            return d;
          }
          function jd(a) {
            if (!ta(a))
              return cb(String(a));
            if (a instanceof gd) {
              if (a.fa === cd)
                return a.content;
              if (a.fa === fd)
                return cb(a.content);
            }
            Fa("Soy template output is unsafe for use as HTML: " + a);
            return "zSoyz";
          }
          var kd = /^<(body|caption|col|colgroup|head|html|tr|td|th|tbody|thead|tfoot)>/i, id = {};
          function nd(a) {
            if (a != null)
              switch (a.va) {
                case 1:
                  return 1;
                case -1:
                  return -1;
                case 0:
                  return 0;
              }
            return null;
          }
          function od() {
            gd.call(this);
          }
          w(od, gd);
          od.prototype.fa = cd;
          function A(a) {
            return a != null && a.fa === cd ? a : a instanceof Gc ? B(Ic(a).toString(), a.g()) : B(cb(String(String(a))), nd(a));
          }
          function pd() {
            gd.call(this);
          }
          w(pd, gd);
          pd.prototype.fa = dd;
          pd.prototype.va = 1;
          function qd(a, b) {
            this.content = String(a);
            this.va = b != null ? b : null;
          }
          w(qd, gd);
          qd.prototype.fa = fd;
          function C(a) {
            return new qd(a, void 0);
          }
          var B = function(a) {
            function b(c) {
              this.content = c;
            }
            b.prototype = a.prototype;
            return function(c, d) {
              c = new b(String(c));
              d !== void 0 && (c.va = d);
              return c;
            };
          }(od), rd = function(a) {
            function b(c) {
              this.content = c;
            }
            b.prototype = a.prototype;
            return function(c) {
              return new b(String(c));
            };
          }(pd);
          function sd(a) {
            function b() {
            }
            var c = { label: D("New password") };
            b.prototype = a;
            a = new b();
            for (var d in c)
              a[d] = c[d];
            return a;
          }
          function D(a) {
            return (a = String(a)) ? new qd(a, void 0) : "";
          }
          var td = function(a) {
            function b(c) {
              this.content = c;
            }
            b.prototype = a.prototype;
            return function(c, d) {
              c = String(c);
              if (!c)
                return "";
              c = new b(c);
              d !== void 0 && (c.va = d);
              return c;
            };
          }(od);
          function ud(a) {
            return a != null && a.fa === cd ? String(String(a.content).replace(vd, "").replace(wd, "&lt;")).replace(xd, yd) : cb(String(a));
          }
          function zd(a) {
            a != null && a.fa === dd ? a = String(a).replace(Ad, Bd) : a instanceof xc ? a = String(zc(a).toString()).replace(Ad, Bd) : (a = String(a), Cd.test(a) ? a = a.replace(Ad, Bd) : (Fa("Bad value `%s` for |filterNormalizeUri", [a]), a = "#zSoyz"));
            return a;
          }
          function Dd(a) {
            a != null && a.fa === ed ? a = a.content : a == null ? a = "" : a instanceof Ec ? a instanceof Ec && a.constructor === Ec && a.g === Fc ? a = a.a : (Fa("expected object of type SafeStyle, got '" + a + "' of type " + pa(a)), a = "type_error:SafeStyle") : (a = String(a), Ed.test(a) || (Fa("Bad value `%s` for |filterCssValue", [a]), a = "zSoyz"));
            return a;
          }
          var Fd = {
            "\0": "&#0;",
            "	": "&#9;",
            "\n": "&#10;",
            "\v": "&#11;",
            "\f": "&#12;",
            "\r": "&#13;",
            " ": "&#32;",
            '"': "&quot;",
            "&": "&amp;",
            "'": "&#39;",
            "-": "&#45;",
            "/": "&#47;",
            "<": "&lt;",
            "=": "&#61;",
            ">": "&gt;",
            "`": "&#96;",
            "\x85": "&#133;",
            "\xA0": "&#160;",
            "\u2028": "&#8232;",
            "\u2029": "&#8233;"
          };
          function yd(a) {
            return Fd[a];
          }
          var Gd = {
            "\0": "%00",
            "": "%01",
            "": "%02",
            "": "%03",
            "": "%04",
            "": "%05",
            "": "%06",
            "\x07": "%07",
            "\b": "%08",
            "	": "%09",
            "\n": "%0A",
            "\v": "%0B",
            "\f": "%0C",
            "\r": "%0D",
            "": "%0E",
            "": "%0F",
            "": "%10",
            "": "%11",
            "": "%12",
            "": "%13",
            "": "%14",
            "": "%15",
            "": "%16",
            "": "%17",
            "": "%18",
            "": "%19",
            "": "%1A",
            "\x1B": "%1B",
            "": "%1C",
            "": "%1D",
            "": "%1E",
            "": "%1F",
            " ": "%20",
            '"': "%22",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "<": "%3C",
            ">": "%3E",
            "\\": "%5C",
            "{": "%7B",
            "}": "%7D",
            "\x7F": "%7F",
            "\x85": "%C2%85",
            "\xA0": "%C2%A0",
            "\u2028": "%E2%80%A8",
            "\u2029": "%E2%80%A9",
            "\uFF01": "%EF%BC%81",
            "\uFF03": "%EF%BC%83",
            "\uFF04": "%EF%BC%84",
            "\uFF06": "%EF%BC%86",
            "\uFF07": "%EF%BC%87",
            "\uFF08": "%EF%BC%88",
            "\uFF09": "%EF%BC%89",
            "\uFF0A": "%EF%BC%8A",
            "\uFF0B": "%EF%BC%8B",
            "\uFF0C": "%EF%BC%8C",
            "\uFF0F": "%EF%BC%8F",
            "\uFF1A": "%EF%BC%9A",
            "\uFF1B": "%EF%BC%9B",
            "\uFF1D": "%EF%BC%9D",
            "\uFF1F": "%EF%BC%9F",
            "\uFF20": "%EF%BC%A0",
            "\uFF3B": "%EF%BC%BB",
            "\uFF3D": "%EF%BC%BD"
          };
          function Bd(a) {
            return Gd[a];
          }
          var xd = /[\x00\x22\x27\x3c\x3e]/g, Ad = /[\x00- \x22\x27-\x29\x3c\x3e\\\x7b\x7d\x7f\x85\xa0\u2028\u2029\uff01\uff03\uff04\uff06-\uff0c\uff0f\uff1a\uff1b\uff1d\uff1f\uff20\uff3b\uff3d]/g, Ed = /^(?!-*(?:expression|(?:moz-)?binding))(?:[.#]?-?(?:[_a-z0-9-]+)(?:-[_a-z0-9-]+)*-?|-?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[a-z]{1,2}|%)?|!important|)$/i, Cd = /^(?![^#?]*\/(?:\.|%2E){2}(?:[\/?#]|$))(?:(?:https?|mailto):|[^&:\/?#]*(?:[\/?#]|$))/i, vd = /<(?:!|\/?([a-zA-Z][a-zA-Z0-9:\-]*))(?:[^>'"]|"[^"]*"|'[^']*')*>/g, wd = /</g;
          function Hd() {
            return C("Enter a valid phone number");
          }
          function Id() {
            return C("Unable to send password reset code to specified email");
          }
          function Jd() {
            return C("Something went wrong. Please try again.");
          }
          function Kd() {
            return C("This email already exists without any means of sign-in. Please reset the password to recover.");
          }
          function Ld(a) {
            a = a || {};
            var b = "";
            switch (a.code) {
              case "invalid-argument":
                b += "Client specified an invalid argument.";
                break;
              case "invalid-configuration":
                b += "Client specified an invalid project configuration.";
                break;
              case "failed-precondition":
                b += "Request can not be executed in the current system state.";
                break;
              case "out-of-range":
                b += "Client specified an invalid range.";
                break;
              case "unauthenticated":
                b += "Request not authenticated due to missing, invalid, or expired OAuth token.";
                break;
              case "permission-denied":
                b += "Client does not have sufficient permission.";
                break;
              case "not-found":
                b += "Specified resource is not found.";
                break;
              case "aborted":
                b += "Concurrency conflict, such as read-modify-write conflict.";
                break;
              case "already-exists":
                b += "The resource that a client tried to create already exists.";
                break;
              case "resource-exhausted":
                b += "Either out of resource quota or reaching rate limiting.";
                break;
              case "cancelled":
                b += "Request cancelled by the client.";
                break;
              case "data-loss":
                b += "Unrecoverable data loss or data corruption.";
                break;
              case "unknown":
                b += "Unknown server error.";
                break;
              case "internal":
                b += "Internal server error.";
                break;
              case "not-implemented":
                b += "API method not implemented by the server.";
                break;
              case "unavailable":
                b += "Service unavailable.";
                break;
              case "deadline-exceeded":
                b += "Request deadline exceeded.";
                break;
              case "auth/user-disabled":
                b += "The user account has been disabled by an administrator.";
                break;
              case "auth/timeout":
                b += "The operation has timed out.";
                break;
              case "auth/too-many-requests":
                b += "We have blocked all requests from this device due to unusual activity. Try again later.";
                break;
              case "auth/quota-exceeded":
                b += "The quota for this operation has been exceeded. Try again later.";
                break;
              case "auth/network-request-failed":
                b += "A network error has occurred. Try again later.";
                break;
              case "restart-process":
                b += "An issue was encountered when authenticating your request. Please visit the URL that redirected you to this page again to restart the authentication process.";
                break;
              case "no-matching-tenant-for-email":
                b += "No sign-in provider is available for the given email, please try with a different email.";
            }
            return C(b);
          }
          function Md() {
            return C("Please login again to perform this operation");
          }
          function Nd(a, b, c) {
            var d = Error.call(this);
            this.message = d.message;
            "stack" in d && (this.stack = d.stack);
            this.code = Od + a;
            if (!(a = b)) {
              a = "";
              switch (this.code) {
                case "firebaseui/merge-conflict":
                  a += "The current anonymous user failed to upgrade. The non-anonymous credential is already associated with a different user account.";
                  break;
                default:
                  a += Jd();
              }
              a = C(a).toString();
            }
            this.message = a || "";
            this.credential = c || null;
          }
          m(Nd, Error);
          Nd.prototype.toJSON = function() {
            return {
              code: this.code,
              message: this.message
            };
          };
          var Od = "firebaseui/";
          function Pd() {
            Qd != 0 && (Rd[this[ua] || (this[ua] = ++va)] = this);
            this.T = this.T;
            this.C = this.C;
          }
          var Qd = 0, Rd = {};
          Pd.prototype.T = false;
          Pd.prototype.m = function() {
            if (!this.T && (this.T = true, this.o(), Qd != 0)) {
              var a = this[ua] || (this[ua] = ++va);
              if (Qd != 0 && this.C && 0 < this.C.length)
                throw Error(this + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
              delete Rd[a];
            }
          };
          function Sd(a, b) {
            a.T ? ka(void 0) ? b.call(void 0) : b() : (a.C || (a.C = []), a.C.push(ka(void 0) ? r(b, void 0) : b));
          }
          Pd.prototype.o = function() {
            if (this.C)
              for (; this.C.length; )
                this.C.shift()();
          };
          function Td(a) {
            a && typeof a.m == "function" && a.m();
          }
          var Ud = Object.freeze || function(a) {
            return a;
          };
          var Vd = !z || 9 <= Number(nc), Wd = z && !mc("9"), Xd = function() {
            if (!n.addEventListener || !Object.defineProperty)
              return false;
            var a = false, b = Object.defineProperty({}, "passive", { get: function() {
              a = true;
            } });
            try {
              n.addEventListener("test", na, b), n.removeEventListener("test", na, b);
            } catch (c) {
            }
            return a;
          }();
          function Yd(a, b) {
            this.type = a;
            this.g = this.target = b;
            this.h = false;
            this.qb = true;
          }
          Yd.prototype.stopPropagation = function() {
            this.h = true;
          };
          Yd.prototype.preventDefault = function() {
            this.qb = false;
          };
          function Zd(a, b) {
            Yd.call(this, a ? a.type : "");
            this.relatedTarget = this.g = this.target = null;
            this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
            this.key = "";
            this.j = this.keyCode = 0;
            this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
            this.pointerId = 0;
            this.pointerType = "";
            this.a = null;
            if (a) {
              var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
              this.target = a.target || a.srcElement;
              this.g = b;
              if (b = a.relatedTarget) {
                if (dc) {
                  a: {
                    try {
                      Yb(b.nodeName);
                      var e = true;
                      break a;
                    } catch (f) {
                    }
                    e = false;
                  }
                  e || (b = null);
                }
              } else
                c == "mouseover" ? b = a.fromElement : c == "mouseout" && (b = a.toElement);
              this.relatedTarget = b;
              d ? (this.clientX = d.clientX !== void 0 ? d.clientX : d.pageX, this.clientY = d.clientY !== void 0 ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = a.clientX !== void 0 ? a.clientX : a.pageX, this.clientY = a.clientY !== void 0 ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
              this.button = a.button;
              this.keyCode = a.keyCode || 0;
              this.key = a.key || "";
              this.j = a.charCode || (c == "keypress" ? a.keyCode : 0);
              this.ctrlKey = a.ctrlKey;
              this.altKey = a.altKey;
              this.shiftKey = a.shiftKey;
              this.metaKey = a.metaKey;
              this.pointerId = a.pointerId || 0;
              this.pointerType = q(a.pointerType) ? a.pointerType : $d[a.pointerType] || "";
              this.a = a;
              a.defaultPrevented && this.preventDefault();
            }
          }
          w(Zd, Yd);
          var $d = Ud({ 2: "touch", 3: "pen", 4: "mouse" });
          Zd.prototype.stopPropagation = function() {
            Zd.K.stopPropagation.call(this);
            this.a.stopPropagation ? this.a.stopPropagation() : this.a.cancelBubble = true;
          };
          Zd.prototype.preventDefault = function() {
            Zd.K.preventDefault.call(this);
            var a = this.a;
            if (a.preventDefault)
              a.preventDefault();
            else if (a.returnValue = false, Wd)
              try {
                if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
                  a.keyCode = -1;
              } catch (b) {
              }
          };
          var ae = "closure_listenable_" + (1e6 * Math.random() | 0), be = 0;
          function ce(a, b, c, d, e) {
            this.listener = a;
            this.proxy = null;
            this.src = b;
            this.type = c;
            this.capture = !!d;
            this.La = e;
            this.key = ++be;
            this.sa = this.Ia = false;
          }
          function de(a) {
            a.sa = true;
            a.listener = null;
            a.proxy = null;
            a.src = null;
            a.La = null;
          }
          function ee(a) {
            this.src = a;
            this.a = {};
            this.g = 0;
          }
          ee.prototype.add = function(a, b, c, d, e) {
            var f = a.toString();
            a = this.a[f];
            a || (a = this.a[f] = [], this.g++);
            var g = fe(a, b, d, e);
            -1 < g ? (b = a[g], c || (b.Ia = false)) : (b = new ce(b, this.src, f, !!d, e), b.Ia = c, a.push(b));
            return b;
          };
          function ge(a, b) {
            var c = b.type;
            c in a.a && Na(a.a[c], b) && (de(b), a.a[c].length == 0 && (delete a.a[c], a.g--));
          }
          function fe(a, b, c, d) {
            for (var e = 0; e < a.length; ++e) {
              var f = a[e];
              if (!f.sa && f.listener == b && f.capture == !!c && f.La == d)
                return e;
            }
            return -1;
          }
          var he = "closure_lm_" + (1e6 * Math.random() | 0), ie = {}, je = 0;
          function ke(a, b, c, d, e) {
            if (d && d.once)
              return le(a, b, c, d, e);
            if (qa(b)) {
              for (var f = 0; f < b.length; f++)
                ke(a, b[f], c, d, e);
              return null;
            }
            c = me(c);
            return a && a[ae] ? a.J.add(String(b), c, false, ta(d) ? !!d.capture : !!d, e) : ne(a, b, c, false, d, e);
          }
          function ne(a, b, c, d, e, f) {
            if (!b)
              throw Error("Invalid event type");
            var g = ta(e) ? !!e.capture : !!e, h = oe(a);
            h || (a[he] = h = new ee(a));
            c = h.add(b, c, d, g, f);
            if (c.proxy)
              return c;
            d = pe();
            c.proxy = d;
            d.src = a;
            d.listener = c;
            if (a.addEventListener)
              Xd || (e = g), e === void 0 && (e = false), a.addEventListener(b.toString(), d, e);
            else if (a.attachEvent)
              a.attachEvent(qe(b.toString()), d);
            else if (a.addListener && a.removeListener)
              a.addListener(d);
            else
              throw Error("addEventListener and attachEvent are unavailable.");
            je++;
            return c;
          }
          function pe() {
            var a = re, b = Vd ? function(c) {
              return a.call(b.src, b.listener, c);
            } : function(c) {
              c = a.call(b.src, b.listener, c);
              if (!c)
                return c;
            };
            return b;
          }
          function le(a, b, c, d, e) {
            if (qa(b)) {
              for (var f = 0; f < b.length; f++)
                le(a, b[f], c, d, e);
              return null;
            }
            c = me(c);
            return a && a[ae] ? a.J.add(String(b), c, true, ta(d) ? !!d.capture : !!d, e) : ne(a, b, c, true, d, e);
          }
          function se(a, b, c, d, e) {
            if (qa(b))
              for (var f = 0; f < b.length; f++)
                se(a, b[f], c, d, e);
            else
              (d = ta(d) ? !!d.capture : !!d, c = me(c), a && a[ae]) ? (a = a.J, b = String(b).toString(), b in a.a && (f = a.a[b], c = fe(f, c, d, e), -1 < c && (de(f[c]), Oa(f, c), f.length == 0 && (delete a.a[b], a.g--)))) : a && (a = oe(a)) && (b = a.a[b.toString()], a = -1, b && (a = fe(b, c, d, e)), (c = -1 < a ? b[a] : null) && te(c));
          }
          function te(a) {
            if (typeof a != "number" && a && !a.sa) {
              var b = a.src;
              if (b && b[ae])
                ge(b.J, a);
              else {
                var c = a.type, d = a.proxy;
                b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(qe(c), d) : b.addListener && b.removeListener && b.removeListener(d);
                je--;
                (c = oe(b)) ? (ge(c, a), c.g == 0 && (c.src = null, b[he] = null)) : de(a);
              }
            }
          }
          function qe(a) {
            return a in ie ? ie[a] : ie[a] = "on" + a;
          }
          function ue(a, b, c, d) {
            var e = true;
            if (a = oe(a)) {
              if (b = a.a[b.toString()])
                for (b = b.concat(), a = 0; a < b.length; a++) {
                  var f = b[a];
                  f && f.capture == c && !f.sa && (f = ve(f, d), e = e && f !== false);
                }
            }
            return e;
          }
          function ve(a, b) {
            var c = a.listener, d = a.La || a.src;
            a.Ia && te(a);
            return c.call(d, b);
          }
          function re(a, b) {
            if (a.sa)
              return true;
            if (!Vd) {
              if (!b)
                a: {
                  b = ["window", "event"];
                  for (var c = n, d = 0; d < b.length; d++)
                    if (c = c[b[d]], c == null) {
                      b = null;
                      break a;
                    }
                  b = c;
                }
              d = b;
              b = new Zd(d, this);
              c = true;
              if (!(0 > d.keyCode || d.returnValue != void 0)) {
                a: {
                  var e = false;
                  if (d.keyCode == 0)
                    try {
                      d.keyCode = -1;
                      break a;
                    } catch (g) {
                      e = true;
                    }
                  if (e || d.returnValue == void 0)
                    d.returnValue = true;
                }
                d = [];
                for (e = b.g; e; e = e.parentNode)
                  d.push(e);
                a = a.type;
                for (e = d.length - 1; !b.h && 0 <= e; e--) {
                  b.g = d[e];
                  var f = ue(d[e], a, true, b);
                  c = c && f;
                }
                for (e = 0; !b.h && e < d.length; e++)
                  b.g = d[e], f = ue(d[e], a, false, b), c = c && f;
              }
              return c;
            }
            return ve(a, new Zd(b, this));
          }
          function oe(a) {
            a = a[he];
            return a instanceof ee ? a : null;
          }
          var we = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
          function me(a) {
            if (sa(a))
              return a;
            a[we] || (a[we] = function(b) {
              return a.handleEvent(b);
            });
            return a[we];
          }
          function E() {
            Pd.call(this);
            this.J = new ee(this);
            this.wb = this;
            this.Ha = null;
          }
          w(E, Pd);
          E.prototype[ae] = true;
          E.prototype.Za = function(a) {
            this.Ha = a;
          };
          E.prototype.removeEventListener = function(a, b, c, d) {
            se(this, a, b, c, d);
          };
          function xe(a, b) {
            var c, d = a.Ha;
            if (d)
              for (c = []; d; d = d.Ha)
                c.push(d);
            a = a.wb;
            d = b.type || b;
            if (q(b))
              b = new Yd(b, a);
            else if (b instanceof Yd)
              b.target = b.target || a;
            else {
              var e = b;
              b = new Yd(d, a);
              gb(b, e);
            }
            e = true;
            if (c)
              for (var f = c.length - 1; !b.h && 0 <= f; f--) {
                var g = b.g = c[f];
                e = ye(g, d, true, b) && e;
              }
            b.h || (g = b.g = a, e = ye(g, d, true, b) && e, b.h || (e = ye(g, d, false, b) && e));
            if (c)
              for (f = 0; !b.h && f < c.length; f++)
                g = b.g = c[f], e = ye(g, d, false, b) && e;
            return e;
          }
          E.prototype.o = function() {
            E.K.o.call(this);
            if (this.J) {
              var a = this.J, b = 0, c;
              for (c in a.a) {
                for (var d = a.a[c], e = 0; e < d.length; e++)
                  ++b, de(d[e]);
                delete a.a[c];
                a.g--;
              }
            }
            this.Ha = null;
          };
          function ye(a, b, c, d) {
            b = a.J.a[String(b)];
            if (!b)
              return true;
            b = b.concat();
            for (var e = true, f = 0; f < b.length; ++f) {
              var g = b[f];
              if (g && !g.sa && g.capture == c) {
                var h = g.listener, k = g.La || g.src;
                g.Ia && ge(a.J, g);
                e = h.call(k, d) !== false && e;
              }
            }
            return e && d.qb != 0;
          }
          var ze = {}, Ae = 0;
          function Be(a, b) {
            if (!a)
              throw Error("Event target element must be provided!");
            a = Ce(a);
            if (ze[a] && ze[a].length)
              for (var c = 0; c < ze[a].length; c++)
                xe(ze[a][c], b);
          }
          function De(a) {
            var b = Ce(a.N());
            ze[b] && ze[b].length && (Pa(ze[b], function(c) {
              return c == a;
            }), ze[b].length || delete ze[b]);
          }
          function Ce(a) {
            typeof a.a === "undefined" && (a.a = Ae, Ae++);
            return a.a;
          }
          function Ee(a) {
            if (!a)
              throw Error("Event target element must be provided!");
            E.call(this);
            this.a = a;
          }
          m(Ee, E);
          Ee.prototype.N = function() {
            return this.a;
          };
          Ee.prototype.register = function() {
            var a = Ce(this.N());
            ze[a] ? Ma(ze[a], this) || ze[a].push(this) : ze[a] = [this];
          };
          function Fe(a) {
            if (!a)
              return false;
            try {
              return !!a.$goog_Thenable;
            } catch (b) {
              return false;
            }
          }
          function Ge(a, b) {
            this.h = a;
            this.j = b;
            this.g = 0;
            this.a = null;
          }
          Ge.prototype.get = function() {
            if (0 < this.g) {
              this.g--;
              var a = this.a;
              this.a = a.next;
              a.next = null;
            } else
              a = this.h();
            return a;
          };
          function He(a, b) {
            a.j(b);
            100 > a.g && (a.g++, b.next = a.a, a.a = b);
          }
          function Ie() {
            this.g = this.a = null;
          }
          var Ke = new Ge(function() {
            return new Je();
          }, function(a) {
            a.reset();
          });
          Ie.prototype.add = function(a, b) {
            var c = Ke.get();
            c.set(a, b);
            this.g ? this.g.next = c : this.a = c;
            this.g = c;
          };
          function Le() {
            var a = Me, b = null;
            a.a && (b = a.a, a.a = a.a.next, a.a || (a.g = null), b.next = null);
            return b;
          }
          function Je() {
            this.next = this.g = this.a = null;
          }
          Je.prototype.set = function(a, b) {
            this.a = a;
            this.g = b;
            this.next = null;
          };
          Je.prototype.reset = function() {
            this.next = this.g = this.a = null;
          };
          function Ne(a) {
            n.setTimeout(function() {
              throw a;
            }, 0);
          }
          var Oe;
          function Pe() {
            var a = n.MessageChannel;
            typeof a === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !y("Presto") && (a = function() {
              var e = document.createElement("IFRAME");
              e.style.display = "none";
              e.src = "";
              document.documentElement.appendChild(e);
              var f = e.contentWindow;
              e = f.document;
              e.open();
              e.write("");
              e.close();
              var g = "callImmediate" + Math.random(), h = f.location.protocol == "file:" ? "*" : f.location.protocol + "//" + f.location.host;
              e = r(function(k) {
                if ((h == "*" || k.origin == h) && k.data == g)
                  this.port1.onmessage();
              }, this);
              f.addEventListener("message", e, false);
              this.port1 = {};
              this.port2 = { postMessage: function() {
                f.postMessage(g, h);
              } };
            });
            if (typeof a !== "undefined" && !y("Trident") && !y("MSIE")) {
              var b = new a(), c = {}, d = c;
              b.port1.onmessage = function() {
                if (ka(c.next)) {
                  c = c.next;
                  var e = c.gb;
                  c.gb = null;
                  e();
                }
              };
              return function(e) {
                d.next = { gb: e };
                d = d.next;
                b.port2.postMessage(0);
              };
            }
            return typeof document !== "undefined" && "onreadystatechange" in document.createElement("SCRIPT") ? function(e) {
              var f = document.createElement("SCRIPT");
              f.onreadystatechange = function() {
                f.onreadystatechange = null;
                f.parentNode.removeChild(f);
                f = null;
                e();
                e = null;
              };
              document.documentElement.appendChild(f);
            } : function(e) {
              n.setTimeout(e, 0);
            };
          }
          function Qe(a, b) {
            Re || Se();
            Te || (Re(), Te = true);
            Me.add(a, b);
          }
          var Re;
          function Se() {
            if (n.Promise && n.Promise.resolve) {
              var a = n.Promise.resolve(void 0);
              Re = function() {
                a.then(Ue);
              };
            } else
              Re = function() {
                var b = Ue;
                !sa(n.setImmediate) || n.Window && n.Window.prototype && !y("Edge") && n.Window.prototype.setImmediate == n.setImmediate ? (Oe || (Oe = Pe()), Oe(b)) : n.setImmediate(b);
              };
          }
          var Te = false, Me = new Ie();
          function Ue() {
            for (var a; a = Le(); ) {
              try {
                a.a.call(a.g);
              } catch (b) {
                Ne(b);
              }
              He(Ke, a);
            }
            Te = false;
          }
          function Ve(a) {
            this.a = We;
            this.A = void 0;
            this.j = this.g = this.h = null;
            this.s = this.i = false;
            if (a != na)
              try {
                var b = this;
                a.call(void 0, function(c) {
                  Xe(b, Ye, c);
                }, function(c) {
                  if (!(c instanceof Ze))
                    try {
                      if (c instanceof Error)
                        throw c;
                      throw Error("Promise rejected.");
                    } catch (d) {
                    }
                  Xe(b, $e, c);
                });
              } catch (c) {
                Xe(this, $e, c);
              }
          }
          var We = 0, Ye = 2, $e = 3;
          function af() {
            this.next = this.j = this.g = this.s = this.a = null;
            this.h = false;
          }
          af.prototype.reset = function() {
            this.j = this.g = this.s = this.a = null;
            this.h = false;
          };
          var bf = new Ge(function() {
            return new af();
          }, function(a) {
            a.reset();
          });
          function cf(a, b, c) {
            var d = bf.get();
            d.s = a;
            d.g = b;
            d.j = c;
            return d;
          }
          function F(a) {
            if (a instanceof Ve)
              return a;
            var b = new Ve(na);
            Xe(b, Ye, a);
            return b;
          }
          function df(a) {
            return new Ve(function(b, c) {
              c(a);
            });
          }
          Ve.prototype.then = function(a, b, c) {
            return ef(this, sa(a) ? a : null, sa(b) ? b : null, c);
          };
          Ve.prototype.$goog_Thenable = true;
          l = Ve.prototype;
          l.fc = function(a, b) {
            a = cf(a, a, b);
            a.h = true;
            ff(this, a);
            return this;
          };
          l.Ca = function(a, b) {
            return ef(this, null, a, b);
          };
          l.cancel = function(a) {
            this.a == We && Qe(function() {
              var b = new Ze(a);
              gf(this, b);
            }, this);
          };
          function gf(a, b) {
            if (a.a == We)
              if (a.h) {
                var c = a.h;
                if (c.g) {
                  for (var d = 0, e = null, f = null, g = c.g; g && (g.h || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next)
                    e || (f = g);
                  e && (c.a == We && d == 1 ? gf(c, b) : (f ? (d = f, d.next == c.j && (c.j = d), d.next = d.next.next) : hf(c), jf(c, e, $e, b)));
                }
                a.h = null;
              } else
                Xe(a, $e, b);
          }
          function ff(a, b) {
            a.g || a.a != Ye && a.a != $e || kf(a);
            a.j ? a.j.next = b : a.g = b;
            a.j = b;
          }
          function ef(a, b, c, d) {
            var e = cf(null, null, null);
            e.a = new Ve(function(f, g) {
              e.s = b ? function(h) {
                try {
                  var k = b.call(d, h);
                  f(k);
                } catch (p) {
                  g(p);
                }
              } : f;
              e.g = c ? function(h) {
                try {
                  var k = c.call(d, h);
                  !ka(k) && h instanceof Ze ? g(h) : f(k);
                } catch (p) {
                  g(p);
                }
              } : g;
            });
            e.a.h = a;
            ff(a, e);
            return e.a;
          }
          l.hc = function(a) {
            this.a = We;
            Xe(this, Ye, a);
          };
          l.ic = function(a) {
            this.a = We;
            Xe(this, $e, a);
          };
          function Xe(a, b, c) {
            if (a.a == We) {
              a === c && (b = $e, c = new TypeError("Promise cannot resolve to itself"));
              a.a = 1;
              a: {
                var d = c, e = a.hc, f = a.ic;
                if (d instanceof Ve) {
                  ff(d, cf(e || na, f || null, a));
                  var g = true;
                } else if (Fe(d))
                  d.then(e, f, a), g = true;
                else {
                  if (ta(d))
                    try {
                      var h = d.then;
                      if (sa(h)) {
                        lf(d, h, e, f, a);
                        g = true;
                        break a;
                      }
                    } catch (k) {
                      f.call(a, k);
                      g = true;
                      break a;
                    }
                  g = false;
                }
              }
              g || (a.A = c, a.a = b, a.h = null, kf(a), b != $e || c instanceof Ze || mf(a, c));
            }
          }
          function lf(a, b, c, d, e) {
            function f(k) {
              h || (h = true, d.call(e, k));
            }
            function g(k) {
              h || (h = true, c.call(e, k));
            }
            var h = false;
            try {
              b.call(a, g, f);
            } catch (k) {
              f(k);
            }
          }
          function kf(a) {
            a.i || (a.i = true, Qe(a.Hb, a));
          }
          function hf(a) {
            var b = null;
            a.g && (b = a.g, a.g = b.next, b.next = null);
            a.g || (a.j = null);
            return b;
          }
          l.Hb = function() {
            for (var a; a = hf(this); )
              jf(this, a, this.a, this.A);
            this.i = false;
          };
          function jf(a, b, c, d) {
            if (c == $e && b.g && !b.h)
              for (; a && a.s; a = a.h)
                a.s = false;
            if (b.a)
              b.a.h = null, nf(b, c, d);
            else
              try {
                b.h ? b.s.call(b.j) : nf(b, c, d);
              } catch (e) {
                of.call(null, e);
              }
            He(bf, b);
          }
          function nf(a, b, c) {
            b == Ye ? a.s.call(a.j, c) : a.g && a.g.call(a.j, c);
          }
          function mf(a, b) {
            a.s = true;
            Qe(function() {
              a.s && of.call(null, b);
            });
          }
          var of = Ne;
          function Ze(a) {
            Ba.call(this, a);
          }
          w(Ze, Ba);
          Ze.prototype.name = "cancel";
          function pf(a, b, c) {
            b || (b = {});
            c = c || window;
            var d = a instanceof xc ? a : Bc(typeof a.href != "undefined" ? a.href : String(a));
            a = b.target || a.target;
            var e = [];
            for (f in b)
              switch (f) {
                case "width":
                case "height":
                case "top":
                case "left":
                  e.push(f + "=" + b[f]);
                  break;
                case "target":
                case "noopener":
                case "noreferrer":
                  break;
                default:
                  e.push(f + "=" + (b[f] ? 1 : 0));
              }
            var f = e.join(",");
            (y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && c.navigator && c.navigator.standalone && a && a != "_self" ? (f = c.document.createElement("A"), d = d instanceof xc ? d : Dc(d), f.href = zc(d), f.setAttribute("target", a), b.noreferrer && f.setAttribute("rel", "noreferrer"), b = document.createEvent("MouseEvent"), b.initMouseEvent("click", true, true, c, 1), f.dispatchEvent(b), c = {}) : b.noreferrer ? (c = c.open("", a, f), b = zc(d).toString(), c && (cc && b.indexOf(";") != -1 && (b = "'" + b.replace(/'/g, "%27") + "'"), c.opener = null, b = Jc('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + cb(b) + '">', null), c.document.write(Ic(b)), c.document.close())) : (c = c.open(zc(d).toString(), a, f)) && b.noopener && (c.opener = null);
            return c;
          }
          function qf() {
            try {
              return !(!window.opener || !window.opener.location || window.opener.location.hostname !== window.location.hostname || window.opener.location.protocol !== window.location.protocol);
            } catch (a$2) {
            }
            return false;
          }
          function rf(a) {
            pf(a, { target: window.cordova && window.cordova.InAppBrowser ? "_system" : "_blank" }, void 0);
          }
          function sf(a, b) {
            a = ta(a) && a.nodeType == 1 ? a : document.querySelector(String(a));
            if (a == null)
              throw Error(b || "Cannot find element.");
            return a;
          }
          function tf() {
            return window.location.href;
          }
          function uf() {
            var a = null;
            return new Ve(function(b) {
              n.document.readyState == "complete" ? b() : (a = function() {
                b();
              }, le(window, "load", a));
            }).Ca(function(b) {
              se(window, "load", a);
              throw b;
            });
          }
          function vf() {
            for (var a = 32, b = []; 0 < a; )
              b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
            return b.join("");
          }
          function wf(a, b, c) {
            c = c === void 0 ? {} : c;
            return Object.keys(a).filter(function(d) {
              return b.includes(d);
            }).reduce(function(d, e) {
              d[e] = a[e];
              return d;
            }, c);
          }
          function xf(a) {
            var b = yf;
            this.s = [];
            this.T = b;
            this.O = a || null;
            this.j = this.a = false;
            this.h = void 0;
            this.J = this.l = this.A = false;
            this.i = 0;
            this.g = null;
            this.C = 0;
          }
          xf.prototype.cancel = function(a) {
            if (this.a)
              this.h instanceof xf && this.h.cancel();
            else {
              if (this.g) {
                var b = this.g;
                delete this.g;
                a ? b.cancel(a) : (b.C--, 0 >= b.C && b.cancel());
              }
              this.T ? this.T.call(this.O, this) : this.J = true;
              this.a || (a = new zf(this), Af(this), Bf(this, false, a));
            }
          };
          xf.prototype.L = function(a, b) {
            this.A = false;
            Bf(this, a, b);
          };
          function Bf(a, b, c) {
            a.a = true;
            a.h = c;
            a.j = !b;
            Cf(a);
          }
          function Af(a) {
            if (a.a) {
              if (!a.J)
                throw new Df(a);
              a.J = false;
            }
          }
          xf.prototype.callback = function(a) {
            Af(this);
            Bf(this, true, a);
          };
          function Ef(a, b, c) {
            a.s.push([b, c, void 0]);
            a.a && Cf(a);
          }
          xf.prototype.then = function(a, b, c) {
            var d, e, f = new Ve(function(g, h) {
              d = g;
              e = h;
            });
            Ef(this, d, function(g) {
              g instanceof zf ? f.cancel() : e(g);
            });
            return f.then(a, b, c);
          };
          xf.prototype.$goog_Thenable = true;
          function Ff(a) {
            return La(a.s, function(b) {
              return sa(b[1]);
            });
          }
          function Cf(a) {
            if (a.i && a.a && Ff(a)) {
              var b = a.i, c = Gf[b];
              c && (n.clearTimeout(c.a), delete Gf[b]);
              a.i = 0;
            }
            a.g && (a.g.C--, delete a.g);
            b = a.h;
            for (var d = c = false; a.s.length && !a.A; ) {
              var e = a.s.shift(), f = e[0], g = e[1];
              e = e[2];
              if (f = a.j ? g : f)
                try {
                  var h = f.call(e || a.O, b);
                  ka(h) && (a.j = a.j && (h == b || h instanceof Error), a.h = b = h);
                  if (Fe(b) || typeof n.Promise === "function" && b instanceof n.Promise)
                    d = true, a.A = true;
                } catch (k) {
                  b = k, a.j = true, Ff(a) || (c = true);
                }
            }
            a.h = b;
            d && (h = r(a.L, a, true), d = r(a.L, a, false), b instanceof xf ? (Ef(b, h, d), b.l = true) : b.then(h, d));
            c && (b = new Hf(b), Gf[b.a] = b, a.i = b.a);
          }
          function Df() {
            Ba.call(this);
          }
          w(Df, Ba);
          Df.prototype.message = "Deferred has already fired";
          Df.prototype.name = "AlreadyCalledError";
          function zf() {
            Ba.call(this);
          }
          w(zf, Ba);
          zf.prototype.message = "Deferred was canceled";
          zf.prototype.name = "CanceledError";
          function Hf(a) {
            this.a = n.setTimeout(r(this.h, this), 0);
            this.g = a;
          }
          Hf.prototype.h = function() {
            delete Gf[this.a];
            throw this.g;
          };
          var Gf = {};
          function If(a) {
            var b = {}, c = b.document || document, d = uc(a).toString(), e = document.createElement("SCRIPT"), f = { rb: e, sb: void 0 }, g = new xf(f), h = null, k = b.timeout != null ? b.timeout : 5e3;
            0 < k && (h = window.setTimeout(function() {
              Jf(e, true);
              var p = new Kf(Lf, "Timeout reached for loading script " + d);
              Af(g);
              Bf(g, false, p);
            }, k), f.sb = h);
            e.onload = e.onreadystatechange = function() {
              e.readyState && e.readyState != "loaded" && e.readyState != "complete" || (Jf(e, b.xc || false, h), g.callback(null));
            };
            e.onerror = function() {
              Jf(e, true, h);
              var p = new Kf(Mf, "Error while loading script " + d);
              Af(g);
              Bf(g, false, p);
            };
            f = b.attributes || {};
            gb(f, { type: "text/javascript", charset: "UTF-8" });
            Wc(e, f);
            Mc(e, a);
            Nf(c).appendChild(e);
            return g;
          }
          function Nf(a) {
            var b = (a || document).getElementsByTagName("HEAD");
            return b && b.length != 0 ? b[0] : a.documentElement;
          }
          function yf() {
            if (this && this.rb) {
              var a = this.rb;
              a && a.tagName == "SCRIPT" && Jf(a, true, this.sb);
            }
          }
          function Jf(a, b, c) {
            c != null && n.clearTimeout(c);
            a.onload = na;
            a.onerror = na;
            a.onreadystatechange = na;
            b && window.setTimeout(function() {
              Zc(a);
            }, 0);
          }
          var Mf = 0, Lf = 1;
          function Kf(a, b) {
            var c = "Jsloader error (code #" + a + ")";
            b && (c += ": " + b);
            Ba.call(this, c);
            this.code = a;
          }
          w(Kf, Ba);
          function Of() {
            return n.google && n.google.accounts && n.google.accounts.id || null;
          }
          function Pf(a) {
            this.a = a || Of();
            this.h = false;
            this.g = null;
          }
          Pf.prototype.cancel = function() {
            this.a && this.h && (this.g && this.g(null), this.a.cancel());
          };
          function Qf(a, b, c) {
            if (a.a && b)
              return function() {
                a.h = true;
                return new Ve(function(e) {
                  a.g = e;
                  a.a.initialize({ client_id: b, callback: e, auto_select: !c });
                  a.a.prompt();
                });
              }();
            if (b) {
              var d = Rf.Xa().load().then(function() {
                a.a = Of();
                return Qf(a, b, c);
              }).Ca(function() {
                return null;
              });
              return F(d);
            }
            return F(null);
          }
          oa(Pf);
          var wc = new pc(qc, "https://accounts.google.com/gsi/client");
          function Rf() {
            this.a = null;
          }
          Rf.prototype.load = function() {
            var a = this;
            if (this.a)
              return this.a;
            var b = vc();
            return Of() ? F() : this.a = uf().then(function() {
              if (!Of())
                return new Ve(function(c, d) {
                  var e = setTimeout(function() {
                    a.a = null;
                    d(Error("Network error!"));
                  }, 1e4);
                  n.onGoogleLibraryLoad = function() {
                    clearTimeout(e);
                    c();
                  };
                  F(If(b)).then(function() {
                    Of() && c();
                  }).Ca(function(f) {
                    clearTimeout(e);
                    a.a = null;
                    d(f);
                  });
                });
            });
          };
          oa(Rf);
          function Sf(a, b) {
            this.a = a;
            this.g = b || function(c) {
              throw c;
            };
          }
          Sf.prototype.confirm = function(a) {
            return F(this.a.confirm(a)).Ca(this.g);
          };
          function Tf(a, b, c) {
            this.reset(a, b, c, void 0, void 0);
          }
          Tf.prototype.a = null;
          var Uf = 0;
          Tf.prototype.reset = function(a, b, c, d, e) {
            typeof e == "number" || Uf++;
            this.h = d || Aa();
            this.j = a;
            this.s = b;
            this.g = c;
            delete this.a;
          };
          function Vf(a) {
            this.s = a;
            this.a = this.h = this.j = this.g = null;
          }
          function Wf(a, b) {
            this.name = a;
            this.value = b;
          }
          Wf.prototype.toString = function() {
            return this.name;
          };
          var Xf = new Wf("SEVERE", 1e3), Yf = new Wf("WARNING", 900), Zf = new Wf("CONFIG", 700);
          function $f(a) {
            if (a.j)
              return a.j;
            if (a.g)
              return $f(a.g);
            Fa("Root logger has no level set.");
            return null;
          }
          Vf.prototype.log = function(a, b, c) {
            if (a.value >= $f(this).value)
              for (sa(b) && (b = b()), a = new Tf(a, String(b), this.s), c && (a.a = c), c = this; c; ) {
                var d = c, e = a;
                if (d.a)
                  for (var f = 0; b = d.a[f]; f++)
                    b(e);
                c = c.g;
              }
          };
          var ag = {}, bg = null;
          function cg() {
            bg || (bg = new Vf(""), ag[""] = bg, bg.j = Zf);
          }
          function dg(a) {
            cg();
            var b;
            if (!(b = ag[a])) {
              b = new Vf(a);
              var c = a.lastIndexOf("."), d = a.substr(c + 1);
              c = dg(a.substr(0, c));
              c.h || (c.h = {});
              c.h[d] = b;
              b.g = c;
              ag[a] = b;
            }
            return b;
          }
          function eg() {
            this.a = Aa();
          }
          var fg = null;
          eg.prototype.set = function(a) {
            this.a = a;
          };
          eg.prototype.reset = function() {
            this.set(Aa());
          };
          eg.prototype.get = function() {
            return this.a;
          };
          function gg(a) {
            this.j = a || "";
            fg || (fg = new eg());
            this.s = fg;
          }
          gg.prototype.a = true;
          gg.prototype.g = true;
          gg.prototype.h = false;
          function hg(a) {
            return 10 > a ? "0" + a : String(a);
          }
          function ig(a, b) {
            a = (a.h - b) / 1e3;
            b = a.toFixed(3);
            var c = 0;
            if (1 > a)
              c = 2;
            else
              for (; 100 > a; )
                c++, a *= 10;
            for (; 0 < c--; )
              b = " " + b;
            return b;
          }
          function jg(a) {
            gg.call(this, a);
          }
          w(jg, gg);
          function kg(a, b) {
            var c = [];
            c.push(a.j, " ");
            if (a.g) {
              var d = new Date(b.h);
              c.push("[", hg(d.getFullYear() - 2e3) + hg(d.getMonth() + 1) + hg(d.getDate()) + " " + hg(d.getHours()) + ":" + hg(d.getMinutes()) + ":" + hg(d.getSeconds()) + "." + hg(Math.floor(d.getMilliseconds() / 10)), "] ");
            }
            c.push("[", ig(b, a.s.get()), "s] ");
            c.push("[", b.g, "] ");
            c.push(b.s);
            a.h && (b = b.a) && c.push("\n", b instanceof Error ? b.message : b.toString());
            a.a && c.push("\n");
            return c.join("");
          }
          function lg() {
            this.s = r(this.h, this);
            this.a = new jg();
            this.a.g = false;
            this.a.h = false;
            this.g = this.a.a = false;
            this.j = {};
          }
          lg.prototype.h = function(a) {
            function b(f) {
              if (f) {
                if (f.value >= Xf.value)
                  return "error";
                if (f.value >= Yf.value)
                  return "warn";
                if (f.value >= Zf.value)
                  return "log";
              }
              return "debug";
            }
            if (!this.j[a.g]) {
              var c = kg(this.a, a), d = mg;
              if (d) {
                var e = b(a.j);
                ng(d, e, c, a.a);
              }
            }
          };
          var mg = n.console;
          function ng(a, b, c, d) {
            if (a[b])
              a[b](c, d || "");
            else
              a.log(c, d || "");
          }
          function og(a, b) {
            var c = pg;
            c && c.log(Xf, a, b);
          }
          var pg;
          pg = dg("firebaseui");
          var qg = new lg();
          if (qg.g != 1) {
            var rg;
            cg();
            rg = bg;
            var sg = qg.s;
            rg.a || (rg.a = []);
            rg.a.push(sg);
            qg.g = true;
          }
          function tg(a) {
            var b = pg;
            b && b.log(Yf, a, void 0);
          }
          function ug() {
            this.a = (typeof document == "undefined" ? null : document) || { cookie: "" };
          }
          l = ug.prototype;
          l.set = function(a, b, c, d, e, f) {
            if (/[;=\s]/.test(a))
              throw Error('Invalid cookie name "' + a + '"');
            if (/[;\r\n]/.test(b))
              throw Error('Invalid cookie value "' + b + '"');
            ka(c) || (c = -1);
            e = e ? ";domain=" + e : "";
            d = d ? ";path=" + d : "";
            f = f ? ";secure" : "";
            c = 0 > c ? "" : c == 0 ? ";expires=" + new Date(1970, 1, 1).toUTCString() : ";expires=" + new Date(Aa() + 1e3 * c).toUTCString();
            this.a.cookie = a + "=" + b + e + d + c + f;
          };
          l.get = function(a, b) {
            for (var c = a + "=", d = (this.a.cookie || "").split(";"), e = 0, f; e < d.length; e++) {
              f = Ua(d[e]);
              if (f.lastIndexOf(c, 0) == 0)
                return f.substr(c.length);
              if (f == a)
                return "";
            }
            return b;
          };
          l.ja = function() {
            return vg(this).keys;
          };
          l.la = function() {
            return vg(this).values;
          };
          l.clear = function() {
            for (var a = vg(this).keys, b = a.length - 1; 0 <= b; b--) {
              var c = a[b];
              this.get(c);
              this.set(c, "", 0, void 0, void 0);
            }
          };
          function vg(a) {
            a = (a.a.cookie || "").split(";");
            for (var b = [], c = [], d, e, f = 0; f < a.length; f++)
              e = Ua(a[f]), d = e.indexOf("="), d == -1 ? (b.push(""), c.push(e)) : (b.push(e.substring(0, d)), c.push(e.substring(d + 1)));
            return { keys: b, values: c };
          }
          var xg = new ug();
          function yg() {
          }
          function zg(a, b, c, d) {
            this.h = typeof a !== "undefined" && a !== null ? a : -1;
            this.g = b || null;
            this.a = c || null;
            this.j = !!d;
          }
          m(zg, yg);
          zg.prototype.set = function(a, b) {
            xg.set(a, b, this.h, this.g, this.a, this.j);
          };
          zg.prototype.get = function(a) {
            return xg.get(a) || null;
          };
          zg.prototype.ra = function(a) {
            var b = this.g, c = this.a;
            xg.get(a);
            xg.set(a, "", 0, b, c);
          };
          function Ag(a, b) {
            this.g = a;
            this.a = b || null;
          }
          function Bg(a) {
            return { email: a.g, credential: a.a && a.a.toJSON() };
          }
          function Cg(a) {
            if (a && a.email) {
              var b = a.credential && firebase2.auth.AuthCredential.fromJSON(a.credential);
              return new Ag(a.email, b);
            }
            return null;
          }
          function Dg(a) {
            this.a = a || null;
          }
          function Eg(a) {
            for (var b = [], c = 0, d = 0; d < a.length; d++) {
              var e = a.charCodeAt(d);
              255 < e && (b[c++] = e & 255, e >>= 8);
              b[c++] = e;
            }
            return b;
          }
          function Fg(a) {
            return Ka(a, function(b) {
              b = b.toString(16);
              return 1 < b.length ? b : "0" + b;
            }).join("");
          }
          function Gg(a) {
            this.i = a;
            this.g = this.i.length / 4;
            this.j = this.g + 6;
            this.h = [[], [], [], []];
            this.s = [[], [], [], []];
            this.a = Array(Hg * (this.j + 1));
            for (a = 0; a < this.g; a++)
              this.a[a] = [this.i[4 * a], this.i[4 * a + 1], this.i[4 * a + 2], this.i[4 * a + 3]];
            var b = Array(4);
            for (a = this.g; a < Hg * (this.j + 1); a++) {
              b[0] = this.a[a - 1][0];
              b[1] = this.a[a - 1][1];
              b[2] = this.a[a - 1][2];
              b[3] = this.a[a - 1][3];
              if (a % this.g == 0) {
                var c = b, d = c[0];
                c[0] = c[1];
                c[1] = c[2];
                c[2] = c[3];
                c[3] = d;
                Ig(b);
                b[0] ^= Jg[a / this.g][0];
                b[1] ^= Jg[a / this.g][1];
                b[2] ^= Jg[a / this.g][2];
                b[3] ^= Jg[a / this.g][3];
              } else
                6 < this.g && a % this.g == 4 && Ig(b);
              this.a[a] = Array(4);
              this.a[a][0] = this.a[a - this.g][0] ^ b[0];
              this.a[a][1] = this.a[a - this.g][1] ^ b[1];
              this.a[a][2] = this.a[a - this.g][2] ^ b[2];
              this.a[a][3] = this.a[a - this.g][3] ^ b[3];
            }
          }
          Gg.prototype.A = 16;
          var Hg = Gg.prototype.A / 4;
          function Kg(a, b) {
            for (var c, d = 0; d < Hg; d++)
              for (var e = 0; 4 > e; e++)
                c = 4 * e + d, c = b[c], a.h[d][e] = c;
          }
          function Lg(a) {
            for (var b = [], c = 0; c < Hg; c++)
              for (var d = 0; 4 > d; d++)
                b[4 * d + c] = a.h[c][d];
            return b;
          }
          function Mg(a, b) {
            for (var c = 0; 4 > c; c++)
              for (var d = 0; 4 > d; d++)
                a.h[c][d] ^= a.a[4 * b + d][c];
          }
          function Ng(a, b) {
            for (var c = 0; 4 > c; c++)
              for (var d = 0; 4 > d; d++)
                a.h[c][d] = b[a.h[c][d]];
          }
          function Og(a) {
            for (var b = 1; 4 > b; b++)
              for (var c = 0; 4 > c; c++)
                a.s[b][c] = a.h[b][c];
            for (b = 1; 4 > b; b++)
              for (c = 0; 4 > c; c++)
                a.h[b][c] = a.s[b][(c + b) % Hg];
          }
          function Pg(a) {
            for (var b = 1; 4 > b; b++)
              for (var c = 0; 4 > c; c++)
                a.s[b][(c + b) % Hg] = a.h[b][c];
            for (b = 1; 4 > b; b++)
              for (c = 0; 4 > c; c++)
                a.h[b][c] = a.s[b][c];
          }
          function Ig(a) {
            a[0] = Qg[a[0]];
            a[1] = Qg[a[1]];
            a[2] = Qg[a[2]];
            a[3] = Qg[a[3]];
          }
          var Qg = [
            99,
            124,
            119,
            123,
            242,
            107,
            111,
            197,
            48,
            1,
            103,
            43,
            254,
            215,
            171,
            118,
            202,
            130,
            201,
            125,
            250,
            89,
            71,
            240,
            173,
            212,
            162,
            175,
            156,
            164,
            114,
            192,
            183,
            253,
            147,
            38,
            54,
            63,
            247,
            204,
            52,
            165,
            229,
            241,
            113,
            216,
            49,
            21,
            4,
            199,
            35,
            195,
            24,
            150,
            5,
            154,
            7,
            18,
            128,
            226,
            235,
            39,
            178,
            117,
            9,
            131,
            44,
            26,
            27,
            110,
            90,
            160,
            82,
            59,
            214,
            179,
            41,
            227,
            47,
            132,
            83,
            209,
            0,
            237,
            32,
            252,
            177,
            91,
            106,
            203,
            190,
            57,
            74,
            76,
            88,
            207,
            208,
            239,
            170,
            251,
            67,
            77,
            51,
            133,
            69,
            249,
            2,
            127,
            80,
            60,
            159,
            168,
            81,
            163,
            64,
            143,
            146,
            157,
            56,
            245,
            188,
            182,
            218,
            33,
            16,
            255,
            243,
            210,
            205,
            12,
            19,
            236,
            95,
            151,
            68,
            23,
            196,
            167,
            126,
            61,
            100,
            93,
            25,
            115,
            96,
            129,
            79,
            220,
            34,
            42,
            144,
            136,
            70,
            238,
            184,
            20,
            222,
            94,
            11,
            219,
            224,
            50,
            58,
            10,
            73,
            6,
            36,
            92,
            194,
            211,
            172,
            98,
            145,
            149,
            228,
            121,
            231,
            200,
            55,
            109,
            141,
            213,
            78,
            169,
            108,
            86,
            244,
            234,
            101,
            122,
            174,
            8,
            186,
            120,
            37,
            46,
            28,
            166,
            180,
            198,
            232,
            221,
            116,
            31,
            75,
            189,
            139,
            138,
            112,
            62,
            181,
            102,
            72,
            3,
            246,
            14,
            97,
            53,
            87,
            185,
            134,
            193,
            29,
            158,
            225,
            248,
            152,
            17,
            105,
            217,
            142,
            148,
            155,
            30,
            135,
            233,
            206,
            85,
            40,
            223,
            140,
            161,
            137,
            13,
            191,
            230,
            66,
            104,
            65,
            153,
            45,
            15,
            176,
            84,
            187,
            22
          ], Rg = [
            82,
            9,
            106,
            213,
            48,
            54,
            165,
            56,
            191,
            64,
            163,
            158,
            129,
            243,
            215,
            251,
            124,
            227,
            57,
            130,
            155,
            47,
            255,
            135,
            52,
            142,
            67,
            68,
            196,
            222,
            233,
            203,
            84,
            123,
            148,
            50,
            166,
            194,
            35,
            61,
            238,
            76,
            149,
            11,
            66,
            250,
            195,
            78,
            8,
            46,
            161,
            102,
            40,
            217,
            36,
            178,
            118,
            91,
            162,
            73,
            109,
            139,
            209,
            37,
            114,
            248,
            246,
            100,
            134,
            104,
            152,
            22,
            212,
            164,
            92,
            204,
            93,
            101,
            182,
            146,
            108,
            112,
            72,
            80,
            253,
            237,
            185,
            218,
            94,
            21,
            70,
            87,
            167,
            141,
            157,
            132,
            144,
            216,
            171,
            0,
            140,
            188,
            211,
            10,
            247,
            228,
            88,
            5,
            184,
            179,
            69,
            6,
            208,
            44,
            30,
            143,
            202,
            63,
            15,
            2,
            193,
            175,
            189,
            3,
            1,
            19,
            138,
            107,
            58,
            145,
            17,
            65,
            79,
            103,
            220,
            234,
            151,
            242,
            207,
            206,
            240,
            180,
            230,
            115,
            150,
            172,
            116,
            34,
            231,
            173,
            53,
            133,
            226,
            249,
            55,
            232,
            28,
            117,
            223,
            110,
            71,
            241,
            26,
            113,
            29,
            41,
            197,
            137,
            111,
            183,
            98,
            14,
            170,
            24,
            190,
            27,
            252,
            86,
            62,
            75,
            198,
            210,
            121,
            32,
            154,
            219,
            192,
            254,
            120,
            205,
            90,
            244,
            31,
            221,
            168,
            51,
            136,
            7,
            199,
            49,
            177,
            18,
            16,
            89,
            39,
            128,
            236,
            95,
            96,
            81,
            127,
            169,
            25,
            181,
            74,
            13,
            45,
            229,
            122,
            159,
            147,
            201,
            156,
            239,
            160,
            224,
            59,
            77,
            174,
            42,
            245,
            176,
            200,
            235,
            187,
            60,
            131,
            83,
            153,
            97,
            23,
            43,
            4,
            126,
            186,
            119,
            214,
            38,
            225,
            105,
            20,
            99,
            85,
            33,
            12,
            125
          ], Jg = [[0, 0, 0, 0], [1, 0, 0, 0], [2, 0, 0, 0], [4, 0, 0, 0], [
            8,
            0,
            0,
            0
          ], [16, 0, 0, 0], [32, 0, 0, 0], [64, 0, 0, 0], [128, 0, 0, 0], [27, 0, 0, 0], [54, 0, 0, 0]], Sg = [
            0,
            2,
            4,
            6,
            8,
            10,
            12,
            14,
            16,
            18,
            20,
            22,
            24,
            26,
            28,
            30,
            32,
            34,
            36,
            38,
            40,
            42,
            44,
            46,
            48,
            50,
            52,
            54,
            56,
            58,
            60,
            62,
            64,
            66,
            68,
            70,
            72,
            74,
            76,
            78,
            80,
            82,
            84,
            86,
            88,
            90,
            92,
            94,
            96,
            98,
            100,
            102,
            104,
            106,
            108,
            110,
            112,
            114,
            116,
            118,
            120,
            122,
            124,
            126,
            128,
            130,
            132,
            134,
            136,
            138,
            140,
            142,
            144,
            146,
            148,
            150,
            152,
            154,
            156,
            158,
            160,
            162,
            164,
            166,
            168,
            170,
            172,
            174,
            176,
            178,
            180,
            182,
            184,
            186,
            188,
            190,
            192,
            194,
            196,
            198,
            200,
            202,
            204,
            206,
            208,
            210,
            212,
            214,
            216,
            218,
            220,
            222,
            224,
            226,
            228,
            230,
            232,
            234,
            236,
            238,
            240,
            242,
            244,
            246,
            248,
            250,
            252,
            254,
            27,
            25,
            31,
            29,
            19,
            17,
            23,
            21,
            11,
            9,
            15,
            13,
            3,
            1,
            7,
            5,
            59,
            57,
            63,
            61,
            51,
            49,
            55,
            53,
            43,
            41,
            47,
            45,
            35,
            33,
            39,
            37,
            91,
            89,
            95,
            93,
            83,
            81,
            87,
            85,
            75,
            73,
            79,
            77,
            67,
            65,
            71,
            69,
            123,
            121,
            127,
            125,
            115,
            113,
            119,
            117,
            107,
            105,
            111,
            109,
            99,
            97,
            103,
            101,
            155,
            153,
            159,
            157,
            147,
            145,
            151,
            149,
            139,
            137,
            143,
            141,
            131,
            129,
            135,
            133,
            187,
            185,
            191,
            189,
            179,
            177,
            183,
            181,
            171,
            169,
            175,
            173,
            163,
            161,
            167,
            165,
            219,
            217,
            223,
            221,
            211,
            209,
            215,
            213,
            203,
            201,
            207,
            205,
            195,
            193,
            199,
            197,
            251,
            249,
            255,
            253,
            243,
            241,
            247,
            245,
            235,
            233,
            239,
            237,
            227,
            225,
            231,
            229
          ], Tg = [
            0,
            3,
            6,
            5,
            12,
            15,
            10,
            9,
            24,
            27,
            30,
            29,
            20,
            23,
            18,
            17,
            48,
            51,
            54,
            53,
            60,
            63,
            58,
            57,
            40,
            43,
            46,
            45,
            36,
            39,
            34,
            33,
            96,
            99,
            102,
            101,
            108,
            111,
            106,
            105,
            120,
            123,
            126,
            125,
            116,
            119,
            114,
            113,
            80,
            83,
            86,
            85,
            92,
            95,
            90,
            89,
            72,
            75,
            78,
            77,
            68,
            71,
            66,
            65,
            192,
            195,
            198,
            197,
            204,
            207,
            202,
            201,
            216,
            219,
            222,
            221,
            212,
            215,
            210,
            209,
            240,
            243,
            246,
            245,
            252,
            255,
            250,
            249,
            232,
            235,
            238,
            237,
            228,
            231,
            226,
            225,
            160,
            163,
            166,
            165,
            172,
            175,
            170,
            169,
            184,
            187,
            190,
            189,
            180,
            183,
            178,
            177,
            144,
            147,
            150,
            149,
            156,
            159,
            154,
            153,
            136,
            139,
            142,
            141,
            132,
            135,
            130,
            129,
            155,
            152,
            157,
            158,
            151,
            148,
            145,
            146,
            131,
            128,
            133,
            134,
            143,
            140,
            137,
            138,
            171,
            168,
            173,
            174,
            167,
            164,
            161,
            162,
            179,
            176,
            181,
            182,
            191,
            188,
            185,
            186,
            251,
            248,
            253,
            254,
            247,
            244,
            241,
            242,
            227,
            224,
            229,
            230,
            239,
            236,
            233,
            234,
            203,
            200,
            205,
            206,
            199,
            196,
            193,
            194,
            211,
            208,
            213,
            214,
            223,
            220,
            217,
            218,
            91,
            88,
            93,
            94,
            87,
            84,
            81,
            82,
            67,
            64,
            69,
            70,
            79,
            76,
            73,
            74,
            107,
            104,
            109,
            110,
            103,
            100,
            97,
            98,
            115,
            112,
            117,
            118,
            127,
            124,
            121,
            122,
            59,
            56,
            61,
            62,
            55,
            52,
            49,
            50,
            35,
            32,
            37,
            38,
            47,
            44,
            41,
            42,
            11,
            8,
            13,
            14,
            7,
            4,
            1,
            2,
            19,
            16,
            21,
            22,
            31,
            28,
            25,
            26
          ], Ug = [
            0,
            9,
            18,
            27,
            36,
            45,
            54,
            63,
            72,
            65,
            90,
            83,
            108,
            101,
            126,
            119,
            144,
            153,
            130,
            139,
            180,
            189,
            166,
            175,
            216,
            209,
            202,
            195,
            252,
            245,
            238,
            231,
            59,
            50,
            41,
            32,
            31,
            22,
            13,
            4,
            115,
            122,
            97,
            104,
            87,
            94,
            69,
            76,
            171,
            162,
            185,
            176,
            143,
            134,
            157,
            148,
            227,
            234,
            241,
            248,
            199,
            206,
            213,
            220,
            118,
            127,
            100,
            109,
            82,
            91,
            64,
            73,
            62,
            55,
            44,
            37,
            26,
            19,
            8,
            1,
            230,
            239,
            244,
            253,
            194,
            203,
            208,
            217,
            174,
            167,
            188,
            181,
            138,
            131,
            152,
            145,
            77,
            68,
            95,
            86,
            105,
            96,
            123,
            114,
            5,
            12,
            23,
            30,
            33,
            40,
            51,
            58,
            221,
            212,
            207,
            198,
            249,
            240,
            235,
            226,
            149,
            156,
            135,
            142,
            177,
            184,
            163,
            170,
            236,
            229,
            254,
            247,
            200,
            193,
            218,
            211,
            164,
            173,
            182,
            191,
            128,
            137,
            146,
            155,
            124,
            117,
            110,
            103,
            88,
            81,
            74,
            67,
            52,
            61,
            38,
            47,
            16,
            25,
            2,
            11,
            215,
            222,
            197,
            204,
            243,
            250,
            225,
            232,
            159,
            150,
            141,
            132,
            187,
            178,
            169,
            160,
            71,
            78,
            85,
            92,
            99,
            106,
            113,
            120,
            15,
            6,
            29,
            20,
            43,
            34,
            57,
            48,
            154,
            147,
            136,
            129,
            190,
            183,
            172,
            165,
            210,
            219,
            192,
            201,
            246,
            255,
            228,
            237,
            10,
            3,
            24,
            17,
            46,
            39,
            60,
            53,
            66,
            75,
            80,
            89,
            102,
            111,
            116,
            125,
            161,
            168,
            179,
            186,
            133,
            140,
            151,
            158,
            233,
            224,
            251,
            242,
            205,
            196,
            223,
            214,
            49,
            56,
            35,
            42,
            21,
            28,
            7,
            14,
            121,
            112,
            107,
            98,
            93,
            84,
            79,
            70
          ], Vg = [
            0,
            11,
            22,
            29,
            44,
            39,
            58,
            49,
            88,
            83,
            78,
            69,
            116,
            127,
            98,
            105,
            176,
            187,
            166,
            173,
            156,
            151,
            138,
            129,
            232,
            227,
            254,
            245,
            196,
            207,
            210,
            217,
            123,
            112,
            109,
            102,
            87,
            92,
            65,
            74,
            35,
            40,
            53,
            62,
            15,
            4,
            25,
            18,
            203,
            192,
            221,
            214,
            231,
            236,
            241,
            250,
            147,
            152,
            133,
            142,
            191,
            180,
            169,
            162,
            246,
            253,
            224,
            235,
            218,
            209,
            204,
            199,
            174,
            165,
            184,
            179,
            130,
            137,
            148,
            159,
            70,
            77,
            80,
            91,
            106,
            97,
            124,
            119,
            30,
            21,
            8,
            3,
            50,
            57,
            36,
            47,
            141,
            134,
            155,
            144,
            161,
            170,
            183,
            188,
            213,
            222,
            195,
            200,
            249,
            242,
            239,
            228,
            61,
            54,
            43,
            32,
            17,
            26,
            7,
            12,
            101,
            110,
            115,
            120,
            73,
            66,
            95,
            84,
            247,
            252,
            225,
            234,
            219,
            208,
            205,
            198,
            175,
            164,
            185,
            178,
            131,
            136,
            149,
            158,
            71,
            76,
            81,
            90,
            107,
            96,
            125,
            118,
            31,
            20,
            9,
            2,
            51,
            56,
            37,
            46,
            140,
            135,
            154,
            145,
            160,
            171,
            182,
            189,
            212,
            223,
            194,
            201,
            248,
            243,
            238,
            229,
            60,
            55,
            42,
            33,
            16,
            27,
            6,
            13,
            100,
            111,
            114,
            121,
            72,
            67,
            94,
            85,
            1,
            10,
            23,
            28,
            45,
            38,
            59,
            48,
            89,
            82,
            79,
            68,
            117,
            126,
            99,
            104,
            177,
            186,
            167,
            172,
            157,
            150,
            139,
            128,
            233,
            226,
            255,
            244,
            197,
            206,
            211,
            216,
            122,
            113,
            108,
            103,
            86,
            93,
            64,
            75,
            34,
            41,
            52,
            63,
            14,
            5,
            24,
            19,
            202,
            193,
            220,
            215,
            230,
            237,
            240,
            251,
            146,
            153,
            132,
            143,
            190,
            181,
            168,
            163
          ], Wg = [
            0,
            13,
            26,
            23,
            52,
            57,
            46,
            35,
            104,
            101,
            114,
            127,
            92,
            81,
            70,
            75,
            208,
            221,
            202,
            199,
            228,
            233,
            254,
            243,
            184,
            181,
            162,
            175,
            140,
            129,
            150,
            155,
            187,
            182,
            161,
            172,
            143,
            130,
            149,
            152,
            211,
            222,
            201,
            196,
            231,
            234,
            253,
            240,
            107,
            102,
            113,
            124,
            95,
            82,
            69,
            72,
            3,
            14,
            25,
            20,
            55,
            58,
            45,
            32,
            109,
            96,
            119,
            122,
            89,
            84,
            67,
            78,
            5,
            8,
            31,
            18,
            49,
            60,
            43,
            38,
            189,
            176,
            167,
            170,
            137,
            132,
            147,
            158,
            213,
            216,
            207,
            194,
            225,
            236,
            251,
            246,
            214,
            219,
            204,
            193,
            226,
            239,
            248,
            245,
            190,
            179,
            164,
            169,
            138,
            135,
            144,
            157,
            6,
            11,
            28,
            17,
            50,
            63,
            40,
            37,
            110,
            99,
            116,
            121,
            90,
            87,
            64,
            77,
            218,
            215,
            192,
            205,
            238,
            227,
            244,
            249,
            178,
            191,
            168,
            165,
            134,
            139,
            156,
            145,
            10,
            7,
            16,
            29,
            62,
            51,
            36,
            41,
            98,
            111,
            120,
            117,
            86,
            91,
            76,
            65,
            97,
            108,
            123,
            118,
            85,
            88,
            79,
            66,
            9,
            4,
            19,
            30,
            61,
            48,
            39,
            42,
            177,
            188,
            171,
            166,
            133,
            136,
            159,
            146,
            217,
            212,
            195,
            206,
            237,
            224,
            247,
            250,
            183,
            186,
            173,
            160,
            131,
            142,
            153,
            148,
            223,
            210,
            197,
            200,
            235,
            230,
            241,
            252,
            103,
            106,
            125,
            112,
            83,
            94,
            73,
            68,
            15,
            2,
            21,
            24,
            59,
            54,
            33,
            44,
            12,
            1,
            22,
            27,
            56,
            53,
            34,
            47,
            100,
            105,
            126,
            115,
            80,
            93,
            74,
            71,
            220,
            209,
            198,
            203,
            232,
            229,
            242,
            255,
            180,
            185,
            174,
            163,
            128,
            141,
            154,
            151
          ], Xg = [
            0,
            14,
            28,
            18,
            56,
            54,
            36,
            42,
            112,
            126,
            108,
            98,
            72,
            70,
            84,
            90,
            224,
            238,
            252,
            242,
            216,
            214,
            196,
            202,
            144,
            158,
            140,
            130,
            168,
            166,
            180,
            186,
            219,
            213,
            199,
            201,
            227,
            237,
            255,
            241,
            171,
            165,
            183,
            185,
            147,
            157,
            143,
            129,
            59,
            53,
            39,
            41,
            3,
            13,
            31,
            17,
            75,
            69,
            87,
            89,
            115,
            125,
            111,
            97,
            173,
            163,
            177,
            191,
            149,
            155,
            137,
            135,
            221,
            211,
            193,
            207,
            229,
            235,
            249,
            247,
            77,
            67,
            81,
            95,
            117,
            123,
            105,
            103,
            61,
            51,
            33,
            47,
            5,
            11,
            25,
            23,
            118,
            120,
            106,
            100,
            78,
            64,
            82,
            92,
            6,
            8,
            26,
            20,
            62,
            48,
            34,
            44,
            150,
            152,
            138,
            132,
            174,
            160,
            178,
            188,
            230,
            232,
            250,
            244,
            222,
            208,
            194,
            204,
            65,
            79,
            93,
            83,
            121,
            119,
            101,
            107,
            49,
            63,
            45,
            35,
            9,
            7,
            21,
            27,
            161,
            175,
            189,
            179,
            153,
            151,
            133,
            139,
            209,
            223,
            205,
            195,
            233,
            231,
            245,
            251,
            154,
            148,
            134,
            136,
            162,
            172,
            190,
            176,
            234,
            228,
            246,
            248,
            210,
            220,
            206,
            192,
            122,
            116,
            102,
            104,
            66,
            76,
            94,
            80,
            10,
            4,
            22,
            24,
            50,
            60,
            46,
            32,
            236,
            226,
            240,
            254,
            212,
            218,
            200,
            198,
            156,
            146,
            128,
            142,
            164,
            170,
            184,
            182,
            12,
            2,
            16,
            30,
            52,
            58,
            40,
            38,
            124,
            114,
            96,
            110,
            68,
            74,
            88,
            86,
            55,
            57,
            43,
            37,
            15,
            1,
            19,
            29,
            71,
            73,
            91,
            85,
            127,
            113,
            99,
            109,
            215,
            217,
            203,
            197,
            239,
            225,
            243,
            253,
            167,
            169,
            187,
            181,
            159,
            145,
            131,
            141
          ];
          function Yg(a, b) {
            a = new Gg(Zg(a));
            b = Eg(b);
            for (var c = b.splice(0, 16), d = "", e; c.length; ) {
              e = 16 - c.length;
              for (var f = 0; f < e; f++)
                c.push(0);
              e = a;
              Kg(e, c);
              Mg(e, 0);
              for (c = 1; c < e.j; ++c) {
                Ng(e, Qg);
                Og(e);
                f = e.h;
                for (var g = e.s[0], h = 0; 4 > h; h++)
                  g[0] = f[0][h], g[1] = f[1][h], g[2] = f[2][h], g[3] = f[3][h], f[0][h] = Sg[g[0]] ^ Tg[g[1]] ^ g[2] ^ g[3], f[1][h] = g[0] ^ Sg[g[1]] ^ Tg[g[2]] ^ g[3], f[2][h] = g[0] ^ g[1] ^ Sg[g[2]] ^ Tg[g[3]], f[3][h] = Tg[g[0]] ^ g[1] ^ g[2] ^ Sg[g[3]];
                Mg(e, c);
              }
              Ng(e, Qg);
              Og(e);
              Mg(e, e.j);
              d += Fg(Lg(e));
              c = b.splice(0, 16);
            }
            return d;
          }
          function $g(a, b) {
            a = new Gg(Zg(a));
            for (var c = [], d = 0; d < b.length; d += 2)
              c.push(parseInt(b.substring(d, d + 2), 16));
            var e = c.splice(0, 16);
            for (b = ""; e.length; ) {
              d = a;
              Kg(d, e);
              Mg(d, d.j);
              for (e = 1; e < d.j; ++e) {
                Pg(d);
                Ng(d, Rg);
                Mg(d, d.j - e);
                for (var f = d.h, g = d.s[0], h = 0; 4 > h; h++)
                  g[0] = f[0][h], g[1] = f[1][h], g[2] = f[2][h], g[3] = f[3][h], f[0][h] = Xg[g[0]] ^ Vg[g[1]] ^ Wg[g[2]] ^ Ug[g[3]], f[1][h] = Ug[g[0]] ^ Xg[g[1]] ^ Vg[g[2]] ^ Wg[g[3]], f[2][h] = Wg[g[0]] ^ Ug[g[1]] ^ Xg[g[2]] ^ Vg[g[3]], f[3][h] = Vg[g[0]] ^ Wg[g[1]] ^ Ug[g[2]] ^ Xg[g[3]];
              }
              Pg(d);
              Ng(d, Rg);
              Mg(d, 0);
              d = Lg(d);
              if (8192 >= d.length)
                d = String.fromCharCode.apply(null, d);
              else {
                e = "";
                for (f = 0; f < d.length; f += 8192)
                  e += String.fromCharCode.apply(null, Ta(d, f, f + 8192));
                d = e;
              }
              b += d;
              e = c.splice(0, 16);
            }
            return b.replace(/(\x00)+$/, "");
          }
          function Zg(a) {
            a = Eg(a.substring(0, 32));
            for (var b = 32 - a.length, c = 0; c < b; c++)
              a.push(0);
            return a;
          }
          function ah(a) {
            var b = [];
            bh(new ch(), a, b);
            return b.join("");
          }
          function ch() {
          }
          function bh(a, b, c) {
            if (b == null)
              c.push("null");
            else {
              if (typeof b == "object") {
                if (qa(b)) {
                  var d = b;
                  b = d.length;
                  c.push("[");
                  for (var e = "", f = 0; f < b; f++)
                    c.push(e), bh(a, d[f], c), e = ",";
                  c.push("]");
                  return;
                }
                if (b instanceof String || b instanceof Number || b instanceof Boolean)
                  b = b.valueOf();
                else {
                  c.push("{");
                  e = "";
                  for (d in b)
                    Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], typeof f != "function" && (c.push(e), dh(d, c), c.push(":"), bh(a, f, c), e = ","));
                  c.push("}");
                  return;
                }
              }
              switch (typeof b) {
                case "string":
                  dh(b, c);
                  break;
                case "number":
                  c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
                  break;
                case "boolean":
                  c.push(String(b));
                  break;
                case "function":
                  c.push("null");
                  break;
                default:
                  throw Error("Unknown type: " + typeof b);
              }
            }
          }
          var eh = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\u000b" }, fh = /\uffff/.test("\uFFFF") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;
          function dh(a, b) {
            b.push('"', a.replace(fh, function(c) {
              var d = eh[c];
              d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), eh[c] = d);
              return d;
            }), '"');
          }
          function gh(a) {
            this.a = a;
          }
          gh.prototype.set = function(a, b) {
            ka(b) ? this.a.set(a, ah(b)) : this.a.ra(a);
          };
          gh.prototype.get = function(a) {
            try {
              var b = this.a.get(a);
            } catch (c) {
              return;
            }
            if (b !== null)
              try {
                return JSON.parse(b);
              } catch (c$3) {
                throw "Storage: Invalid value was encountered";
              }
          };
          function hh() {
          }
          w(hh, yg);
          hh.prototype.clear = function() {
            var a = lb(this.ha(true)), b = this;
            Ha(a, function(c) {
              b.ra(c);
            });
          };
          function ih(a) {
            this.a = a;
          }
          w(ih, hh);
          function jh(a) {
            if (!a.a)
              return false;
            try {
              return a.a.setItem("__sak", "1"), a.a.removeItem("__sak"), true;
            } catch (b) {
              return false;
            }
          }
          l = ih.prototype;
          l.set = function(a, b) {
            try {
              this.a.setItem(a, b);
            } catch (c) {
              if (this.a.length == 0)
                throw "Storage mechanism: Storage disabled";
              throw "Storage mechanism: Quota exceeded";
            }
          };
          l.get = function(a) {
            a = this.a.getItem(a);
            if (!q(a) && a !== null)
              throw "Storage mechanism: Invalid value was encountered";
            return a;
          };
          l.ra = function(a) {
            this.a.removeItem(a);
          };
          l.ha = function(a) {
            var b = 0, c = this.a, d = new ib();
            d.next = function() {
              if (b >= c.length)
                throw hb;
              var e = c.key(b++);
              if (a)
                return e;
              e = c.getItem(e);
              if (!q(e))
                throw "Storage mechanism: Invalid value was encountered";
              return e;
            };
            return d;
          };
          l.clear = function() {
            this.a.clear();
          };
          l.key = function(a) {
            return this.a.key(a);
          };
          function kh() {
            var a = null;
            try {
              a = window.localStorage || null;
            } catch (b) {
            }
            this.a = a;
          }
          w(kh, ih);
          function lh() {
            var a = null;
            try {
              a = window.sessionStorage || null;
            } catch (b) {
            }
            this.a = a;
          }
          w(lh, ih);
          function mh(a, b) {
            this.g = a;
            this.a = b + "::";
          }
          w(mh, hh);
          mh.prototype.set = function(a, b) {
            this.g.set(this.a + a, b);
          };
          mh.prototype.get = function(a) {
            return this.g.get(this.a + a);
          };
          mh.prototype.ra = function(a) {
            this.g.ra(this.a + a);
          };
          mh.prototype.ha = function(a) {
            var b = this.g.ha(true), c = this, d = new ib();
            d.next = function() {
              for (var e = b.next(); e.substr(0, c.a.length) != c.a; )
                e = b.next();
              return a ? e.substr(c.a.length) : c.g.get(e);
            };
            return d;
          };
          jh(new kh());
          var nh, oh = new lh();
          nh = jh(oh) ? new mh(oh, "firebaseui") : null;
          var ph = new gh(nh), qh = { name: "pendingEmailCredential", storage: ph }, rh = { name: "redirectStatus", storage: ph }, sh = { name: "redirectUrl", storage: ph }, th = { name: "emailForSignIn", storage: new gh(new zg(3600, "/")) }, uh = { name: "pendingEncryptedCredential", storage: new gh(new zg(3600, "/")) };
          function vh(a, b) {
            return a.storage.get(b ? a.name + ":" + b : a.name);
          }
          function wh(a, b) {
            a.storage.a.ra(b ? a.name + ":" + b : a.name);
          }
          function xh(a, b, c) {
            a.storage.set(c ? a.name + ":" + c : a.name, b);
          }
          function yh(a) {
            return vh(sh, a) || null;
          }
          function zh(a) {
            a = vh(qh, a) || null;
            return Cg(a);
          }
          function Ah(a) {
            wh(qh, a);
          }
          function Bh(a, b) {
            xh(qh, Bg(a), b);
          }
          function Ch(a) {
            return (a = vh(rh, a) || null) && typeof a.tenantId !== "undefined" ? new Dg(a.tenantId) : null;
          }
          function Dh(a, b) {
            xh(rh, { tenantId: a.a }, b);
          }
          function Eh(a, b) {
            b = vh(th, b);
            var c = null;
            if (b)
              try {
                var d = $g(a, b), e = JSON.parse(d);
                c = e && e.email || null;
              } catch (f) {
              }
            return c;
          }
          function Fh(a, b) {
            b = vh(uh, b);
            var c = null;
            if (b)
              try {
                var d = $g(a, b);
                c = JSON.parse(d);
              } catch (e) {
              }
            return Cg(c || null);
          }
          function Gh(a, b, c) {
            xh(uh, Yg(a, JSON.stringify(Bg(b))), c);
          }
          function Hh() {
            this.W = {};
          }
          function G(a, b, c) {
            if (b.toLowerCase() in a.W)
              throw Error("Configuration " + b + " has already been defined.");
            a.W[b.toLowerCase()] = c;
          }
          function Ih(a, b, c) {
            if (!(b.toLowerCase() in a.W))
              throw Error("Configuration " + b + " is not defined.");
            a.W[b.toLowerCase()] = c;
          }
          Hh.prototype.get = function(a) {
            if (!(a.toLowerCase() in this.W))
              throw Error("Configuration " + a + " is not defined.");
            return this.W[a.toLowerCase()];
          };
          function Jh(a, b) {
            a = a.get(b);
            if (!a)
              throw Error("Configuration " + b + " is required.");
            return a;
          }
          function Kh() {
            this.g = void 0;
            this.a = {};
          }
          l = Kh.prototype;
          l.set = function(a, b) {
            Lh(this, a, b, false);
          };
          l.add = function(a, b) {
            Lh(this, a, b, true);
          };
          function Lh(a, b, c, d) {
            for (var e = 0; e < b.length; e++) {
              var f = b.charAt(e);
              a.a[f] || (a.a[f] = new Kh());
              a = a.a[f];
            }
            if (d && a.g !== void 0)
              throw Error('The collection already contains the key "' + b + '"');
            a.g = c;
          }
          l.get = function(a) {
            a: {
              for (var b = this, c = 0; c < a.length; c++)
                if (b = b.a[a.charAt(c)], !b) {
                  a = void 0;
                  break a;
                }
              a = b;
            }
            return a ? a.g : void 0;
          };
          l.la = function() {
            var a = [];
            Mh(this, a);
            return a;
          };
          function Mh(a, b) {
            a.g !== void 0 && b.push(a.g);
            for (var c in a.a)
              Mh(a.a[c], b);
          }
          l.ja = function() {
            var a = [];
            Nh(this, "", a);
            return a;
          };
          function Nh(a, b, c) {
            a.g !== void 0 && c.push(b);
            for (var d in a.a)
              Nh(a.a[d], b + d, c);
          }
          l.clear = function() {
            this.a = {};
            this.g = void 0;
          };
          function Oh(a) {
            this.a = a;
            this.g = new Kh();
            for (a = 0; a < this.a.length; a++) {
              var b = this.g.get("+" + this.a[a].b);
              b ? b.push(this.a[a]) : this.g.add("+" + this.a[a].b, [this.a[a]]);
            }
          }
          function Ph(a, b) {
            a = a.g;
            var c = {}, d = 0;
            a.g !== void 0 && (c[d] = a.g);
            for (; d < b.length; d++) {
              var e = b.charAt(d);
              if (!(e in a.a))
                break;
              a = a.a[e];
              a.g !== void 0 && (c[d] = a.g);
            }
            for (var f in c)
              if (c.hasOwnProperty(f))
                return c[f];
            return [];
          }
          function Qh(a) {
            for (var b = 0; b < Rh.length; b++)
              if (Rh[b].c === a)
                return Rh[b];
            return null;
          }
          function Sh(a) {
            a = a.toUpperCase();
            for (var b = [], c = 0; c < Rh.length; c++)
              Rh[c].f === a && b.push(Rh[c]);
            return b;
          }
          function Th(a) {
            if (0 < a.length && a.charAt(0) == "+") {
              a = a.substring(1);
              for (var b = [], c = 0; c < Rh.length; c++)
                Rh[c].b == a && b.push(Rh[c]);
              a = b;
            } else
              a = Sh(a);
            return a;
          }
          function Uh(a) {
            a.sort(function(b, c) {
              return b.name.localeCompare(c.name, "en");
            });
          }
          var Rh = [
            { name: "Afghanistan", c: "93-AF-0", b: "93", f: "AF" },
            { name: "\xC5land Islands", c: "358-AX-0", b: "358", f: "AX" },
            { name: "Albania", c: "355-AL-0", b: "355", f: "AL" },
            { name: "Algeria", c: "213-DZ-0", b: "213", f: "DZ" },
            { name: "American Samoa", c: "1-AS-0", b: "1", f: "AS" },
            { name: "Andorra", c: "376-AD-0", b: "376", f: "AD" },
            {
              name: "Angola",
              c: "244-AO-0",
              b: "244",
              f: "AO"
            },
            { name: "Anguilla", c: "1-AI-0", b: "1", f: "AI" },
            { name: "Antigua and Barbuda", c: "1-AG-0", b: "1", f: "AG" },
            { name: "Argentina", c: "54-AR-0", b: "54", f: "AR" },
            { name: "Armenia", c: "374-AM-0", b: "374", f: "AM" },
            { name: "Aruba", c: "297-AW-0", b: "297", f: "AW" },
            { name: "Ascension Island", c: "247-AC-0", b: "247", f: "AC" },
            { name: "Australia", c: "61-AU-0", b: "61", f: "AU" },
            { name: "Austria", c: "43-AT-0", b: "43", f: "AT" },
            { name: "Azerbaijan", c: "994-AZ-0", b: "994", f: "AZ" },
            { name: "Bahamas", c: "1-BS-0", b: "1", f: "BS" },
            {
              name: "Bahrain",
              c: "973-BH-0",
              b: "973",
              f: "BH"
            },
            { name: "Bangladesh", c: "880-BD-0", b: "880", f: "BD" },
            { name: "Barbados", c: "1-BB-0", b: "1", f: "BB" },
            { name: "Belarus", c: "375-BY-0", b: "375", f: "BY" },
            { name: "Belgium", c: "32-BE-0", b: "32", f: "BE" },
            { name: "Belize", c: "501-BZ-0", b: "501", f: "BZ" },
            { name: "Benin", c: "229-BJ-0", b: "229", f: "BJ" },
            { name: "Bermuda", c: "1-BM-0", b: "1", f: "BM" },
            { name: "Bhutan", c: "975-BT-0", b: "975", f: "BT" },
            { name: "Bolivia", c: "591-BO-0", b: "591", f: "BO" },
            { name: "Bosnia and Herzegovina", c: "387-BA-0", b: "387", f: "BA" },
            {
              name: "Botswana",
              c: "267-BW-0",
              b: "267",
              f: "BW"
            },
            { name: "Brazil", c: "55-BR-0", b: "55", f: "BR" },
            { name: "British Indian Ocean Territory", c: "246-IO-0", b: "246", f: "IO" },
            { name: "British Virgin Islands", c: "1-VG-0", b: "1", f: "VG" },
            { name: "Brunei", c: "673-BN-0", b: "673", f: "BN" },
            { name: "Bulgaria", c: "359-BG-0", b: "359", f: "BG" },
            { name: "Burkina Faso", c: "226-BF-0", b: "226", f: "BF" },
            { name: "Burundi", c: "257-BI-0", b: "257", f: "BI" },
            { name: "Cambodia", c: "855-KH-0", b: "855", f: "KH" },
            { name: "Cameroon", c: "237-CM-0", b: "237", f: "CM" },
            { name: "Canada", c: "1-CA-0", b: "1", f: "CA" },
            {
              name: "Cape Verde",
              c: "238-CV-0",
              b: "238",
              f: "CV"
            },
            { name: "Caribbean Netherlands", c: "599-BQ-0", b: "599", f: "BQ" },
            { name: "Cayman Islands", c: "1-KY-0", b: "1", f: "KY" },
            { name: "Central African Republic", c: "236-CF-0", b: "236", f: "CF" },
            { name: "Chad", c: "235-TD-0", b: "235", f: "TD" },
            { name: "Chile", c: "56-CL-0", b: "56", f: "CL" },
            { name: "China", c: "86-CN-0", b: "86", f: "CN" },
            { name: "Christmas Island", c: "61-CX-0", b: "61", f: "CX" },
            { name: "Cocos [Keeling] Islands", c: "61-CC-0", b: "61", f: "CC" },
            { name: "Colombia", c: "57-CO-0", b: "57", f: "CO" },
            {
              name: "Comoros",
              c: "269-KM-0",
              b: "269",
              f: "KM"
            },
            { name: "Democratic Republic Congo", c: "243-CD-0", b: "243", f: "CD" },
            { name: "Republic of Congo", c: "242-CG-0", b: "242", f: "CG" },
            { name: "Cook Islands", c: "682-CK-0", b: "682", f: "CK" },
            { name: "Costa Rica", c: "506-CR-0", b: "506", f: "CR" },
            { name: "C\xF4te d'Ivoire", c: "225-CI-0", b: "225", f: "CI" },
            { name: "Croatia", c: "385-HR-0", b: "385", f: "HR" },
            { name: "Cuba", c: "53-CU-0", b: "53", f: "CU" },
            { name: "Cura\xE7ao", c: "599-CW-0", b: "599", f: "CW" },
            { name: "Cyprus", c: "357-CY-0", b: "357", f: "CY" },
            {
              name: "Czech Republic",
              c: "420-CZ-0",
              b: "420",
              f: "CZ"
            },
            { name: "Denmark", c: "45-DK-0", b: "45", f: "DK" },
            { name: "Djibouti", c: "253-DJ-0", b: "253", f: "DJ" },
            { name: "Dominica", c: "1-DM-0", b: "1", f: "DM" },
            { name: "Dominican Republic", c: "1-DO-0", b: "1", f: "DO" },
            { name: "East Timor", c: "670-TL-0", b: "670", f: "TL" },
            { name: "Ecuador", c: "593-EC-0", b: "593", f: "EC" },
            { name: "Egypt", c: "20-EG-0", b: "20", f: "EG" },
            { name: "El Salvador", c: "503-SV-0", b: "503", f: "SV" },
            { name: "Equatorial Guinea", c: "240-GQ-0", b: "240", f: "GQ" },
            { name: "Eritrea", c: "291-ER-0", b: "291", f: "ER" },
            {
              name: "Estonia",
              c: "372-EE-0",
              b: "372",
              f: "EE"
            },
            { name: "Ethiopia", c: "251-ET-0", b: "251", f: "ET" },
            { name: "Falkland Islands [Islas Malvinas]", c: "500-FK-0", b: "500", f: "FK" },
            { name: "Faroe Islands", c: "298-FO-0", b: "298", f: "FO" },
            { name: "Fiji", c: "679-FJ-0", b: "679", f: "FJ" },
            { name: "Finland", c: "358-FI-0", b: "358", f: "FI" },
            { name: "France", c: "33-FR-0", b: "33", f: "FR" },
            { name: "French Guiana", c: "594-GF-0", b: "594", f: "GF" },
            { name: "French Polynesia", c: "689-PF-0", b: "689", f: "PF" },
            { name: "Gabon", c: "241-GA-0", b: "241", f: "GA" },
            { name: "Gambia", c: "220-GM-0", b: "220", f: "GM" },
            { name: "Georgia", c: "995-GE-0", b: "995", f: "GE" },
            { name: "Germany", c: "49-DE-0", b: "49", f: "DE" },
            { name: "Ghana", c: "233-GH-0", b: "233", f: "GH" },
            { name: "Gibraltar", c: "350-GI-0", b: "350", f: "GI" },
            { name: "Greece", c: "30-GR-0", b: "30", f: "GR" },
            { name: "Greenland", c: "299-GL-0", b: "299", f: "GL" },
            { name: "Grenada", c: "1-GD-0", b: "1", f: "GD" },
            { name: "Guadeloupe", c: "590-GP-0", b: "590", f: "GP" },
            { name: "Guam", c: "1-GU-0", b: "1", f: "GU" },
            { name: "Guatemala", c: "502-GT-0", b: "502", f: "GT" },
            { name: "Guernsey", c: "44-GG-0", b: "44", f: "GG" },
            {
              name: "Guinea Conakry",
              c: "224-GN-0",
              b: "224",
              f: "GN"
            },
            { name: "Guinea-Bissau", c: "245-GW-0", b: "245", f: "GW" },
            { name: "Guyana", c: "592-GY-0", b: "592", f: "GY" },
            { name: "Haiti", c: "509-HT-0", b: "509", f: "HT" },
            { name: "Heard Island and McDonald Islands", c: "672-HM-0", b: "672", f: "HM" },
            { name: "Honduras", c: "504-HN-0", b: "504", f: "HN" },
            { name: "Hong Kong", c: "852-HK-0", b: "852", f: "HK" },
            { name: "Hungary", c: "36-HU-0", b: "36", f: "HU" },
            { name: "Iceland", c: "354-IS-0", b: "354", f: "IS" },
            { name: "India", c: "91-IN-0", b: "91", f: "IN" },
            { name: "Indonesia", c: "62-ID-0", b: "62", f: "ID" },
            { name: "Iran", c: "98-IR-0", b: "98", f: "IR" },
            { name: "Iraq", c: "964-IQ-0", b: "964", f: "IQ" },
            { name: "Ireland", c: "353-IE-0", b: "353", f: "IE" },
            { name: "Isle of Man", c: "44-IM-0", b: "44", f: "IM" },
            { name: "Israel", c: "972-IL-0", b: "972", f: "IL" },
            { name: "Italy", c: "39-IT-0", b: "39", f: "IT" },
            { name: "Jamaica", c: "1-JM-0", b: "1", f: "JM" },
            { name: "Japan", c: "81-JP-0", b: "81", f: "JP" },
            { name: "Jersey", c: "44-JE-0", b: "44", f: "JE" },
            { name: "Jordan", c: "962-JO-0", b: "962", f: "JO" },
            { name: "Kazakhstan", c: "7-KZ-0", b: "7", f: "KZ" },
            {
              name: "Kenya",
              c: "254-KE-0",
              b: "254",
              f: "KE"
            },
            { name: "Kiribati", c: "686-KI-0", b: "686", f: "KI" },
            { name: "Kosovo", c: "377-XK-0", b: "377", f: "XK" },
            { name: "Kosovo", c: "381-XK-0", b: "381", f: "XK" },
            { name: "Kosovo", c: "386-XK-0", b: "386", f: "XK" },
            { name: "Kuwait", c: "965-KW-0", b: "965", f: "KW" },
            { name: "Kyrgyzstan", c: "996-KG-0", b: "996", f: "KG" },
            { name: "Laos", c: "856-LA-0", b: "856", f: "LA" },
            { name: "Latvia", c: "371-LV-0", b: "371", f: "LV" },
            { name: "Lebanon", c: "961-LB-0", b: "961", f: "LB" },
            { name: "Lesotho", c: "266-LS-0", b: "266", f: "LS" },
            { name: "Liberia", c: "231-LR-0", b: "231", f: "LR" },
            {
              name: "Libya",
              c: "218-LY-0",
              b: "218",
              f: "LY"
            },
            { name: "Liechtenstein", c: "423-LI-0", b: "423", f: "LI" },
            { name: "Lithuania", c: "370-LT-0", b: "370", f: "LT" },
            { name: "Luxembourg", c: "352-LU-0", b: "352", f: "LU" },
            { name: "Macau", c: "853-MO-0", b: "853", f: "MO" },
            { name: "Macedonia", c: "389-MK-0", b: "389", f: "MK" },
            { name: "Madagascar", c: "261-MG-0", b: "261", f: "MG" },
            { name: "Malawi", c: "265-MW-0", b: "265", f: "MW" },
            { name: "Malaysia", c: "60-MY-0", b: "60", f: "MY" },
            { name: "Maldives", c: "960-MV-0", b: "960", f: "MV" },
            { name: "Mali", c: "223-ML-0", b: "223", f: "ML" },
            {
              name: "Malta",
              c: "356-MT-0",
              b: "356",
              f: "MT"
            },
            { name: "Marshall Islands", c: "692-MH-0", b: "692", f: "MH" },
            { name: "Martinique", c: "596-MQ-0", b: "596", f: "MQ" },
            { name: "Mauritania", c: "222-MR-0", b: "222", f: "MR" },
            { name: "Mauritius", c: "230-MU-0", b: "230", f: "MU" },
            { name: "Mayotte", c: "262-YT-0", b: "262", f: "YT" },
            { name: "Mexico", c: "52-MX-0", b: "52", f: "MX" },
            { name: "Micronesia", c: "691-FM-0", b: "691", f: "FM" },
            { name: "Moldova", c: "373-MD-0", b: "373", f: "MD" },
            { name: "Monaco", c: "377-MC-0", b: "377", f: "MC" },
            { name: "Mongolia", c: "976-MN-0", b: "976", f: "MN" },
            {
              name: "Montenegro",
              c: "382-ME-0",
              b: "382",
              f: "ME"
            },
            { name: "Montserrat", c: "1-MS-0", b: "1", f: "MS" },
            { name: "Morocco", c: "212-MA-0", b: "212", f: "MA" },
            { name: "Mozambique", c: "258-MZ-0", b: "258", f: "MZ" },
            { name: "Myanmar [Burma]", c: "95-MM-0", b: "95", f: "MM" },
            { name: "Namibia", c: "264-NA-0", b: "264", f: "NA" },
            { name: "Nauru", c: "674-NR-0", b: "674", f: "NR" },
            { name: "Nepal", c: "977-NP-0", b: "977", f: "NP" },
            { name: "Netherlands", c: "31-NL-0", b: "31", f: "NL" },
            { name: "New Caledonia", c: "687-NC-0", b: "687", f: "NC" },
            { name: "New Zealand", c: "64-NZ-0", b: "64", f: "NZ" },
            {
              name: "Nicaragua",
              c: "505-NI-0",
              b: "505",
              f: "NI"
            },
            { name: "Niger", c: "227-NE-0", b: "227", f: "NE" },
            { name: "Nigeria", c: "234-NG-0", b: "234", f: "NG" },
            { name: "Niue", c: "683-NU-0", b: "683", f: "NU" },
            { name: "Norfolk Island", c: "672-NF-0", b: "672", f: "NF" },
            { name: "North Korea", c: "850-KP-0", b: "850", f: "KP" },
            { name: "Northern Mariana Islands", c: "1-MP-0", b: "1", f: "MP" },
            { name: "Norway", c: "47-NO-0", b: "47", f: "NO" },
            { name: "Oman", c: "968-OM-0", b: "968", f: "OM" },
            { name: "Pakistan", c: "92-PK-0", b: "92", f: "PK" },
            { name: "Palau", c: "680-PW-0", b: "680", f: "PW" },
            {
              name: "Palestinian Territories",
              c: "970-PS-0",
              b: "970",
              f: "PS"
            },
            { name: "Panama", c: "507-PA-0", b: "507", f: "PA" },
            { name: "Papua New Guinea", c: "675-PG-0", b: "675", f: "PG" },
            { name: "Paraguay", c: "595-PY-0", b: "595", f: "PY" },
            { name: "Peru", c: "51-PE-0", b: "51", f: "PE" },
            { name: "Philippines", c: "63-PH-0", b: "63", f: "PH" },
            { name: "Poland", c: "48-PL-0", b: "48", f: "PL" },
            { name: "Portugal", c: "351-PT-0", b: "351", f: "PT" },
            { name: "Puerto Rico", c: "1-PR-0", b: "1", f: "PR" },
            { name: "Qatar", c: "974-QA-0", b: "974", f: "QA" },
            { name: "R\xE9union", c: "262-RE-0", b: "262", f: "RE" },
            {
              name: "Romania",
              c: "40-RO-0",
              b: "40",
              f: "RO"
            },
            { name: "Russia", c: "7-RU-0", b: "7", f: "RU" },
            { name: "Rwanda", c: "250-RW-0", b: "250", f: "RW" },
            { name: "Saint Barth\xE9lemy", c: "590-BL-0", b: "590", f: "BL" },
            { name: "Saint Helena", c: "290-SH-0", b: "290", f: "SH" },
            { name: "St. Kitts", c: "1-KN-0", b: "1", f: "KN" },
            { name: "St. Lucia", c: "1-LC-0", b: "1", f: "LC" },
            { name: "Saint Martin", c: "590-MF-0", b: "590", f: "MF" },
            { name: "Saint Pierre and Miquelon", c: "508-PM-0", b: "508", f: "PM" },
            { name: "St. Vincent", c: "1-VC-0", b: "1", f: "VC" },
            { name: "Samoa", c: "685-WS-0", b: "685", f: "WS" },
            { name: "San Marino", c: "378-SM-0", b: "378", f: "SM" },
            { name: "S\xE3o Tom\xE9 and Pr\xEDncipe", c: "239-ST-0", b: "239", f: "ST" },
            { name: "Saudi Arabia", c: "966-SA-0", b: "966", f: "SA" },
            { name: "Senegal", c: "221-SN-0", b: "221", f: "SN" },
            { name: "Serbia", c: "381-RS-0", b: "381", f: "RS" },
            { name: "Seychelles", c: "248-SC-0", b: "248", f: "SC" },
            { name: "Sierra Leone", c: "232-SL-0", b: "232", f: "SL" },
            { name: "Singapore", c: "65-SG-0", b: "65", f: "SG" },
            { name: "Sint Maarten", c: "1-SX-0", b: "1", f: "SX" },
            { name: "Slovakia", c: "421-SK-0", b: "421", f: "SK" },
            {
              name: "Slovenia",
              c: "386-SI-0",
              b: "386",
              f: "SI"
            },
            { name: "Solomon Islands", c: "677-SB-0", b: "677", f: "SB" },
            { name: "Somalia", c: "252-SO-0", b: "252", f: "SO" },
            { name: "South Africa", c: "27-ZA-0", b: "27", f: "ZA" },
            { name: "South Georgia and the South Sandwich Islands", c: "500-GS-0", b: "500", f: "GS" },
            { name: "South Korea", c: "82-KR-0", b: "82", f: "KR" },
            { name: "South Sudan", c: "211-SS-0", b: "211", f: "SS" },
            { name: "Spain", c: "34-ES-0", b: "34", f: "ES" },
            { name: "Sri Lanka", c: "94-LK-0", b: "94", f: "LK" },
            { name: "Sudan", c: "249-SD-0", b: "249", f: "SD" },
            {
              name: "Suriname",
              c: "597-SR-0",
              b: "597",
              f: "SR"
            },
            { name: "Svalbard and Jan Mayen", c: "47-SJ-0", b: "47", f: "SJ" },
            { name: "Swaziland", c: "268-SZ-0", b: "268", f: "SZ" },
            { name: "Sweden", c: "46-SE-0", b: "46", f: "SE" },
            { name: "Switzerland", c: "41-CH-0", b: "41", f: "CH" },
            { name: "Syria", c: "963-SY-0", b: "963", f: "SY" },
            { name: "Taiwan", c: "886-TW-0", b: "886", f: "TW" },
            { name: "Tajikistan", c: "992-TJ-0", b: "992", f: "TJ" },
            { name: "Tanzania", c: "255-TZ-0", b: "255", f: "TZ" },
            { name: "Thailand", c: "66-TH-0", b: "66", f: "TH" },
            { name: "Togo", c: "228-TG-0", b: "228", f: "TG" },
            {
              name: "Tokelau",
              c: "690-TK-0",
              b: "690",
              f: "TK"
            },
            { name: "Tonga", c: "676-TO-0", b: "676", f: "TO" },
            { name: "Trinidad/Tobago", c: "1-TT-0", b: "1", f: "TT" },
            { name: "Tunisia", c: "216-TN-0", b: "216", f: "TN" },
            { name: "Turkey", c: "90-TR-0", b: "90", f: "TR" },
            { name: "Turkmenistan", c: "993-TM-0", b: "993", f: "TM" },
            { name: "Turks and Caicos Islands", c: "1-TC-0", b: "1", f: "TC" },
            { name: "Tuvalu", c: "688-TV-0", b: "688", f: "TV" },
            { name: "U.S. Virgin Islands", c: "1-VI-0", b: "1", f: "VI" },
            { name: "Uganda", c: "256-UG-0", b: "256", f: "UG" },
            { name: "Ukraine", c: "380-UA-0", b: "380", f: "UA" },
            {
              name: "United Arab Emirates",
              c: "971-AE-0",
              b: "971",
              f: "AE"
            },
            { name: "United Kingdom", c: "44-GB-0", b: "44", f: "GB" },
            { name: "United States", c: "1-US-0", b: "1", f: "US" },
            { name: "Uruguay", c: "598-UY-0", b: "598", f: "UY" },
            { name: "Uzbekistan", c: "998-UZ-0", b: "998", f: "UZ" },
            { name: "Vanuatu", c: "678-VU-0", b: "678", f: "VU" },
            { name: "Vatican City", c: "379-VA-0", b: "379", f: "VA" },
            { name: "Venezuela", c: "58-VE-0", b: "58", f: "VE" },
            { name: "Vietnam", c: "84-VN-0", b: "84", f: "VN" },
            { name: "Wallis and Futuna", c: "681-WF-0", b: "681", f: "WF" },
            {
              name: "Western Sahara",
              c: "212-EH-0",
              b: "212",
              f: "EH"
            },
            { name: "Yemen", c: "967-YE-0", b: "967", f: "YE" },
            { name: "Zambia", c: "260-ZM-0", b: "260", f: "ZM" },
            { name: "Zimbabwe", c: "263-ZW-0", b: "263", f: "ZW" }
          ];
          Uh(Rh);
          var Vh = new Oh(Rh);
          function Wh(a, b) {
            this.a = a;
            this.Aa = b;
          }
          function Xh(a) {
            a = Ua(a);
            var b = Ph(Vh, a);
            return 0 < b.length ? new Wh(b[0].b == "1" ? "1-US-0" : b[0].c, Ua(a.substr(b[0].b.length + 1))) : null;
          }
          function Yh(a) {
            var b = Qh(a.a);
            if (!b)
              throw Error("Country ID " + a.a + " not found.");
            return "+" + b.b + a.Aa;
          }
          function Zh(a, b) {
            for (var c = 0; c < a.length; c++)
              if (!Ma($h, a[c]) && (ai !== null && a[c] in ai || Ma(b, a[c])))
                return a[c];
            return null;
          }
          var $h = ["emailLink", "password", "phone"], ai = { "facebook.com": "FacebookAuthProvider", "github.com": "GithubAuthProvider", "google.com": "GoogleAuthProvider", password: "EmailAuthProvider", "twitter.com": "TwitterAuthProvider", phone: "PhoneAuthProvider" };
          function bi() {
            this.a = new Hh();
            G(this.a, "autoUpgradeAnonymousUsers");
            G(this.a, "callbacks");
            G(this.a, "credentialHelper", ci);
            G(this.a, "immediateFederatedRedirect", false);
            G(this.a, "popupMode", false);
            G(this.a, "privacyPolicyUrl");
            G(this.a, "queryParameterForSignInSuccessUrl", "signInSuccessUrl");
            G(this.a, "queryParameterForWidgetMode", "mode");
            G(this.a, "signInFlow");
            G(this.a, "signInOptions");
            G(this.a, "signInSuccessUrl");
            G(this.a, "siteName");
            G(this.a, "tosUrl");
            G(this.a, "widgetUrl");
            G(this.a, "adminRestrictedOperation");
          }
          function di(a) {
            var b = !!a.a.get("autoUpgradeAnonymousUsers");
            b && !ei(a) && og('Missing "signInFailure" callback: "signInFailure" callback needs to be provided when "autoUpgradeAnonymousUsers" is set to true.', void 0);
            return b;
          }
          function fi(a) {
            a = a.a.get("signInOptions") || [];
            for (var b = [], c = 0; c < a.length; c++) {
              var d = a[c];
              d = ta(d) ? d : { provider: d };
              d.provider && b.push(d);
            }
            return b;
          }
          function gi(a, b) {
            a = fi(a);
            for (var c = 0; c < a.length; c++)
              if (a[c].provider === b)
                return a[c];
            return null;
          }
          function hi(a) {
            return fi(a).map(function(b) {
              return b.provider;
            });
          }
          function ii(a, b) {
            a = ji(a);
            for (var c = 0; c < a.length; c++)
              if (a[c].providerId === b)
                return a[c];
            return null;
          }
          function ji(a) {
            return fi(a).map(function(b) {
              if (ai[b.provider] || Ma(ki, b.provider)) {
                b = {
                  providerId: b.provider,
                  S: b.providerName || null,
                  V: b.fullLabel || null,
                  ta: b.buttonColor || null,
                  za: b.iconUrl ? zc(Bc(b.iconUrl)).toString() : null
                };
                for (var c in b)
                  b[c] === null && delete b[c];
                return b;
              }
              return { providerId: b.provider, S: b.providerName || null, V: b.fullLabel || null, ta: b.buttonColor || null, za: b.iconUrl ? zc(Bc(b.iconUrl)).toString() : null, Ob: b.loginHintKey || null };
            });
          }
          function li(a) {
            var b = gi(a, firebase2.auth.GoogleAuthProvider.PROVIDER_ID), c;
            if (c = b && b.clientId) {
              a: {
                if ((window.location && window.location.protocol) === "http:" || (window.location && window.location.protocol) === "https:") {
                  for (d in a = a.a.get("credentialHelper"), mi)
                    if (mi[d] === a) {
                      var d = mi[d];
                      break a;
                    }
                }
                d = ci;
              }
              c = d === ni;
            }
            return c ? b.clientId || null : null;
          }
          function oi(a) {
            a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID);
            return !!(a && a.disableSignUp && a.disableSignUp.status);
          }
          function pi(a) {
            a = a.a.get("adminRestrictedOperation") || null;
            return !(!a || !a.status);
          }
          function qi(a) {
            var b = null;
            fi(a).forEach(function(d) {
              d.provider == firebase2.auth.PhoneAuthProvider.PROVIDER_ID && ta(d.recaptchaParameters) && !Array.isArray(d.recaptchaParameters) && (b = eb(d.recaptchaParameters));
            });
            if (b) {
              var c = [];
              ri.forEach(function(d) {
                typeof b[d] !== "undefined" && (c.push(d), delete b[d]);
              });
              c.length && tg('The following provided "recaptchaParameters" keys are not allowed: ' + c.join(", "));
            }
            return b;
          }
          function si(a) {
            return (a = a.a.get("adminRestrictedOperation")) && a.adminEmail ? a.adminEmail : null;
          }
          function ti(a) {
            if (a = a.a.get("adminRestrictedOperation") || null) {
              var b = a.helpLink || null;
              if (b && typeof b === "string")
                return function() {
                  rf(b);
                };
            }
            return null;
          }
          function ui2(a) {
            return (a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID)) && a.disableSignUp && a.disableSignUp.adminEmail || null;
          }
          function vi(a) {
            if ((a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID)) && a.disableSignUp) {
              var b = a.disableSignUp.helpLink || null;
              if (b && typeof b === "string")
                return function() {
                  rf(b);
                };
            }
            return null;
          }
          function wi(a, b) {
            a = (a = gi(a, b)) && a.scopes;
            return Array.isArray(a) ? a : [];
          }
          function xi(a, b) {
            a = (a = gi(a, b)) && a.customParameters;
            return ta(a) ? (a = eb(a), b === firebase2.auth.GoogleAuthProvider.PROVIDER_ID && delete a.login_hint, b === firebase2.auth.GithubAuthProvider.PROVIDER_ID && delete a.login, a) : null;
          }
          function yi(a) {
            a = gi(a, firebase2.auth.PhoneAuthProvider.PROVIDER_ID);
            var b = null;
            a && typeof a.loginHint === "string" && (b = Xh(a.loginHint));
            return a && a.defaultNationalNumber || b && b.Aa || null;
          }
          function zi(a) {
            var b = (a = gi(a, firebase2.auth.PhoneAuthProvider.PROVIDER_ID)) && a.defaultCountry || null;
            b = b && Sh(b);
            var c = null;
            a && typeof a.loginHint === "string" && (c = Xh(a.loginHint));
            return b && b[0] || c && Qh(c.a) || null;
          }
          function Ai(a) {
            a = gi(a, firebase2.auth.PhoneAuthProvider.PROVIDER_ID);
            if (!a)
              return null;
            var b = a.whitelistedCountries, c = a.blacklistedCountries;
            if (typeof b !== "undefined" && (!Array.isArray(b) || b.length == 0))
              throw Error("WhitelistedCountries must be a non-empty array.");
            if (typeof c !== "undefined" && !Array.isArray(c))
              throw Error("BlacklistedCountries must be an array.");
            if (b && c)
              throw Error("Both whitelistedCountries and blacklistedCountries are provided.");
            if (!b && !c)
              return Rh;
            a = [];
            if (b) {
              c = {};
              for (var d = 0; d < b.length; d++) {
                var e = Th(b[d]);
                for (var f = 0; f < e.length; f++)
                  c[e[f].c] = e[f];
              }
              for (var g in c)
                c.hasOwnProperty(g) && a.push(c[g]);
            } else {
              g = {};
              for (b = 0; b < c.length; b++)
                for (e = Th(c[b]), d = 0; d < e.length; d++)
                  g[e[d].c] = e[d];
              for (e = 0; e < Rh.length; e++)
                g !== null && Rh[e].c in g || a.push(Rh[e]);
            }
            return a;
          }
          function Bi(a) {
            return Jh(a.a, "queryParameterForWidgetMode");
          }
          function H(a) {
            var b = a.a.get("tosUrl") || null;
            a = a.a.get("privacyPolicyUrl") || null;
            b && !a && tg("Privacy Policy URL is missing, the link will not be displayed.");
            if (b && a) {
              if (typeof b === "function")
                return b;
              if (typeof b === "string")
                return function() {
                  rf(b);
                };
            }
            return null;
          }
          function J(a) {
            var b = a.a.get("tosUrl") || null, c = a.a.get("privacyPolicyUrl") || null;
            c && !b && tg("Term of Service URL is missing, the link will not be displayed.");
            if (b && c) {
              if (typeof c === "function")
                return c;
              if (typeof c === "string")
                return function() {
                  rf(c);
                };
            }
            return null;
          }
          function Ci(a) {
            return (a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID)) && typeof a.requireDisplayName !== "undefined" ? !!a.requireDisplayName : true;
          }
          function Di(a) {
            a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID);
            return !(!a || a.signInMethod !== firebase2.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD);
          }
          function Ei(a) {
            a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID);
            return !(!a || !a.forceSameDevice);
          }
          function Fi(a) {
            if (Di(a)) {
              var b = { url: tf(), handleCodeInApp: true };
              (a = gi(a, firebase2.auth.EmailAuthProvider.PROVIDER_ID)) && typeof a.emailLinkSignIn === "function" && gb(b, a.emailLinkSignIn());
              a = b.url;
              var c = tf();
              c instanceof vb || (c = Jb(c));
              a instanceof vb || (a = Jb(a));
              var d = c;
              c = new vb(d);
              var e = !!a.j;
              e ? wb(c, a.j) : e = !!a.A;
              e ? c.A = a.A : e = !!a.h;
              e ? c.h = a.h : e = a.C != null;
              var f = a.g;
              if (e)
                xb(c, a.C);
              else if (e = !!a.g) {
                if (f.charAt(0) != "/" && (d.h && !d.g ? f = "/" + f : (d = c.g.lastIndexOf("/"), d != -1 && (f = c.g.substr(0, d + 1) + f))), f == ".." || f == ".")
                  f = "";
                else if (f.indexOf("./") != -1 || f.indexOf("/.") != -1) {
                  d = f.lastIndexOf("/", 0) == 0;
                  f = f.split("/");
                  for (var g = [], h = 0; h < f.length; ) {
                    var k = f[h++];
                    k == "." ? d && h == f.length && g.push("") : k == ".." ? ((1 < g.length || g.length == 1 && g[0] != "") && g.pop(), d && h == f.length && g.push("")) : (g.push(k), d = true);
                  }
                  f = g.join("/");
                }
              }
              e ? c.g = f : e = a.a.toString() !== "";
              e ? yb(c, zb(a.a)) : e = !!a.s;
              e && (c.s = a.s);
              b.url = c.toString();
              return b;
            }
            return null;
          }
          function Gi(a) {
            var b = !!a.a.get("immediateFederatedRedirect"), c = hi(a);
            a = Hi(a);
            return b && c.length == 1 && !Ma($h, c[0]) && a == Ii;
          }
          function Hi(a) {
            a = a.a.get("signInFlow");
            for (var b in Ji)
              if (Ji[b] == a)
                return Ji[b];
            return Ii;
          }
          function Ki(a) {
            return Li(a).signInSuccess || null;
          }
          function Mi(a) {
            return Li(a).signInSuccessWithAuthResult || null;
          }
          function ei(a) {
            return Li(a).signInFailure || null;
          }
          function Li(a) {
            return a.a.get("callbacks") || {};
          }
          var ni = "googleyolo", ci = "none", mi = { nc: ni, NONE: ci }, Ii = "redirect", Ji = { qc: "popup", rc: Ii }, Ni = {
            mc: "callback",
            RECOVER_EMAIL: "recoverEmail",
            sc: "resetPassword",
            REVERT_SECOND_FACTOR_ADDITION: "revertSecondFactorAddition",
            tc: "select",
            uc: "signIn",
            VERIFY_AND_CHANGE_EMAIL: "verifyAndChangeEmail",
            VERIFY_EMAIL: "verifyEmail"
          }, ki = ["anonymous"], ri = ["sitekey", "tabindex", "callback", "expired-callback"];
          var Oi, Pi, Qi, Ri, K = {};
          function L(a, b, c, d) {
            K[a].apply(null, Array.prototype.slice.call(arguments, 1));
          }
          function Si(a) {
            if (a.classList)
              return a.classList;
            a = a.className;
            return q(a) && a.match(/\S+/g) || [];
          }
          function Ti(a, b) {
            return a.classList ? a.classList.contains(b) : Ma(Si(a), b);
          }
          function Ui(a, b) {
            a.classList ? a.classList.add(b) : Ti(a, b) || (a.className += 0 < a.className.length ? " " + b : b);
          }
          function Vi(a, b) {
            a.classList ? a.classList.remove(b) : Ti(a, b) && (a.className = Ja(Si(a), function(c) {
              return c != b;
            }).join(" "));
          }
          function Wi(a) {
            var b = a.type;
            switch (q(b) && b.toLowerCase()) {
              case "checkbox":
              case "radio":
                return a.checked ? a.value : null;
              case "select-one":
                return b = a.selectedIndex, 0 <= b ? a.options[b].value : null;
              case "select-multiple":
                b = [];
                for (var c, d = 0; c = a.options[d]; d++)
                  c.selected && b.push(c.value);
                return b.length ? b : null;
              default:
                return a.value != null ? a.value : null;
            }
          }
          function Xi(a, b) {
            var c = a.type;
            switch (q(c) && c.toLowerCase()) {
              case "checkbox":
              case "radio":
                a.checked = b;
                break;
              case "select-one":
                a.selectedIndex = -1;
                if (q(b)) {
                  for (var d = 0; c = a.options[d]; d++)
                    if (c.value == b) {
                      c.selected = true;
                      break;
                    }
                }
                break;
              case "select-multiple":
                q(b) && (b = [b]);
                for (d = 0; c = a.options[d]; d++)
                  if (c.selected = false, b)
                    for (var e, f = 0; e = b[f]; f++)
                      c.value == e && (c.selected = true);
                break;
              default:
                a.value = b != null ? b : "";
            }
          }
          function Yi(a) {
            if (a.altKey && !a.ctrlKey || a.metaKey || 112 <= a.keyCode && 123 >= a.keyCode)
              return false;
            if (Zi(a.keyCode))
              return true;
            switch (a.keyCode) {
              case 18:
              case 20:
              case 93:
              case 17:
              case 40:
              case 35:
              case 27:
              case 36:
              case 45:
              case 37:
              case 224:
              case 91:
              case 144:
              case 12:
              case 34:
              case 33:
              case 19:
              case 255:
              case 44:
              case 39:
              case 145:
              case 16:
              case 38:
              case 252:
              case 224:
              case 92:
                return false;
              case 0:
                return !dc;
              default:
                return 166 > a.keyCode || 183 < a.keyCode;
            }
          }
          function $i(a, b, c, d, e, f) {
            if (ec && !mc("525"))
              return true;
            if (gc && e)
              return Zi(a);
            if (e && !d)
              return false;
            if (!dc) {
              typeof b == "number" && (b = aj(b));
              var g = b == 17 || b == 18 || gc && b == 91;
              if ((!c || gc) && g || gc && b == 16 && (d || f))
                return false;
            }
            if ((ec || bc) && d && c)
              switch (a) {
                case 220:
                case 219:
                case 221:
                case 192:
                case 186:
                case 189:
                case 187:
                case 188:
                case 190:
                case 191:
                case 192:
                case 222:
                  return false;
              }
            if (z && d && b == a)
              return false;
            switch (a) {
              case 13:
                return dc ? f || e ? false : !(c && d) : true;
              case 27:
                return !(ec || bc || dc);
            }
            return dc && (d || e || f) ? false : Zi(a);
          }
          function Zi(a) {
            if (48 <= a && 57 >= a || 96 <= a && 106 >= a || 65 <= a && 90 >= a || (ec || bc) && a == 0)
              return true;
            switch (a) {
              case 32:
              case 43:
              case 63:
              case 64:
              case 107:
              case 109:
              case 110:
              case 111:
              case 186:
              case 59:
              case 189:
              case 187:
              case 61:
              case 188:
              case 190:
              case 191:
              case 192:
              case 222:
              case 219:
              case 220:
              case 221:
              case 163:
                return true;
              case 173:
                return dc;
              default:
                return false;
            }
          }
          function aj(a) {
            if (dc)
              a = bj(a);
            else if (gc && ec)
              switch (a) {
                case 93:
                  a = 91;
              }
            return a;
          }
          function bj(a) {
            switch (a) {
              case 61:
                return 187;
              case 59:
                return 186;
              case 173:
                return 189;
              case 224:
                return 91;
              case 0:
                return 224;
              default:
                return a;
            }
          }
          function cj(a) {
            E.call(this);
            this.a = a;
            ke(a, "keydown", this.g, false, this);
            ke(a, "click", this.h, false, this);
          }
          w(cj, E);
          cj.prototype.g = function(a) {
            (a.keyCode == 13 || ec && a.keyCode == 3) && dj(this, a);
          };
          cj.prototype.h = function(a) {
            dj(this, a);
          };
          function dj(a, b) {
            var c = new ej(b);
            if (xe(a, c)) {
              c = new fj(b);
              try {
                xe(a, c);
              } finally {
                b.stopPropagation();
              }
            }
          }
          cj.prototype.o = function() {
            cj.K.o.call(this);
            se(this.a, "keydown", this.g, false, this);
            se(this.a, "click", this.h, false, this);
            delete this.a;
          };
          function fj(a) {
            Zd.call(this, a.a);
            this.type = "action";
          }
          w(fj, Zd);
          function ej(a) {
            Zd.call(this, a.a);
            this.type = "beforeaction";
          }
          w(ej, Zd);
          function gj(a) {
            E.call(this);
            this.a = a;
            a = z ? "focusout" : "blur";
            this.g = ke(this.a, z ? "focusin" : "focus", this, !z);
            this.h = ke(this.a, a, this, !z);
          }
          w(gj, E);
          gj.prototype.handleEvent = function(a) {
            var b = new Zd(a.a);
            b.type = a.type == "focusin" || a.type == "focus" ? "focusin" : "focusout";
            xe(this, b);
          };
          gj.prototype.o = function() {
            gj.K.o.call(this);
            te(this.g);
            te(this.h);
            delete this.a;
          };
          function hj(a, b) {
            E.call(this);
            this.g = a || 1;
            this.a = b || n;
            this.h = r(this.gc, this);
            this.j = Aa();
          }
          w(hj, E);
          l = hj.prototype;
          l.Ka = false;
          l.aa = null;
          l.gc = function() {
            if (this.Ka) {
              var a = Aa() - this.j;
              0 < a && a < 0.8 * this.g ? this.aa = this.a.setTimeout(this.h, this.g - a) : (this.aa && (this.a.clearTimeout(this.aa), this.aa = null), xe(this, "tick"), this.Ka && (ij(this), this.start()));
            }
          };
          l.start = function() {
            this.Ka = true;
            this.aa || (this.aa = this.a.setTimeout(this.h, this.g), this.j = Aa());
          };
          function ij(a) {
            a.Ka = false;
            a.aa && (a.a.clearTimeout(a.aa), a.aa = null);
          }
          l.o = function() {
            hj.K.o.call(this);
            ij(this);
            delete this.a;
          };
          function jj(a, b) {
            if (sa(a))
              b && (a = r(a, b));
            else if (a && typeof a.handleEvent == "function")
              a = r(a.handleEvent, a);
            else
              throw Error("Invalid listener argument");
            return 2147483647 < Number(0) ? -1 : n.setTimeout(a, 0);
          }
          function kj(a) {
            Pd.call(this);
            this.g = a;
            this.a = {};
          }
          w(kj, Pd);
          var lj = [];
          function mj(a, b, c, d) {
            qa(c) || (c && (lj[0] = c.toString()), c = lj);
            for (var e = 0; e < c.length; e++) {
              var f = ke(b, c[e], d || a.handleEvent, false, a.g || a);
              if (!f)
                break;
              a.a[f.key] = f;
            }
          }
          function nj(a) {
            db(a.a, function(b, c) {
              this.a.hasOwnProperty(c) && te(b);
            }, a);
            a.a = {};
          }
          kj.prototype.o = function() {
            kj.K.o.call(this);
            nj(this);
          };
          kj.prototype.handleEvent = function() {
            throw Error("EventHandler.handleEvent not implemented");
          };
          function oj(a) {
            E.call(this);
            this.a = null;
            this.g = a;
            a = z || bc || ec && !mc("531") && a.tagName == "TEXTAREA";
            this.h = new kj(this);
            mj(this.h, this.g, a ? ["keydown", "paste", "cut", "drop", "input"] : "input", this);
          }
          w(oj, E);
          oj.prototype.handleEvent = function(a) {
            if (a.type == "input")
              z && mc(10) && a.keyCode == 0 && a.j == 0 || (pj(this), xe(this, qj(a)));
            else if (a.type != "keydown" || Yi(a)) {
              var b = a.type == "keydown" ? this.g.value : null;
              z && a.keyCode == 229 && (b = null);
              var c = qj(a);
              pj(this);
              this.a = jj(function() {
                this.a = null;
                this.g.value != b && xe(this, c);
              }, this);
            }
          };
          function pj(a) {
            a.a != null && (n.clearTimeout(a.a), a.a = null);
          }
          function qj(a) {
            a = new Zd(a.a);
            a.type = "input";
            return a;
          }
          oj.prototype.o = function() {
            oj.K.o.call(this);
            this.h.m();
            pj(this);
            delete this.g;
          };
          function rj(a, b) {
            E.call(this);
            a && (this.Oa && sj(this), this.qa = a, this.Na = ke(this.qa, "keypress", this, b), this.Ya = ke(this.qa, "keydown", this.Jb, b, this), this.Oa = ke(this.qa, "keyup", this.Kb, b, this));
          }
          w(rj, E);
          l = rj.prototype;
          l.qa = null;
          l.Na = null;
          l.Ya = null;
          l.Oa = null;
          l.R = -1;
          l.X = -1;
          l.Ua = false;
          var tj = {
            3: 13,
            12: 144,
            63232: 38,
            63233: 40,
            63234: 37,
            63235: 39,
            63236: 112,
            63237: 113,
            63238: 114,
            63239: 115,
            63240: 116,
            63241: 117,
            63242: 118,
            63243: 119,
            63244: 120,
            63245: 121,
            63246: 122,
            63247: 123,
            63248: 44,
            63272: 46,
            63273: 36,
            63275: 35,
            63276: 33,
            63277: 34,
            63289: 144,
            63302: 45
          }, uj = { Up: 38, Down: 40, Left: 37, Right: 39, Enter: 13, F1: 112, F2: 113, F3: 114, F4: 115, F5: 116, F6: 117, F7: 118, F8: 119, F9: 120, F10: 121, F11: 122, F12: 123, "U+007F": 46, Home: 36, End: 35, PageUp: 33, PageDown: 34, Insert: 45 }, vj = !ec || mc("525"), wj = gc && dc;
          l = rj.prototype;
          l.Jb = function(a) {
            if (ec || bc) {
              if (this.R == 17 && !a.ctrlKey || this.R == 18 && !a.altKey || gc && this.R == 91 && !a.metaKey)
                this.X = this.R = -1;
            }
            this.R == -1 && (a.ctrlKey && a.keyCode != 17 ? this.R = 17 : a.altKey && a.keyCode != 18 ? this.R = 18 : a.metaKey && a.keyCode != 91 && (this.R = 91));
            vj && !$i(a.keyCode, this.R, a.shiftKey, a.ctrlKey, a.altKey, a.metaKey) ? this.handleEvent(a) : (this.X = aj(a.keyCode), wj && (this.Ua = a.altKey));
          };
          l.Kb = function(a) {
            this.X = this.R = -1;
            this.Ua = a.altKey;
          };
          l.handleEvent = function(a) {
            var b = a.a, c = b.altKey;
            if (z && a.type == "keypress") {
              var d = this.X;
              var e = d != 13 && d != 27 ? b.keyCode : 0;
            } else
              (ec || bc) && a.type == "keypress" ? (d = this.X, e = 0 <= b.charCode && 63232 > b.charCode && Zi(d) ? b.charCode : 0) : ac && !ec ? (d = this.X, e = Zi(d) ? b.keyCode : 0) : (a.type == "keypress" ? (wj && (c = this.Ua), b.keyCode == b.charCode ? 32 > b.keyCode ? (d = b.keyCode, e = 0) : (d = this.X, e = b.charCode) : (d = b.keyCode || this.X, e = b.charCode || 0)) : (d = b.keyCode || this.X, e = b.charCode || 0), gc && e == 63 && d == 224 && (d = 191));
            var f = d = aj(d);
            d ? 63232 <= d && d in tj ? f = tj[d] : d == 25 && a.shiftKey && (f = 9) : b.keyIdentifier && b.keyIdentifier in uj && (f = uj[b.keyIdentifier]);
            dc && vj && a.type == "keypress" && !$i(f, this.R, a.shiftKey, a.ctrlKey, c, a.metaKey) || (a = f == this.R, this.R = f, b = new xj(f, e, a, b), b.altKey = c, xe(this, b));
          };
          l.N = function() {
            return this.qa;
          };
          function sj(a) {
            a.Na && (te(a.Na), te(a.Ya), te(a.Oa), a.Na = null, a.Ya = null, a.Oa = null);
            a.qa = null;
            a.R = -1;
            a.X = -1;
          }
          l.o = function() {
            rj.K.o.call(this);
            sj(this);
          };
          function xj(a, b, c, d) {
            Zd.call(this, d);
            this.type = "key";
            this.keyCode = a;
            this.j = b;
            this.repeat = c;
          }
          w(xj, Zd);
          function yj(a, b, c, d) {
            this.top = a;
            this.right = b;
            this.bottom = c;
            this.left = d;
          }
          yj.prototype.toString = function() {
            return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
          };
          yj.prototype.ceil = function() {
            this.top = Math.ceil(this.top);
            this.right = Math.ceil(this.right);
            this.bottom = Math.ceil(this.bottom);
            this.left = Math.ceil(this.left);
            return this;
          };
          yj.prototype.floor = function() {
            this.top = Math.floor(this.top);
            this.right = Math.floor(this.right);
            this.bottom = Math.floor(this.bottom);
            this.left = Math.floor(this.left);
            return this;
          };
          yj.prototype.round = function() {
            this.top = Math.round(this.top);
            this.right = Math.round(this.right);
            this.bottom = Math.round(this.bottom);
            this.left = Math.round(this.left);
            return this;
          };
          function zj(a, b) {
            var c = Sc(a);
            return c.defaultView && c.defaultView.getComputedStyle && (a = c.defaultView.getComputedStyle(a, null)) ? a[b] || a.getPropertyValue(b) || "" : "";
          }
          function Aj(a) {
            try {
              var b = a.getBoundingClientRect();
            } catch (c) {
              return { left: 0, top: 0, right: 0, bottom: 0 };
            }
            z && a.ownerDocument.body && (a = a.ownerDocument, b.left -= a.documentElement.clientLeft + a.body.clientLeft, b.top -= a.documentElement.clientTop + a.body.clientTop);
            return b;
          }
          function Bj(a, b) {
            b = b || Yc(document);
            var c = b || Yc(document);
            var d = Cj(a), e = Cj(c);
            if (!z || 9 <= Number(nc)) {
              g = zj(c, "borderLeftWidth");
              var f = zj(c, "borderRightWidth");
              h = zj(c, "borderTopWidth");
              k = zj(c, "borderBottomWidth");
              f = new yj(parseFloat(h), parseFloat(f), parseFloat(k), parseFloat(g));
            } else {
              var g = Dj(c, "borderLeft");
              f = Dj(c, "borderRight");
              var h = Dj(c, "borderTop"), k = Dj(c, "borderBottom");
              f = new yj(h, f, k, g);
            }
            c == Yc(document) ? (g = d.a - c.scrollLeft, d = d.g - c.scrollTop, !z || 10 <= Number(nc) || (g += f.left, d += f.top)) : (g = d.a - e.a - f.left, d = d.g - e.g - f.top);
            e = a.offsetWidth;
            f = a.offsetHeight;
            h = ec && !e && !f;
            ka(e) && !h || !a.getBoundingClientRect ? a = new Pc(e, f) : (a = Aj(a), a = new Pc(a.right - a.left, a.bottom - a.top));
            e = c.clientHeight - a.height;
            f = c.scrollLeft;
            h = c.scrollTop;
            f += Math.min(g, Math.max(g - (c.clientWidth - a.width), 0));
            h += Math.min(d, Math.max(d - e, 0));
            c = new Oc(f, h);
            b.scrollLeft = c.a;
            b.scrollTop = c.g;
          }
          function Cj(a) {
            var b = Sc(a), c = new Oc(0, 0);
            var d = b ? Sc(b) : document;
            d = !z || 9 <= Number(nc) || Qc(d).a.compatMode == "CSS1Compat" ? d.documentElement : d.body;
            if (a == d)
              return c;
            a = Aj(a);
            d = Qc(b).a;
            b = Yc(d);
            d = d.parentWindow || d.defaultView;
            b = z && mc("10") && d.pageYOffset != b.scrollTop ? new Oc(b.scrollLeft, b.scrollTop) : new Oc(d.pageXOffset || b.scrollLeft, d.pageYOffset || b.scrollTop);
            c.a = a.left + b.a;
            c.g = a.top + b.g;
            return c;
          }
          var Ej = { thin: 2, medium: 4, thick: 6 };
          function Dj(a, b) {
            if ((a.currentStyle ? a.currentStyle[b + "Style"] : null) == "none")
              return 0;
            var c = a.currentStyle ? a.currentStyle[b + "Width"] : null;
            if (c in Ej)
              a = Ej[c];
            else if (/^\d+px?$/.test(c))
              a = parseInt(c, 10);
            else {
              b = a.style.left;
              var d = a.runtimeStyle.left;
              a.runtimeStyle.left = a.currentStyle.left;
              a.style.left = c;
              c = a.style.pixelLeft;
              a.style.left = b;
              a.runtimeStyle.left = d;
              a = +c;
            }
            return a;
          }
          function Fj() {
          }
          oa(Fj);
          Fj.prototype.a = 0;
          function Gj(a) {
            E.call(this);
            this.s = a || Qc();
            this.cb = null;
            this.na = false;
            this.g = null;
            this.L = void 0;
            this.oa = this.Ea = this.Y = null;
          }
          w(Gj, E);
          l = Gj.prototype;
          l.Lb = Fj.Xa();
          l.N = function() {
            return this.g;
          };
          function M(a, b) {
            return a.g ? Vc(b, a.g || a.s.a) : null;
          }
          function Hj(a) {
            a.L || (a.L = new kj(a));
            return a.L;
          }
          l.Za = function(a) {
            if (this.Y && this.Y != a)
              throw Error("Method not supported");
            Gj.K.Za.call(this, a);
          };
          l.kb = function() {
            this.g = this.s.a.createElement("DIV");
          };
          l.render = function(a) {
            if (this.na)
              throw Error("Component already rendered");
            this.g || this.kb();
            a ? a.insertBefore(this.g, null) : this.s.a.body.appendChild(this.g);
            this.Y && !this.Y.na || this.v();
          };
          l.v = function() {
            this.na = true;
            Ij(this, function(a) {
              !a.na && a.N() && a.v();
            });
          };
          l.ya = function() {
            Ij(this, function(a) {
              a.na && a.ya();
            });
            this.L && nj(this.L);
            this.na = false;
          };
          l.o = function() {
            this.na && this.ya();
            this.L && (this.L.m(), delete this.L);
            Ij(this, function(a) {
              a.m();
            });
            this.g && Zc(this.g);
            this.Y = this.g = this.oa = this.Ea = null;
            Gj.K.o.call(this);
          };
          function Ij(a, b) {
            a.Ea && Ha(a.Ea, b, void 0);
          }
          l.removeChild = function(a, b) {
            if (a) {
              var c = q(a) ? a : a.cb || (a.cb = ":" + (a.Lb.a++).toString(36));
              this.oa && c ? (a = this.oa, a = (a !== null && c in a ? a[c] : void 0) || null) : a = null;
              if (c && a) {
                var d = this.oa;
                c in d && delete d[c];
                Na(this.Ea, a);
                b && (a.ya(), a.g && Zc(a.g));
                b = a;
                if (b == null)
                  throw Error("Unable to set parent component");
                b.Y = null;
                Gj.K.Za.call(b, null);
              }
            }
            if (!a)
              throw Error("Child is not in parent component");
            return a;
          };
          function N(a, b) {
            var c = ad(a, "firebaseui-textfield");
            b ? (Vi(a, "firebaseui-input-invalid"), Ui(a, "firebaseui-input"), c && Vi(c, "firebaseui-textfield-invalid")) : (Vi(a, "firebaseui-input"), Ui(a, "firebaseui-input-invalid"), c && Ui(c, "firebaseui-textfield-invalid"));
          }
          function Jj(a, b, c) {
            b = new oj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "input", c);
          }
          function Kj(a, b, c) {
            b = new rj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "key", function(d) {
              d.keyCode == 13 && (d.stopPropagation(), d.preventDefault(), c(d));
            });
          }
          function Lj(a, b, c) {
            b = new gj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "focusin", c);
          }
          function Mj(a, b, c) {
            b = new gj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "focusout", c);
          }
          function O(a, b, c) {
            b = new cj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "action", function(d) {
              d.stopPropagation();
              d.preventDefault();
              c(d);
            });
          }
          function Nj(a) {
            Ui(a, "firebaseui-hidden");
          }
          function Oj(a, b) {
            b && $c(a, b);
            Vi(a, "firebaseui-hidden");
          }
          function Pj(a) {
            return !Ti(a, "firebaseui-hidden") && a.style.display != "none";
          }
          function Qj(a) {
            a = a || {};
            var b = a.email, c = a.disabled, d = '<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-email-input">';
            d = a.wc ? d + "Enter new email address" : d + "Email";
            d += '</label><input type="email" name="email" id="ui-sign-in-email-input" autocomplete="username" class="mdl-textfield__input firebaseui-input firebaseui-id-email" value="' + ud(b != null ? b : "") + '"' + (c ? "disabled" : "") + '></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-email-error"></p></div>';
            return B(d);
          }
          function Rj(a) {
            a = a || {};
            a = a.label;
            var b = '<button type="submit" class="firebaseui-id-submit firebaseui-button mdl-button mdl-js-button mdl-button--raised mdl-button--colored">';
            b = a ? b + A(a) : b + "Next";
            return B(b + "</button>");
          }
          function Sj() {
            var a = "" + Rj({ label: D("Sign In") });
            return B(a);
          }
          function Tj() {
            var a = "" + Rj({ label: D("Save") });
            return B(a);
          }
          function Uj() {
            var a = "" + Rj({ label: D("Continue") });
            return B(a);
          }
          function Vj(a) {
            a = a || {};
            a = a.label;
            var b = '<div class="firebaseui-new-password-component"><div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-new-password-input">';
            b = a ? b + A(a) : b + "Choose password";
            return B(b + '</label><input type="password" name="newPassword" id="ui-sign-in-new-password-input" autocomplete="new-password" class="mdl-textfield__input firebaseui-input firebaseui-id-new-password"></div><a href="javascript:void(0)" class="firebaseui-input-floating-button firebaseui-id-password-toggle firebaseui-input-toggle-on firebaseui-input-toggle-blur"></a><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-new-password-error"></p></div></div>');
          }
          function Wj() {
            var a = {};
            var b = '<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-password-input">';
            b = a.current ? b + "Current password" : b + "Password";
            return B(b + '</label><input type="password" name="password" id="ui-sign-in-password-input" autocomplete="current-password" class="mdl-textfield__input firebaseui-input firebaseui-id-password"></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-password-error"></p></div>');
          }
          function Xj() {
            return B('<a class="firebaseui-link firebaseui-id-secondary-link" href="javascript:void(0)">Trouble signing in?</a>');
          }
          function Yj(a) {
            a = a || {};
            a = a.label;
            var b = '<button class="firebaseui-id-secondary-link firebaseui-button mdl-button mdl-js-button mdl-button--primary">';
            b = a ? b + A(a) : b + "Cancel";
            return B(b + "</button>");
          }
          function Zj(a) {
            var b = "";
            a.F && a.D && (b += '<ul class="firebaseui-tos-list firebaseui-tos"><li class="firebaseui-inline-list-item"><a href="javascript:void(0)" class="firebaseui-link firebaseui-tos-link" target="_blank">Terms of Service</a></li><li class="firebaseui-inline-list-item"><a href="javascript:void(0)" class="firebaseui-link firebaseui-pp-link" target="_blank">Privacy Policy</a></li></ul>');
            return B(b);
          }
          function ak(a) {
            var b = "";
            a.F && a.D && (b += '<p class="firebaseui-tos firebaseui-tospp-full-message">By continuing, you are indicating that you accept our <a href="javascript:void(0)" class="firebaseui-link firebaseui-tos-link" target="_blank">Terms of Service</a> and <a href="javascript:void(0)" class="firebaseui-link firebaseui-pp-link" target="_blank">Privacy Policy</a>.</p>');
            return B(b);
          }
          function bk(a) {
            a = '<div class="firebaseui-info-bar firebaseui-id-info-bar"><p class="firebaseui-info-bar-message">' + A(a.message) + '&nbsp;&nbsp;<a href="javascript:void(0)" class="firebaseui-link firebaseui-id-dismiss-info-bar">Dismiss</a></p></div>';
            return B(a);
          }
          bk.a = "firebaseui.auth.soy2.element.infoBar";
          function ck(a) {
            var b = a.content;
            a = a.Ab;
            return B('<dialog class="mdl-dialog firebaseui-dialog firebaseui-id-dialog' + (a ? " " + ud(a) : "") + '">' + A(b) + "</dialog>");
          }
          function dk(a) {
            var b = a.message;
            return B(ck({ content: td('<div class="firebaseui-dialog-icon-wrapper"><div class="' + ud(a.Ma) + ' firebaseui-dialog-icon"></div></div><div class="firebaseui-progress-dialog-message">' + A(b) + "</div>") }));
          }
          dk.a = "firebaseui.auth.soy2.element.progressDialog";
          function ek(a) {
            var b = '<div class="firebaseui-list-box-actions">';
            a = a.items;
            for (var c = a.length, d = 0; d < c; d++) {
              var e = a[d];
              b += '<button type="button" data-listboxid="' + ud(e.id) + '" class="mdl-button firebaseui-id-list-box-dialog-button firebaseui-list-box-dialog-button">' + (e.Ma ? '<div class="firebaseui-list-box-icon-wrapper"><div class="firebaseui-list-box-icon ' + ud(e.Ma) + '"></div></div>' : "") + '<div class="firebaseui-list-box-label-wrapper">' + A(e.label) + "</div></button>";
            }
            b = "" + ck({ Ab: D("firebaseui-list-box-dialog"), content: td(b + "</div>") });
            return B(b);
          }
          ek.a = "firebaseui.auth.soy2.element.listBoxDialog";
          function fk(a) {
            a = a || {};
            return B(a.tb ? '<div class="mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-busy-indicator firebaseui-id-busy-indicator"></div>' : '<div class="mdl-progress mdl-js-progress mdl-progress__indeterminate firebaseui-busy-indicator firebaseui-id-busy-indicator"></div>');
          }
          fk.a = "firebaseui.auth.soy2.element.busyIndicator";
          function gk(a, b) {
            a = a || {};
            a = a.ga;
            return C(a.S ? a.S : b.hb[a.providerId] ? "" + b.hb[a.providerId] : a.providerId && a.providerId.indexOf("saml.") == 0 ? a.providerId.substring(5) : a.providerId && a.providerId.indexOf("oidc.") == 0 ? a.providerId.substring(5) : "" + a.providerId);
          }
          function hk(a) {
            ik(a, "upgradeElement");
          }
          function jk(a) {
            ik(a, "downgradeElements");
          }
          var kk = ["mdl-js-textfield", "mdl-js-progress", "mdl-js-spinner", "mdl-js-button"];
          function ik(a, b) {
            a && window.componentHandler && window.componentHandler[b] && kk.forEach(function(c) {
              if (Ti(a, c))
                window.componentHandler[b](a);
              Ha(Tc(c, a), function(d) {
                window.componentHandler[b](d);
              });
            });
          }
          function lk(a, b, c) {
            mk.call(this);
            document.body.appendChild(a);
            a.showModal || window.dialogPolyfill.registerDialog(a);
            a.showModal();
            hk(a);
            b && O(this, a, function(f) {
              var g = a.getBoundingClientRect();
              (f.clientX < g.left || g.left + g.width < f.clientX || f.clientY < g.top || g.top + g.height < f.clientY) && mk.call(this);
            });
            if (!c) {
              var d = this.N().parentElement || this.N().parentNode;
              if (d) {
                var e = this;
                this.da = function() {
                  if (a.open) {
                    var f = a.getBoundingClientRect().height, g = d.getBoundingClientRect().height, h = d.getBoundingClientRect().top - document.body.getBoundingClientRect().top, k = d.getBoundingClientRect().left - document.body.getBoundingClientRect().left, p = a.getBoundingClientRect().width, t = d.getBoundingClientRect().width;
                    a.style.top = (h + (g - f) / 2).toString() + "px";
                    f = k + (t - p) / 2;
                    a.style.left = f.toString() + "px";
                    a.style.right = (document.body.getBoundingClientRect().width - f - p).toString() + "px";
                  } else
                    window.removeEventListener("resize", e.da);
                };
                this.da();
                window.addEventListener("resize", this.da, false);
              }
            }
          }
          function mk() {
            var a = nk.call(this);
            a && (jk(a), a.open && a.close(), Zc(a), this.da && window.removeEventListener("resize", this.da));
          }
          function nk() {
            return Vc("firebaseui-id-dialog");
          }
          function ok() {
            Zc(pk.call(this));
          }
          function pk() {
            return M(this, "firebaseui-id-info-bar");
          }
          function qk() {
            return M(this, "firebaseui-id-dismiss-info-bar");
          }
          var rk = { xa: {
            "google.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg",
            "github.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/github.svg",
            "facebook.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/facebook.svg",
            "twitter.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/twitter.svg",
            password: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/mail.svg",
            phone: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/phone.svg",
            anonymous: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/anonymous.png",
            "microsoft.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/microsoft.svg",
            "yahoo.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/yahoo.svg",
            "apple.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/apple.png",
            saml: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/saml.svg",
            oidc: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/oidc.svg"
          }, wa: { "google.com": "#ffffff", "github.com": "#333333", "facebook.com": "#3b5998", "twitter.com": "#55acee", password: "#db4437", phone: "#02bd7e", anonymous: "#f4b400", "microsoft.com": "#2F2F2F", "yahoo.com": "#720E9E", "apple.com": "#000000", saml: "#007bff", oidc: "#007bff" }, hb: {
            "google.com": "Google",
            "github.com": "GitHub",
            "facebook.com": "Facebook",
            "twitter.com": "Twitter",
            password: "Password",
            phone: "Phone",
            anonymous: "Guest",
            "microsoft.com": "Microsoft",
            "yahoo.com": "Yahoo",
            "apple.com": "Apple"
          } };
          function sk(a, b, c) {
            Yd.call(this, a, b);
            for (var d in c)
              this[d] = c[d];
          }
          w(sk, Yd);
          function P(a, b, c, d, e) {
            Gj.call(this, c);
            this.fb = a;
            this.eb = b;
            this.Fa = false;
            this.Ga = d || null;
            this.A = this.ca = null;
            this.Z = eb(rk);
            gb(this.Z, e || {});
          }
          w(P, Gj);
          l = P.prototype;
          l.kb = function() {
            var a = hd(this.fb, this.eb, this.Z, this.s);
            hk(a);
            this.g = a;
          };
          l.v = function() {
            P.K.v.call(this);
            Be(Q(this), new sk("pageEnter", Q(this), { pageId: this.Ga }));
            if (this.bb() && this.Z.F) {
              var a = this.Z.F;
              O(this, this.bb(), function() {
                a();
              });
            }
            if (this.ab() && this.Z.D) {
              var b = this.Z.D;
              O(this, this.ab(), function() {
                b();
              });
            }
          };
          l.ya = function() {
            Be(Q(this), new sk("pageExit", Q(this), { pageId: this.Ga }));
            P.K.ya.call(this);
          };
          l.o = function() {
            window.clearTimeout(this.ca);
            this.eb = this.fb = this.ca = null;
            this.Fa = false;
            this.A = null;
            jk(this.N());
            P.K.o.call(this);
          };
          function tk(a) {
            a.Fa = true;
            var b = Ti(a.N(), "firebaseui-use-spinner");
            a.ca = window.setTimeout(function() {
              a.N() && a.A === null && (a.A = hd(fk, { tb: b }, null, a.s), a.N().appendChild(a.A), hk(a.A));
            }, 500);
          }
          l.I = function(a, b, c, d) {
            function e() {
              if (f.T)
                return null;
              f.Fa = false;
              window.clearTimeout(f.ca);
              f.ca = null;
              f.A && (jk(f.A), Zc(f.A), f.A = null);
            }
            var f = this;
            if (f.Fa)
              return null;
            tk(f);
            return a.apply(null, b).then(c, d).then(e, e);
          };
          function Q(a) {
            return a.N().parentElement || a.N().parentNode;
          }
          function uk(a, b, c) {
            Kj(a, b, function() {
              c.focus();
            });
          }
          function vk(a, b, c) {
            Kj(a, b, function() {
              c();
            });
          }
          u(P.prototype, { a: function(a) {
            ok.call(this);
            var b = hd(bk, { message: a }, null, this.s);
            this.N().appendChild(b);
            O(this, qk.call(this), function() {
              Zc(b);
            });
          }, yc: ok, Ac: pk, zc: qk, $: function(a, b) {
            a = hd(dk, { Ma: a, message: b }, null, this.s);
            lk.call(this, a);
          }, h: mk, Cb: nk, Cc: function() {
            return M(this, "firebaseui-tos");
          }, bb: function() {
            return M(this, "firebaseui-tos-link");
          }, ab: function() {
            return M(this, "firebaseui-pp-link");
          }, Dc: function() {
            return M(this, "firebaseui-tos-list");
          } });
          function wk(a, b, c) {
            a = a || {};
            b = a.Va;
            var d = a.ia;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-sign-in"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in with email</h1></div><div class="firebaseui-card-content"><div class="firebaseui-relative-wrapper">' + Qj(a) + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (b ? Yj(null) : "") + Rj(null) + '</div></div><div class="firebaseui-card-footer">' + (d ? ak(c) : Zj(c)) + "</div></form></div>";
            return B(a);
          }
          wk.a = "firebaseui.auth.soy2.page.signIn";
          function xk(a, b, c) {
            a = a || {};
            b = a.ia;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-sign-in"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content">' + Qj(a) + Wj() + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + Xj() + '</div><div class="firebaseui-form-actions">' + Sj() + '</div></div><div class="firebaseui-card-footer">' + (b ? ak(c) : Zj(c)) + "</div></form></div>";
            return B(a);
          }
          xk.a = "firebaseui.auth.soy2.page.passwordSignIn";
          function yk(a, b, c) {
            a = a || {};
            var d = a.Tb;
            b = a.Ta;
            var e = a.ia, f = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-sign-up"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Create account</h1></div><div class="firebaseui-card-content">' + Qj(a);
            d ? (a = a || {}, a = a.name, a = '<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-name-input">First &amp; last name</label><input type="text" name="name" id="ui-sign-in-name-input" autocomplete="name" class="mdl-textfield__input firebaseui-input firebaseui-id-name" value="' + ud(a != null ? a : "") + '"></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-name-error"></p></div>', a = B(a)) : a = "";
            c = f + a + Vj(null) + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (b ? Yj(null) : "") + Tj() + '</div></div><div class="firebaseui-card-footer">' + (e ? ak(c) : Zj(c)) + "</div></form></div>";
            return B(c);
          }
          yk.a = "firebaseui.auth.soy2.page.passwordSignUp";
          function zk(a, b, c) {
            a = a || {};
            b = a.Ta;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-recovery"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Recover password</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Get instructions sent to this email that explain how to reset your password</p>' + Qj(a) + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (b ? Yj(null) : "") + Rj({ label: D("Send") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(a);
          }
          zk.a = "firebaseui.auth.soy2.page.passwordRecovery";
          function Ak(a, b, c) {
            b = a.G;
            var d = "";
            a = "Follow the instructions sent to <strong>" + (A(a.email) + "</strong> to recover your password");
            d += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-recovery-email-sent"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Check your email</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions">';
            b && (d += '<div class="firebaseui-form-actions">' + Rj({ label: D("Done") }) + "</div>");
            d += '</div><div class="firebaseui-card-footer">' + Zj(c) + "</div></div>";
            return B(d);
          }
          Ak.a = "firebaseui.auth.soy2.page.passwordRecoveryEmailSent";
          function Bk(a, b, c) {
            return B('<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-callback"><div class="firebaseui-callback-indicator-container">' + fk(null, null, c) + "</div></div>");
          }
          Bk.a = "firebaseui.auth.soy2.page.callback";
          function Ck(a, b, c) {
            return B('<div class="firebaseui-container firebaseui-id-page-spinner">' + fk({ tb: true }, null, c) + "</div>");
          }
          Ck.a = "firebaseui.auth.soy2.page.spinner";
          function Dk() {
            return B('<div class="firebaseui-container firebaseui-id-page-blank firebaseui-use-spinner"></div>');
          }
          Dk.a = "firebaseui.auth.soy2.page.blank";
          function Ek(a, b, c) {
            b = "";
            a = "A sign-in email with additional instructions was sent to <strong>" + (A(a.email) + "</strong>. Check your email to complete sign-in.");
            var d = B('<a class="firebaseui-link firebaseui-id-trouble-getting-email-link" href="javascript:void(0)">Trouble getting email?</a>');
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-sent"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign-in email sent</h1></div><div class="firebaseui-card-content"><div class="firebaseui-email-sent"></div><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + d + '</div><div class="firebaseui-form-actions">' + Yj({ label: D("Back") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          Ek.a = "firebaseui.auth.soy2.page.emailLinkSignInSent";
          function Fk(a, b, c) {
            a = `<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-not-received"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Trouble getting email?</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Try these common fixes:<ul><li>Check if the email was marked as spam or filtered.</li><li>Check your internet connection.</li><li>Check that you did not misspell your email.</li><li>Check that your inbox space is not running out or other inbox settings related issues.</li></ul></p><p class="firebaseui-text">If the steps above didn't work, you can resend the email. Note that this will deactivate the link in the older email.</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">` + B('<a class="firebaseui-link firebaseui-id-resend-email-link" href="javascript:void(0)">Resend</a>') + '</div><div class="firebaseui-form-actions">' + Yj({ label: D("Back") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(a);
          }
          Fk.a = "firebaseui.auth.soy2.page.emailNotReceived";
          function Gk(a, b, c) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-confirmation"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Confirm email</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Confirm your email to complete sign in</p><div class="firebaseui-relative-wrapper">' + Qj(a) + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj(null) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(a);
          }
          Gk.a = "firebaseui.auth.soy2.page.emailLinkSignInConfirmation";
          function Hk() {
            var a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-different-device-error"><div class="firebaseui-card-header"><h1 class="firebaseui-title">New device or browser detected</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Try opening the link using the same device or browser where you started the sign-in process.</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj({ label: D("Dismiss") }) + "</div></div></div>";
            return B(a);
          }
          Hk.a = "firebaseui.auth.soy2.page.differentDeviceError";
          function Ik() {
            var a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-anonymous-user-mismatch"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Session ended</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">The session associated with this sign-in request has either expired or was cleared.</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj({ label: D("Dismiss") }) + "</div></div></div>";
            return B(a);
          }
          Ik.a = "firebaseui.auth.soy2.page.anonymousUserMismatch";
          function Jk(a, b, c) {
            b = "";
            a = "You\u2019ve already used <strong>" + (A(a.email) + "</strong> to sign in. Enter your password for that account.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-linking"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">You already have an account</h2><p class="firebaseui-text">' + a + "</p>" + Wj() + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + Xj() + '</div><div class="firebaseui-form-actions">' + Sj() + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          Jk.a = "firebaseui.auth.soy2.page.passwordLinking";
          function Kk(a, b, c) {
            var d = a.email;
            b = "";
            a = "" + gk(a, c);
            a = D(a);
            d = "You\u2019ve already used <strong>" + (A(d) + ("</strong>. You can connect your <strong>" + (A(a) + ("</strong> account with <strong>" + (A(d) + "</strong> by signing in with email link below.")))));
            a = "For this flow to successfully connect your " + (A(a) + " account with this email, you have to open the link on the same device or browser.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-linking"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">You already have an account</h2><p class="firebaseui-text firebaseui-text-justify">' + d + '<p class="firebaseui-text firebaseui-text-justify">' + a + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Sj() + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          Kk.a = "firebaseui.auth.soy2.page.emailLinkSignInLinking";
          function Lk(a, b, c) {
            b = "";
            var d = "" + gk(a, c);
            d = D(d);
            a = "You originally intended to connect <strong>" + (A(d) + "</strong> to your email account but have opened the link on a different device where you are not signed in.");
            d = "If you still want to connect your <strong>" + (A(d) + "</strong> account, open the link on the same device where you started sign-in. Otherwise, tap Continue to sign-in on this device.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-linking-different-device"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text firebaseui-text-justify">' + a + '</p><p class="firebaseui-text firebaseui-text-justify">' + d + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Uj() + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          Lk.a = "firebaseui.auth.soy2.page.emailLinkSignInLinkingDifferentDevice";
          function Mk(a, b, c) {
            var d = a.email;
            b = "";
            a = "" + gk(a, c);
            a = D(a);
            d = "You\u2019ve already used <strong>" + (A(d) + ("</strong>. Sign in with " + (A(a) + " to continue.")));
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-federated-linking"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">You already have an account</h2><p class="firebaseui-text">' + d + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Rj({ label: D("Sign in with " + a) }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          Mk.a = "firebaseui.auth.soy2.page.federatedLinking";
          function Nk(a, b, c) {
            a = a || {};
            var d = a.kc;
            b = a.yb;
            a = a.Eb;
            var e = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-unauthorized-user"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Not Authorized</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">';
            d ? (d = "<strong>" + (A(d) + "</strong> is not authorized to view the requested page."), e += d) : e += "User is not authorized to view the requested page.";
            e += "</p>";
            b && (b = "Please contact <strong>" + (A(b) + "</strong> for authorization."), e += '<p class="firebaseui-text firebaseui-id-unauthorized-user-admin-email">' + b + "</p>");
            e += '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">';
            a && (e += '<a class="firebaseui-link firebaseui-id-unauthorized-user-help-link" href="javascript:void(0)" target="_blank">Learn More</a>');
            e += '</div><div class="firebaseui-form-actions">' + Yj({ label: D("Back") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(e);
          }
          Nk.a = "firebaseui.auth.soy2.page.unauthorizedUser";
          function Ok(a, b, c) {
            b = "";
            a = "To continue sign in with <strong>" + (A(a.email) + "</strong> on this device, you have to recover the password.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-unsupported-provider"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj({ label: D("Recover password") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          Ok.a = "firebaseui.auth.soy2.page.unsupportedProvider";
          function Pk(a) {
            var b = "", c = '<p class="firebaseui-text">for <strong>' + (A(a.email) + "</strong></p>");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-reset"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Reset your password</h1></div><div class="firebaseui-card-content">' + c + Vj(sd(a)) + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Tj() + "</div></div></form></div>";
            return B(b);
          }
          Pk.a = "firebaseui.auth.soy2.page.passwordReset";
          function Qk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-reset-success"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Password changed</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">You can now sign in with your new password</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          Qk.a = "firebaseui.auth.soy2.page.passwordResetSuccess";
          function Rk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-reset-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Try resetting your password again</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Your request to reset your password has expired or the link has already been used</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          Rk.a = "firebaseui.auth.soy2.page.passwordResetFailure";
          function Sk(a) {
            var b = a.G, c = "";
            a = "Your sign-in email address has been changed back to <strong>" + (A(a.email) + "</strong>.");
            c += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-change-revoke-success"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Updated email address</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p><p class="firebaseui-text">If you didn\u2019t ask to change your sign-in email, it\u2019s possible someone is trying to access your account and you should <a class="firebaseui-link firebaseui-id-reset-password-link" href="javascript:void(0)">change your password right away</a>.</p></div><div class="firebaseui-card-actions">' + (b ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></form></div>";
            return B(c);
          }
          Sk.a = "firebaseui.auth.soy2.page.emailChangeRevokeSuccess";
          function Tk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-change-revoke-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Unable to update your email address</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">There was a problem changing your sign-in email back.</p><p class="firebaseui-text">If you try again and still can\u2019t reset your email, try asking your administrator for help.</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          Tk.a = "firebaseui.auth.soy2.page.emailChangeRevokeFailure";
          function Uk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-verification-success"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Your email has been verified</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">You can now sign in with your new account</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          Uk.a = "firebaseui.auth.soy2.page.emailVerificationSuccess";
          function Vk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-verification-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Try verifying your email again</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Your request to verify your email has expired or the link has already been used</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          Vk.a = "firebaseui.auth.soy2.page.emailVerificationFailure";
          function Xk(a) {
            var b = a.G, c = "";
            a = "You can now sign in with your new email <strong>" + (A(a.email) + "</strong>.");
            c += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-verify-and-change-email-success"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Your email has been verified and changed</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions">' + (b ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(c);
          }
          Xk.a = "firebaseui.auth.soy2.page.verifyAndChangeEmailSuccess";
          function Yk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-verify-and-change-email-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Try updating your email again</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Your request to verify and update your email has expired or the link has already been used.</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          Yk.a = "firebaseui.auth.soy2.page.verifyAndChangeEmailFailure";
          function Zk(a) {
            var b = a.factorId, c = a.phoneNumber;
            a = a.G;
            var d = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-revert-second-factor-addition-success"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Removed second factor</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">';
            switch (b) {
              case "phone":
                b = "The <strong>" + (A(b) + (" " + (A(c) + "</strong> was removed as a second authentication step.")));
                d += b;
                break;
              default:
                d += "The device or app was removed as a second authentication step.";
            }
            d += `</p><p class="firebaseui-text">If you don't recognize this device, someone might be trying to access your account. Consider <a class="firebaseui-link firebaseui-id-reset-password-link" href="javascript:void(0)">changing your password right away</a>.</p></div><div class="firebaseui-card-actions">` + (a ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></form></div>";
            return B(d);
          }
          Zk.a = "firebaseui.auth.soy2.page.revertSecondFactorAdditionSuccess";
          function $k(a) {
            a = a || {};
            a = `<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-revert-second-factor-addition-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Couldn't remove your second factor</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Something went wrong removing your second factor.</p><p class="firebaseui-text">Try removing it again. If that doesn't work, contact support for assistance.</p></div><div class="firebaseui-card-actions">` + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
          }
          $k.a = "firebaseui.auth.soy2.page.revertSecondFactorAdditionFailure";
          function al(a) {
            var b = a.zb;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-recoverable-error"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Error encountered</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + A(a.errorMessage) + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">';
            b && (a += Rj({ label: D("Retry") }));
            return B(a + "</div></div></div>");
          }
          al.a = "firebaseui.auth.soy2.page.recoverableError";
          function bl(a) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-unrecoverable-error"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Error encountered</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + A(a.errorMessage) + "</p></div></div>";
            return B(a);
          }
          bl.a = "firebaseui.auth.soy2.page.unrecoverableError";
          function cl(a, b, c) {
            var d = a.Qb;
            b = "";
            a = "Continue with " + (A(a.jc) + "?");
            d = "You originally wanted to sign in with " + A(d);
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-mismatch"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">' + a + '</h2><p class="firebaseui-text">' + d + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj({ label: D("Continue") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
          }
          cl.a = "firebaseui.auth.soy2.page.emailMismatch";
          function dl(a, b, c) {
            var d = '<div class="firebaseui-container firebaseui-page-provider-sign-in firebaseui-id-page-provider-sign-in firebaseui-use-spinner"><div class="firebaseui-card-content"><form onsubmit="return false;"><ul class="firebaseui-idp-list">';
            a = a.Sb;
            b = a.length;
            for (var e = 0; e < b; e++) {
              var f = { ga: a[e] }, g = c;
              f = f || {};
              var h = f.ga;
              var k = f;
              k = k || {};
              var p = "";
              switch (k.ga.providerId) {
                case "google.com":
                  p += "firebaseui-idp-google";
                  break;
                case "github.com":
                  p += "firebaseui-idp-github";
                  break;
                case "facebook.com":
                  p += "firebaseui-idp-facebook";
                  break;
                case "twitter.com":
                  p += "firebaseui-idp-twitter";
                  break;
                case "phone":
                  p += "firebaseui-idp-phone";
                  break;
                case "anonymous":
                  p += "firebaseui-idp-anonymous";
                  break;
                case "password":
                  p += "firebaseui-idp-password";
                  break;
                default:
                  p += "firebaseui-idp-generic";
              }
              k = '<button class="firebaseui-idp-button mdl-button mdl-js-button mdl-button--raised ' + ud(C(p)) + ' firebaseui-id-idp-button" data-provider-id="' + ud(h.providerId) + '" style="background-color:';
              p = (p = f) || {};
              p = p.ga;
              k = k + ud(Dd(C(p.ta ? p.ta : g.wa[p.providerId] ? "" + g.wa[p.providerId] : p.providerId.indexOf("saml.") == 0 ? "" + g.wa.saml : p.providerId.indexOf("oidc.") == 0 ? "" + g.wa.oidc : "" + g.wa.password))) + '"><span class="firebaseui-idp-icon-wrapper"><img class="firebaseui-idp-icon" alt="" src="';
              var t = f;
              p = g;
              t = t || {};
              t = t.ga;
              p = rd(t.za ? zd(t.za) : p.xa[t.providerId] ? zd(p.xa[t.providerId]) : t.providerId.indexOf("saml.") == 0 ? zd(p.xa.saml) : t.providerId.indexOf("oidc.") == 0 ? zd(p.xa.oidc) : zd(p.xa.password));
              k = k + ud(zd(p)) + '"></span>';
              h.providerId == "password" ? (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : h.S ? (f = "Sign in with " + A(gk(f, g)), k += f) : k += "Sign in with email", k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">', k = h.S ? k + A(h.S) : k + "Email", k += "</span>") : h.providerId == "phone" ? (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : h.S ? (f = "Sign in with " + A(gk(f, g)), k += f) : k += "Sign in with phone", k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">', k = h.S ? k + A(h.S) : k + "Phone", k += "</span>") : h.providerId == "anonymous" ? (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : h.S ? (f = "Sign in with " + A(gk(f, g)), k += f) : k += "Continue as guest", k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">', k = h.S ? k + A(h.S) : k + "Guest", k += "</span>") : (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : (p = "Sign in with " + A(gk(f, g)), k += p), k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">' + (h.S ? A(h.S) : A(gk(f, g))) + "</span>");
              h = B(k + "</button>");
              d += '<li class="firebaseui-list-item">' + h + "</li>";
            }
            d += '</ul></form></div><div class="firebaseui-card-footer firebaseui-provider-sign-in-footer">' + ak(c) + "</div></div>";
            return B(d);
          }
          dl.a = "firebaseui.auth.soy2.page.providerSignIn";
          function el(a, b, c) {
            a = a || {};
            var d = a.Gb, e = a.Va;
            b = a.ia;
            a = a || {};
            a = a.Aa;
            a = '<div class="firebaseui-phone-number"><button class="firebaseui-id-country-selector firebaseui-country-selector mdl-button mdl-js-button"><span class="firebaseui-flag firebaseui-country-selector-flag firebaseui-id-country-selector-flag"></span><span class="firebaseui-id-country-selector-code"></span></button><div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label firebaseui-textfield firebaseui-phone-input-wrapper"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-phone-number-input">Phone number</label><input type="tel" name="phoneNumber" id="ui-sign-in-phone-number-input" class="mdl-textfield__input firebaseui-input firebaseui-id-phone-number" value="' + ud(a != null ? a : "") + '"></div></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-phone-number-error firebaseui-id-phone-number-error"></p></div>';
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-phone-sign-in-start"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Enter your phone number</h1></div><div class="firebaseui-card-content"><div class="firebaseui-relative-wrapper">' + B(a);
            var f;
            d ? f = B('<div class="firebaseui-recaptcha-wrapper"><div class="firebaseui-recaptcha-container"></div><div class="firebaseui-error-wrapper firebaseui-recaptcha-error-wrapper"><p class="firebaseui-error firebaseui-hidden firebaseui-id-recaptcha-error"></p></div></div>') : f = "";
            f = a + f + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (e ? Yj(null) : "") + Rj({ label: D("Verify") }) + '</div></div><div class="firebaseui-card-footer">';
            b ? (b = '<p class="firebaseui-tos firebaseui-phone-tos">', b = c.F && c.D ? b + 'By tapping Verify, you are indicating that you accept our <a href="javascript:void(0)" class="firebaseui-link firebaseui-tos-link" target="_blank">Terms of Service</a> and <a href="javascript:void(0)" class="firebaseui-link firebaseui-pp-link" target="_blank">Privacy Policy</a>. An SMS may be sent. Message &amp; data rates may apply.' : b + "By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.", c = B(b + "</p>")) : c = B('<p class="firebaseui-tos firebaseui-phone-sms-notice">By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.</p>') + Zj(c);
            return B(f + c + "</div></form></div>");
          }
          el.a = "firebaseui.auth.soy2.page.phoneSignInStart";
          function fl(a, b, c) {
            a = a || {};
            b = a.phoneNumber;
            var d = "";
            a = 'Enter the 6-digit code we sent to <a class="firebaseui-link firebaseui-change-phone-number-link firebaseui-id-change-phone-number-link" href="javascript:void(0)">&lrm;' + (A(b) + "</a>");
            A(b);
            b = d;
            d = B('<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-phone-confirmation-code-input">6-digit code</label><input type="number" name="phoneConfirmationCode" id="ui-sign-in-phone-confirmation-code-input" class="mdl-textfield__input firebaseui-input firebaseui-id-phone-confirmation-code"></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-phone-confirmation-code-error"></p></div>');
            c = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-phone-sign-in-finish"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Verify your phone number</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + "</p>" + d + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj({ label: D("Continue") }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form>";
            a = B('<div class="firebaseui-resend-container"><span class="firebaseui-id-resend-countdown"></span><a href="javascript:void(0)" class="firebaseui-id-resend-link firebaseui-hidden firebaseui-link">Resend</a></div>');
            return B(b + (c + a + "</div>"));
          }
          fl.a = "firebaseui.auth.soy2.page.phoneSignInFinish";
          function gl() {
            return B('<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-sign-out"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign Out</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">You are now successfully signed out.</p></div></div>');
          }
          gl.a = "firebaseui.auth.soy2.page.signOut";
          function hl(a, b, c) {
            var d = '<div class="firebaseui-container firebaseui-page-select-tenant firebaseui-id-page-select-tenant"><div class="firebaseui-card-content"><form onsubmit="return false;"><ul class="firebaseui-tenant-list">';
            a = a.ec;
            b = a.length;
            for (var e = 0; e < b; e++) {
              var f = a[e];
              var g = "";
              var h = A(f.displayName), k = f.tenantId ? f.tenantId : "top-level-project";
              k = D(k);
              g += '<button class="firebaseui-tenant-button mdl-button mdl-js-button mdl-button--raised firebaseui-tenant-selection-' + ud(k) + ' firebaseui-id-tenant-selection-button"' + (f.tenantId ? 'data-tenant-id="' + ud(f.tenantId) + '"' : "") + 'style="background-color:' + ud(Dd(f.ta)) + '"><span class="firebaseui-idp-icon-wrapper"><img class="firebaseui-idp-icon" alt="" src="' + ud(zd(f.za)) + '"></span><span class="firebaseui-idp-text firebaseui-idp-text-long">';
              f.V ? g += A(f.V) : (f = "Sign in to " + A(f.displayName), g += f);
              g = B(g + ('</span><span class="firebaseui-idp-text firebaseui-idp-text-short">' + h + "</span></button>"));
              d += '<li class="firebaseui-list-item">' + g + "</li>";
            }
            d += '</ul></form></div><div class="firebaseui-card-footer firebaseui-provider-sign-in-footer">' + ak(c) + "</div></div>";
            return B(d);
          }
          hl.a = "firebaseui.auth.soy2.page.selectTenant";
          function il(a, b, c) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-provider-match-by-email"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><div class="firebaseui-relative-wrapper">' + Qj(null) + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Rj(null) + '</div></div><div class="firebaseui-card-footer">' + ak(c) + "</div></form></div>";
            return B(a);
          }
          il.a = "firebaseui.auth.soy2.page.providerMatchByEmail";
          function jl() {
            return M(this, "firebaseui-id-submit");
          }
          function kl() {
            return M(this, "firebaseui-id-secondary-link");
          }
          function ll(a, b) {
            O(this, jl.call(this), function(d) {
              a(d);
            });
            var c = kl.call(this);
            c && b && O(this, c, function(d) {
              b(d);
            });
          }
          function ml() {
            return M(this, "firebaseui-id-password");
          }
          function nl() {
            return M(this, "firebaseui-id-password-error");
          }
          function ol() {
            var a = ml.call(this), b = nl.call(this);
            Jj(this, a, function() {
              Pj(b) && (N(a, true), Nj(b));
            });
          }
          function pl() {
            var a = ml.call(this);
            var b = nl.call(this);
            Wi(a) ? (N(a, true), Nj(b), b = true) : (N(a, false), Oj(b, C("Enter your password").toString()), b = false);
            return b ? Wi(a) : null;
          }
          function ql(a, b, c, d, e, f) {
            P.call(this, Jk, { email: a }, f, "passwordLinking", { F: d, D: e });
            this.w = b;
            this.H = c;
          }
          m(ql, P);
          ql.prototype.v = function() {
            this.P();
            this.M(this.w, this.H);
            vk(this, this.i(), this.w);
            this.i().focus();
            P.prototype.v.call(this);
          };
          ql.prototype.o = function() {
            this.w = null;
            P.prototype.o.call(this);
          };
          ql.prototype.j = function() {
            return Wi(M(this, "firebaseui-id-email"));
          };
          u(ql.prototype, { i: ml, B: nl, P: ol, u: pl, ea: jl, ba: kl, M: ll });
          var rl = /^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;
          function sl() {
            return M(this, "firebaseui-id-email");
          }
          function tl() {
            return M(this, "firebaseui-id-email-error");
          }
          function ul(a) {
            var b = sl.call(this), c = tl.call(this);
            Jj(this, b, function() {
              Pj(c) && (N(b, true), Nj(c));
            });
            a && Kj(this, b, function() {
              a();
            });
          }
          function vl() {
            return Ua(Wi(sl.call(this)) || "");
          }
          function wl() {
            var a = sl.call(this);
            var b = tl.call(this);
            var c = Wi(a) || "";
            c ? rl.test(c) ? (N(a, true), Nj(b), b = true) : (N(a, false), Oj(b, C("That email address isn't correct").toString()), b = false) : (N(a, false), Oj(b, C("Enter your email address to continue").toString()), b = false);
            return b ? Ua(Wi(a)) : null;
          }
          function xl(a, b, c, d, e, f, g) {
            P.call(this, xk, { email: c, ia: !!f }, g, "passwordSignIn", { F: d, D: e });
            this.w = a;
            this.H = b;
          }
          m(xl, P);
          xl.prototype.v = function() {
            this.P();
            this.ea();
            this.ba(this.w, this.H);
            uk(this, this.l(), this.i());
            vk(this, this.i(), this.w);
            Wi(this.l()) ? this.i().focus() : this.l().focus();
            P.prototype.v.call(this);
          };
          xl.prototype.o = function() {
            this.H = this.w = null;
            P.prototype.o.call(this);
          };
          u(xl.prototype, { l: sl, U: tl, P: ul, M: vl, j: wl, i: ml, B: nl, ea: ol, u: pl, ua: jl, pa: kl, ba: ll });
          function R(a, b, c, d, e, f) {
            P.call(this, a, b, d, e || "notice", f);
            this.i = c || null;
          }
          w(R, P);
          R.prototype.v = function() {
            this.i && (this.u(this.i), this.l().focus());
            R.K.v.call(this);
          };
          R.prototype.o = function() {
            this.i = null;
            R.K.o.call(this);
          };
          u(R.prototype, { l: jl, w: kl, u: ll });
          function yl(a, b, c, d, e) {
            R.call(this, Ak, { email: a, G: !!b }, b, e, "passwordRecoveryEmailSent", { F: c, D: d });
          }
          w(yl, R);
          function zl(a, b) {
            R.call(this, Uk, { G: !!a }, a, b, "emailVerificationSuccess");
          }
          w(zl, R);
          function Al(a, b) {
            R.call(this, Vk, { G: !!a }, a, b, "emailVerificationFailure");
          }
          w(Al, R);
          function Bl(a, b, c) {
            R.call(this, Xk, { email: a, G: !!b }, b, c, "verifyAndChangeEmailSuccess");
          }
          w(Bl, R);
          function Cl(a, b) {
            R.call(this, Yk, { G: !!a }, a, b, "verifyAndChangeEmailFailure");
          }
          w(Cl, R);
          function Dl(a, b) {
            R.call(this, $k, { G: !!a }, a, b, "revertSecondFactorAdditionFailure");
          }
          w(Dl, R);
          function El(a) {
            R.call(this, gl, void 0, void 0, a, "signOut");
          }
          w(El, R);
          function Fl(a, b) {
            R.call(this, Qk, { G: !!a }, a, b, "passwordResetSuccess");
          }
          w(Fl, R);
          function Gl(a, b) {
            R.call(this, Rk, { G: !!a }, a, b, "passwordResetFailure");
          }
          w(Gl, R);
          function Hl(a, b) {
            R.call(this, Tk, { G: !!a }, a, b, "emailChangeRevokeFailure");
          }
          w(Hl, R);
          function Il(a, b, c) {
            R.call(this, al, { errorMessage: a, zb: !!b }, b, c, "recoverableError");
          }
          w(Il, R);
          function Jl(a, b) {
            R.call(this, bl, { errorMessage: a }, void 0, b, "unrecoverableError");
          }
          w(Jl, R);
          function Kl(a) {
            if (a.code === "auth/invalid-credential" && a.message && a.message.indexOf("error=consent_required") !== -1)
              return { code: "auth/user-cancelled" };
            if (a.message && a.message.indexOf("HTTP Cloud Function returned an error:") !== -1) {
              var b = JSON.parse(a.message.substring(a.message.indexOf("{"), a.message.lastIndexOf("}") + 1));
              return { code: a.code, message: b && b.error && b.error.message || a.message };
            }
            return a;
          }
          function Ll(a, b, c, d) {
            function e(g) {
              if (!g.name || g.name != "cancel") {
                a: {
                  var h = g.message;
                  try {
                    var k = ((JSON.parse(h).error || {}).message || "").toLowerCase().match(/invalid.+(access|id)_token/);
                    if (k && k.length) {
                      var p = true;
                      break a;
                    }
                  } catch (t) {
                  }
                  p = false;
                }
                if (p)
                  g = Q(b), b.m(), S(a, g, void 0, C("Your sign-in session has expired. Please try again.").toString());
                else {
                  p = g && g.message || "";
                  if (g.code) {
                    if (g.code == "auth/email-already-in-use" || g.code == "auth/credential-already-in-use")
                      return;
                    p = T(g);
                  }
                  b.a(p);
                }
              }
            }
            Ml(a);
            if (d)
              return Nl(a, c), F();
            if (!c.credential)
              throw Error("No credential found!");
            if (!U(a).currentUser && !c.user)
              throw Error("User not logged in.");
            try {
              var f = Ol(a, c);
            } catch (g) {
              return og(g.code || g.message, g), b.a(g.code || g.message), F();
            }
            c = f.then(function(g) {
              Nl(a, g);
            }, e).then(void 0, e);
            V(a, f);
            return F(c);
          }
          function Nl(a, b) {
            if (!b.user)
              throw Error("No user found");
            var c = Mi(W(a));
            Ki(W(a)) && c && tg("Both signInSuccess and signInSuccessWithAuthResult callbacks are provided. Only signInSuccessWithAuthResult callback will be invoked.");
            if (c) {
              c = Mi(W(a));
              var d = yh(X(a)) || void 0;
              wh(sh, X(a));
              var e = false;
              if (qf()) {
                if (!c || c(b, d))
                  e = true, Nc(window.opener.location, Pl(a, d));
                c || window.close();
              } else if (!c || c(b, d))
                e = true, Nc(window.location, Pl(a, d));
              e || a.reset();
            } else {
              c = b.user;
              b = b.credential;
              d = Ki(W(a));
              e = yh(X(a)) || void 0;
              wh(sh, X(a));
              var f = false;
              if (qf()) {
                if (!d || d(c, b, e))
                  f = true, Nc(window.opener.location, Pl(a, e));
                d || window.close();
              } else if (!d || d(c, b, e))
                f = true, Nc(window.location, Pl(a, e));
              f || a.reset();
            }
          }
          function Pl(a, b) {
            a = b || W(a).a.get("signInSuccessUrl");
            if (!a)
              throw Error("No redirect URL has been found. You must either specify a signInSuccessUrl in the configuration, pass in a redirect URL to the widget URL, or return false from the callback.");
            return a;
          }
          function T(a) {
            var b = { code: a.code };
            b = b || {};
            var c = "";
            switch (b.code) {
              case "auth/email-already-in-use":
                c += "The email address is already used by another account";
                break;
              case "auth/requires-recent-login":
                c += Md();
                break;
              case "auth/too-many-requests":
                c += "You have entered an incorrect password too many times. Please try again in a few minutes.";
                break;
              case "auth/user-cancelled":
                c += "Please authorize the required permissions to sign in to the application";
                break;
              case "auth/user-not-found":
                c += "That email address doesn't match an existing account";
                break;
              case "auth/user-token-expired":
                c += Md();
                break;
              case "auth/weak-password":
                c += "Strong passwords have at least 6 characters and a mix of letters and numbers";
                break;
              case "auth/wrong-password":
                c += "The email and password you entered don't match";
                break;
              case "auth/network-request-failed":
                c += "A network error has occurred";
                break;
              case "auth/invalid-phone-number":
                c += Hd();
                break;
              case "auth/invalid-verification-code":
                c += C("Wrong code. Try again.");
                break;
              case "auth/code-expired":
                c += "This code is no longer valid";
                break;
              case "auth/expired-action-code":
                c += "This code has expired.";
                break;
              case "auth/invalid-action-code":
                c += "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.";
            }
            if (b = C(c).toString())
              return b;
            try {
              return JSON.parse(a.message), og("Internal error: " + a.message, void 0), Jd().toString();
            } catch (d) {
              return a.message;
            }
          }
          function Ql(a, b, c) {
            var d = ai[b] && firebase2.auth[ai[b]] ? new firebase2.auth[ai[b]]() : b.indexOf("saml.") == 0 ? new firebase2.auth.SAMLAuthProvider(b) : new firebase2.auth.OAuthProvider(b);
            if (!d)
              throw Error("Invalid Firebase Auth provider!");
            var e = wi(W(a), b);
            if (d.addScope)
              for (var f = 0; f < e.length; f++)
                d.addScope(e[f]);
            e = xi(W(a), b) || {};
            c && (b == firebase2.auth.GoogleAuthProvider.PROVIDER_ID ? a = "login_hint" : b == firebase2.auth.GithubAuthProvider.PROVIDER_ID ? a = "login" : a = (a = ii(W(a), b)) && a.Ob, a && (e[a] = c));
            d.setCustomParameters && d.setCustomParameters(e);
            return d;
          }
          function Rl(a, b, c, d) {
            function e() {
              Dh(new Dg(a.h.tenantId || null), X(a));
              V(a, b.I(r(a.dc, a), [k], function() {
                if ((window.location && window.location.protocol) === "file:")
                  return V(a, Sl(a).then(function(p) {
                    b.m();
                    wh(rh, X(a));
                    L("callback", a, h, F(p));
                  }, f));
              }, g));
            }
            function f(p) {
              wh(rh, X(a));
              if (!p.name || p.name != "cancel")
                switch (p = Kl(p), p.code) {
                  case "auth/popup-blocked":
                    e();
                    break;
                  case "auth/popup-closed-by-user":
                  case "auth/cancelled-popup-request":
                    break;
                  case "auth/credential-already-in-use":
                    break;
                  case "auth/network-request-failed":
                  case "auth/too-many-requests":
                  case "auth/user-cancelled":
                    b.a(T(p));
                    break;
                  case "auth/admin-restricted-operation":
                    b.m();
                    pi(W(a)) ? L("handleUnauthorizedUser", a, h, null, c) : L("callback", a, h, df(p));
                    break;
                  default:
                    b.m(), L("callback", a, h, df(p));
                }
            }
            function g(p) {
              wh(rh, X(a));
              p.name && p.name == "cancel" || (og("signInWithRedirect: " + p.code, void 0), p = T(p), b.Ga == "blank" && Gi(W(a)) ? (b.m(), L("providerSignIn", a, h, p)) : b.a(p));
            }
            var h = Q(b), k = Ql(a, c, d);
            Hi(W(a)) == Ii ? e() : V(a, Tl(a, k).then(function(p) {
              b.m();
              L("callback", a, h, F(p));
            }, f));
          }
          function Ul(a, b) {
            V(a, b.I(r(a.$b, a), [], function(c) {
              b.m();
              return Ll(a, b, c, true);
            }, function(c) {
              c.name && c.name == "cancel" || (og("ContinueAsGuest: " + c.code, void 0), c = T(c), b.a(c));
            }));
          }
          function Vl(a, b, c) {
            function d(f) {
              var g = false;
              f = b.I(r(a.ac, a), [f], function(h) {
                var k = Q(b);
                b.m();
                L("callback", a, k, F(h));
                g = true;
              }, function(h) {
                if (!h.name || h.name != "cancel") {
                  if (!h || h.code != "auth/credential-already-in-use")
                    if (h && h.code == "auth/email-already-in-use" && h.email && h.credential) {
                      var k = Q(b);
                      b.m();
                      L("callback", a, k, df(h));
                    } else
                      h && h.code == "auth/admin-restricted-operation" && pi(W(a)) ? (h = Q(b), b.m(), L("handleUnauthorizedUser", a, h, null, firebase2.auth.GoogleAuthProvider.PROVIDER_ID)) : (h = T(h), b.a(h));
                }
              });
              V(a, f);
              return f.then(function() {
                return g;
              }, function() {
                return false;
              });
            }
            if (c && c.credential && c.clientId === li(W(a))) {
              if (wi(W(a), firebase2.auth.GoogleAuthProvider.PROVIDER_ID).length) {
                try {
                  var e = JSON.parse(atob(c.credential.split(".")[1])).email;
                } catch (f) {
                }
                Rl(a, b, firebase2.auth.GoogleAuthProvider.PROVIDER_ID, e);
                return F(true);
              }
              return d(firebase2.auth.GoogleAuthProvider.credential(c.credential));
            }
            c && b.a(C("The selected credential for the authentication provider is not supported!").toString());
            return F(false);
          }
          function Wl(a, b) {
            var c = b.j(), d = b.u();
            if (c)
              if (d) {
                var e = firebase2.auth.EmailAuthProvider.credential(c, d);
                V(a, b.I(r(a.bc, a), [c, d], function(f) {
                  return Ll(a, b, { user: f.user, credential: e, operationType: f.operationType, additionalUserInfo: f.additionalUserInfo });
                }, function(f) {
                  if (!f.name || f.name != "cancel")
                    switch (f.code) {
                      case "auth/email-already-in-use":
                        break;
                      case "auth/email-exists":
                        N(b.l(), false);
                        Oj(b.U(), T(f));
                        break;
                      case "auth/too-many-requests":
                      case "auth/wrong-password":
                        N(b.i(), false);
                        Oj(b.B(), T(f));
                        break;
                      default:
                        og("verifyPassword: " + f.message, void 0), b.a(T(f));
                    }
                }));
              } else
                b.i().focus();
            else
              b.l().focus();
          }
          function Xl(a) {
            a = hi(W(a));
            return a.length == 1 && a[0] == firebase2.auth.EmailAuthProvider.PROVIDER_ID;
          }
          function Yl(a) {
            a = hi(W(a));
            return a.length == 1 && a[0] == firebase2.auth.PhoneAuthProvider.PROVIDER_ID;
          }
          function S(a, b, c, d) {
            Xl(a) ? d ? L("signIn", a, b, c, d) : Zl(a, b, c) : a && Yl(a) && !d ? L("phoneSignInStart", a, b) : a && Gi(W(a)) && !d ? L("federatedRedirect", a, b, c) : L("providerSignIn", a, b, d, c);
          }
          function $l(a, b, c, d) {
            var e = Q(b);
            V(a, b.I(r(U(a).fetchSignInMethodsForEmail, U(a)), [c], function(f) {
              b.m();
              am(a, e, f, c, d);
            }, function(f) {
              f = T(f);
              b.a(f);
            }));
          }
          function am(a, b, c, d, e, f) {
            c.length || Di(W(a)) && !Di(W(a)) ? Ma(c, firebase2.auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD) ? L("passwordSignIn", a, b, d, f) : c.length == 1 && c[0] === firebase2.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD ? Di(W(a)) ? L("sendEmailLinkForSignIn", a, b, d, function() {
              L("signIn", a, b);
            }) : L("unsupportedProvider", a, b, d) : (c = Zh(c, hi(W(a)))) ? (Bh(new Ag(d), X(a)), L("federatedSignIn", a, b, d, c, e)) : L("unsupportedProvider", a, b, d) : oi(W(a)) ? L("handleUnauthorizedUser", a, b, d, firebase2.auth.EmailAuthProvider.PROVIDER_ID) : Di(W(a)) ? L("sendEmailLinkForSignIn", a, b, d, function() {
              L("signIn", a, b);
            }) : L("passwordSignUp", a, b, d, void 0, void 0, f);
          }
          function bm(a, b, c, d, e, f) {
            var g = Q(b);
            V(a, b.I(r(a.Ib, a), [c, f], function() {
              b.m();
              L("emailLinkSignInSent", a, g, c, d, f);
            }, e));
          }
          function Zl(a, b, c) {
            c ? L("prefilledEmailSignIn", a, b, c) : L("signIn", a, b);
          }
          function cm() {
            return tb(tf(), "oobCode");
          }
          function dm() {
            var a = tb(tf(), "continueUrl");
            return a ? function() {
              Nc(window.location, a);
            } : null;
          }
          function em(a, b) {
            P.call(this, Ik, void 0, b, "anonymousUserMismatch");
            this.i = a;
          }
          m(em, P);
          em.prototype.v = function() {
            var a = this;
            O(this, this.l(), function() {
              a.i();
            });
            this.l().focus();
            P.prototype.v.call(this);
          };
          em.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(em.prototype, { l: kl });
          K.anonymousUserMismatch = function(a, b) {
            var c = new em(function() {
              c.m();
              S(a, b);
            });
            c.render(b);
            Y(a, c);
          };
          function fm(a) {
            P.call(this, Bk, void 0, a, "callback");
          }
          m(fm, P);
          fm.prototype.I = function(a, b, c, d) {
            return a.apply(null, b).then(c, d);
          };
          function gm(a, b, c) {
            if (c.user) {
              var d = { user: c.user, credential: c.credential, operationType: c.operationType, additionalUserInfo: c.additionalUserInfo }, e = zh(X(a)), f = e && e.g;
              if (f && !hm(c.user, f))
                im(a, b, d);
              else {
                var g = e && e.a;
                g ? V(a, c.user.linkWithCredential(g).then(function(h) {
                  d = { user: h.user, credential: g, operationType: h.operationType, additionalUserInfo: h.additionalUserInfo };
                  jm(a, b, d);
                }, function(h) {
                  km(a, b, h);
                })) : jm(a, b, d);
              }
            } else
              c = Q(b), b.m(), Ah(X(a)), S(a, c);
          }
          function jm(a, b, c) {
            Ah(X(a));
            Ll(a, b, c);
          }
          function km(a, b, c) {
            var d = Q(b);
            Ah(X(a));
            c = T(c);
            b.m();
            S(a, d, void 0, c);
          }
          function lm(a, b, c, d) {
            var e = Q(b);
            V(a, U(a).fetchSignInMethodsForEmail(c).then(function(f) {
              b.m();
              f.length ? Ma(f, firebase2.auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD) ? L("passwordLinking", a, e, c) : f.length == 1 && f[0] === firebase2.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD ? L("emailLinkSignInLinking", a, e, c) : (f = Zh(f, hi(W(a)))) ? L("federatedLinking", a, e, c, f, d) : (Ah(X(a)), L("unsupportedProvider", a, e, c)) : (Ah(X(a)), L("passwordRecovery", a, e, c, false, Kd().toString()));
            }, function(f) {
              km(a, b, f);
            }));
          }
          function im(a, b, c) {
            var d = Q(b);
            V(a, mm(a).then(function() {
              b.m();
              L("emailMismatch", a, d, c);
            }, function(e) {
              e.name && e.name == "cancel" || (e = T(e.code), b.a(e));
            }));
          }
          function hm(a, b) {
            if (b == a.email)
              return true;
            if (a.providerData) {
              for (var c = 0; c < a.providerData.length; c++)
                if (b == a.providerData[c].email)
                  return true;
            }
            return false;
          }
          K.callback = function(a, b, c) {
            var d = new fm();
            d.render(b);
            Y(a, d);
            c = c || Sl(a);
            V(a, c.then(function(e) {
              gm(a, d, e);
            }, function(e) {
              if ((e = Kl(e)) && (e.code == "auth/account-exists-with-different-credential" || e.code == "auth/email-already-in-use") && e.email && e.credential)
                Bh(new Ag(e.email, e.credential), X(a)), lm(a, d, e.email);
              else if (e && e.code == "auth/user-cancelled") {
                var f = zh(X(a)), g = T(e);
                f && f.a ? lm(a, d, f.g, g) : f ? $l(a, d, f.g, g) : km(a, d, e);
              } else
                e && e.code == "auth/credential-already-in-use" || (e && e.code == "auth/operation-not-supported-in-this-environment" && Xl(a) ? gm(a, d, { user: null, credential: null }) : e && e.code == "auth/admin-restricted-operation" && pi(W(a)) ? (d.m(), Ah(X(a)), L("handleUnauthorizedUser", a, b, null, null)) : km(a, d, e));
            }));
          };
          function nm(a, b) {
            P.call(this, Hk, void 0, b, "differentDeviceError");
            this.i = a;
          }
          m(nm, P);
          nm.prototype.v = function() {
            var a = this;
            O(this, this.l(), function() {
              a.i();
            });
            this.l().focus();
            P.prototype.v.call(this);
          };
          nm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(nm.prototype, { l: kl });
          K.differentDeviceError = function(a, b) {
            var c = new nm(function() {
              c.m();
              S(a, b);
            });
            c.render(b);
            Y(a, c);
          };
          function om(a, b, c, d) {
            P.call(this, Sk, { email: a, G: !!c }, d, "emailChangeRevoke");
            this.l = b;
            this.i = c || null;
          }
          m(om, P);
          om.prototype.v = function() {
            var a = this;
            O(this, M(this, "firebaseui-id-reset-password-link"), function() {
              a.l();
            });
            this.i && (this.w(this.i), this.u().focus());
            P.prototype.v.call(this);
          };
          om.prototype.o = function() {
            this.l = this.i = null;
            P.prototype.o.call(this);
          };
          u(om.prototype, { u: jl, B: kl, w: ll });
          function pm() {
            return M(this, "firebaseui-id-new-password");
          }
          function qm() {
            return M(this, "firebaseui-id-password-toggle");
          }
          function rm() {
            this.Ra = !this.Ra;
            var a = qm.call(this), b = pm.call(this);
            this.Ra ? (b.type = "text", Ui(a, "firebaseui-input-toggle-off"), Vi(a, "firebaseui-input-toggle-on")) : (b.type = "password", Ui(a, "firebaseui-input-toggle-on"), Vi(a, "firebaseui-input-toggle-off"));
            b.focus();
          }
          function sm() {
            return M(this, "firebaseui-id-new-password-error");
          }
          function tm() {
            this.Ra = false;
            var a = pm.call(this);
            a.type = "password";
            var b = sm.call(this);
            Jj(this, a, function() {
              Pj(b) && (N(a, true), Nj(b));
            });
            var c = qm.call(this);
            Ui(c, "firebaseui-input-toggle-on");
            Vi(c, "firebaseui-input-toggle-off");
            Lj(this, a, function() {
              Ui(c, "firebaseui-input-toggle-focus");
              Vi(c, "firebaseui-input-toggle-blur");
            });
            Mj(this, a, function() {
              Ui(c, "firebaseui-input-toggle-blur");
              Vi(c, "firebaseui-input-toggle-focus");
            });
            O(this, c, r(rm, this));
          }
          function um() {
            var a = pm.call(this);
            var b = sm.call(this);
            Wi(a) ? (N(a, true), Nj(b), b = true) : (N(a, false), Oj(b, C("Enter your password").toString()), b = false);
            return b ? Wi(a) : null;
          }
          function vm(a, b, c) {
            P.call(this, Pk, { email: a }, c, "passwordReset");
            this.l = b;
          }
          m(vm, P);
          vm.prototype.v = function() {
            this.H();
            this.B(this.l);
            vk(this, this.i(), this.l);
            this.i().focus();
            P.prototype.v.call(this);
          };
          vm.prototype.o = function() {
            this.l = null;
            P.prototype.o.call(this);
          };
          u(vm.prototype, { i: pm, w: sm, M: qm, H: tm, u: um, U: jl, P: kl, B: ll });
          function wm(a, b, c, d, e) {
            P.call(this, Zk, { factorId: a, phoneNumber: c || null, G: !!d }, e, "revertSecondFactorAdditionSuccess");
            this.l = b;
            this.i = d || null;
          }
          m(wm, P);
          wm.prototype.v = function() {
            var a = this;
            O(this, M(this, "firebaseui-id-reset-password-link"), function() {
              a.l();
            });
            this.i && (this.w(this.i), this.u().focus());
            P.prototype.v.call(this);
          };
          wm.prototype.o = function() {
            this.l = this.i = null;
            P.prototype.o.call(this);
          };
          u(wm.prototype, {
            u: jl,
            B: kl,
            w: ll
          });
          function xm(a, b, c, d, e) {
            var f = c.u();
            f && V(a, c.I(r(U(a).confirmPasswordReset, U(a)), [d, f], function() {
              c.m();
              var g = new Fl(e);
              g.render(b);
              Y(a, g);
            }, function(g) {
              ym(a, b, c, g);
            }));
          }
          function ym(a, b, c, d) {
            (d && d.code) == "auth/weak-password" ? (a = T(d), N(c.i(), false), Oj(c.w(), a), c.i().focus()) : (c && c.m(), c = new Gl(), c.render(b), Y(a, c));
          }
          function zm(a, b, c) {
            var d = new om(c, function() {
              V(a, d.I(r(U(a).sendPasswordResetEmail, U(a)), [c], function() {
                d.m();
                d = new yl(c, void 0, H(W(a)), J(W(a)));
                d.render(b);
                Y(a, d);
              }, function() {
                d.a(Id().toString());
              }));
            });
            d.render(b);
            Y(a, d);
          }
          function Am(a, b, c, d) {
            var e = new wm(d.factorId, function() {
              e.I(r(U(a).sendPasswordResetEmail, U(a)), [c], function() {
                e.m();
                e = new yl(c, void 0, H(W(a)), J(W(a)));
                e.render(b);
                Y(a, e);
              }, function() {
                e.a(Id().toString());
              });
            }, d.phoneNumber);
            e.render(b);
            Y(a, e);
          }
          K.passwordReset = function(a, b, c, d) {
            V(a, U(a).verifyPasswordResetCode(c).then(function(e) {
              var f = new vm(e, function() {
                xm(a, b, f, c, d);
              });
              f.render(b);
              Y(a, f);
            }, function() {
              ym(a, b);
            }));
          };
          K.emailChangeRevocation = function(a, b, c) {
            var d = null;
            V(a, U(a).checkActionCode(c).then(function(e) {
              d = e.data.email;
              return U(a).applyActionCode(c);
            }).then(function() {
              zm(a, b, d);
            }, function() {
              var e = new Hl();
              e.render(b);
              Y(a, e);
            }));
          };
          K.emailVerification = function(a, b, c, d) {
            V(a, U(a).applyActionCode(c).then(function() {
              var e = new zl(d);
              e.render(b);
              Y(a, e);
            }, function() {
              var e = new Al();
              e.render(b);
              Y(a, e);
            }));
          };
          K.revertSecondFactorAddition = function(a, b, c) {
            var d = null, e = null;
            V(a, U(a).checkActionCode(c).then(function(f) {
              d = f.data.email;
              e = f.data.multiFactorInfo;
              return U(a).applyActionCode(c);
            }).then(function() {
              Am(a, b, d, e);
            }, function() {
              var f = new Dl();
              f.render(b);
              Y(a, f);
            }));
          };
          K.verifyAndChangeEmail = function(a, b, c, d) {
            var e = null;
            V(a, U(a).checkActionCode(c).then(function(f) {
              e = f.data.email;
              return U(a).applyActionCode(c);
            }).then(function() {
              var f = new Bl(e, d);
              f.render(b);
              Y(a, f);
            }, function() {
              var f = new Cl();
              f.render(b);
              Y(a, f);
            }));
          };
          function Bm(a, b) {
            try {
              var c = typeof a.selectionStart == "number";
            } catch (d) {
              c = false;
            }
            c ? (a.selectionStart = b, a.selectionEnd = b) : z && !mc("9") && (a.type == "textarea" && (b = a.value.substring(0, b).replace(/(\r\n|\r|\n)/g, "\n").length), a = a.createTextRange(), a.collapse(true), a.move("character", b), a.select());
          }
          function Cm(a, b, c, d, e, f) {
            P.call(this, Gk, { email: c }, f, "emailLinkSignInConfirmation", { F: d, D: e });
            this.l = a;
            this.u = b;
          }
          m(Cm, P);
          Cm.prototype.v = function() {
            this.w(this.l);
            this.B(this.l, this.u);
            this.i().focus();
            Bm(this.i(), (this.i().value || "").length);
            P.prototype.v.call(this);
          };
          Cm.prototype.o = function() {
            this.u = this.l = null;
            P.prototype.o.call(this);
          };
          u(Cm.prototype, { i: sl, M: tl, w: ul, H: vl, j: wl, U: jl, P: kl, B: ll });
          K.emailLinkConfirmation = function(a, b, c, d, e, f) {
            var g = new Cm(function() {
              var h = g.j();
              h ? (g.m(), d(a, b, h, c)) : g.i().focus();
            }, function() {
              g.m();
              S(a, b, e || void 0);
            }, e || void 0, H(W(a)), J(W(a)));
            g.render(b);
            Y(a, g);
            f && g.a(f);
          };
          function Dm(a, b, c, d, e) {
            P.call(this, Lk, { ga: a }, e, "emailLinkSignInLinkingDifferentDevice", { F: c, D: d });
            this.i = b;
          }
          m(Dm, P);
          Dm.prototype.v = function() {
            this.u(this.i);
            this.l().focus();
            P.prototype.v.call(this);
          };
          Dm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(Dm.prototype, { l: jl, u: ll });
          K.emailLinkNewDeviceLinking = function(a, b, c, d) {
            var e = new Pb(c);
            c = e.a.a.get(x.PROVIDER_ID) || null;
            Tb(e, null);
            if (c) {
              var f = new Dm(ii(W(a), c), function() {
                f.m();
                d(a, b, e.toString());
              }, H(W(a)), J(W(a)));
              f.render(b);
              Y(a, f);
            } else
              S(a, b);
          };
          function Em(a) {
            P.call(this, Dk, void 0, a, "blank");
          }
          m(Em, P);
          function Fm(a, b, c, d, e) {
            var f = new Em(), g = new Pb(c), h = g.a.a.get(x.$a) || "", k = g.a.a.get(x.Sa) || "", p = g.a.a.get(x.Qa) === "1", t = Sb(g), I = g.a.a.get(x.PROVIDER_ID) || null;
            g = g.a.a.get(x.vb) || null;
            Gm(a, g);
            var Ca = !vh(th, X(a)), Wk = d || Eh(k, X(a)), ld = (d = Fh(k, X(a))) && d.a;
            I && ld && ld.providerId !== I && (ld = null);
            f.render(b);
            Y(a, f);
            V(a, f.I(function() {
              var ya = F(null);
              ya = t && Ca || Ca && p ? df(Error("anonymous-user-not-found")) : Hm(a, c).then(function(wg) {
                if (I && !ld)
                  throw Error("pending-credential-not-found");
                return wg;
              });
              var md = null;
              return ya.then(function(wg) {
                md = wg;
                return e ? null : U(a).checkActionCode(h);
              }).then(function() {
                return md;
              });
            }, [], function(ya) {
              Wk ? Im(a, f, Wk, c, ld, ya) : p ? (f.m(), L("differentDeviceError", a, b)) : (f.m(), L("emailLinkConfirmation", a, b, c, Jm));
            }, function(ya) {
              var md = void 0;
              if (!ya || !ya.name || ya.name != "cancel")
                switch (f.m(), ya && ya.message) {
                  case "anonymous-user-not-found":
                    L("differentDeviceError", a, b);
                    break;
                  case "anonymous-user-mismatch":
                    L("anonymousUserMismatch", a, b);
                    break;
                  case "pending-credential-not-found":
                    L("emailLinkNewDeviceLinking", a, b, c, Km);
                    break;
                  default:
                    ya && (md = T(ya)), S(a, b, void 0, md);
                }
            }));
          }
          function Jm(a, b, c, d) {
            Fm(a, b, d, c, true);
          }
          function Km(a, b, c) {
            Fm(a, b, c);
          }
          function Im(a, b, c, d, e, f) {
            var g = Q(b);
            b.$("mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-progress-dialog-loading-icon", C("Signing in...").toString());
            var h = null;
            e = (f ? Lm(a, f, c, d, e) : Mm(a, c, d, e)).then(function(k) {
              wh(uh, X(a));
              wh(th, X(a));
              b.h();
              b.$("firebaseui-icon-done", C("Signed in!").toString());
              h = setTimeout(function() {
                b.h();
                Ll(a, b, k, true);
              }, 1e3);
              V(a, function() {
                b && (b.h(), b.m());
                clearTimeout(h);
              });
            }, function(k) {
              b.h();
              b.m();
              if (!k.name || k.name != "cancel") {
                k = Kl(k);
                var p = T(k);
                k.code == "auth/email-already-in-use" || k.code == "auth/credential-already-in-use" ? (wh(uh, X(a)), wh(th, X(a))) : k.code == "auth/invalid-email" ? (p = C("The email provided does not match the current sign-in session.").toString(), L("emailLinkConfirmation", a, g, d, Jm, null, p)) : S(a, g, c, p);
              }
            });
            V(a, e);
          }
          K.emailLinkSignInCallback = Fm;
          function Nm(a, b, c, d, e, f) {
            P.call(this, Kk, { email: a, ga: b }, f, "emailLinkSignInLinking", { F: d, D: e });
            this.i = c;
          }
          m(Nm, P);
          Nm.prototype.v = function() {
            this.u(this.i);
            this.l().focus();
            P.prototype.v.call(this);
          };
          Nm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(Nm.prototype, { l: jl, u: ll });
          function Om(a, b, c, d) {
            var e = Q(b);
            bm(a, b, c, function() {
              S(a, e, c);
            }, function(f) {
              if (!f.name || f.name != "cancel") {
                var g = T(f);
                f && f.code == "auth/network-request-failed" ? b.a(g) : (b.m(), S(a, e, c, g));
              }
            }, d);
          }
          K.emailLinkSignInLinking = function(a, b, c) {
            var d = zh(X(a));
            Ah(X(a));
            if (d) {
              var e = d.a.providerId, f = new Nm(c, ii(W(a), e), function() {
                Om(a, f, c, d);
              }, H(W(a)), J(W(a)));
              f.render(b);
              Y(a, f);
            } else
              S(a, b);
          };
          function Pm(a, b, c, d, e, f) {
            P.call(this, Ek, { email: a }, f, "emailLinkSignInSent", { F: d, D: e });
            this.u = b;
            this.i = c;
          }
          m(Pm, P);
          Pm.prototype.v = function() {
            var a = this;
            O(this, this.l(), function() {
              a.i();
            });
            O(this, M(this, "firebaseui-id-trouble-getting-email-link"), function() {
              a.u();
            });
            this.l().focus();
            P.prototype.v.call(this);
          };
          Pm.prototype.o = function() {
            this.i = this.u = null;
            P.prototype.o.call(this);
          };
          u(Pm.prototype, { l: kl });
          K.emailLinkSignInSent = function(a, b, c, d, e) {
            var f = new Pm(c, function() {
              f.m();
              L("emailNotReceived", a, b, c, d, e);
            }, function() {
              f.m();
              d();
            }, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
          };
          function Qm(a, b, c, d, e, f, g) {
            P.call(this, cl, { jc: a, Qb: b }, g, "emailMismatch", { F: e, D: f });
            this.l = c;
            this.i = d;
          }
          m(Qm, P);
          Qm.prototype.v = function() {
            this.w(this.l, this.i);
            this.u().focus();
            P.prototype.v.call(this);
          };
          Qm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(Qm.prototype, { u: jl, B: kl, w: ll });
          K.emailMismatch = function(a, b, c) {
            var d = zh(X(a));
            if (d) {
              var e = new Qm(c.user.email, d.g, function() {
                var f = e;
                Ah(X(a));
                Ll(a, f, c);
              }, function() {
                var f = c.credential.providerId, g = Q(e);
                e.m();
                d.a ? L("federatedLinking", a, g, d.g, f) : L("federatedSignIn", a, g, d.g, f);
              }, H(W(a)), J(W(a)));
              e.render(b);
              Y(a, e);
            } else
              S(a, b);
          };
          function Rm(a, b, c, d, e) {
            P.call(this, Fk, void 0, e, "emailNotReceived", { F: c, D: d });
            this.l = a;
            this.i = b;
          }
          m(Rm, P);
          Rm.prototype.v = function() {
            var a = this;
            O(this, this.u(), function() {
              a.i();
            });
            O(this, this.Da(), function() {
              a.l();
            });
            this.u().focus();
            P.prototype.v.call(this);
          };
          Rm.prototype.Da = function() {
            return M(this, "firebaseui-id-resend-email-link");
          };
          Rm.prototype.o = function() {
            this.i = this.l = null;
            P.prototype.o.call(this);
          };
          u(Rm.prototype, { u: kl });
          K.emailNotReceived = function(a, b, c, d, e) {
            var f = new Rm(function() {
              bm(a, f, c, d, function(g) {
                g = T(g);
                f.a(g);
              }, e);
            }, function() {
              f.m();
              S(a, b, c);
            }, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
          };
          function Sm(a, b, c, d, e, f) {
            P.call(this, Mk, { email: a, ga: b }, f, "federatedLinking", { F: d, D: e });
            this.i = c;
          }
          m(Sm, P);
          Sm.prototype.v = function() {
            this.u(this.i);
            this.l().focus();
            P.prototype.v.call(this);
          };
          Sm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(Sm.prototype, { l: jl, u: ll });
          K.federatedLinking = function(a, b, c, d, e) {
            var f = zh(X(a));
            if (f && f.a) {
              var g = new Sm(c, ii(W(a), d), function() {
                Rl(a, g, d, c);
              }, H(W(a)), J(W(a)));
              g.render(b);
              Y(a, g);
              e && g.a(e);
            } else
              S(a, b);
          };
          K.federatedRedirect = function(a, b, c) {
            var d = new Em();
            d.render(b);
            Y(a, d);
            b = hi(W(a))[0];
            Rl(a, d, b, c);
          };
          K.federatedSignIn = function(a, b, c, d, e) {
            var f = new Sm(c, ii(W(a), d), function() {
              Rl(a, f, d, c);
            }, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
            e && f.a(e);
          };
          function Tm(a, b, c, d) {
            var e = b.u();
            e ? V(a, b.I(r(a.Xb, a), [c, e], function(f) {
              f = f.user.linkWithCredential(d).then(function(g) {
                return Ll(a, b, { user: g.user, credential: d, operationType: g.operationType, additionalUserInfo: g.additionalUserInfo });
              });
              V(a, f);
              return f;
            }, function(f) {
              if (!f.name || f.name != "cancel")
                switch (f.code) {
                  case "auth/wrong-password":
                    N(b.i(), false);
                    Oj(b.B(), T(f));
                    break;
                  case "auth/too-many-requests":
                    b.a(T(f));
                    break;
                  default:
                    og("signInWithEmailAndPassword: " + f.message, void 0), b.a(T(f));
                }
            })) : b.i().focus();
          }
          K.passwordLinking = function(a, b, c) {
            var d = zh(X(a));
            Ah(X(a));
            var e = d && d.a;
            if (e) {
              var f = new ql(c, function() {
                Tm(a, f, c, e);
              }, function() {
                f.m();
                L("passwordRecovery", a, b, c);
              }, H(W(a)), J(W(a)));
              f.render(b);
              Y(a, f);
            } else
              S(a, b);
          };
          function Um(a, b, c, d, e, f) {
            P.call(this, zk, { email: c, Ta: !!b }, f, "passwordRecovery", { F: d, D: e });
            this.l = a;
            this.u = b;
          }
          m(Um, P);
          Um.prototype.v = function() {
            this.B();
            this.H(this.l, this.u);
            Wi(this.i()) || this.i().focus();
            vk(this, this.i(), this.l);
            P.prototype.v.call(this);
          };
          Um.prototype.o = function() {
            this.u = this.l = null;
            P.prototype.o.call(this);
          };
          u(Um.prototype, { i: sl, w: tl, B: ul, M: vl, j: wl, U: jl, P: kl, H: ll });
          function Vm(a, b) {
            var c = b.j();
            if (c) {
              var d = Q(b);
              V(a, b.I(r(U(a).sendPasswordResetEmail, U(a)), [c], function() {
                b.m();
                var e = new yl(c, function() {
                  e.m();
                  S(a, d);
                }, H(W(a)), J(W(a)));
                e.render(d);
                Y(a, e);
              }, function(e) {
                N(b.i(), false);
                Oj(b.w(), T(e));
              }));
            } else
              b.i().focus();
          }
          K.passwordRecovery = function(a, b, c, d, e) {
            var f = new Um(function() {
              Vm(a, f);
            }, d ? void 0 : function() {
              f.m();
              S(a, b);
            }, c, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
            e && f.a(e);
          };
          K.passwordSignIn = function(a, b, c, d) {
            var e = new xl(function() {
              Wl(a, e);
            }, function() {
              var f = e.M();
              e.m();
              L("passwordRecovery", a, b, f);
            }, c, H(W(a)), J(W(a)), d);
            e.render(b);
            Y(a, e);
          };
          function Wm() {
            return M(this, "firebaseui-id-name");
          }
          function Xm() {
            return M(this, "firebaseui-id-name-error");
          }
          function Ym(a, b, c, d, e, f, g, h, k) {
            P.call(this, yk, { email: d, Tb: a, name: e, Ta: !!c, ia: !!h }, k, "passwordSignUp", { F: f, D: g });
            this.w = b;
            this.H = c;
            this.B = a;
          }
          m(Ym, P);
          Ym.prototype.v = function() {
            this.ea();
            this.B && this.Ja();
            this.ua();
            this.pa(this.w, this.H);
            this.B ? (uk(this, this.i(), this.u()), uk(this, this.u(), this.l())) : uk(this, this.i(), this.l());
            this.w && vk(this, this.l(), this.w);
            Wi(this.i()) ? this.B && !Wi(this.u()) ? this.u().focus() : this.l().focus() : this.i().focus();
            P.prototype.v.call(this);
          };
          Ym.prototype.o = function() {
            this.H = this.w = null;
            P.prototype.o.call(this);
          };
          u(Ym.prototype, { i: sl, U: tl, ea: ul, jb: vl, j: wl, u: Wm, Bc: Xm, Ja: function() {
            var a = Wm.call(this), b = Xm.call(this);
            Jj(this, a, function() {
              Pj(b) && (N(a, true), Nj(b));
            });
          }, M: function() {
            var a = Wm.call(this);
            var b = Xm.call(this);
            var c = Wi(a);
            c = !/^[\s\xa0]*$/.test(c == null ? "" : String(c));
            N(a, c);
            c ? (Nj(b), b = true) : (Oj(b, C("Enter your account name").toString()), b = false);
            return b ? Ua(Wi(a)) : null;
          }, l: pm, ba: sm, lb: qm, ua: tm, P: um, Nb: jl, Mb: kl, pa: ll });
          function Zm(a, b) {
            var c = Ci(W(a)), d = b.j(), e = null;
            c && (e = b.M());
            var f = b.P();
            if (d) {
              if (c)
                if (e)
                  e = cb(e);
                else {
                  b.u().focus();
                  return;
                }
              if (f) {
                var g = firebase2.auth.EmailAuthProvider.credential(d, f);
                V(a, b.I(r(a.Yb, a), [d, f], function(h) {
                  var k = { user: h.user, credential: g, operationType: h.operationType, additionalUserInfo: h.additionalUserInfo };
                  return c ? (h = h.user.updateProfile({ displayName: e }).then(function() {
                    return Ll(a, b, k);
                  }), V(a, h), h) : Ll(a, b, k);
                }, function(h) {
                  if (!h.name || h.name != "cancel") {
                    var k = Kl(h);
                    h = T(k);
                    switch (k.code) {
                      case "auth/email-already-in-use":
                        return $m(a, b, d, k);
                      case "auth/too-many-requests":
                        h = C("Too many account requests are coming from your IP address. Try again in a few minutes.").toString();
                      case "auth/operation-not-allowed":
                      case "auth/weak-password":
                        N(b.l(), false);
                        Oj(b.ba(), h);
                        break;
                      case "auth/admin-restricted-operation":
                        pi(W(a)) ? (h = Q(b), b.m(), L("handleUnauthorizedUser", a, h, d, firebase2.auth.EmailAuthProvider.PROVIDER_ID)) : b.a(h);
                        break;
                      default:
                        k = "setAccountInfo: " + ah(k), og(k, void 0), b.a(h);
                    }
                  }
                }));
              } else
                b.l().focus();
            } else
              b.i().focus();
          }
          function $m(a, b, c, d) {
            function e() {
              var g = T(d);
              N(b.i(), false);
              Oj(b.U(), g);
              b.i().focus();
            }
            var f = U(a).fetchSignInMethodsForEmail(c).then(function(g) {
              g.length ? e() : (g = Q(b), b.m(), L("passwordRecovery", a, g, c, false, Kd().toString()));
            }, function() {
              e();
            });
            V(a, f);
            return f;
          }
          K.passwordSignUp = function(a, b, c, d, e, f) {
            function g() {
              h.m();
              S(a, b);
            }
            var h = new Ym(Ci(W(a)), function() {
              Zm(a, h);
            }, e ? void 0 : g, c, d, H(W(a)), J(W(a)), f);
            h.render(b);
            Y(a, h);
          };
          function an() {
            return M(this, "firebaseui-id-phone-confirmation-code");
          }
          function bn() {
            return M(this, "firebaseui-id-phone-confirmation-code-error");
          }
          function cn() {
            return M(this, "firebaseui-id-resend-countdown");
          }
          function dn(a, b, c, d, e, f, g, h, k) {
            P.call(this, fl, { phoneNumber: e }, k, "phoneSignInFinish", { F: g, D: h });
            this.jb = f;
            this.i = new hj(1e3);
            this.B = f;
            this.P = a;
            this.l = b;
            this.H = c;
            this.M = d;
          }
          m(dn, P);
          dn.prototype.v = function() {
            var a = this;
            this.U(this.jb);
            ke(this.i, "tick", this.w, false, this);
            this.i.start();
            O(this, M(this, "firebaseui-id-change-phone-number-link"), function() {
              a.P();
            });
            O(this, this.Da(), function() {
              a.M();
            });
            this.Ja(this.l);
            this.ea(this.l, this.H);
            this.u().focus();
            P.prototype.v.call(this);
          };
          dn.prototype.o = function() {
            this.M = this.H = this.l = this.P = null;
            ij(this.i);
            se(this.i, "tick", this.w);
            this.i = null;
            P.prototype.o.call(this);
          };
          dn.prototype.w = function() {
            --this.B;
            0 < this.B ? this.U(this.B) : (ij(this.i), se(this.i, "tick", this.w), this.ua(), this.lb());
          };
          u(dn.prototype, {
            u: an,
            pa: bn,
            Ja: function(a) {
              var b = an.call(this), c = bn.call(this);
              Jj(this, b, function() {
                Pj(c) && (N(b, true), Nj(c));
              });
              a && Kj(this, b, function() {
                a();
              });
            },
            ba: function() {
              var a = Ua(Wi(an.call(this)) || "");
              return /^\d{6}$/.test(a) ? a : null;
            },
            Fb: cn,
            U: function(a) {
              $c(cn.call(this), C("Resend code in " + ((9 < a ? "0:" : "0:0") + a)).toString());
            },
            ua: function() {
              Nj(this.Fb());
            },
            Da: function() {
              return M(this, "firebaseui-id-resend-link");
            },
            lb: function() {
              Oj(this.Da());
            },
            Nb: jl,
            Mb: kl,
            ea: ll
          });
          function en(a, b, c, d) {
            function e(g) {
              b.u().focus();
              N(b.u(), false);
              Oj(b.pa(), g);
            }
            var f = b.ba();
            f ? (b.$("mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-progress-dialog-loading-icon", C("Verifying...").toString()), V(a, b.I(r(d.confirm, d), [f], function(g) {
              b.h();
              b.$("firebaseui-icon-done", C("Verified!").toString());
              var h = setTimeout(function() {
                b.h();
                b.m();
                var k = { user: fn(a).currentUser, credential: null, operationType: g.operationType, additionalUserInfo: g.additionalUserInfo };
                Ll(a, b, k, true);
              }, 1e3);
              V(a, function() {
                b && b.h();
                clearTimeout(h);
              });
            }, function(g) {
              if (g.name && g.name == "cancel")
                b.h();
              else {
                var h = Kl(g);
                g = T(h);
                switch (h.code) {
                  case "auth/credential-already-in-use":
                    b.h();
                    break;
                  case "auth/code-expired":
                    h = Q(b);
                    b.h();
                    b.m();
                    L("phoneSignInStart", a, h, c, g);
                    break;
                  case "auth/missing-verification-code":
                  case "auth/invalid-verification-code":
                    b.h();
                    e(g);
                    break;
                  default:
                    b.h(), b.a(g);
                }
              }
            }))) : e(C("Wrong code. Try again.").toString());
          }
          K.phoneSignInFinish = function(a, b, c, d, e, f) {
            var g = new dn(function() {
              g.m();
              L("phoneSignInStart", a, b, c);
            }, function() {
              en(a, g, c, e);
            }, function() {
              g.m();
              S(a, b);
            }, function() {
              g.m();
              L("phoneSignInStart", a, b, c);
            }, Yh(c), d, H(W(a)), J(W(a)));
            g.render(b);
            Y(a, g);
            f && g.a(f);
          };
          var gn = !z && !(y("Safari") && !(Xb() || y("Coast") || y("Opera") || y("Edge") || y("Firefox") || y("FxiOS") || y("Silk") || y("Android")));
          function hn(a, b) {
            if (/-[a-z]/.test(b))
              return null;
            if (gn && a.dataset) {
              if (!(!y("Android") || Xb() || y("Firefox") || y("FxiOS") || y("Opera") || y("Silk") || b in a.dataset))
                return null;
              a = a.dataset[b];
              return a === void 0 ? null : a;
            }
            return a.getAttribute("data-" + String(b).replace(/([A-Z])/g, "-$1").toLowerCase());
          }
          function jn(a, b, c) {
            var d = this;
            a = hd(ek, { items: a }, null, this.s);
            lk.call(this, a, true, true);
            c && (c = kn(a, c)) && (c.focus(), Bj(c, a));
            O(this, a, function(e) {
              if (e = (e = ad(e.target, "firebaseui-id-list-box-dialog-button")) && hn(e, "listboxid"))
                mk.call(d), b(e);
            });
          }
          function kn(a, b) {
            a = (a || document).getElementsByTagName("BUTTON");
            for (var c = 0; c < a.length; c++)
              if (hn(a[c], "listboxid") === b)
                return a[c];
            return null;
          }
          function ln() {
            return M(this, "firebaseui-id-phone-number");
          }
          function mn() {
            return M(this, "firebaseui-id-country-selector");
          }
          function nn() {
            return M(this, "firebaseui-id-phone-number-error");
          }
          function on(a, b) {
            var c = a.a, d = pn("1-US-0", c), e = null;
            b && pn(b, c) ? e = b : d ? e = "1-US-0" : e = 0 < c.length ? c[0].c : null;
            if (!e)
              throw Error("No available default country");
            qn.call(this, e, a);
          }
          function pn(a, b) {
            a = Qh(a);
            return !(!a || !Ma(b, a));
          }
          function rn(a) {
            return a.map(function(b) {
              return { id: b.c, Ma: "firebaseui-flag " + sn(b), label: b.name + " " + ("\u200E+" + b.b) };
            });
          }
          function sn(a) {
            return "firebaseui-flag-" + a.f;
          }
          function tn(a) {
            var b = this;
            jn.call(this, rn(a.a), function(c) {
              qn.call(b, c, a, true);
              b.O().focus();
            }, this.Ba);
          }
          function qn(a, b, c) {
            var d = Qh(a);
            d && (c && (c = Ua(Wi(ln.call(this)) || ""), b = Ph(b, c), b.length && b[0].b != d.b && (c = "+" + d.b + c.substr(b[0].b.length + 1), Xi(ln.call(this), c))), b = Qh(this.Ba), this.Ba = a, a = M(this, "firebaseui-id-country-selector-flag"), b && Vi(a, sn(b)), Ui(a, sn(d)), $c(M(this, "firebaseui-id-country-selector-code"), "\u200E+" + d.b));
          }
          function un(a, b, c, d, e, f, g, h, k, p) {
            P.call(this, el, { Gb: b, Aa: k || null, Va: !!c, ia: !!f }, p, "phoneSignInStart", { F: d, D: e });
            this.H = h || null;
            this.M = b;
            this.l = a;
            this.w = c || null;
            this.pa = g || null;
          }
          m(un, P);
          un.prototype.v = function() {
            this.ea(this.pa, this.H);
            this.P(this.l, this.w || void 0);
            this.M || uk(this, this.O(), this.i());
            vk(this, this.i(), this.l);
            this.O().focus();
            Bm(this.O(), (this.O().value || "").length);
            P.prototype.v.call(this);
          };
          un.prototype.o = function() {
            this.w = this.l = null;
            P.prototype.o.call(this);
          };
          u(un.prototype, { Cb: nk, O: ln, B: nn, ea: function(a, b, c) {
            var d = this, e = ln.call(this), f = mn.call(this), g = nn.call(this), h = a || Vh, k = h.a;
            if (k.length == 0)
              throw Error("No available countries provided.");
            on.call(d, h, b);
            O(this, f, function() {
              tn.call(d, h);
            });
            Jj(this, e, function() {
              Pj(g) && (N(e, true), Nj(g));
              var p = Ua(Wi(e) || ""), t = Qh(this.Ba), I = Ph(h, p);
              p = pn("1-US-0", k);
              I.length && I[0].b != t.b && (t = I[0], qn.call(d, t.b == "1" && p ? "1-US-0" : t.c, h));
            });
            c && Kj(this, e, function() {
              c();
            });
          }, U: function(a) {
            var b = Ua(Wi(ln.call(this)) || "");
            a = a || Vh;
            var c = a.a, d = Ph(Vh, b);
            if (d.length && !Ma(c, d[0]))
              throw Xi(ln.call(this)), ln.call(this).focus(), Oj(nn.call(this), C("The country code provided is not supported.").toString()), Error("The country code provided is not supported.");
            c = Qh(this.Ba);
            d.length && d[0].b != c.b && qn.call(this, d[0].c, a);
            d.length && (b = b.substr(d[0].b.length + 1));
            return b ? new Wh(this.Ba, b) : null;
          }, Ja: mn, ba: function() {
            return M(this, "firebaseui-recaptcha-container");
          }, u: function() {
            return M(this, "firebaseui-id-recaptcha-error");
          }, i: jl, ua: kl, P: ll });
          function vn(a, b, c, d) {
            try {
              var e = b.U(Qi);
            } catch (f) {
              return;
            }
            e ? Oi ? (b.$("mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-progress-dialog-loading-icon", C("Verifying...").toString()), V(a, b.I(r(a.cc, a), [Yh(e), c], function(f) {
              var g = Q(b);
              b.$("firebaseui-icon-done", C("Code sent!").toString());
              var h = setTimeout(function() {
                b.h();
                b.m();
                L("phoneSignInFinish", a, g, e, 15, f);
              }, 1e3);
              V(a, function() {
                b && b.h();
                clearTimeout(h);
              });
            }, function(f) {
              b.h();
              if (!f.name || f.name != "cancel") {
                grecaptcha.reset(Ri);
                Oi = null;
                var g = f && f.message || "";
                if (f.code)
                  switch (f.code) {
                    case "auth/too-many-requests":
                      g = C("This phone number has been used too many times").toString();
                      break;
                    case "auth/invalid-phone-number":
                    case "auth/missing-phone-number":
                      b.O().focus();
                      Oj(b.B(), Hd().toString());
                      return;
                    case "auth/admin-restricted-operation":
                      if (pi(W(a))) {
                        f = Q(b);
                        b.m();
                        L("handleUnauthorizedUser", a, f, Yh(e), firebase2.auth.PhoneAuthProvider.PROVIDER_ID);
                        return;
                      }
                      g = T(f);
                      break;
                    default:
                      g = T(f);
                  }
                b.a(g);
              }
            }))) : Pi ? Oj(b.u(), C("Solve the reCAPTCHA").toString()) : !Pi && d && b.i().click() : (b.O().focus(), Oj(b.B(), Hd().toString()));
          }
          K.phoneSignInStart = function(a, b, c, d) {
            var e = qi(W(a)) || {};
            Oi = null;
            Pi = !(e && e.size === "invisible");
            var f = Yl(a), g = zi(W(a)), h = f ? yi(W(a)) : null;
            g = c && c.a || g && g.c || null;
            c = c && c.Aa || h;
            (h = Ai(W(a))) && Uh(h);
            Qi = h ? new Oh(Ai(W(a))) : Vh;
            var k = new un(function(t) {
              vn(a, k, p, !(!t || !t.keyCode));
            }, Pi, f ? null : function() {
              p.clear();
              k.m();
              S(a, b);
            }, H(W(a)), J(W(a)), f, Qi, g, c);
            k.render(b);
            Y(a, k);
            d && k.a(d);
            e.callback = function(t) {
              k.u() && Nj(k.u());
              Oi = t;
              Pi || vn(a, k, p);
            };
            e["expired-callback"] = function() {
              Oi = null;
            };
            var p = new firebase2.auth.RecaptchaVerifier(Pi ? k.ba() : k.i(), e, fn(a).app);
            V(a, k.I(r(p.render, p), [], function(t) {
              Ri = t;
            }, function(t) {
              t.name && t.name == "cancel" || (t = T(t), k.m(), S(a, b, void 0, t));
            }));
          };
          K.prefilledEmailSignIn = function(a, b, c) {
            var d = new Em();
            d.render(b);
            Y(a, d);
            V(a, d.I(r(U(a).fetchSignInMethodsForEmail, U(a)), [c], function(e) {
              d.m();
              var f = !(!Xl(a) || !wn(a));
              am(a, b, e, c, void 0, f);
            }, function(e) {
              e = T(e);
              d.m();
              L("signIn", a, b, c, e);
            }));
          };
          function xn(a, b, c, d, e) {
            P.call(this, dl, { Sb: b }, e, "providerSignIn", { F: c, D: d });
            this.i = a;
          }
          m(xn, P);
          xn.prototype.v = function() {
            this.l(this.i);
            P.prototype.v.call(this);
          };
          xn.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(xn.prototype, { l: function(a) {
            function b(g) {
              a(g);
            }
            for (var c = this.g ? Tc("firebaseui-id-idp-button", this.g || this.s.a) : [], d = 0; d < c.length; d++) {
              var e = c[d], f = hn(e, "providerId");
              O(this, e, za(b, f));
            }
          } });
          K.providerSignIn = function(a, b, c, d) {
            var e = new xn(function(f) {
              f == firebase2.auth.EmailAuthProvider.PROVIDER_ID ? (e.m(), Zl(a, b, d)) : f == firebase2.auth.PhoneAuthProvider.PROVIDER_ID ? (e.m(), L("phoneSignInStart", a, b)) : f == "anonymous" ? Ul(a, e) : Rl(a, e, f, d);
              Z(a);
              a.l.cancel();
            }, ji(W(a)), H(W(a)), J(W(a)));
            e.render(b);
            Y(a, e);
            c && e.a(c);
            yn(a);
          };
          K.sendEmailLinkForSignIn = function(a, b, c, d) {
            var e = new fm();
            e.render(b);
            Y(a, e);
            bm(a, e, c, d, function(f) {
              e.m();
              f && f.code == "auth/admin-restricted-operation" && pi(W(a)) ? L("handleUnauthorizedUser", a, b, c, firebase2.auth.EmailAuthProvider.PROVIDER_ID) : (f = T(f), L("signIn", a, b, c, f));
            });
          };
          function zn(a, b, c, d, e, f, g) {
            P.call(this, wk, { email: c, Va: !!b, ia: !!f }, g, "signIn", { F: d, D: e });
            this.i = a;
            this.u = b;
          }
          m(zn, P);
          zn.prototype.v = function() {
            this.w(this.i);
            this.B(this.i, this.u || void 0);
            this.l().focus();
            Bm(this.l(), (this.l().value || "").length);
            P.prototype.v.call(this);
          };
          zn.prototype.o = function() {
            this.u = this.i = null;
            P.prototype.o.call(this);
          };
          u(zn.prototype, { l: sl, M: tl, w: ul, H: vl, j: wl, U: jl, P: kl, B: ll });
          K.signIn = function(a, b, c, d) {
            var e = Xl(a), f = new zn(function() {
              var g = f, h = g.j() || "";
              h && $l(a, g, h);
            }, e ? null : function() {
              f.m();
              S(a, b, c);
            }, c, H(W(a)), J(W(a)), e);
            f.render(b);
            Y(a, f);
            d && f.a(d);
          };
          function An(a, b, c, d, e, f, g) {
            P.call(this, Nk, { kc: a, yb: c, Eb: !!d }, g, "unauthorizedUser", { F: e, D: f });
            this.l = b;
            this.i = d;
          }
          m(An, P);
          An.prototype.v = function() {
            var a = this, b = M(this, "firebaseui-id-unauthorized-user-help-link");
            this.i && b && O(this, b, function() {
              a.i();
            });
            O(this, this.u(), function() {
              a.l();
            });
            this.u().focus();
            P.prototype.v.call(this);
          };
          An.prototype.o = function() {
            this.i = this.l = null;
            P.prototype.o.call(this);
          };
          u(An.prototype, { u: kl });
          K.handleUnauthorizedUser = function(a, b, c, d) {
            function e() {
              S(a, b);
            }
            d === firebase2.auth.EmailAuthProvider.PROVIDER_ID ? e = function() {
              Zl(a, b);
            } : d === firebase2.auth.PhoneAuthProvider.PROVIDER_ID && (e = function() {
              L("phoneSignInStart", a, b);
            });
            var f = null, g = null;
            d === firebase2.auth.EmailAuthProvider.PROVIDER_ID && oi(W(a)) ? (f = ui2(W(a)), g = vi(W(a))) : pi(W(a)) && (f = si(W(a)), g = ti(W(a)));
            var h = new An(c, function() {
              h.m();
              e();
            }, f, g, H(W(a)), J(W(a)));
            h.render(b);
            Y(a, h);
          };
          function Bn(a, b, c, d, e, f) {
            P.call(this, Ok, { email: a }, f, "unsupportedProvider", { F: d, D: e });
            this.l = b;
            this.i = c;
          }
          m(Bn, P);
          Bn.prototype.v = function() {
            this.w(this.l, this.i);
            this.u().focus();
            P.prototype.v.call(this);
          };
          Bn.prototype.o = function() {
            this.i = this.l = null;
            P.prototype.o.call(this);
          };
          u(Bn.prototype, { u: jl, B: kl, w: ll });
          K.unsupportedProvider = function(a, b, c) {
            var d = new Bn(c, function() {
              d.m();
              L("passwordRecovery", a, b, c);
            }, function() {
              d.m();
              S(a, b, c);
            }, H(W(a)), J(W(a)));
            d.render(b);
            Y(a, d);
          };
          function Cn(a, b) {
            this.$ = false;
            var c = Dn(b);
            if (En[c])
              throw Error('An AuthUI instance already exists for the key "' + c + '"');
            En[c] = this;
            this.a = a;
            this.u = null;
            this.Y = false;
            Fn(this.a);
            this.h = firebase2.initializeApp({ apiKey: a.app.options.apiKey, authDomain: a.app.options.authDomain }, a.app.name + "-firebaseui-temp").auth();
            if (a = a.emulatorConfig)
              c = a.port, this.h.useEmulator(a.protocol + "://" + a.host + (c === null ? "" : ":" + c), a.options);
            Fn(this.h);
            this.h.setPersistence && this.h.setPersistence(firebase2.auth.Auth.Persistence.SESSION);
            this.oa = b;
            this.ca = new bi();
            this.g = this.T = this.i = this.J = this.O = null;
            this.s = [];
            this.Z = false;
            this.l = Pf.Xa();
            this.j = this.C = null;
            this.da = this.A = false;
          }
          function Fn(a) {
            a && a.INTERNAL && a.INTERNAL.logFramework && a.INTERNAL.logFramework("FirebaseUI-web");
          }
          var En = {};
          function Dn(a) {
            return a || "[DEFAULT]";
          }
          function Sl(a) {
            Z(a);
            a.i || (a.i = Gn(a, function(b) {
              return b && !zh(X(a)) ? F(fn(a).getRedirectResult().then(function(c) {
                return c;
              }, function(c) {
                if (c && c.code == "auth/email-already-in-use" && c.email && c.credential)
                  throw c;
                return Hn(a, c);
              })) : F(U(a).getRedirectResult().then(function(c) {
                return di(W(a)) && !c.user && a.j && !a.j.isAnonymous ? fn(a).getRedirectResult() : c;
              }));
            }));
            return a.i;
          }
          function Y(a, b) {
            Z(a);
            a.g = b;
          }
          var In = null;
          function U(a) {
            Z(a);
            return a.h;
          }
          function fn(a) {
            Z(a);
            return a.a;
          }
          function X(a) {
            Z(a);
            return a.oa;
          }
          function wn(a) {
            Z(a);
            return a.O ? a.O.emailHint : void 0;
          }
          l = Cn.prototype;
          l.nb = function() {
            Z(this);
            return !!Ch(X(this)) || Jn(tf());
          };
          function Jn(a) {
            a = new Pb(a);
            return (a.a.a.get(x.ub) || null) === "signIn" && !!a.a.a.get(x.$a);
          }
          l.start = function(a, b) {
            Kn(this, a, b);
          };
          function Kn(a, b, c, d) {
            Z(a);
            typeof a.a.languageCode !== "undefined" && (a.u = a.a.languageCode);
            var e = "en".replace(/_/g, "-");
            a.a.languageCode = e;
            a.h.languageCode = e;
            a.Y = true;
            typeof a.a.tenantId !== "undefined" && (a.h.tenantId = a.a.tenantId);
            a.ib(c);
            a.O = d || null;
            var f = n.document;
            a.C ? a.C.then(function() {
              f.readyState == "complete" ? Ln(a, b) : le(window, "load", function() {
                Ln(a, b);
              });
            }) : f.readyState == "complete" ? Ln(a, b) : le(window, "load", function() {
              Ln(a, b);
            });
          }
          function Ln(a, b) {
            var c = sf(b, "Could not find the FirebaseUI widget element on the page.");
            c.setAttribute("lang", "en".replace(/_/g, "-"));
            if (In) {
              var d = In;
              Z(d);
              zh(X(d)) && tg("UI Widget is already rendered on the page and is pending some user interaction. Only one widget instance can be rendered per page. The previous instance has been automatically reset.");
              In.reset();
            }
            In = a;
            a.T = c;
            Mn(a, c);
            if (jh(new kh()) && jh(new lh())) {
              b = sf(b, "Could not find the FirebaseUI widget element on the page.");
              c = tf();
              d = Jh(W(a).a, "queryParameterForSignInSuccessUrl");
              c = (c = tb(c, d)) ? zc(Bc(c)).toString() : null;
              a: {
                d = tf();
                var e = Bi(W(a));
                d = tb(d, e) || "";
                for (f in Ni)
                  if (Ni[f].toLowerCase() == d.toLowerCase()) {
                    var f = Ni[f];
                    break a;
                  }
                f = "callback";
              }
              switch (f) {
                case "callback":
                  c && (f = X(a), xh(sh, c, f));
                  a.nb() ? L("callback", a, b) : S(a, b, wn(a));
                  break;
                case "resetPassword":
                  L("passwordReset", a, b, cm(), dm());
                  break;
                case "recoverEmail":
                  L("emailChangeRevocation", a, b, cm());
                  break;
                case "revertSecondFactorAddition":
                  L("revertSecondFactorAddition", a, b, cm());
                  break;
                case "verifyEmail":
                  L("emailVerification", a, b, cm(), dm());
                  break;
                case "verifyAndChangeEmail":
                  L("verifyAndChangeEmail", a, b, cm(), dm());
                  break;
                case "signIn":
                  L("emailLinkSignInCallback", a, b, tf());
                  Nn();
                  break;
                case "select":
                  c && (f = X(a), xh(sh, c, f));
                  S(a, b);
                  break;
                default:
                  throw Error("Unhandled widget operation.");
              }
              b = W(a);
              (b = Li(b).uiShown || null) && b();
            } else
              b = sf(b, "Could not find the FirebaseUI widget element on the page."), f = new Jl(C("The browser you are using does not support Web Storage. Please try again in a different browser.").toString()), f.render(b), Y(a, f);
            b = a.g && a.g.Ga == "blank" && Gi(W(a));
            Ch(X(a)) && !b && (b = Ch(X(a)), Gm(a, b.a), wh(rh, X(a)));
          }
          function Gn(a, b) {
            if (a.A)
              return b(On(a));
            V(a, function() {
              a.A = false;
            });
            if (di(W(a))) {
              var c = new Ve(function(d) {
                V(a, a.a.onAuthStateChanged(function(e) {
                  a.j = e;
                  a.A || (a.A = true, d(b(On(a))));
                }));
              });
              V(a, c);
              return c;
            }
            a.A = true;
            return b(null);
          }
          function On(a) {
            Z(a);
            return di(W(a)) && a.j && a.j.isAnonymous ? a.j : null;
          }
          function V(a, b) {
            Z(a);
            if (b) {
              a.s.push(b);
              var c = function() {
                Qa(a.s, function(d) {
                  return d == b;
                });
              };
              typeof b != "function" && b.then(c, c);
            }
          }
          l.Db = function() {
            Z(this);
            this.Z = true;
          };
          function Pn(a) {
            Z(a);
            var b;
            (b = a.Z) || (a = W(a), a = xi(a, firebase2.auth.GoogleAuthProvider.PROVIDER_ID), b = !(!a || a.prompt !== "select_account"));
            return b;
          }
          function Ml(a) {
            typeof a.a.languageCode !== "undefined" && a.Y && (a.Y = false, a.a.languageCode = a.u);
          }
          function Gm(a, b) {
            a.a.tenantId = b;
            a.h.tenantId = b;
          }
          l.reset = function() {
            Z(this);
            var a = this;
            this.T && this.T.removeAttribute("lang");
            this.J && De(this.J);
            Ml(this);
            this.O = null;
            Nn();
            wh(rh, X(this));
            Z(this);
            this.l.cancel();
            this.i = F({ user: null, credential: null });
            In == this && (In = null);
            this.T = null;
            for (var b = 0; b < this.s.length; b++)
              if (typeof this.s[b] == "function")
                this.s[b]();
              else
                this.s[b].cancel && this.s[b].cancel();
            this.s = [];
            Ah(X(this));
            this.g && (this.g.m(), this.g = null);
            this.L = null;
            this.h && (this.C = mm(this).then(function() {
              a.C = null;
            }, function() {
              a.C = null;
            }));
          };
          function Mn(a, b) {
            a.L = null;
            a.J = new Ee(b);
            a.J.register();
            ke(a.J, "pageEnter", function(c) {
              c = c && c.pageId;
              if (a.L != c) {
                var d = W(a);
                (d = Li(d).uiChanged || null) && d(a.L, c);
                a.L = c;
              }
            });
          }
          l.ib = function(a) {
            Z(this);
            var b = this.ca, c;
            for (c in a)
              try {
                Ih(b.a, c, a[c]);
              } catch (d) {
                og('Invalid config: "' + c + '"', void 0);
              }
            fc && Ih(b.a, "popupMode", false);
            Ai(b);
            !this.da && Ki(W(this)) && (tg("signInSuccess callback is deprecated. Please use signInSuccessWithAuthResult callback instead."), this.da = true);
          };
          function W(a) {
            Z(a);
            return a.ca;
          }
          l.Wb = function() {
            Z(this);
            var a = W(this), b = Jh(a.a, "widgetUrl");
            a = Bi(a);
            var c = b.search(sb);
            for (var d = 0, e, f = []; 0 <= (e = rb(b, d, a, c)); )
              f.push(b.substring(d, e)), d = Math.min(b.indexOf("&", e) + 1 || c, c);
            f.push(b.substr(d));
            b = f.join("").replace(ub, "$1");
            c = "=" + encodeURIComponent("select");
            (a += c) ? (c = b.indexOf("#"), 0 > c && (c = b.length), d = b.indexOf("?"), 0 > d || d > c ? (d = c, e = "") : e = b.substring(d + 1, c), b = [b.substr(0, d), e, b.substr(c)], c = b[1], b[1] = a ? c ? c + "&" + a : a : c, c = b[0] + (b[1] ? "?" + b[1] : "") + b[2]) : c = b;
            W(this).a.get("popupMode") ? (a = (window.screen.availHeight - 600) / 2, b = (window.screen.availWidth - 500) / 2, c = c || "about:blank", a = { width: 500, height: 600, top: 0 < a ? a : 0, left: 0 < b ? b : 0, location: true, resizable: true, statusbar: true, toolbar: false }, a.target = a.target || c.target || "google_popup", a.width = a.width || 690, a.height = a.height || 500, (a = pf(c, a)) && a.focus()) : Nc(window.location, c);
          };
          function Z(a) {
            if (a.$)
              throw Error("AuthUI instance is deleted!");
          }
          l.Wa = function() {
            var a = this;
            Z(this);
            return this.h.app.delete().then(function() {
              var b = Dn(X(a));
              delete En[b];
              a.reset();
              a.$ = true;
            });
          };
          function yn(a) {
            Z(a);
            try {
              Qf(a.l, li(W(a)), Pn(a)).then(function(b) {
                return a.g ? Vl(a, a.g, b) : false;
              });
            } catch (b) {
            }
          }
          l.Ib = function(a, b) {
            Z(this);
            var c = this, d = vf();
            if (!Di(W(this)))
              return df(Error("Email link sign-in should be enabled to trigger email sending."));
            var e = Fi(W(this)), f = new Pb(e.url);
            Qb(f, d);
            b && b.a && (Gh(d, b, X(this)), Tb(f, b.a.providerId));
            Rb(f, Ei(W(this)));
            return Gn(this, function(g) {
              g && ((g = g.uid) ? f.a.a.set(x.Pa, g) : Nb(f.a.a, x.Pa));
              e.url = f.toString();
              return U(c).sendSignInLinkToEmail(a, e);
            }).then(function() {
              var g = X(c), h = {};
              h.email = a;
              xh(th, Yg(d, JSON.stringify(h)), g);
            }, function(g) {
              wh(uh, X(c));
              wh(th, X(c));
              throw g;
            });
          };
          function Hm(a, b) {
            var c = Sb(new Pb(b));
            if (!c)
              return F(null);
            b = new Ve(function(d, e) {
              var f = fn(a).onAuthStateChanged(function(g) {
                f();
                g && g.isAnonymous && g.uid === c ? d(g) : g && g.isAnonymous && g.uid !== c ? e(Error("anonymous-user-mismatch")) : e(Error("anonymous-user-not-found"));
              });
              V(a, f);
            });
            V(a, b);
            return b;
          }
          function Lm(a, b, c, d, e) {
            Z(a);
            var f = e || null, g = firebase2.auth.EmailAuthProvider.credentialWithLink(c, d);
            c = f ? U(a).signInWithEmailLink(c, d).then(function(h) {
              return h.user.linkWithCredential(f);
            }).then(function() {
              return mm(a);
            }).then(function() {
              return Hn(a, { code: "auth/email-already-in-use" }, f);
            }) : U(a).fetchSignInMethodsForEmail(c).then(function(h) {
              return h.length ? Hn(a, { code: "auth/email-already-in-use" }, g) : b.linkWithCredential(g);
            });
            V(a, c);
            return c;
          }
          function Mm(a, b, c, d) {
            Z(a);
            var e = d || null, f;
            b = U(a).signInWithEmailLink(b, c).then(function(g) {
              f = { user: g.user, credential: null, operationType: g.operationType, additionalUserInfo: g.additionalUserInfo };
              if (e)
                return g.user.linkWithCredential(e).then(function(h) {
                  f = { user: h.user, credential: e, operationType: f.operationType, additionalUserInfo: h.additionalUserInfo };
                });
            }).then(function() {
              mm(a);
            }).then(function() {
              return fn(a).updateCurrentUser(f.user);
            }).then(function() {
              f.user = fn(a).currentUser;
              return f;
            });
            V(a, b);
            return b;
          }
          function Nn() {
            var a = tf();
            if (Jn(a)) {
              a = new Pb(a);
              for (var b in x)
                x.hasOwnProperty(b) && Nb(a.a.a, x[b]);
              b = { state: "signIn", mode: "emailLink", operation: "clear" };
              var c = n.document.title;
              n.history && n.history.replaceState && n.history.replaceState(b, c, a.toString());
            }
          }
          l.bc = function(a, b) {
            Z(this);
            var c = this;
            return U(this).signInWithEmailAndPassword(a, b).then(function(d) {
              return Gn(c, function(e) {
                return e ? mm(c).then(function() {
                  return Hn(c, { code: "auth/email-already-in-use" }, firebase2.auth.EmailAuthProvider.credential(a, b));
                }) : d;
              });
            });
          };
          l.Yb = function(a, b) {
            Z(this);
            var c = this;
            return Gn(this, function(d) {
              if (d) {
                var e = firebase2.auth.EmailAuthProvider.credential(a, b);
                return d.linkWithCredential(e);
              }
              return U(c).createUserWithEmailAndPassword(a, b);
            });
          };
          l.ac = function(a) {
            Z(this);
            var b = this;
            return Gn(this, function(c) {
              return c ? c.linkWithCredential(a).then(function(d) {
                return d;
              }, function(d) {
                if (d && d.code == "auth/email-already-in-use" && d.email && d.credential)
                  throw d;
                return Hn(b, d, a);
              }) : U(b).signInWithCredential(a);
            });
          };
          function Tl(a, b) {
            Z(a);
            return Gn(a, function(c) {
              return c && !zh(X(a)) ? c.linkWithPopup(b).then(function(d) {
                return d;
              }, function(d) {
                if (d && d.code == "auth/email-already-in-use" && d.email && d.credential)
                  throw d;
                return Hn(a, d);
              }) : U(a).signInWithPopup(b);
            });
          }
          l.dc = function(a) {
            Z(this);
            var b = this, c = this.i;
            this.i = null;
            return Gn(this, function(d) {
              return d && !zh(X(b)) ? d.linkWithRedirect(a) : U(b).signInWithRedirect(a);
            }).then(function() {
            }, function(d) {
              b.i = c;
              throw d;
            });
          };
          l.cc = function(a, b) {
            Z(this);
            var c = this;
            return Gn(this, function(d) {
              return d ? d.linkWithPhoneNumber(a, b).then(function(e) {
                return new Sf(e, function(f) {
                  if (f.code == "auth/credential-already-in-use")
                    return Hn(c, f);
                  throw f;
                });
              }) : fn(c).signInWithPhoneNumber(a, b).then(function(e) {
                return new Sf(e);
              });
            });
          };
          l.$b = function() {
            Z(this);
            return fn(this).signInAnonymously();
          };
          function Ol(a, b) {
            Z(a);
            return Gn(a, function(c) {
              if (a.j && !a.j.isAnonymous && di(W(a)) && !U(a).currentUser)
                return mm(a).then(function() {
                  b.credential.providerId == "password" && (b.credential = null);
                  return b;
                });
              if (c)
                return mm(a).then(function() {
                  return c.linkWithCredential(b.credential);
                }).then(function(d) {
                  b.user = d.user;
                  b.credential = d.credential;
                  b.operationType = d.operationType;
                  b.additionalUserInfo = d.additionalUserInfo;
                  return b;
                }, function(d) {
                  if (d && d.code == "auth/email-already-in-use" && d.email && d.credential)
                    throw d;
                  return Hn(a, d, b.credential);
                });
              if (!b.user)
                throw Error('Internal error: An incompatible or outdated version of "firebase.js" may be used.');
              return mm(a).then(function() {
                return fn(a).updateCurrentUser(b.user);
              }).then(function() {
                b.user = fn(a).currentUser;
                b.operationType = "signIn";
                b.credential && b.credential.providerId && b.credential.providerId == "password" && (b.credential = null);
                return b;
              });
            });
          }
          l.Xb = function(a, b) {
            Z(this);
            return U(this).signInWithEmailAndPassword(a, b);
          };
          function mm(a) {
            Z(a);
            return U(a).signOut();
          }
          function Hn(a, b, c) {
            Z(a);
            if (b && b.code && (b.code == "auth/email-already-in-use" || b.code == "auth/credential-already-in-use")) {
              var d = ei(W(a));
              return F().then(function() {
                return d(new Nd("anonymous-upgrade-merge-conflict", null, c || b.credential));
              }).then(function() {
                a.g && (a.g.m(), a.g = null);
                throw b;
              });
            }
            return df(b);
          }
          function Qn(a, b, c, d) {
            P.call(this, il, void 0, d, "providerMatchByEmail", { F: b, D: c });
            this.i = a;
          }
          m(Qn, P);
          Qn.prototype.v = function() {
            this.u(this.i);
            this.w(this.i);
            this.l().focus();
            Bm(this.l(), (this.l().value || "").length);
            P.prototype.v.call(this);
          };
          Qn.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          u(Qn.prototype, { l: sl, H: tl, u: ul, B: vl, j: wl, M: jl, w: ll });
          function Rn(a, b, c, d, e) {
            P.call(this, hl, { ec: b }, e, "selectTenant", { F: c, D: d });
            this.i = a;
          }
          m(Rn, P);
          Rn.prototype.v = function() {
            Sn(this, this.i);
            P.prototype.v.call(this);
          };
          Rn.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
          };
          function Sn(a, b) {
            function c(h) {
              b(h);
            }
            for (var d = a.g ? Tc("firebaseui-id-tenant-selection-button", a.g || a.s.a) : [], e = 0; e < d.length; e++) {
              var f = d[e], g = hn(f, "tenantId");
              O(a, f, za(c, g));
            }
          }
          function Tn(a) {
            P.call(this, Ck, void 0, a, "spinner");
          }
          m(Tn, P);
          function Un(a) {
            this.a = new Hh();
            G(this.a, "authDomain");
            G(this.a, "displayMode", Vn);
            G(this.a, "tenants");
            G(this.a, "callbacks");
            G(this.a, "tosUrl");
            G(this.a, "privacyPolicyUrl");
            for (var b in a)
              if (a.hasOwnProperty(b))
                try {
                  Ih(this.a, b, a[b]);
                } catch (c) {
                  og('Invalid config: "' + b + '"', void 0);
                }
          }
          function Wn(a) {
            a = a.a.get("displayMode");
            for (var b in Xn)
              if (Xn[b] === a)
                return Xn[b];
            return Vn;
          }
          function Yn(a) {
            return a.a.get("callbacks") || {};
          }
          function Zn(a) {
            var b = a.a.get("tosUrl") || null;
            a = a.a.get("privacyPolicyUrl") || null;
            b && !a && tg("Privacy Policy URL is missing, the link will not be displayed.");
            if (b && a) {
              if (typeof b === "function")
                return b;
              if (typeof b === "string")
                return function() {
                  rf(b);
                };
            }
            return null;
          }
          function $n(a) {
            var b = a.a.get("tosUrl") || null, c = a.a.get("privacyPolicyUrl") || null;
            c && !b && tg("Terms of Service URL is missing, the link will not be displayed.");
            if (b && c) {
              if (typeof c === "function")
                return c;
              if (typeof c === "string")
                return function() {
                  rf(c);
                };
            }
            return null;
          }
          function ao(a, b) {
            a = a.a.get("tenants");
            if (!a || !a.hasOwnProperty(b) && !a.hasOwnProperty(bo))
              throw Error("Invalid tenant configuration!");
          }
          function co(a, b, c) {
            a = a.a.get("tenants");
            if (!a)
              throw Error("Invalid tenant configuration!");
            var d = [];
            a = a[b] || a[bo];
            if (!a)
              return og("Invalid tenant configuration: " + (b + " is not configured!"), void 0), d;
            b = a.signInOptions;
            if (!b)
              throw Error("Invalid tenant configuration: signInOptions are invalid!");
            b.forEach(function(e) {
              if (typeof e === "string")
                d.push(e);
              else if (typeof e.provider === "string") {
                var f = e.hd;
                f && c ? (f instanceof RegExp ? f : new RegExp("@" + f.replace(".", "\\.") + "$")).test(c) && d.push(e.provider) : d.push(e.provider);
              } else
                e = "Invalid tenant configuration: signInOption " + (JSON.stringify(e) + " is invalid!"), og(e, void 0);
            });
            return d;
          }
          function eo(a, b, c) {
            a = fo(a, b);
            (b = a.signInOptions) && c && (b = b.filter(function(d) {
              return typeof d === "string" ? c.includes(d) : c.includes(d.provider);
            }), a.signInOptions = b);
            return a;
          }
          function fo(a, b) {
            var c = go;
            var d = d === void 0 ? {} : d;
            ao(a, b);
            a = a.a.get("tenants");
            return wf(a[b] || a[bo], c, d);
          }
          var go = ["immediateFederatedRedirect", "privacyPolicyUrl", "signInFlow", "signInOptions", "tosUrl"], Vn = "optionFirst", Xn = { pc: Vn, oc: "identifierFirst" }, bo = "*";
          function ho(a, b) {
            var c = this;
            this.s = sf(a);
            this.a = {};
            Object.keys(b).forEach(function(d) {
              c.a[d] = new Un(b[d]);
            });
            this.ob = this.g = this.A = this.h = this.i = this.j = null;
            Object.defineProperty(this, "languageCode", { get: function() {
              return this.ob;
            }, set: function(d) {
              this.ob = d || null;
            }, enumerable: false });
          }
          l = ho.prototype;
          l.Ub = function(a, b) {
            var c = this;
            io(this);
            var d = a.apiKey;
            return new Ve(function(e, f) {
              if (c.a.hasOwnProperty(d)) {
                var g = Yn(c.a[d]).selectTenantUiHidden || null;
                if (Wn(c.a[d]) === Vn) {
                  var h = [];
                  b.forEach(function(t) {
                    t = t || "_";
                    var I = c.a[d].a.get("tenants");
                    if (!I)
                      throw Error("Invalid tenant configuration!");
                    (I = I[t] || I[bo]) ? t = { tenantId: t !== "_" ? t : null, V: I.fullLabel || null, displayName: I.displayName, za: I.iconUrl, ta: I.buttonColor } : (og("Invalid tenant configuration: " + (t + " is not configured!"), void 0), t = null);
                    t && h.push(t);
                  });
                  var k = function(t) {
                    t = { tenantId: t, providerIds: co(c.a[d], t || "_") };
                    e(t);
                  };
                  if (h.length === 1) {
                    k(h[0].tenantId);
                    return;
                  }
                  c.g = new Rn(function(t) {
                    io(c);
                    g && g();
                    k(t);
                  }, h, Zn(c.a[d]), $n(c.a[d]));
                } else
                  c.g = new Qn(function() {
                    var t = c.g.j();
                    if (t) {
                      for (var I = 0; I < b.length; I++) {
                        var Ca = co(c.a[d], b[I] || "_", t);
                        if (Ca.length !== 0) {
                          t = { tenantId: b[I], providerIds: Ca, email: t };
                          io(c);
                          g && g();
                          e(t);
                          return;
                        }
                      }
                      c.g.a(Ld({ code: "no-matching-tenant-for-email" }).toString());
                    }
                  }, Zn(c.a[d]), $n(c.a[d]));
                c.g.render(c.s);
                (f = Yn(c.a[d]).selectTenantUiShown || null) && f();
              } else {
                var p = Error("Invalid project configuration: API key is invalid!");
                p.code = "invalid-configuration";
                c.pb(p);
                f(p);
              }
            });
          };
          l.Pb = function(a, b) {
            if (!this.a.hasOwnProperty(a))
              throw Error("Invalid project configuration: API key is invalid!");
            var c = b || void 0;
            ao(this.a[a], b || "_");
            try {
              this.i = firebase2.app(c).auth();
            } catch (e) {
              var d = this.a[a].a.get("authDomain");
              if (!d)
                throw Error("Invalid project configuration: authDomain is required!");
              a = firebase2.initializeApp({ apiKey: a, authDomain: d }, c);
              a.auth().tenantId = b;
              this.i = a.auth();
            }
            return this.i;
          };
          l.Zb = function(a, b) {
            var c = this;
            return new Ve(function(d, e) {
              function f(I, Ca) {
                c.j = new Cn(a);
                Kn(c.j, c.s, I, Ca);
              }
              var g = a.app.options.apiKey;
              c.a.hasOwnProperty(g) || e(Error("Invalid project configuration: API key is invalid!"));
              var h = eo(c.a[g], a.tenantId || "_", b && b.providerIds);
              io(c);
              e = { signInSuccessWithAuthResult: function(I) {
                d(I);
                return false;
              } };
              var k = Yn(c.a[g]).signInUiShown || null, p = false;
              e.uiChanged = function(I, Ca) {
                I === null && Ca === "callback" ? ((I = Vc("firebaseui-id-page-callback", c.s)) && Nj(I), c.h = new Tn(), c.h.render(c.s)) : p || I === null && Ca === "spinner" || Ca === "blank" || (c.h && (c.h.m(), c.h = null), p = true, k && k(a.tenantId));
              };
              h.callbacks = e;
              h.credentialHelper = "none";
              var t;
              b && b.email && (t = { emailHint: b.email });
              c.j ? c.j.Wa().then(function() {
                f(h, t);
              }) : f(h, t);
            });
          };
          l.reset = function() {
            var a = this;
            return F().then(function() {
              a.j && a.j.Wa();
            }).then(function() {
              a.j = null;
              io(a);
            });
          };
          l.Vb = function() {
            var a = this;
            this.h || this.A || (this.A = window.setTimeout(function() {
              io(a);
              a.h = new Tn();
              a.g = a.h;
              a.h.render(a.s);
              a.A = null;
            }, 500));
          };
          l.mb = function() {
            window.clearTimeout(this.A);
            this.A = null;
            this.h && (this.h.m(), this.h = null);
          };
          l.Bb = function() {
            io(this);
            this.g = new El();
            this.g.render(this.s);
            return F();
          };
          function io(a) {
            a.j && a.j.reset();
            a.mb();
            a.g && a.g.m();
          }
          l.pb = function(a) {
            var b = this, c = Ld({ code: a.code }).toString() || a.message;
            io(this);
            var d;
            a.retry && typeof a.retry === "function" && (d = function() {
              b.reset();
              a.retry();
            });
            this.g = new Il(c, d);
            this.g.render(this.s);
          };
          l.Rb = function(a) {
            var b = this;
            return F().then(function() {
              var c = b.i && b.i.app.options.apiKey;
              if (!b.a.hasOwnProperty(c))
                throw Error("Invalid project configuration: API key is invalid!");
              ao(b.a[c], a.tenantId || "_");
              if (!b.i.currentUser || b.i.currentUser.uid !== a.uid)
                throw Error("The user being processed does not match the signed in user!");
              return (c = Yn(b.a[c]).beforeSignInSuccess || null) ? c(a) : a;
            }).then(function(c) {
              if (c.uid !== a.uid)
                throw Error("User with mismatching UID returned.");
              return c;
            });
          };
          v("firebaseui.auth.FirebaseUiHandler", ho);
          v("firebaseui.auth.FirebaseUiHandler.prototype.selectTenant", ho.prototype.Ub);
          v("firebaseui.auth.FirebaseUiHandler.prototype.getAuth", ho.prototype.Pb);
          v("firebaseui.auth.FirebaseUiHandler.prototype.startSignIn", ho.prototype.Zb);
          v("firebaseui.auth.FirebaseUiHandler.prototype.reset", ho.prototype.reset);
          v("firebaseui.auth.FirebaseUiHandler.prototype.showProgressBar", ho.prototype.Vb);
          v("firebaseui.auth.FirebaseUiHandler.prototype.hideProgressBar", ho.prototype.mb);
          v("firebaseui.auth.FirebaseUiHandler.prototype.completeSignOut", ho.prototype.Bb);
          v("firebaseui.auth.FirebaseUiHandler.prototype.handleError", ho.prototype.pb);
          v("firebaseui.auth.FirebaseUiHandler.prototype.processUser", ho.prototype.Rb);
          v("firebaseui.auth.AuthUI", Cn);
          v("firebaseui.auth.AuthUI.getInstance", function(a) {
            a = Dn(a);
            return En[a] ? En[a] : null;
          });
          v("firebaseui.auth.AuthUI.prototype.disableAutoSignIn", Cn.prototype.Db);
          v("firebaseui.auth.AuthUI.prototype.start", Cn.prototype.start);
          v("firebaseui.auth.AuthUI.prototype.setConfig", Cn.prototype.ib);
          v("firebaseui.auth.AuthUI.prototype.signIn", Cn.prototype.Wb);
          v("firebaseui.auth.AuthUI.prototype.reset", Cn.prototype.reset);
          v("firebaseui.auth.AuthUI.prototype.delete", Cn.prototype.Wa);
          v("firebaseui.auth.AuthUI.prototype.isPendingRedirect", Cn.prototype.nb);
          v("firebaseui.auth.AuthUIError", Nd);
          v("firebaseui.auth.AuthUIError.prototype.toJSON", Nd.prototype.toJSON);
          v("firebaseui.auth.CredentialHelper.GOOGLE_YOLO", ni);
          v("firebaseui.auth.CredentialHelper.NONE", ci);
          v("firebaseui.auth.AnonymousAuthProvider.PROVIDER_ID", "anonymous");
          Ve.prototype["catch"] = Ve.prototype.Ca;
          Ve.prototype["finally"] = Ve.prototype.fc;
        }).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : window);
        if (typeof window !== "undefined") {
          window.dialogPolyfill = require_dialog_polyfill();
        }
      })();
      module.exports = firebaseui;
    }
  });

  // node_modules/firebase/app/dist/index.esm.js
  init_index_esm20174();
  init_index_esm20174();
  var name2 = "firebase";
  var version2 = "9.6.3";
  registerVersion(name2, version2, "app");

  // node_modules/@firebase/auth/dist/esm2017/index.js
  init_index_1679a2b2();
  init_index_esm2017();
  init_index_esm20174();
  init_modules();
  init_index_esm20173();
  init_index_esm20172();

  // firebase.config.js
  var config = {
    apiKey: "AIzaSyCFBkvbRgHSaqz48Odsg2Ugrjnw2Z5spwk",
    authDomain: "airlift-dev-9e6bd.firebaseapp.com",
    projectId: "airlift-dev-9e6bd",
    appId: "1:436809552983:web:ceb56df2538eab9ca27f12",
    databaseUrl: "https://airlift-dev-9e6bd.firebaseio.com"
  };

  // src/index.js
  var firebaseui2 = require_npm();
  var app = initializeApp(config);
  var auth = getAuth(app);
  var ui = new firebaseui2.auth.AuthUI(auth);
  ui.start("#firebaseui-auth-container", {
    callbacks: {
      signInSuccessWithAuthResult: async function(authResult, redirectUrl) {
        document.getElementById("json").innerText = JSON.stringify({
          token: await auth.currentUser.getIdToken(),
          user: auth.currentUser
        });
        return true;
      },
      uiShown: function() {
        document.getElementById("loader").style.display = "none";
      }
    },
    signInFlow: "popup",
    signInOptions: [
      "facebook.com",
      "apple.com",
      "google.com"
    ]
  });
})();
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9jb25zdGFudHMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9hc3NlcnQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9jcnlwdC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2RlZXBDb3B5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvZGVmZXJyZWQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9lbXVsYXRvci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2Vudmlyb25tZW50LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvZXJyb3JzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvanNvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2p3dC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL29iai50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL3F1ZXJ5LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvc2hhMS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL3N1YnNjcmliZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL3ZhbGlkYXRpb24udHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy91dGY4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9zcmMvZXhwb25lbnRpYWxfYmFja29mZi50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvc3JjL2Zvcm1hdHRlcnMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS91dGlsL3NyYy9jb21wYXQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvc3JjL2NvbXBvbmVudC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2NvbXBvbmVudC9zcmMvY29uc3RhbnRzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvY29tcG9uZW50L3NyYy9wcm92aWRlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2NvbXBvbmVudC9zcmMvY29tcG9uZW50X2NvbnRhaW5lci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2xvZ2dlci9zcmMvbG9nZ2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9wbGF0Zm9ybUxvZ2dlclNlcnZpY2UudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvc3JjL2xvZ2dlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9zcmMvY29uc3RhbnRzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9pbnRlcm5hbC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9zcmMvZXJyb3JzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9maXJlYmFzZUFwcC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9zcmMvYXBpLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9yZWdpc3RlckNvcmVDb21wb25lbnRzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL3NyYy9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3RzbGliL21vZHVsZXMvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9tb2RlbC9lbnVtX21hcHMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2Vycm9ycy50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9sb2cudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvYXNzZXJ0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2luc3RhbnRpYXRvci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvYXV0aC9pbml0aWFsaXplLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL2xvY2F0aW9uLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL25hdmlnYXRvci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9kZWxheS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9lbXVsYXRvci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9mZXRjaF9wcm92aWRlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9lcnJvcnMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L2FjY291bnQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvdGltZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXNlci9pZF90b2tlbl9yZXN1bHQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvaW52YWxpZGF0aW9uLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL3Byb2FjdGl2ZV9yZWZyZXNoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL3VzZXJfbWV0YWRhdGEudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvcmVsb2FkLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2F1dGhlbnRpY2F0aW9uL3Rva2VuLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL3Rva2VuX21hbmFnZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvdXNlcl9pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9wZXJzaXN0ZW5jZS9pbl9tZW1vcnkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3BlcnNpc3RlbmNlL3BlcnNpc3RlbmNlX3VzZXJfbWFuYWdlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9icm93c2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91dGlsL3ZlcnNpb24udHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2F1dGgvYXV0aF9pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hdXRoL2VtdWxhdG9yLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9jcmVkZW50aWFscy9hdXRoX2NyZWRlbnRpYWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L2VtYWlsX2FuZF9wYXNzd29yZC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9lbWFpbF9hbmRfcGFzc3dvcmQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vZW1haWxfbGluay50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvY3JlZGVudGlhbHMvZW1haWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vaWRwLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9jcmVkZW50aWFscy9vYXV0aC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9zbXMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2NyZWRlbnRpYWxzL3Bob25lLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hY3Rpb25fY29kZV91cmwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3Byb3ZpZGVycy9lbWFpbC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcHJvdmlkZXJzL2ZlZGVyYXRlZC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcHJvdmlkZXJzL29hdXRoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9wcm92aWRlcnMvZmFjZWJvb2sudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3Byb3ZpZGVycy9nb29nbGUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3Byb3ZpZGVycy9naXRodWIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL2NyZWRlbnRpYWxzL3NhbWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3Byb3ZpZGVycy9zYW1sLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9wcm92aWRlcnMvdHdpdHRlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9zaWduX3VwLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL3VzZXJfY3JlZGVudGlhbF9pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL2Fub255bW91cy50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfZXJyb3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvcHJvdmlkZXJzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL2xpbmtfdW5saW5rLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL3JlYXV0aGVudGljYXRlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL2NyZWRlbnRpYWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYXV0aGVudGljYXRpb24vY3VzdG9tX3Rva2VuLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL2N1c3RvbV90b2tlbi50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfaW5mby50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9hY3Rpb25fY29kZV9zZXR0aW5ncy50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9lbWFpbF9hbmRfcGFzc3dvcmQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3N0cmF0ZWdpZXMvZW1haWxfbGluay50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9jcmVhdGVfYXV0aF91cmkudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3N0cmF0ZWdpZXMvZW1haWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L3Byb2ZpbGUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3VzZXIvYWNjb3VudF9pbmZvLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS91c2VyL2FkZGl0aW9uYWxfdXNlcl9pbmZvLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9pbmRleC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfc2Vzc2lvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfcmVzb2x2ZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L21mYS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfdXNlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvcGVyc2lzdGVuY2UvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3BlcnNpc3RlbmNlL2Jyb3dzZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3BlcnNpc3RlbmNlL2xvY2FsX3N0b3JhZ2UudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3BlcnNpc3RlbmNlL3Nlc3Npb25fc3RvcmFnZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvbWVzc2FnZWNoYW5uZWwvcHJvbWlzZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvbWVzc2FnZWNoYW5uZWwvcmVjZWl2ZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvZXZlbnRfaWQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL21lc3NhZ2VjaGFubmVsL3NlbmRlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvYXV0aF93aW5kb3cudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3V0aWwvd29ya2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9wZXJzaXN0ZW5jZS9pbmRleGVkX2RiLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvYXBpL2F1dGhlbnRpY2F0aW9uL21mYS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9yZWNhcHRjaGEudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL2xvYWRfanMudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3JlY2FwdGNoYS9yZWNhcHRjaGFfbW9jay50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvcmVjYXB0Y2hhL3JlY2FwdGNoYV9sb2FkZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3JlY2FwdGNoYS9yZWNhcHRjaGFfdmVyaWZpZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3N0cmF0ZWdpZXMvcGhvbmUudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9wbGF0Zm9ybV9icm93c2VyL3Byb3ZpZGVycy9waG9uZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9yZXNvbHZlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvc3RyYXRlZ2llcy9pZHAudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3N0cmF0ZWdpZXMvYWJzdHJhY3RfcG9wdXBfcmVkaXJlY3Rfb3BlcmF0aW9uLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9zdHJhdGVnaWVzL3BvcHVwLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9zdHJhdGVnaWVzL3JlZGlyZWN0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9zdHJhdGVnaWVzL3JlZGlyZWN0LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvY29yZS9hdXRoL2F1dGhfZXZlbnRfbWFuYWdlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2FwaS9wcm9qZWN0X2NvbmZpZy9nZXRfcHJvamVjdF9jb25maWcudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL3NyYy9jb3JlL3V0aWwvdmFsaWRhdGVfb3JpZ2luLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9pZnJhbWUvZ2FwaS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvaWZyYW1lL2lmcmFtZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvdXRpbC9wb3B1cC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvdXRpbC9oYW5kbGVyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9wb3B1cF9yZWRpcmVjdC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL21mYS9tZmFfYXNzZXJ0aW9uLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fYnJvd3Nlci9tZmEvYXNzZXJ0aW9ucy9waG9uZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvYXV0aC9maXJlYmFzZV9pbnRlcm5hbC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL2NvcmUvYXV0aC9yZWdpc3Rlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2Jyb3dzZXIvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAtY29tcGF0L3NyYy9maXJlYmFzZUFwcC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC1jb21wYXQvc3JjL2Vycm9ycy50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC1jb21wYXQvc3JjL2ZpcmViYXNlTmFtZXNwYWNlQ29yZS50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC1jb21wYXQvc3JjL2ZpcmViYXNlTmFtZXNwYWNlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwLWNvbXBhdC9zcmMvbG9nZ2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwLWNvbXBhdC9zcmMvcmVnaXN0ZXJDb3JlQ29tcG9uZW50cy50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC1jb21wYXQvc3JjL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9jb21wYXQvYXBwL2luZGV4LnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fY29yZG92YS9wbHVnaW5zLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fY29yZG92YS9wb3B1cF9yZWRpcmVjdC91dGlscy50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvc3JjL3BsYXRmb3JtX2NvcmRvdmEvcG9wdXBfcmVkaXJlY3QvZXZlbnRzLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC9zcmMvcGxhdGZvcm1fY29yZG92YS9wb3B1cF9yZWRpcmVjdC9wb3B1cF9yZWRpcmVjdC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvaW50ZXJuYWwvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoLWNvbXBhdC9zcmMvcGxhdGZvcm0udHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoLWNvbXBhdC9zcmMvcGVyc2lzdGVuY2UudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoLWNvbXBhdC9zcmMvcG9wdXBfcmVkaXJlY3QudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoLWNvbXBhdC9zcmMvd3JhcC50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgtY29tcGF0L3NyYy91c2VyX2NyZWRlbnRpYWwudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoLWNvbXBhdC9zcmMvdXNlci50cyIsICIuLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgtY29tcGF0L3NyYy9hdXRoLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC1jb21wYXQvc3JjL3Bob25lX2F1dGhfcHJvdmlkZXIudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoLWNvbXBhdC9zcmMvcmVjYXB0Y2hhX3ZlcmlmaWVyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXV0aC1jb21wYXQvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2NvbXBhdC9hdXRoL2Rpc3QvaW5kZXguZXNtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9kaWFsb2ctcG9seWZpbGwvZGlhbG9nLXBvbHlmaWxsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9maXJlYmFzZXVpL2Rpc3QvbnBtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvaW5kZXgudHMiLCAiLi4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hdXRoL2Rpc3QvZXNtMjAxNy9pbmRleC5qcyIsICIuLi9maXJlYmFzZS5jb25maWcuanMiLCAiLi4vc3JjL2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgQ09OU1RBTlRTID0ge1xuICAvKipcbiAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXG4gICAqL1xuICBOT0RFX0NMSUVOVDogZmFsc2UsXG4gIC8qKlxuICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIEFkbWluIE5vZGUuanMgU0RLLlxuICAgKi9cbiAgTk9ERV9BRE1JTjogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXG4gICAqL1xuICBTREtfVkVSU0lPTjogJyR7SlNDT1JFX1ZFUlNJT059J1xufTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDT05TVEFOVFMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbi8qKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwcm92aWRlZCBhc3NlcnRpb24gaXMgZmFsc3lcbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydCA9IGZ1bmN0aW9uIChhc3NlcnRpb246IHVua25vd24sIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIWFzc2VydGlvbikge1xuICAgIHRocm93IGFzc2VydGlvbkVycm9yKG1lc3NhZ2UpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2U6IHN0cmluZyk6IEVycm9yIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICAnRmlyZWJhc2UgRGF0YWJhc2UgKCcgK1xuICAgICAgQ09OU1RBTlRTLlNES19WRVJTSU9OICtcbiAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xuICAgICAgbWVzc2FnZVxuICApO1xufTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcbiAgY29uc3Qgb3V0OiBudW1iZXJbXSA9IFtdO1xuICBsZXQgcCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgb3V0W3ArK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJlxuICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXG4gICAgICAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmYzAwKSA9PT0gMHhkYzAwXG4gICAgKSB7XG4gICAgICAvLyBTdXJyb2dhdGUgUGFpclxuICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gMTgpIHwgMjQwO1xuICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogVHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBpbnRvIHRoZSBzdHJpbmcgZ2l2ZW4gYnkgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXG4gKiBAcGFyYW0gYnl0ZXMgQXJyYXkgb2YgbnVtYmVycyByZXByZXNlbnRpbmcgY2hhcmFjdGVycy5cbiAqIEByZXR1cm4gU3RyaW5naWZpY2F0aW9uIG9mIHRoZSBhcnJheS5cbiAqL1xuY29uc3QgYnl0ZUFycmF5VG9TdHJpbmcgPSBmdW5jdGlvbiAoYnl0ZXM6IG51bWJlcltdKTogc3RyaW5nIHtcbiAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcbiAgY29uc3Qgb3V0OiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgcG9zID0gMCxcbiAgICBjID0gMDtcbiAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xuICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xuICAgIGlmIChjMSA8IDEyOCkge1xuICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMxKTtcbiAgICB9IGVsc2UgaWYgKGMxID4gMTkxICYmIGMxIDwgMjI0KSB7XG4gICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMzEpIDw8IDYpIHwgKGMyICYgNjMpKTtcbiAgICB9IGVsc2UgaWYgKGMxID4gMjM5ICYmIGMxIDwgMzY1KSB7XG4gICAgICAvLyBTdXJyb2dhdGUgUGFpclxuICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XG4gICAgICBjb25zdCBjMyA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xuICAgICAgY29uc3QgdSA9XG4gICAgICAgICgoKGMxICYgNykgPDwgMTgpIHwgKChjMiAmIDYzKSA8PCAxMikgfCAoKGMzICYgNjMpIDw8IDYpIHwgKGM0ICYgNjMpKSAtXG4gICAgICAgIDB4MTAwMDA7XG4gICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkODAwICsgKHUgPj4gMTApKTtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGRjMDAgKyAodSAmIDEwMjMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYzIgPSBieXRlc1twb3MrK107XG4gICAgICBjb25zdCBjMyA9IGJ5dGVzW3BvcysrXTtcbiAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgICAgKChjMSAmIDE1KSA8PCAxMikgfCAoKGMyICYgNjMpIDw8IDYpIHwgKGMzICYgNjMpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0LmpvaW4oJycpO1xufTtcblxuaW50ZXJmYWNlIEJhc2U2NCB7XG4gIGJ5dGVUb0NoYXJNYXBfOiB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB9IHwgbnVsbDtcbiAgY2hhclRvQnl0ZU1hcF86IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gfCBudWxsO1xuICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IHsgW2tleTogbnVtYmVyXTogc3RyaW5nIH0gfCBudWxsO1xuICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gfCBudWxsO1xuICBFTkNPREVEX1ZBTFNfQkFTRTogc3RyaW5nO1xuICByZWFkb25seSBFTkNPREVEX1ZBTFM6IHN0cmluZztcbiAgcmVhZG9ubHkgRU5DT0RFRF9WQUxTX1dFQlNBRkU6IHN0cmluZztcbiAgSEFTX05BVElWRV9TVVBQT1JUOiBib29sZWFuO1xuICBlbmNvZGVCeXRlQXJyYXkoaW5wdXQ6IG51bWJlcltdIHwgVWludDhBcnJheSwgd2ViU2FmZT86IGJvb2xlYW4pOiBzdHJpbmc7XG4gIGVuY29kZVN0cmluZyhpbnB1dDogc3RyaW5nLCB3ZWJTYWZlPzogYm9vbGVhbik6IHN0cmluZztcbiAgZGVjb2RlU3RyaW5nKGlucHV0OiBzdHJpbmcsIHdlYlNhZmU6IGJvb2xlYW4pOiBzdHJpbmc7XG4gIGRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0OiBzdHJpbmcsIHdlYlNhZmU6IGJvb2xlYW4pOiBudW1iZXJbXTtcbiAgaW5pdF8oKTogdm9pZDtcbn1cblxuLy8gV2UgZGVmaW5lIGl0IGFzIGFuIG9iamVjdCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjbGFzcyBiZWNhdXNlIGEgY2xhc3MgY29tcGlsZWQgZG93biB0byBlczUgY2FuJ3Rcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXG4vLyBTdGF0aWMgbG9va3VwIG1hcHMsIGxhemlseSBwb3B1bGF0ZWQgYnkgaW5pdF8oKVxuZXhwb3J0IGNvbnN0IGJhc2U2NDogQmFzZTY0ID0ge1xuICAvKipcbiAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgYnl0ZVRvQ2hhck1hcF86IG51bGwsXG5cbiAgLyoqXG4gICAqIE1hcHMgY2hhcmFjdGVycyB0byBieXRlcy5cbiAgICovXG4gIGNoYXJUb0J5dGVNYXBfOiBudWxsLFxuXG4gIC8qKlxuICAgKiBNYXBzIGJ5dGVzIHRvIHdlYnNhZmUgY2hhcmFjdGVycy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJ5dGVUb0NoYXJNYXBXZWJTYWZlXzogbnVsbCxcblxuICAvKipcbiAgICogTWFwcyB3ZWJzYWZlIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IG51bGwsXG5cbiAgLyoqXG4gICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LCBzaGFyZWQgYmV0d2VlblxuICAgKiBFTkNPREVEX1ZBTFMgYW5kIEVOQ09ERURfVkFMU19XRUJTQUZFXG4gICAqL1xuICBFTkNPREVEX1ZBTFNfQkFTRTpcbiAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonICsgJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JyArICcwMTIzNDU2Nzg5JyxcblxuICAvKipcbiAgICogT3VyIGRlZmF1bHQgYWxwaGFiZXQuIFZhbHVlIDY0ICg9KSBpcyBzcGVjaWFsOyBpdCBtZWFucyBcIm5vdGhpbmcuXCJcbiAgICovXG4gIGdldCBFTkNPREVEX1ZBTFMoKSB7XG4gICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnKy89JztcbiAgfSxcblxuICAvKipcbiAgICogT3VyIHdlYnNhZmUgYWxwaGFiZXQuXG4gICAqL1xuICBnZXQgRU5DT0RFRF9WQUxTX1dFQlNBRkUoKSB7XG4gICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnLV8uJztcbiAgfSxcblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGJyb3dzZXIgc3VwcG9ydHMgdGhlIGF0b2IgYW5kIGJ0b2EgZnVuY3Rpb25zLiBUaGlzIGV4dGVuc2lvblxuICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXG4gICAqIEFTU1VNRV8qIHZhcmlhYmxlcyB0byBhdm9pZCBwdWxsaW5nIGluIHRoZSBmdWxsIHVzZXJhZ2VudCBkZXRlY3Rpb24gbGlicmFyeVxuICAgKiBidXQgc3RpbGwgYWxsb3dpbmcgdGhlIHN0YW5kYXJkIHBlci1icm93c2VyIGNvbXBpbGF0aW9ucy5cbiAgICpcbiAgICovXG4gIEhBU19OQVRJVkVfU1VQUE9SVDogdHlwZW9mIGF0b2IgPT09ICdmdW5jdGlvbicsXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1lbmNvZGUgYW4gYXJyYXkgb2YgYnl0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBBbiBhcnJheSBvZiBieXRlcyAobnVtYmVycyB3aXRoXG4gICAqICAgICB2YWx1ZSBpbiBbMCwgMjU1XSkgdG8gZW5jb2RlLlxuICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcbiAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxuICAgKiBAcmV0dXJuIFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXG4gICAqL1xuICBlbmNvZGVCeXRlQXJyYXkoaW5wdXQ6IG51bWJlcltdIHwgVWludDhBcnJheSwgd2ViU2FmZT86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHRocm93IEVycm9yKCdlbmNvZGVCeXRlQXJyYXkgdGFrZXMgYW4gYXJyYXkgYXMgYSBwYXJhbWV0ZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRfKCk7XG5cbiAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxuICAgICAgPyB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlXyFcbiAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXyE7XG5cbiAgICBjb25zdCBvdXRwdXQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XG4gICAgICBjb25zdCBoYXZlQnl0ZTIgPSBpICsgMSA8IGlucHV0Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gaW5wdXRbaSArIDFdIDogMDtcbiAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xuICAgICAgY29uc3QgYnl0ZTMgPSBoYXZlQnl0ZTMgPyBpbnB1dFtpICsgMl0gOiAwO1xuXG4gICAgICBjb25zdCBvdXRCeXRlMSA9IGJ5dGUxID4+IDI7XG4gICAgICBjb25zdCBvdXRCeXRlMiA9ICgoYnl0ZTEgJiAweDAzKSA8PCA0KSB8IChieXRlMiA+PiA0KTtcbiAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcbiAgICAgIGxldCBvdXRCeXRlNCA9IGJ5dGUzICYgMHgzZjtcblxuICAgICAgaWYgKCFoYXZlQnl0ZTMpIHtcbiAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcblxuICAgICAgICBpZiAoIWhhdmVCeXRlMikge1xuICAgICAgICAgIG91dEJ5dGUzID0gNjQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgb3V0cHV0LnB1c2goXG4gICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTFdLFxuICAgICAgICBieXRlVG9DaGFyTWFwW291dEJ5dGUyXSxcbiAgICAgICAgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlM10sXG4gICAgICAgIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTRdXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1lbmNvZGUgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXG4gICAqIEBwYXJhbSB3ZWJTYWZlIElmIHRydWUsIHdlIHNob3VsZCB1c2UgdGhlXG4gICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cbiAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICAgKi9cbiAgZW5jb2RlU3RyaW5nKGlucHV0OiBzdHJpbmcsIHdlYlNhZmU/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxuICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcbiAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcbiAgICAgIHJldHVybiBidG9hKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlQnl0ZUFycmF5KHN0cmluZ1RvQnl0ZUFycmF5KGlucHV0KSwgd2ViU2FmZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCB0byBkZWNvZGUuXG4gICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGVcbiAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxuICAgKiBAcmV0dXJuIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXG4gICAqL1xuICBkZWNvZGVTdHJpbmcoaW5wdXQ6IHN0cmluZywgd2ViU2FmZTogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgLy8gU2hvcnRjdXQgZm9yIE1vemlsbGEgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRcbiAgICAvLyBhIG5hdGl2ZSBiYXNlNjQgZW5jb2RlciBpbiB0aGUgZm9ybSBvZiBcImJ0b2EvYXRvYlwiXG4gICAgaWYgKHRoaXMuSEFTX05BVElWRV9TVVBQT1JUICYmICF3ZWJTYWZlKSB7XG4gICAgICByZXR1cm4gYXRvYihpbnB1dCk7XG4gICAgfVxuICAgIHJldHVybiBieXRlQXJyYXlUb1N0cmluZyh0aGlzLmRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJhc2U2NC1kZWNvZGUgYSBzdHJpbmcuXG4gICAqXG4gICAqIEluIGJhc2UtNjQgZGVjb2RpbmcsIGdyb3VwcyBvZiBmb3VyIGNoYXJhY3RlcnMgYXJlIGNvbnZlcnRlZCBpbnRvIHRocmVlXG4gICAqIGJ5dGVzLiAgSWYgdGhlIGVuY29kZXIgZGlkIG5vdCBhcHBseSBwYWRkaW5nLCB0aGUgaW5wdXQgbGVuZ3RoIG1heSBub3RcbiAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBsYXN0IGdyb3VwIHdpbGwgaGF2ZSBmZXdlciB0aGFuIDQgY2hhcmFjdGVycywgYW5kXG4gICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXG4gICAqIHRvIG9uZSBieXRlLiAgSWYgdGhlIGdyb3VwIGhhcyB0aHJlZSBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzIHRvIHR3byBieXRlcy5cbiAgICpcbiAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cbiAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZSB3ZWItc2FmZSBhbHBoYWJldC5cbiAgICogQHJldHVybiBieXRlcyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXG4gICAqL1xuICBkZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dDogc3RyaW5nLCB3ZWJTYWZlOiBib29sZWFuKTogbnVtYmVyW10ge1xuICAgIHRoaXMuaW5pdF8oKTtcblxuICAgIGNvbnN0IGNoYXJUb0J5dGVNYXAgPSB3ZWJTYWZlXG4gICAgICA/IHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfIVxuICAgICAgOiB0aGlzLmNoYXJUb0J5dGVNYXBfITtcblxuICAgIGNvbnN0IG91dHB1dDogbnVtYmVyW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyApIHtcbiAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XG5cbiAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XG4gICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDA7XG4gICAgICArK2k7XG5cbiAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgPCBpbnB1dC5sZW5ndGg7XG4gICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xuICAgICAgKytpO1xuXG4gICAgICBjb25zdCBoYXZlQnl0ZTQgPSBpIDwgaW5wdXQubGVuZ3RoO1xuICAgICAgY29uc3QgYnl0ZTQgPSBoYXZlQnl0ZTQgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcbiAgICAgICsraTtcblxuICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3V0Qnl0ZTEgPSAoYnl0ZTEgPDwgMikgfCAoYnl0ZTIgPj4gNCk7XG4gICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XG5cbiAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcbiAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUyIDw8IDQpICYgMHhmMCkgfCAoYnl0ZTMgPj4gMik7XG4gICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUyKTtcblxuICAgICAgICBpZiAoYnl0ZTQgIT09IDY0KSB7XG4gICAgICAgICAgY29uc3Qgb3V0Qnl0ZTMgPSAoKGJ5dGUzIDw8IDYpICYgMHhjMCkgfCBieXRlNDtcbiAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxuICAgKiBhY2Nlc3NpbmcgYW55IG9mIHRoZSBzdGF0aWMgbWFwIHZhcmlhYmxlcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGluaXRfKCkge1xuICAgIGlmICghdGhpcy5ieXRlVG9DaGFyTWFwXykge1xuICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xuICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwXyA9IHt9O1xuICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV8gPSB7fTtcbiAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XG5cbiAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuRU5DT0RFRF9WQUxTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XG4gICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5ieXRlVG9DaGFyTWFwX1tpXV0gPSBpO1xuICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXSA9IHRoaXMuRU5DT0RFRF9WQUxTX1dFQlNBRkUuY2hhckF0KGkpO1xuICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZyB3aGVuIGRlY29kaW5nIGFuZCBjb3JyZWN0bHkgZGVjb2RlIGJvdGggZW5jb2RpbmdzLlxuICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcbiAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBVUkwtc2FmZSBiYXNlNjQgZW5jb2RpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHV0ZjhCeXRlcyA9IHN0cmluZ1RvQnl0ZUFycmF5KHN0cik7XG4gIHJldHVybiBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KHV0ZjhCeXRlcywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFVSTC1zYWZlIGJhc2U2NCBlbmNvZGluZyAod2l0aG91dCBcIi5cIiBwYWRkaW5nIGluIHRoZSBlbmQpLlxuICogZS5nLiBVc2VkIGluIEpTT04gV2ViIFRva2VuIChKV1QpIHBhcnRzLlxuICovXG5leHBvcnQgY29uc3QgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAvLyBVc2UgYmFzZTY0dXJsIGVuY29kaW5nIGFuZCByZW1vdmUgcGFkZGluZyBpbiB0aGUgZW5kIChkb3QgY2hhcmFjdGVycykuXG4gIHJldHVybiBiYXNlNjRFbmNvZGUoc3RyKS5yZXBsYWNlKC9cXC4vZywgJycpO1xufTtcblxuLyoqXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcbiAqXG4gKiBOT1RFOiBETyBOT1QgdXNlIHRoZSBnbG9iYWwgYXRvYigpIGZ1bmN0aW9uIC0gaXQgZG9lcyBOT1Qgc3VwcG9ydCB0aGVcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxuICpcbiAqIEBwYXJhbSBzdHIgVG8gYmUgZGVjb2RlZFxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcbiAqL1xuZXhwb3J0IGNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICB0cnkge1xuICAgIHJldHVybiBiYXNlNjQuZGVjb2RlU3RyaW5nKHN0ciwgdHJ1ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdiYXNlNjREZWNvZGUgZmFpbGVkOiAnLCBlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBEbyBhIGRlZXAtY29weSBvZiBiYXNpYyBKYXZhU2NyaXB0IE9iamVjdHMgb3IgQXJyYXlzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcENvcHk8VD4odmFsdWU6IFQpOiBUIHtcbiAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSkgYXMgVDtcbn1cblxuLyoqXG4gKiBDb3B5IHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgdG8gdGFyZ2V0IChyZWN1cnNpdmVseSBhbGxvd3MgZXh0ZW5zaW9uXG4gKiBvZiBPYmplY3RzIGFuZCBBcnJheXMpLiAgU2NhbGFyIHZhbHVlcyBpbiB0aGUgdGFyZ2V0IGFyZSBvdmVyLXdyaXR0ZW4uXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXG4gKiAoYW5kIHJldHVybmVkKS5cbiAqXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cbiAqIHRoYXQgbmFtZXNwYWNlLSBsaWtlIGRpY3Rpb25hcmllcyBhcmUgbWVyZ2VkLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXG4gKiB0aGUgc291cmNlIE9iamVjdCBhcmUgY29waWVkIG9udG8gaXQgYXMgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhlIEZ1bmN0aW9uLlxuICpcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0OiB1bmtub3duLCBzb3VyY2U6IHVua25vd24pOiB1bmtub3duIHtcbiAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBzd2l0Y2ggKHNvdXJjZS5jb25zdHJ1Y3Rvcikge1xuICAgIGNhc2UgRGF0ZTpcbiAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXG4gICAgICAvLyBwcm9wZXJ0aWVzIC0gdGhleSB3aWxsIGJlIGxvc3QhXG4gICAgICBjb25zdCBkYXRlVmFsdWUgPSBzb3VyY2UgYXMgRGF0ZTtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlVmFsdWUuZ2V0VGltZSgpKTtcblxuICAgIGNhc2UgT2JqZWN0OlxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhcmdldCA9IHt9O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBcnJheTpcbiAgICAgIC8vIEFsd2F5cyBjb3B5IHRoZSBhcnJheSBzb3VyY2UgYW5kIG92ZXJ3cml0ZSB0aGUgdGFyZ2V0LlxuICAgICAgdGFyZ2V0ID0gW107XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cbiAgICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmb3IgKGNvbnN0IHByb3AgaW4gc291cmNlKSB7XG4gICAgLy8gdXNlIGlzVmFsaWRLZXkgdG8gZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGUgcG9sbHV0aW9uLiBTZWUgaHR0cHM6Ly9zbnlrLmlvL3Z1bG4vU05ZSy1KUy1MT0RBU0gtNDUwMjAyXG4gICAgaWYgKCFzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgIWlzVmFsaWRLZXkocHJvcCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAodGFyZ2V0IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtwcm9wXSA9IGRlZXBFeHRlbmQoXG4gICAgICAodGFyZ2V0IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVtwcm9wXSxcbiAgICAgIChzb3VyY2UgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW3Byb3BdXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGtleSAhPT0gJ19fcHJvdG9fXyc7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGNsYXNzIERlZmVycmVkPFI+IHtcbiAgcHJvbWlzZTogUHJvbWlzZTxSPjtcbiAgcmVqZWN0OiAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkID0gKCkgPT4ge307XG4gIHJlc29sdmU6ICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZSBhcyAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkO1xuICAgICAgdGhpcy5yZWplY3QgPSByZWplY3QgYXMgKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdXIgQVBJIGludGVybmFscyBhcmUgbm90IHByb21pc2VpZmllZCBhbmQgY2Fubm90IGJlY2F1c2Ugb3VyIGNhbGxiYWNrIEFQSXMgaGF2ZSBzdWJ0bGUgZXhwZWN0YXRpb25zIGFyb3VuZFxuICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xuICAgKiBhbmQgcmV0dXJucyBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgd2hpY2ggd2lsbCByZXNvbHZlIG9yIHJlamVjdCB0aGUgRGVmZXJyZWQncyBwcm9taXNlLlxuICAgKi9cbiAgd3JhcENhbGxiYWNrKFxuICAgIGNhbGxiYWNrPzogKGVycm9yPzogdW5rbm93biwgdmFsdWU/OiB1bmtub3duKSA9PiB2b2lkXG4gICk6IChlcnJvcjogdW5rbm93biwgdmFsdWU/OiB1bmtub3duKSA9PiB2b2lkIHtcbiAgICByZXR1cm4gKGVycm9yLCB2YWx1ZT8pID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBBdHRhY2hpbmcgbm9vcCBoYW5kbGVyIGp1c3QgaW4gY2FzZSBkZXZlbG9wZXIgd2Fzbid0IGV4cGVjdGluZ1xuICAgICAgICAvLyBwcm9taXNlc1xuICAgICAgICB0aGlzLnByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuXG4gICAgICAgIC8vIFNvbWUgb2Ygb3VyIGNhbGxiYWNrcyBkb24ndCBleHBlY3QgYSB2YWx1ZSBhbmQgb3VyIG93biB0ZXN0c1xuICAgICAgICAvLyBhc3NlcnQgdGhhdCB0aGUgcGFyYW1ldGVyIGxlbmd0aCBpcyAxXG4gICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyB9IGZyb20gJy4vY3J5cHQnO1xuXG4vLyBGaXJlYmFzZSBBdXRoIHRva2VucyBjb250YWluIHNuYWtlX2Nhc2UgY2xhaW1zIGZvbGxvd2luZyB0aGUgSldUIHN0YW5kYXJkIC8gY29udmVudGlvbi5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuXG5leHBvcnQgdHlwZSBGaXJlYmFzZVNpZ25JblByb3ZpZGVyID1cbiAgfCAnY3VzdG9tJ1xuICB8ICdlbWFpbCdcbiAgfCAncGFzc3dvcmQnXG4gIHwgJ3Bob25lJ1xuICB8ICdhbm9ueW1vdXMnXG4gIHwgJ2dvb2dsZS5jb20nXG4gIHwgJ2ZhY2Vib29rLmNvbSdcbiAgfCAnZ2l0aHViLmNvbSdcbiAgfCAndHdpdHRlci5jb20nXG4gIHwgJ21pY3Jvc29mdC5jb20nXG4gIHwgJ2FwcGxlLmNvbSc7XG5cbmludGVyZmFjZSBGaXJlYmFzZUlkVG9rZW4ge1xuICAvLyBBbHdheXMgc2V0IHRvIGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS9QUk9KRUNUX0lEXG4gIGlzczogc3RyaW5nO1xuXG4gIC8vIEFsd2F5cyBzZXQgdG8gUFJPSkVDVF9JRFxuICBhdWQ6IHN0cmluZztcblxuICAvLyBUaGUgdXNlcidzIHVuaXF1ZSBJRFxuICBzdWI6IHN0cmluZztcblxuICAvLyBUaGUgdG9rZW4gaXNzdWUgdGltZSwgaW4gc2Vjb25kcyBzaW5jZSBlcG9jaFxuICBpYXQ6IG51bWJlcjtcblxuICAvLyBUaGUgdG9rZW4gZXhwaXJ5IHRpbWUsIG5vcm1hbGx5ICdpYXQnICsgMzYwMFxuICBleHA6IG51bWJlcjtcblxuICAvLyBUaGUgdXNlcidzIHVuaXF1ZSBJRC4gTXVzdCBiZSBlcXVhbCB0byAnc3ViJ1xuICB1c2VyX2lkOiBzdHJpbmc7XG5cbiAgLy8gVGhlIHRpbWUgdGhlIHVzZXIgYXV0aGVudGljYXRlZCwgbm9ybWFsbHkgJ2lhdCdcbiAgYXV0aF90aW1lOiBudW1iZXI7XG5cbiAgLy8gVGhlIHNpZ24gaW4gcHJvdmlkZXIsIG9ubHkgc2V0IHdoZW4gdGhlIHByb3ZpZGVyIGlzICdhbm9ueW1vdXMnXG4gIHByb3ZpZGVyX2lkPzogJ2Fub255bW91cyc7XG5cbiAgLy8gVGhlIHVzZXIncyBwcmltYXJ5IGVtYWlsXG4gIGVtYWlsPzogc3RyaW5nO1xuXG4gIC8vIFRoZSB1c2VyJ3MgZW1haWwgdmVyaWZpY2F0aW9uIHN0YXR1c1xuICBlbWFpbF92ZXJpZmllZD86IGJvb2xlYW47XG5cbiAgLy8gVGhlIHVzZXIncyBwcmltYXJ5IHBob25lIG51bWJlclxuICBwaG9uZV9udW1iZXI/OiBzdHJpbmc7XG5cbiAgLy8gVGhlIHVzZXIncyBkaXNwbGF5IG5hbWVcbiAgbmFtZT86IHN0cmluZztcblxuICAvLyBUaGUgdXNlcidzIHByb2ZpbGUgcGhvdG8gVVJMXG4gIHBpY3R1cmU/OiBzdHJpbmc7XG5cbiAgLy8gSW5mb3JtYXRpb24gb24gYWxsIGlkZW50aXRpZXMgbGlua2VkIHRvIHRoaXMgdXNlclxuICBmaXJlYmFzZToge1xuICAgIC8vIFRoZSBwcmltYXJ5IHNpZ24taW4gcHJvdmlkZXJcbiAgICBzaWduX2luX3Byb3ZpZGVyOiBGaXJlYmFzZVNpZ25JblByb3ZpZGVyO1xuXG4gICAgLy8gQSBtYXAgb2YgcHJvdmlkZXJzIHRvIHRoZSB1c2VyJ3MgbGlzdCBvZiB1bmlxdWUgaWRlbnRpZmllcnMgZnJvbVxuICAgIC8vIGVhY2ggcHJvdmlkZXJcbiAgICBpZGVudGl0aWVzPzogeyBbcHJvdmlkZXIgaW4gRmlyZWJhc2VTaWduSW5Qcm92aWRlcl0/OiBzdHJpbmdbXSB9O1xuICB9O1xuXG4gIC8vIEN1c3RvbSBjbGFpbXMgc2V0IGJ5IHRoZSBkZXZlbG9wZXJcbiAgW2NsYWltOiBzdHJpbmddOiB1bmtub3duO1xuXG4gIHVpZD86IG5ldmVyOyAvLyBUcnkgdG8gY2F0Y2ggYSBjb21tb24gbWlzdGFrZSBvZiBcInVpZFwiIChzaG91bGQgYmUgXCJzdWJcIiBpbnN0ZWFkKS5cbn1cblxuZXhwb3J0IHR5cGUgRW11bGF0b3JNb2NrVG9rZW5PcHRpb25zID0gKHsgdXNlcl9pZDogc3RyaW5nIH0gfCB7IHN1Yjogc3RyaW5nIH0pICZcbiAgUGFydGlhbDxGaXJlYmFzZUlkVG9rZW4+O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTW9ja1VzZXJUb2tlbihcbiAgdG9rZW46IEVtdWxhdG9yTW9ja1Rva2VuT3B0aW9ucyxcbiAgcHJvamVjdElkPzogc3RyaW5nXG4pOiBzdHJpbmcge1xuICBpZiAodG9rZW4udWlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nXG4gICAgKTtcbiAgfVxuICAvLyBVbnNlY3VyZWQgSldUcyB1c2UgXCJub25lXCIgYXMgdGhlIGFsZ29yaXRobS5cbiAgY29uc3QgaGVhZGVyID0ge1xuICAgIGFsZzogJ25vbmUnLFxuICAgIHR5cGU6ICdKV1QnXG4gIH07XG5cbiAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcbiAgY29uc3QgaWF0ID0gdG9rZW4uaWF0IHx8IDA7XG4gIGNvbnN0IHN1YiA9IHRva2VuLnN1YiB8fCB0b2tlbi51c2VyX2lkO1xuICBpZiAoIXN1Yikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XG4gIH1cblxuICBjb25zdCBwYXlsb2FkOiBGaXJlYmFzZUlkVG9rZW4gPSB7XG4gICAgLy8gU2V0IGFsbCByZXF1aXJlZCBmaWVsZHMgdG8gZGVjZW50IGRlZmF1bHRzXG4gICAgaXNzOiBgaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tLyR7cHJvamVjdH1gLFxuICAgIGF1ZDogcHJvamVjdCxcbiAgICBpYXQsXG4gICAgZXhwOiBpYXQgKyAzNjAwLFxuICAgIGF1dGhfdGltZTogaWF0LFxuICAgIHN1YixcbiAgICB1c2VyX2lkOiBzdWIsXG4gICAgZmlyZWJhc2U6IHtcbiAgICAgIHNpZ25faW5fcHJvdmlkZXI6ICdjdXN0b20nLFxuICAgICAgaWRlbnRpdGllczoge31cbiAgICB9LFxuXG4gICAgLy8gT3ZlcnJpZGUgd2l0aCB1c2VyIG9wdGlvbnNcbiAgICAuLi50b2tlblxuICB9O1xuXG4gIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxuICBjb25zdCBzaWduYXR1cmUgPSAnJztcbiAgcmV0dXJuIFtcbiAgICBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhKU09OLnN0cmluZ2lmeShoZWFkZXIpKSxcbiAgICBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhKU09OLnN0cmluZ2lmeShwYXlsb2FkKSksXG4gICAgc2lnbmF0dXJlXG4gIF0uam9pbignLicpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXG4gKiBAcmV0dXJuIHVzZXIgYWdlbnQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVQSgpOiBzdHJpbmcge1xuICBpZiAoXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgbmF2aWdhdG9yWyd1c2VyQWdlbnQnXSA9PT0gJ3N0cmluZydcbiAgKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogRGV0ZWN0IENvcmRvdmEgLyBQaG9uZUdhcCAvIElvbmljIGZyYW1ld29ya3Mgb24gYSBtb2JpbGUgZGV2aWNlLlxuICpcbiAqIERlbGliZXJhdGVseSBkb2VzIG5vdCByZWx5IG9uIGNoZWNraW5nIGBmaWxlOi8vYCBVUkxzIChhcyB0aGlzIGZhaWxzIFBob25lR2FwXG4gKiBpbiB0aGUgUmlwcGxlIGVtdWxhdG9yKSBub3IgQ29yZG92YSBgb25EZXZpY2VSZWFkeWAsIHdoaWNoIHdvdWxkIG5vcm1hbGx5XG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gQHRzLWlnbm9yZSBTZXR0aW5nIHVwIGFuIGJyb2FkbHkgYXBwbGljYWJsZSBpbmRleCBzaWduYXR1cmUgZm9yIFdpbmRvd1xuICAgIC8vIGp1c3QgdG8gZGVhbCB3aXRoIHRoaXMgY2FzZSB3b3VsZCBwcm9iYWJseSBiZSBhIGJhZCBpZGVhLlxuICAgICEhKHdpbmRvd1snY29yZG92YSddIHx8IHdpbmRvd1sncGhvbmVnYXAnXSB8fCB3aW5kb3dbJ1Bob25lR2FwJ10pICYmXG4gICAgL2lvc3xpcGhvbmV8aXBvZHxpcGFkfGFuZHJvaWR8YmxhY2tiZXJyeXxpZW1vYmlsZS9pLnRlc3QoZ2V0VUEoKSlcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlY3QgTm9kZS5qcy5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgTm9kZS5qcyBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cbiAqL1xuLy8gTm9kZSBkZXRlY3Rpb24gbG9naWMgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2lsaWFrYW4vZGV0ZWN0LW5vZGUvXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKCk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIHJldHVybiAoXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSdcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGV0ZWN0IEJyb3dzZXIgRW52aXJvbm1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlcigpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGY7XG59XG5cbi8qKlxuICogRGV0ZWN0IGJyb3dzZXIgZXh0ZW5zaW9ucyAoQ2hyb21lIGFuZCBGaXJlZm94IGF0IGxlYXN0KS5cbiAqL1xuaW50ZXJmYWNlIEJyb3dzZXJSdW50aW1lIHtcbiAgaWQ/OiB1bmtub3duO1xufVxuZGVjbGFyZSBjb25zdCBjaHJvbWU6IHsgcnVudGltZT86IEJyb3dzZXJSdW50aW1lIH07XG5kZWNsYXJlIGNvbnN0IGJyb3dzZXI6IHsgcnVudGltZT86IEJyb3dzZXJSdW50aW1lIH07XG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyRXh0ZW5zaW9uKCk6IGJvb2xlYW4ge1xuICBjb25zdCBydW50aW1lID1cbiAgICB0eXBlb2YgY2hyb21lID09PSAnb2JqZWN0J1xuICAgICAgPyBjaHJvbWUucnVudGltZVxuICAgICAgOiB0eXBlb2YgYnJvd3NlciA9PT0gJ29iamVjdCdcbiAgICAgID8gYnJvd3Nlci5ydW50aW1lXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHR5cGVvZiBydW50aW1lID09PSAnb2JqZWN0JyAmJiBydW50aW1lLmlkICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRGV0ZWN0IFJlYWN0IE5hdGl2ZS5cbiAqXG4gKiBAcmV0dXJuIHRydWUgaWYgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWN0TmF0aXZlKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnXG4gICk7XG59XG5cbi8qKiBEZXRlY3RzIEVsZWN0cm9uIGFwcHMuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVjdHJvbigpOiBib29sZWFuIHtcbiAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignRWxlY3Ryb24vJykgPj0gMDtcbn1cblxuLyoqIERldGVjdHMgSW50ZXJuZXQgRXhwbG9yZXIuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJRSgpOiBib29sZWFuIHtcbiAgY29uc3QgdWEgPSBnZXRVQSgpO1xuICByZXR1cm4gdWEuaW5kZXhPZignTVNJRSAnKSA+PSAwIHx8IHVhLmluZGV4T2YoJ1RyaWRlbnQvJykgPj0gMDtcbn1cblxuLyoqIERldGVjdHMgVW5pdmVyc2FsIFdpbmRvd3MgUGxhdGZvcm0gYXBwcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1VXUCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignTVNBcHBIb3N0LycpID49IDA7XG59XG5cbi8qKlxuICogRGV0ZWN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgU0RLIGJ1aWxkIGlzIHRoZSBOb2RlIHZlcnNpb24uXG4gKlxuICogQHJldHVybiB0cnVlIGlmIGl0J3MgdGhlIE5vZGUgU0RLIGJ1aWxkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlU2RrKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gQ09OU1RBTlRTLk5PREVfQ0xJRU5UID09PSB0cnVlIHx8IENPTlNUQU5UUy5OT0RFX0FETUlOID09PSB0cnVlO1xufVxuXG4vKiogUmV0dXJucyB0cnVlIGlmIHdlIGFyZSBydW5uaW5nIGluIFNhZmFyaS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NhZmFyaSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICAhaXNOb2RlKCkgJiZcbiAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdTYWZhcmknKSAmJlxuICAgICFuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdDaHJvbWUnKVxuICApO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XG4gKiBAcmV0dXJuIHRydWUgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbmRleGVkREJBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgaW5kZXhlZERCID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XG4gKiBpZiBlcnJvcnMgb2NjdXIgZHVyaW5nIHRoZSBkYXRhYmFzZSBvcGVuIG9wZXJhdGlvbi5cbiAqXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XG4gKiBwcml2YXRlIGJyb3dzaW5nKVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IHByZUV4aXN0OiBib29sZWFuID0gdHJ1ZTtcbiAgICAgIGNvbnN0IERCX0NIRUNLX05BTUUgPVxuICAgICAgICAndmFsaWRhdGUtYnJvd3Nlci1jb250ZXh0LWZvci1pbmRleGVkZGItYW5hbHl0aWNzLW1vZHVsZSc7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcbiAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xuICAgICAgICAvLyBkZWxldGUgZGF0YWJhc2Ugb25seSB3aGVuIGl0IGRvZXNuJ3QgcHJlLWV4aXN0XG4gICAgICAgIGlmICghcHJlRXhpc3QpIHtcbiAgICAgICAgICBzZWxmLmluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShEQl9DSEVDS19OQU1FKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfTtcbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKCkgPT4ge1xuICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcj8ubWVzc2FnZSB8fCAnJyk7XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICpcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IuY29va2llRW5hYmxlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgYGdsb2JhbFRoaXNgIG9iamVjdC5cbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWwoKTogdHlwZW9mIGdsb2JhbFRoaXMge1xuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0LicpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgU3RhbmRhcmRpemVkIEZpcmViYXNlIEVycm9yLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqICAgLy8gVHlwZXNjcmlwdCBzdHJpbmcgbGl0ZXJhbHMgZm9yIHR5cGUtc2FmZSBjb2Rlc1xuICogICB0eXBlIEVyciA9XG4gKiAgICAgJ3Vua25vd24nIHxcbiAqICAgICAnb2JqZWN0LW5vdC1mb3VuZCdcbiAqICAgICA7XG4gKlxuICogICAvLyBDbG9zdXJlIGVudW0gZm9yIHR5cGUtc2FmZSBlcnJvciBjb2Rlc1xuICogICAvLyBhdC1lbnVtIHtzdHJpbmd9XG4gKiAgIHZhciBFcnIgPSB7XG4gKiAgICAgVU5LTk9XTjogJ3Vua25vd24nLFxuICogICAgIE9CSkVDVF9OT1RfRk9VTkQ6ICdvYmplY3Qtbm90LWZvdW5kJyxcbiAqICAgfVxuICpcbiAqICAgbGV0IGVycm9yczogTWFwPEVyciwgc3RyaW5nPiA9IHtcbiAqICAgICAnZ2VuZXJpYy1lcnJvcic6IFwiVW5rbm93biBlcnJvclwiLFxuICogICAgICdmaWxlLW5vdC1mb3VuZCc6IFwiQ291bGQgbm90IGZpbmQgZmlsZTogeyRmaWxlfVwiLFxuICogICB9O1xuICpcbiAqICAgLy8gVHlwZS1zYWZlIGZ1bmN0aW9uIC0gbXVzdCBwYXNzIGEgdmFsaWQgZXJyb3IgY29kZSBhcyBwYXJhbS5cbiAqICAgbGV0IGVycm9yID0gbmV3IEVycm9yRmFjdG9yeTxFcnI+KCdzZXJ2aWNlJywgJ1NlcnZpY2UnLCBlcnJvcnMpO1xuICpcbiAqICAgLi4uXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuR0VORVJJQyk7XG4gKiAgIC4uLlxuICogICB0aHJvdyBlcnJvci5jcmVhdGUoRXJyLkZJTEVfTk9UX0ZPVU5ELCB7J2ZpbGUnOiBmaWxlTmFtZX0pO1xuICogICAuLi5cbiAqICAgLy8gU2VydmljZTogQ291bGQgbm90IGZpbGUgZmlsZTogZm9vLnR4dCAoc2VydmljZS9maWxlLW5vdC1mb3VuZCkuXG4gKlxuICogICBjYXRjaCAoZSkge1xuICogICAgIGFzc2VydChlLm1lc3NhZ2UgPT09IFwiQ291bGQgbm90IGZpbmQgZmlsZTogZm9vLnR4dC5cIik7XG4gKiAgICAgaWYgKGUuY29kZSA9PT0gJ3NlcnZpY2UvZmlsZS1ub3QtZm91bmQnKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhcIkNvdWxkIG5vdCByZWFkIGZpbGU6IFwiICsgZVsnZmlsZSddKTtcbiAqICAgICB9XG4gKiAgIH1cbiAqL1xuXG5leHBvcnQgdHlwZSBFcnJvck1hcDxFcnJvckNvZGUgZXh0ZW5kcyBzdHJpbmc+ID0ge1xuICByZWFkb25seSBbSyBpbiBFcnJvckNvZGVdOiBzdHJpbmc7XG59O1xuXG5jb25zdCBFUlJPUl9OQU1FID0gJ0ZpcmViYXNlRXJyb3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmluZ0xpa2Uge1xuICB0b1N0cmluZygpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JEYXRhIHtcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuLy8gQmFzZWQgb24gY29kZSBmcm9tOlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqIFRoZSBjdXN0b20gbmFtZSBmb3IgYWxsIEZpcmViYXNlRXJyb3JzLiAqL1xuICByZWFkb25seSBuYW1lID0gRVJST1JfTkFNRTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogVGhlIGVycm9yIGNvZGUgZm9yIHRoaXMgZXJyb3IuICovXG4gICAgcmVhZG9ubHkgY29kZTogc3RyaW5nLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAvKiogQ3VzdG9tIGRhdGEgZm9yIHRoaXMgZXJyb3IuICovXG4gICAgcHVibGljIGN1c3RvbURhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIC8vIEZpeCBGb3IgRVM1XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xuXG4gICAgLy8gTWFpbnRhaW5zIHByb3BlciBzdGFjayB0cmFjZSBmb3Igd2hlcmUgb3VyIGVycm9yIHdhcyB0aHJvd24uXG4gICAgLy8gT25seSBhdmFpbGFibGUgb24gVjguXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckZhY3Rvcnk8XG4gIEVycm9yQ29kZSBleHRlbmRzIHN0cmluZyxcbiAgRXJyb3JQYXJhbXMgZXh0ZW5kcyB7IHJlYWRvbmx5IFtLIGluIEVycm9yQ29kZV0/OiBFcnJvckRhdGEgfSA9IHt9XG4+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlTmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXJyb3JzOiBFcnJvck1hcDxFcnJvckNvZGU+XG4gICkge31cblxuICBjcmVhdGU8SyBleHRlbmRzIEVycm9yQ29kZT4oXG4gICAgY29kZTogSyxcbiAgICAuLi5kYXRhOiBLIGV4dGVuZHMga2V5b2YgRXJyb3JQYXJhbXMgPyBbRXJyb3JQYXJhbXNbS11dIDogW11cbiAgKTogRmlyZWJhc2VFcnJvciB7XG4gICAgY29uc3QgY3VzdG9tRGF0YSA9IChkYXRhWzBdIGFzIEVycm9yRGF0YSkgfHwge307XG4gICAgY29uc3QgZnVsbENvZGUgPSBgJHt0aGlzLnNlcnZpY2V9LyR7Y29kZX1gO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5lcnJvcnNbY29kZV07XG5cbiAgICBjb25zdCBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcbiAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXG4gICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBgJHt0aGlzLnNlcnZpY2VOYW1lfTogJHttZXNzYWdlfSAoJHtmdWxsQ29kZX0pLmA7XG5cbiAgICBjb25zdCBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSwgY3VzdG9tRGF0YSk7XG5cbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRlbXBsYXRlKHRlbXBsYXRlOiBzdHJpbmcsIGRhdGE6IEVycm9yRGF0YSk6IHN0cmluZyB7XG4gIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIChfLCBrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBgPCR7a2V5fT8+YDtcbiAgfSk7XG59XG5cbmNvbnN0IFBBVFRFUk4gPSAvXFx7XFwkKFtefV0rKX0vZztcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEV2YWx1YXRlcyBhIEpTT04gc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cbiAqIEByZXR1cm4geyp9IFRoZSBqYXZhc2NyaXB0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBKU09OLlxuICovXG5leHBvcnQgZnVuY3Rpb24ganNvbkV2YWwoc3RyOiBzdHJpbmcpOiB1bmtub3duIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50aW5nIGEgamF2YXNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0geyp9IGRhdGEgSmF2YXNjcmlwdCBvYmplY3QgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkoZGF0YTogdW5rbm93bik6IHN0cmluZyB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBiYXNlNjREZWNvZGUgfSBmcm9tICcuL2NyeXB0JztcbmltcG9ydCB7IGpzb25FdmFsIH0gZnJvbSAnLi9qc29uJztcblxuaW50ZXJmYWNlIENsYWltcyB7XG4gIFtrZXk6IHN0cmluZ106IHt9O1xufVxuXG5pbnRlcmZhY2UgRGVjb2RlZFRva2VuIHtcbiAgaGVhZGVyOiBvYmplY3Q7XG4gIGNsYWltczogQ2xhaW1zO1xuICBkYXRhOiBvYmplY3Q7XG4gIHNpZ25hdHVyZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBpbnRvIGNvbnN0aXR1ZW50IHBhcnRzLlxuICpcbiAqIE5vdGVzOlxuICogLSBNYXkgcmV0dXJuIHdpdGggaW52YWxpZCAvIGluY29tcGxldGUgY2xhaW1zIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZSA9IGZ1bmN0aW9uICh0b2tlbjogc3RyaW5nKTogRGVjb2RlZFRva2VuIHtcbiAgbGV0IGhlYWRlciA9IHt9LFxuICAgIGNsYWltczogQ2xhaW1zID0ge30sXG4gICAgZGF0YSA9IHt9LFxuICAgIHNpZ25hdHVyZSA9ICcnO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuICAgIGhlYWRlciA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1swXSkgfHwgJycpIGFzIG9iamVjdDtcbiAgICBjbGFpbXMgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMV0pIHx8ICcnKSBhcyBDbGFpbXM7XG4gICAgc2lnbmF0dXJlID0gcGFydHNbMl07XG4gICAgZGF0YSA9IGNsYWltc1snZCddIHx8IHt9O1xuICAgIGRlbGV0ZSBjbGFpbXNbJ2QnXTtcbiAgfSBjYXRjaCAoZSkge31cblxuICByZXR1cm4ge1xuICAgIGhlYWRlcixcbiAgICBjbGFpbXMsXG4gICAgZGF0YSxcbiAgICBzaWduYXR1cmVcbiAgfTtcbn07XG5cbmludGVyZmFjZSBEZWNvZGVkVG9rZW4ge1xuICBoZWFkZXI6IG9iamVjdDtcbiAgY2xhaW1zOiBDbGFpbXM7XG4gIGRhdGE6IG9iamVjdDtcbiAgc2lnbmF0dXJlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyB0aW1lLWJhc2VkIGNsYWltcy4gV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGVcbiAqIHRva2VuIGlzIHdpdGhpbiB0aGUgdGltZSB3aW5kb3cgYXV0aG9yaXplZCBieSB0aGUgJ25iZicgKG5vdC1iZWZvcmUpIGFuZCAnaWF0JyAoaXNzdWVkLWF0KSBjbGFpbXMuXG4gKlxuICogTm90ZXM6XG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgY2xhaW1zOiBDbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcbiAgY29uc3Qgbm93OiBudW1iZXIgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gIGxldCB2YWxpZFNpbmNlOiBudW1iZXIgPSAwLFxuICAgIHZhbGlkVW50aWw6IG51bWJlciA9IDA7XG5cbiAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcbiAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ25iZiddIGFzIG51bWJlcjtcbiAgICB9IGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcbiAgICAgIHZhbGlkU2luY2UgPSBjbGFpbXNbJ2lhdCddIGFzIG51bWJlcjtcbiAgICB9XG5cbiAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdleHAnKSkge1xuICAgICAgdmFsaWRVbnRpbCA9IGNsYWltc1snZXhwJ10gYXMgbnVtYmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0b2tlbiB3aWxsIGV4cGlyZSBhZnRlciAyNGggYnkgZGVmYXVsdFxuICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgICEhbm93ICYmXG4gICAgISF2YWxpZFNpbmNlICYmXG4gICAgISF2YWxpZFVudGlsICYmXG4gICAgbm93ID49IHZhbGlkU2luY2UgJiZcbiAgICBub3cgPD0gdmFsaWRVbnRpbFxuICApO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIHJldHVybnMgaXRzIGlzc3VlZCBhdCB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZS5cbiAqXG4gKiBOb3RlczpcbiAqIC0gTWF5IHJldHVybiBudWxsIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzc3VlZEF0VGltZSA9IGZ1bmN0aW9uICh0b2tlbjogc3RyaW5nKTogbnVtYmVyIHwgbnVsbCB7XG4gIGNvbnN0IGNsYWltczogQ2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XG4gIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XG4gICAgcmV0dXJuIGNsYWltc1snaWF0J10gYXMgbnVtYmVyO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIGNoZWNrcyB0aGUgdmFsaWRpdHkgb2YgaXRzIGZvcm1hdC4gRXhwZWN0cyBhIHZhbGlkIGlzc3VlZC1hdCB0aW1lLlxuICpcbiAqIE5vdGVzOlxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxuICovXG5leHBvcnQgY29uc3QgaXNWYWxpZEZvcm1hdCA9IGZ1bmN0aW9uICh0b2tlbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUodG9rZW4pLFxuICAgIGNsYWltcyA9IGRlY29kZWQuY2xhaW1zO1xuXG4gIHJldHVybiAhIWNsYWltcyAmJiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpO1xufTtcblxuLyoqXG4gKiBBdHRlbXB0cyB0byBwZWVyIGludG8gYW4gYXV0aCB0b2tlbiBhbmQgZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWRtaW4gYXV0aCB0b2tlbiBieSBsb29raW5nIGF0IHRoZSBjbGFpbXMgcG9ydGlvbi5cbiAqXG4gKiBOb3RlczpcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW46IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBjbGFpbXM6IENsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xuICByZXR1cm4gdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zWydhZG1pbiddID09PSB0cnVlO1xufTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnM8VCBleHRlbmRzIG9iamVjdD4ob2JqOiBULCBrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhZmVHZXQ8VCBleHRlbmRzIG9iamVjdCwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICBvYmo6IFQsXG4gIGtleTogS1xuKTogVFtLXSB8IHVuZGVmaW5lZCB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkob2JqOiBvYmplY3QpOiBvYmogaXMge30ge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcDxLIGV4dGVuZHMgc3RyaW5nLCBWLCBVPihcbiAgb2JqOiB7IFtrZXkgaW4gS106IFYgfSxcbiAgZm46ICh2YWx1ZTogViwga2V5OiBLLCBvYmo6IHsgW2tleSBpbiBLXTogViB9KSA9PiBVLFxuICBjb250ZXh0T2JqPzogdW5rbm93blxuKTogeyBba2V5IGluIEtdOiBVIH0ge1xuICBjb25zdCByZXM6IFBhcnRpYWw8eyBba2V5IGluIEtdOiBVIH0+ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGZuLmNhbGwoY29udGV4dE9iaiwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcyBhcyB7IFtrZXkgaW4gS106IFUgfTtcbn1cblxuLyoqXG4gKiBEZWVwIGVxdWFsIHR3byBvYmplY3RzLiBTdXBwb3J0IEFycmF5cyBhbmQgT2JqZWN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChhOiBvYmplY3QsIGI6IG9iamVjdCk6IGJvb2xlYW4ge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgZm9yIChjb25zdCBrIG9mIGFLZXlzKSB7XG4gICAgaWYgKCFiS2V5cy5pbmNsdWRlcyhrKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGFQcm9wID0gKGEgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tdO1xuICAgIGNvbnN0IGJQcm9wID0gKGIgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pW2tdO1xuICAgIGlmIChpc09iamVjdChhUHJvcCkgJiYgaXNPYmplY3QoYlByb3ApKSB7XG4gICAgICBpZiAoIWRlZXBFcXVhbChhUHJvcCwgYlByb3ApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFQcm9wICE9PSBiUHJvcCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgayBvZiBiS2V5cykge1xuICAgIGlmICghYUtleXMuaW5jbHVkZXMoaykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nOiB1bmtub3duKTogdGhpbmcgaXMgb2JqZWN0IHtcbiAgcmV0dXJuIHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxuICogcGFyYW1zIG9iamVjdCAoZS5nLiB7YXJnOiAndmFsJywgYXJnMjogJ3ZhbDInfSlcbiAqIE5vdGU6IFlvdSBtdXN0IHByZXBlbmQgaXQgd2l0aCA/IHdoZW4gYWRkaW5nIGl0IHRvIGEgVVJMLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnlzdHJpbmdQYXJhbXM6IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyO1xufSk6IHN0cmluZyB7XG4gIGNvbnN0IHBhcmFtcyA9IFtdO1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhxdWVyeXN0cmluZ1BhcmFtcykpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlLmZvckVhY2goYXJyYXlWYWwgPT4ge1xuICAgICAgICBwYXJhbXMucHVzaChcbiAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChhcnJheVZhbClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgcXVlcnlzdHJpbmcgKGUuZy4gP2FyZz12YWwmYXJnMj12YWwyKSBpbnRvIGEgcGFyYW1zIG9iamVjdFxuICogKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeXN0cmluZ0RlY29kZShxdWVyeXN0cmluZzogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gIGNvbnN0IG9iajogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBjb25zdCB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XG5cbiAgdG9rZW5zLmZvckVhY2godG9rZW4gPT4ge1xuICAgIGlmICh0b2tlbikge1xuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gdG9rZW4uc3BsaXQoJz0nKTtcbiAgICAgIG9ialtkZWNvZGVVUklDb21wb25lbnQoa2V5KV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogRXh0cmFjdCB0aGUgcXVlcnkgc3RyaW5nIHBhcnQgb2YgYSBVUkwsIGluY2x1ZGluZyB0aGUgbGVhZGluZyBxdWVzdGlvbiBtYXJrIChpZiBwcmVzZW50KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RRdWVyeXN0cmluZyh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHF1ZXJ5U3RhcnQgPSB1cmwuaW5kZXhPZignPycpO1xuICBpZiAoIXF1ZXJ5U3RhcnQpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29uc3QgZnJhZ21lbnRTdGFydCA9IHVybC5pbmRleE9mKCcjJywgcXVlcnlTdGFydCk7XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKFxuICAgIHF1ZXJ5U3RhcnQsXG4gICAgZnJhZ21lbnRTdGFydCA+IDAgPyBmcmFnbWVudFN0YXJ0IDogdW5kZWZpbmVkXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cbiAqIFZhcmlhYmxlIG5hbWVzIGZvbGxvdyB0aGUgbm90YXRpb24gaW4gRklQUyBQVUIgMTgwLTM6XG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cbiAqXG4gKiBVc2FnZTpcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xuICogICBzaGExLnVwZGF0ZShieXRlcyk7XG4gKiAgIHZhciBoYXNoID0gc2hhMS5kaWdlc3QoKTtcbiAqXG4gKiBQZXJmb3JtYW5jZTpcbiAqICAgQ2hyb21lIDIzOiAgIH40MDAgTWJpdC9zXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xuICpcbiAqL1xuXG4vKipcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBUaGUgcHJvcGVydGllcyBkZWNsYXJlZCBoZXJlIGFyZSBkaXNjdXNzZWQgaW4gdGhlIGFib3ZlIGFsZ29yaXRobSBkb2N1bWVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGZpbmFsXG4gKiBAc3RydWN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTaGExIHtcbiAgLyoqXG4gICAqIEhvbGRzIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgYWNjdW11bGF0ZWQgdmFyaWFibGVzIGEtZSBpbiB0aGUgY29tcHJlc3NfXG4gICAqIGZ1bmN0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBjaGFpbl86IG51bWJlcltdID0gW107XG5cbiAgLyoqXG4gICAqIEEgYnVmZmVyIGhvbGRpbmcgdGhlIHBhcnRpYWxseSBjb21wdXRlZCBoYXNoIHJlc3VsdC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgYnVmXzogbnVtYmVyW10gPSBbXTtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXG4gICAqIGFzIHRoZSBtZXNzYWdlIHNjaGVkdWxlIGluIHRoZSBkb2NzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBXXzogbnVtYmVyW10gPSBbXTtcblxuICAvKipcbiAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHByaXZhdGUgcGFkXzogbnVtYmVyW10gPSBbXTtcblxuICAvKipcbiAgICogQHByaXZhdGUge251bWJlcn1cbiAgICovXG4gIHByaXZhdGUgaW5idWZfOiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZSB7bnVtYmVyfVxuICAgKi9cbiAgcHJpdmF0ZSB0b3RhbF86IG51bWJlciA9IDA7XG5cbiAgYmxvY2tTaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ibG9ja1NpemUgPSA1MTIgLyA4O1xuXG4gICAgdGhpcy5wYWRfWzBdID0gMTI4O1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5ibG9ja1NpemU7ICsraSkge1xuICAgICAgdGhpcy5wYWRfW2ldID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmNoYWluX1swXSA9IDB4Njc0NTIzMDE7XG4gICAgdGhpcy5jaGFpbl9bMV0gPSAweGVmY2RhYjg5O1xuICAgIHRoaXMuY2hhaW5fWzJdID0gMHg5OGJhZGNmZTtcbiAgICB0aGlzLmNoYWluX1szXSA9IDB4MTAzMjU0NzY7XG4gICAgdGhpcy5jaGFpbl9bNF0gPSAweGMzZDJlMWYwO1xuXG4gICAgdGhpcy5pbmJ1Zl8gPSAwO1xuICAgIHRoaXMudG90YWxfID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBjb21wcmVzcyBoZWxwZXIgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSBidWYgQmxvY2sgdG8gY29tcHJlc3MuXG4gICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29tcHJlc3NfKGJ1ZjogbnVtYmVyW10gfCBVaW50OEFycmF5IHwgc3RyaW5nLCBvZmZzZXQ/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBjb25zdCBXID0gdGhpcy5XXztcblxuICAgIC8vIGdldCAxNiBiaWcgZW5kaWFuIHdvcmRzXG4gICAgaWYgKHR5cGVvZiBidWYgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogW2J1ZyA4MTQwMTIyXSBSZWNlbnQgdmVyc2lvbnMgb2YgU2FmYXJpIGZvciBNYWMgT1MgYW5kIGlPU1xuICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxuICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxuICAgICAgICAvLyBjb3JyZWN0bmVzcyBhbmQgd2hpY2ggaXMgYWZmZWN0ZWQgYnkgdGhpcyBidWcsIHNvIEkndmUgcmVtb3ZlZCBhbGwgdXNlc1xuICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XG4gICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcbiAgICAgICAgLy8gKGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDkwMzYpIGhhcyBiZWVuIGZpeGVkIGFuZFxuICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXG4gICAgICAgIFdbaV0gPVxuICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XG4gICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDEpIDw8IDE2KSB8XG4gICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDgpIHxcbiAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcbiAgICAgICAgb2Zmc2V0ICs9IDQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBXW2ldID1cbiAgICAgICAgICAoYnVmW29mZnNldF0gPDwgMjQpIHxcbiAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgICAgICAgKGJ1ZltvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgICAgICAgYnVmW29mZnNldCArIDNdO1xuICAgICAgICBvZmZzZXQgKz0gNDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcbiAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XG4gICAgICBjb25zdCB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcbiAgICAgIFdbaV0gPSAoKHQgPDwgMSkgfCAodCA+Pj4gMzEpKSAmIDB4ZmZmZmZmZmY7XG4gICAgfVxuXG4gICAgbGV0IGEgPSB0aGlzLmNoYWluX1swXTtcbiAgICBsZXQgYiA9IHRoaXMuY2hhaW5fWzFdO1xuICAgIGxldCBjID0gdGhpcy5jaGFpbl9bMl07XG4gICAgbGV0IGQgPSB0aGlzLmNoYWluX1szXTtcbiAgICBsZXQgZSA9IHRoaXMuY2hhaW5fWzRdO1xuICAgIGxldCBmLCBrO1xuXG4gICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODA7IGkrKykge1xuICAgICAgaWYgKGkgPCA0MCkge1xuICAgICAgICBpZiAoaSA8IDIwKSB7XG4gICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xuICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XG4gICAgICAgICAgayA9IDB4NmVkOWViYTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpIDwgNjApIHtcbiAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XG4gICAgICAgICAgayA9IDB4OGYxYmJjZGM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZiA9IGIgXiBjIF4gZDtcbiAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSB0O1xuICAgIH1cblxuICAgIHRoaXMuY2hhaW5fWzBdID0gKHRoaXMuY2hhaW5fWzBdICsgYSkgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzFdID0gKHRoaXMuY2hhaW5fWzFdICsgYikgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzJdID0gKHRoaXMuY2hhaW5fWzJdICsgYykgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzNdID0gKHRoaXMuY2hhaW5fWzNdICsgZCkgJiAweGZmZmZmZmZmO1xuICAgIHRoaXMuY2hhaW5fWzRdID0gKHRoaXMuY2hhaW5fWzRdICsgZSkgJiAweGZmZmZmZmZmO1xuICB9XG5cbiAgdXBkYXRlKGJ5dGVzPzogbnVtYmVyW10gfCBVaW50OEFycmF5IHwgc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyBUT0RPKGpvaG5sZW56KTogdGlnaHRlbiB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlIGFuZCByZW1vdmUgdGhpcyBjaGVja1xuICAgIGlmIChieXRlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgbGVuZ3RoTWludXNCbG9jayA9IGxlbmd0aCAtIHRoaXMuYmxvY2tTaXplO1xuICAgIGxldCBuID0gMDtcbiAgICAvLyBVc2luZyBsb2NhbCBpbnN0ZWFkIG9mIG1lbWJlciB2YXJpYWJsZXMgZ2l2ZXMgfjUlIHNwZWVkdXAgb24gRmlyZWZveCAxNi5cbiAgICBjb25zdCBidWYgPSB0aGlzLmJ1Zl87XG4gICAgbGV0IGluYnVmID0gdGhpcy5pbmJ1Zl87XG5cbiAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxuICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBXaGVuIHdlIGhhdmUgbm8gZGF0YSBpbiB0aGUgYmxvY2sgdG8gdG9wIHVwLCB3ZSBjYW4gZGlyZWN0bHkgcHJvY2VzcyB0aGVcbiAgICAgIC8vIGlucHV0IGJ1ZmZlciAoYXNzdW1pbmcgaXQgY29udGFpbnMgc3VmZmljaWVudCBkYXRhKS4gVGhpcyBnaXZlcyB+MjUlXG4gICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XG4gICAgICAvLyB0aGUgZGF0YSBpcyBwcm92aWRlZCBpbiBsYXJnZSBjaHVua3MgKG9yIGluIG11bHRpcGxlcyBvZiA2NCBieXRlcykuXG4gICAgICBpZiAoaW5idWYgPT09IDApIHtcbiAgICAgICAgd2hpbGUgKG4gPD0gbGVuZ3RoTWludXNCbG9jaykge1xuICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ5dGVzLCBuKTtcbiAgICAgICAgICBuICs9IHRoaXMuYmxvY2tTaXplO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XG4gICAgICAgICAgKytpbmJ1ZjtcbiAgICAgICAgICArK247XG4gICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcbiAgICAgICAgICAgIGluYnVmID0gMDtcbiAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcbiAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XG4gICAgICAgICAgKytpbmJ1ZjtcbiAgICAgICAgICArK247XG4gICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnVmKTtcbiAgICAgICAgICAgIGluYnVmID0gMDtcbiAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaW5idWZfID0gaW5idWY7XG4gICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBkaWdlc3QoKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGRpZ2VzdDogbnVtYmVyW10gPSBbXTtcbiAgICBsZXQgdG90YWxCaXRzID0gdGhpcy50b3RhbF8gKiA4O1xuXG4gICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxuICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XG4gICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIDU2IC0gdGhpcy5pbmJ1Zl8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgIyBiaXRzLlxuICAgIGZvciAobGV0IGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xuICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xuICAgICAgdG90YWxCaXRzIC89IDI1NjsgLy8gRG9uJ3QgdXNlIGJpdC1zaGlmdGluZyBoZXJlIVxuICAgIH1cblxuICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XG5cbiAgICBsZXQgbiA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xuICAgICAgICArK247XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWdlc3Q7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IHR5cGUgTmV4dEZuPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgRXJyb3JGbiA9IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBDb21wbGV0ZUZuID0gKCkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlcjxUPiB7XG4gIC8vIENhbGxlZCBvbmNlIGZvciBlYWNoIHZhbHVlIGluIGEgc3RyZWFtIG9mIHZhbHVlcy5cbiAgbmV4dDogTmV4dEZuPFQ+O1xuXG4gIC8vIEEgc3RyZWFtIHRlcm1pbmF0ZXMgYnkgYSBzaW5nbGUgY2FsbCB0byBFSVRIRVIgZXJyb3IoKSBvciBjb21wbGV0ZSgpLlxuICBlcnJvcjogRXJyb3JGbjtcblxuICAvLyBObyBldmVudHMgd2lsbCBiZSBzZW50IHRvIG5leHQoKSBvbmNlIGNvbXBsZXRlKCkgaXMgY2FsbGVkLlxuICBjb21wbGV0ZTogQ29tcGxldGVGbjtcbn1cblxuZXhwb3J0IHR5cGUgUGFydGlhbE9ic2VydmVyPFQ+ID0gUGFydGlhbDxPYnNlcnZlcjxUPj47XG5cbi8vIFRPRE86IFN1cHBvcnQgYWxzbyBVbnN1YnNjcmliZS51bnN1YnNjcmliZT9cbmV4cG9ydCB0eXBlIFVuc3Vic2NyaWJlID0gKCkgPT4gdm9pZDtcblxuLyoqXG4gKiBUaGUgU3Vic2NyaWJlIGludGVyZmFjZSBoYXMgdHdvIGZvcm1zIC0gcGFzc2luZyB0aGUgaW5saW5lIGZ1bmN0aW9uXG4gKiBjYWxsYmFja3MsIG9yIGEgb2JqZWN0IGludGVyZmFjZSB3aXRoIGNhbGxiYWNrIHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaWJlPFQ+IHtcbiAgKG5leHQ/OiBOZXh0Rm48VD4sIGVycm9yPzogRXJyb3JGbiwgY29tcGxldGU/OiBDb21wbGV0ZUZuKTogVW5zdWJzY3JpYmU7XG4gIChvYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFQ+KTogVW5zdWJzY3JpYmU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JzZXJ2YWJsZTxUPiB7XG4gIC8vIFN1YnNjcmliZSBtZXRob2RcbiAgc3Vic2NyaWJlOiBTdWJzY3JpYmU8VD47XG59XG5cbmV4cG9ydCB0eXBlIEV4ZWN1dG9yPFQ+ID0gKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZDtcblxuLyoqXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXG4gKiBUaGVuYWJsZSkuXG4gKlxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXG4gKiAgICAgYXMgYSBwcm94eS5cbiAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmliZTxUPihcbiAgZXhlY3V0b3I6IEV4ZWN1dG9yPFQ+LFxuICBvbk5vT2JzZXJ2ZXJzPzogRXhlY3V0b3I8VD5cbik6IFN1YnNjcmliZTxUPiB7XG4gIGNvbnN0IHByb3h5ID0gbmV3IE9ic2VydmVyUHJveHk8VD4oZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpO1xuICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xufVxuXG4vKipcbiAqIEltcGxlbWVudCBmYW4tb3V0IGZvciBhbnkgbnVtYmVyIG9mIE9ic2VydmVycyBhdHRhY2hlZCB2aWEgYSBzdWJzY3JpYmVcbiAqIGZ1bmN0aW9uLlxuICovXG5jbGFzcyBPYnNlcnZlclByb3h5PFQ+IGltcGxlbWVudHMgT2JzZXJ2ZXI8VD4ge1xuICBwcml2YXRlIG9ic2VydmVyczogQXJyYXk8T2JzZXJ2ZXI8VD4+IHwgdW5kZWZpbmVkID0gW107XG4gIHByaXZhdGUgdW5zdWJzY3JpYmVzOiBVbnN1YnNjcmliZVtdID0gW107XG4gIHByaXZhdGUgb25Ob09ic2VydmVyczogRXhlY3V0b3I8VD4gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgb2JzZXJ2ZXJDb3VudCA9IDA7XG4gIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxuICBwcml2YXRlIHRhc2sgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgcHJpdmF0ZSBmaW5hbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBmaW5hbEVycm9yPzogRXJyb3I7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxuICAgKiAgICAgYXMgYSBwcm94eS5cbiAgICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZXhlY3V0b3I6IEV4ZWN1dG9yPFQ+LCBvbk5vT2JzZXJ2ZXJzPzogRXhlY3V0b3I8VD4pIHtcbiAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xuICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxuICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cbiAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxuICAgIHRoaXMudGFza1xuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBleGVjdXRvcih0aGlzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5leHQodmFsdWU6IFQpOiB2b2lkIHtcbiAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGVycm9yKGVycm9yOiBFcnJvcik6IHZvaWQge1xuICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcbiAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yKTtcbiAgICB9KTtcbiAgICB0aGlzLmNsb3NlKGVycm9yKTtcbiAgfVxuXG4gIGNvbXBsZXRlKCk6IHZvaWQge1xuICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IHtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gICAgdGhpcy5jbG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBhbiBPYnNlcnZlciB0byB0aGUgZmFuLW91dCBsaXN0LlxuICAgKlxuICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcbiAgICogICBjYWxsIHRvIHN1YnNjcmliZSgpLlxuICAgKi9cbiAgc3Vic2NyaWJlKFxuICAgIG5leHRPck9ic2VydmVyPzogTmV4dEZuPFQ+IHwgUGFydGlhbE9ic2VydmVyPFQ+LFxuICAgIGVycm9yPzogRXJyb3JGbixcbiAgICBjb21wbGV0ZT86IENvbXBsZXRlRm5cbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIGxldCBvYnNlcnZlcjogT2JzZXJ2ZXI8VD47XG5cbiAgICBpZiAoXG4gICAgICBuZXh0T3JPYnNlcnZlciA9PT0gdW5kZWZpbmVkICYmXG4gICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXG4gICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgT2JzZXJ2ZXIuJyk7XG4gICAgfVxuXG4gICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cbiAgICBpZiAoXG4gICAgICBpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciBhcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSwgW1xuICAgICAgICAnbmV4dCcsXG4gICAgICAgICdlcnJvcicsXG4gICAgICAgICdjb21wbGV0ZSdcbiAgICAgIF0pXG4gICAgKSB7XG4gICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyIGFzIE9ic2VydmVyPFQ+O1xuICAgIH0gZWxzZSB7XG4gICAgICBvYnNlcnZlciA9IHtcbiAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIgYXMgTmV4dEZuPFQ+LFxuICAgICAgICBlcnJvcixcbiAgICAgICAgY29tcGxldGVcbiAgICAgIH0gYXMgT2JzZXJ2ZXI8VD47XG4gICAgfVxuXG4gICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3AgYXMgTmV4dEZuPFQ+O1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wIGFzIEVycm9yRm47XG4gICAgfVxuICAgIGlmIChvYnNlcnZlci5jb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3AgYXMgQ29tcGxldGVGbjtcbiAgICB9XG5cbiAgICBjb25zdCB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycyEubGVuZ3RoKTtcblxuICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcbiAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXG4gICAgLy8gZXZlbnQuXG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHRoaXMuZmluYWxFcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IodGhpcy5maW5hbEVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBub3RoaW5nXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZlcnMhLnB1c2gob2JzZXJ2ZXIgYXMgT2JzZXJ2ZXI8VD4pO1xuXG4gICAgcmV0dXJuIHVuc3ViO1xuICB9XG5cbiAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cbiAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cbiAgcHJpdmF0ZSB1bnN1YnNjcmliZU9uZShpOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xuXG4gICAgdGhpcy5vYnNlcnZlckNvdW50IC09IDE7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJDb3VudCA9PT0gMCAmJiB0aGlzLm9uTm9PYnNlcnZlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZm9yRWFjaE9ic2VydmVyKGZuOiAob2JzZXJ2ZXI6IE9ic2VydmVyPFQ+KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICAvLyBBbHJlYWR5IGNsb3NlZCBieSBwcmV2aW91cyBldmVudC4uLi5qdXN0IGVhdCB0aGUgYWRkaXRpb25hbCB2YWx1ZXMuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2luY2Ugc2VuZE9uZSBjYWxscyBhc3luY2hyb25vdXNseSAtIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0XG4gICAgLy8gdGhpcy5vYnNlcnZlcnMgd2lsbCBiZWNvbWUgdW5kZWZpbmVkLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnNlbmRPbmUoaSwgZm4pO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGwgdGhlIE9ic2VydmVyIHZpYSBvbmUgb2YgaXQncyBjYWxsYmFjayBmdW5jdGlvbi4gV2UgYXJlIGNhcmVmdWwgdG9cbiAgLy8gY29uZmlybSB0aGF0IHRoZSBvYnNlcnZlIGhhcyBub3QgYmVlbiB1bnN1YnNjcmliZWQgc2luY2UgdGhpcyBhc3luY2hyb25vdXNcbiAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxuICBwcml2YXRlIHNlbmRPbmUoaTogbnVtYmVyLCBmbjogKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmbih0aGlzLm9ic2VydmVyc1tpXSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxuICAgICAgICAgIC8vIE9ic2VydmVyLlxuICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbG9zZShlcnI/OiBFcnJvcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XG4gICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmZpbmFsRXJyb3IgPSBlcnI7XG4gICAgfVxuICAgIC8vIFByb3h5IGlzIG5vIGxvbmdlciBuZWVkZWQgLSBnYXJiYWdlIGNvbGxlY3QgcmVmZXJlbmNlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxufVxuXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIGFzeW5jKGZuOiBGdW5jdGlvbiwgb25FcnJvcj86IEVycm9yRm4pOiBGdW5jdGlvbiB7XG4gIHJldHVybiAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHRydWUpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHRoZSBvYmplY3QgcGFzc2VkIGluIGltcGxlbWVudHMgYW55IG9mIHRoZSBuYW1lZCBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhcbiAgb2JqOiB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSxcbiAgbWV0aG9kczogc3RyaW5nW11cbik6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBtZXRob2Qgb2YgbWV0aG9kcykge1xuICAgIGlmIChtZXRob2QgaW4gb2JqICYmIHR5cGVvZiBvYmpbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBub29wKCk6IHZvaWQge1xuICAvLyBkbyBub3RoaW5nXG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cbiAqIFRocm93cyBhbiBlcnJvciBpZiBpdCBmYWlscy5cbiAqXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXG4gKiBAcGFyYW0gbWluQ291bnQgVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFyZ3VtZW50cyB0byBhbGxvdyBmb3IgdGhlIGZ1bmN0aW9uIGNhbGxcbiAqIEBwYXJhbSBtYXhDb3VudCBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnQgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXG4gKiBAcGFyYW0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVBcmdDb3VudCA9IGZ1bmN0aW9uIChcbiAgZm5OYW1lOiBzdHJpbmcsXG4gIG1pbkNvdW50OiBudW1iZXIsXG4gIG1heENvdW50OiBudW1iZXIsXG4gIGFyZ0NvdW50OiBudW1iZXJcbik6IHZvaWQge1xuICBsZXQgYXJnRXJyb3I7XG4gIGlmIChhcmdDb3VudCA8IG1pbkNvdW50KSB7XG4gICAgYXJnRXJyb3IgPSAnYXQgbGVhc3QgJyArIG1pbkNvdW50O1xuICB9IGVsc2UgaWYgKGFyZ0NvdW50ID4gbWF4Q291bnQpIHtcbiAgICBhcmdFcnJvciA9IG1heENvdW50ID09PSAwID8gJ25vbmUnIDogJ25vIG1vcmUgdGhhbiAnICsgbWF4Q291bnQ7XG4gIH1cbiAgaWYgKGFyZ0Vycm9yKSB7XG4gICAgY29uc3QgZXJyb3IgPVxuICAgICAgZm5OYW1lICtcbiAgICAgICcgZmFpbGVkOiBXYXMgY2FsbGVkIHdpdGggJyArXG4gICAgICBhcmdDb3VudCArXG4gICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXG4gICAgICAnIEV4cGVjdHMgJyArXG4gICAgICBhcmdFcnJvciArXG4gICAgICAnLic7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzdHJpbmcgdG8gcHJlZml4IGFuIGVycm9yIG1lc3NhZ2UgYWJvdXQgZmFpbGVkIGFyZ3VtZW50IHZhbGlkYXRpb25cbiAqXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXG4gKiBAcGFyYW0gYXJnTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXJndW1lbnRcbiAqIEByZXR1cm4gVGhlIHByZWZpeCB0byBhZGQgdG8gdGhlIGVycm9yIHRocm93biBmb3IgdmFsaWRhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yUHJlZml4KGZuTmFtZTogc3RyaW5nLCBhcmdOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7Zm5OYW1lfSBmYWlsZWQ6ICR7YXJnTmFtZX0gYXJndW1lbnQgYDtcbn1cblxuLyoqXG4gKiBAcGFyYW0gZm5OYW1lXG4gKiBAcGFyYW0gYXJndW1lbnROdW1iZXJcbiAqIEBwYXJhbSBuYW1lc3BhY2VcbiAqIEBwYXJhbSBvcHRpb25hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UoXG4gIGZuTmFtZTogc3RyaW5nLFxuICBuYW1lc3BhY2U6IHN0cmluZyxcbiAgb3B0aW9uYWw6IGJvb2xlYW5cbik6IHZvaWQge1xuICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAvL1RPRE86IEkgc2hvdWxkIGRvIG1vcmUgdmFsaWRhdGlvbiBoZXJlLiBXZSBvbmx5IGFsbG93IGNlcnRhaW4gY2hhcnMgaW4gbmFtZXNwYWNlcy5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBlcnJvclByZWZpeChmbk5hbWUsICduYW1lc3BhY2UnKSArICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLidcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNhbGxiYWNrKFxuICBmbk5hbWU6IHN0cmluZyxcbiAgYXJndW1lbnROYW1lOiBzdHJpbmcsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIGNhbGxiYWNrOiBGdW5jdGlvbixcbiAgb3B0aW9uYWw6IGJvb2xlYW5cbik6IHZvaWQge1xuICBpZiAob3B0aW9uYWwgJiYgIWNhbGxiYWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBlcnJvclByZWZpeChmbk5hbWUsIGFyZ3VtZW50TmFtZSkgKyAnbXVzdCBiZSBhIHZhbGlkIGZ1bmN0aW9uLidcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHRPYmplY3QoXG4gIGZuTmFtZTogc3RyaW5nLFxuICBhcmd1bWVudE5hbWU6IHN0cmluZyxcbiAgY29udGV4dDogdW5rbm93bixcbiAgb3B0aW9uYWw6IGJvb2xlYW5cbik6IHZvaWQge1xuICBpZiAob3B0aW9uYWwgJiYgIWNvbnRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JyB8fCBjb250ZXh0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC4nXG4gICAgKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vYXNzZXJ0JztcblxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XG4vLyBhdXRvbWF0aWNhbGx5IHJlcGxhY2VkICdcXHJcXG4nIHdpdGggJ1xcbicsIGFuZCB0aGV5IGRpZG4ndCBoYW5kbGUgc3Vycm9nYXRlIHBhaXJzLFxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxuXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xuLy8gdXNlIDIgY2hhcmFjdGVycyBpbiBKYXZhc2NyaXB0LiAgQWxsIDQtYnl0ZSBVVEYtOCBjaGFyYWN0ZXJzIGJlZ2luIHdpdGggYSBmaXJzdFxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXG4vLyBwYWlyKS5cbi8vIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuMS4zXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHI6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgY29uc3Qgb3V0OiBudW1iZXJbXSA9IFtdO1xuICBsZXQgcCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XG4gICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XG4gICAgICBjb25zdCBoaWdoID0gYyAtIDB4ZDgwMDsgLy8gdGhlIGhpZ2ggMTAgYml0cy5cbiAgICAgIGkrKztcbiAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xuICAgICAgY29uc3QgbG93ID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAweGRjMDA7IC8vIHRoZSBsb3cgMTAgYml0cy5cbiAgICAgIGMgPSAweDEwMDAwICsgKGhpZ2ggPDwgMTApICsgbG93O1xuICAgIH1cblxuICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICBvdXRbcCsrXSA9IGM7XG4gICAgfSBlbHNlIGlmIChjIDwgMjA0OCkge1xuICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcbiAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XG4gICAgfSBlbHNlIGlmIChjIDwgNjU1MzYpIHtcbiAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xuICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcbiAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xuICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIGxlbmd0aCB3aXRob3V0IGFjdHVhbGx5IGNvbnZlcnRpbmc7IHVzZWZ1bCBmb3IgZG9pbmcgY2hlYXBlciB2YWxpZGF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gKHN0cjogc3RyaW5nKTogbnVtYmVyIHtcbiAgbGV0IHAgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgcCsrO1xuICAgIH0gZWxzZSBpZiAoYyA8IDIwNDgpIHtcbiAgICAgIHAgKz0gMjtcbiAgICB9IGVsc2UgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XG4gICAgICAvLyBMZWFkIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLiAgVGhlIHBhaXIgdG9nZXRoZXIgd2lsbCB0YWtlIDQgYnl0ZXMgdG8gcmVwcmVzZW50LlxuICAgICAgcCArPSA0O1xuICAgICAgaSsrOyAvLyBza2lwIHRyYWlsIHN1cnJvZ2F0ZS5cbiAgICB9IGVsc2Uge1xuICAgICAgcCArPSAzO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcDtcbn07XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBUaGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBleHBvbmVudGlhbGx5IGluY3JlYXNlLlxuICovXG5jb25zdCBERUZBVUxUX0lOVEVSVkFMX01JTExJUyA9IDEwMDA7XG5cbi8qKlxuICogVGhlIGZhY3RvciB0byBiYWNrb2ZmIGJ5LlxuICogU2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLlxuICovXG5jb25zdCBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SID0gMjtcblxuLyoqXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXG4gKlxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgY29uc3QgTUFYX1ZBTFVFX01JTExJUyA9IDQgKiA2MCAqIDYwICogMTAwMDsgLy8gRm91ciBob3VycywgbGlrZSBpT1MgYW5kIEFuZHJvaWQuXG5cbi8qKlxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cbiAqIFNlZVxuICogaHR0cDovL2dvL3NhZmUtY2xpZW50LWJlaGF2aW9yI3N0ZXAtMS1kZXRlcm1pbmUtdGhlLWFwcHJvcHJpYXRlLXJldHJ5LWludGVydmFsLXRvLWhhbmRsZS1zcGlrZS10cmFmZmljXG4gKiBmb3IgY29udGV4dC5cbiAqXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nXG4gKi9cbmV4cG9ydCBjb25zdCBSQU5ET01fRkFDVE9SID0gMC41O1xuXG4vKipcbiAqIEJhc2VkIG9uIHRoZSBiYWNrb2ZmIG1ldGhvZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9jbG9zdXJlL2dvb2cvbWF0aC9leHBvbmVudGlhbGJhY2tvZmYuanMuXG4gKiBFeHRyYWN0ZWQgaGVyZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHBhc3MgbWV0YWRhdGEgYW5kIGEgc3RhdGVmdWwgRXhwb25lbnRpYWxCYWNrb2ZmIG9iamVjdCBhcm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKFxuICBiYWNrb2ZmQ291bnQ6IG51bWJlcixcbiAgaW50ZXJ2YWxNaWxsaXM6IG51bWJlciA9IERFRkFVTFRfSU5URVJWQUxfTUlMTElTLFxuICBiYWNrb2ZmRmFjdG9yOiBudW1iZXIgPSBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SXG4pOiBudW1iZXIge1xuICAvLyBDYWxjdWxhdGVzIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyB2YWx1ZS5cbiAgLy8gRGV2aWF0aW9uOiBjYWxjdWxhdGVzIHZhbHVlIGZyb20gY291bnQgYW5kIGEgY29uc3RhbnQgaW50ZXJ2YWwsIHNvIHdlIG9ubHkgbmVlZCB0byBzYXZlIHZhbHVlXG4gIC8vIGFuZCBjb3VudCB0byByZXN0b3JlIHN0YXRlLlxuICBjb25zdCBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xuXG4gIC8vIEEgcmFuZG9tIFwiZnV6elwiIHRvIGF2b2lkIHdhdmVzIG9mIHJldHJpZXMuXG4gIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxuICBjb25zdCByYW5kb21XYWl0ID0gTWF0aC5yb3VuZChcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cbiAgICAvLyBEZXZpYXRpb246IGNoYW5nZXMgbXVsdGlwbGljYXRpb24gb3JkZXIgdG8gaW1wcm92ZSByZWFkYWJpbGl0eS5cbiAgICBSQU5ET01fRkFDVE9SICpcbiAgICAgIGN1cnJCYXNlVmFsdWUgKlxuICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXG4gICAgICAvLyBpZiB3ZSBhZGQgb3Igc3VidHJhY3QuXG4gICAgICAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKlxuICAgICAgMlxuICApO1xuXG4gIC8vIExpbWl0cyBiYWNrb2ZmIHRvIG1heCB0byBhdm9pZCBlZmZlY3RpdmVseSBwZXJtYW5lbnQgYmFja29mZi5cbiAgcmV0dXJuIE1hdGgubWluKE1BWF9WQUxVRV9NSUxMSVMsIGN1cnJCYXNlVmFsdWUgKyByYW5kb21XYWl0KTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIFByb3ZpZGUgRW5nbGlzaCBvcmRpbmFsIGxldHRlcnMgYWZ0ZXIgYSBudW1iZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9yZGluYWwoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaSkpIHtcbiAgICByZXR1cm4gYCR7aX1gO1xuICB9XG4gIHJldHVybiBpICsgaW5kaWNhdG9yKGkpO1xufVxuXG5mdW5jdGlvbiBpbmRpY2F0b3IoaTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaSA9IE1hdGguYWJzKGkpO1xuICBjb25zdCBjZW50ID0gaSAlIDEwMDtcbiAgaWYgKGNlbnQgPj0gMTAgJiYgY2VudCA8PSAyMCkge1xuICAgIHJldHVybiAndGgnO1xuICB9XG4gIGNvbnN0IGRlYyA9IGkgJSAxMDtcbiAgaWYgKGRlYyA9PT0gMSkge1xuICAgIHJldHVybiAnc3QnO1xuICB9XG4gIGlmIChkZWMgPT09IDIpIHtcbiAgICByZXR1cm4gJ25kJztcbiAgfVxuICBpZiAoZGVjID09PSAzKSB7XG4gICAgcmV0dXJuICdyZCc7XG4gIH1cbiAgcmV0dXJuICd0aCc7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBDb21wYXQ8VD4ge1xuICBfZGVsZWdhdGU6IFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2R1bGFySW5zdGFuY2U8RXhwU2VydmljZT4oXG4gIHNlcnZpY2U6IENvbXBhdDxFeHBTZXJ2aWNlPiB8IEV4cFNlcnZpY2Vcbik6IEV4cFNlcnZpY2Uge1xuICBpZiAoc2VydmljZSAmJiAoc2VydmljZSBhcyBDb21wYXQ8RXhwU2VydmljZT4pLl9kZWxlZ2F0ZSkge1xuICAgIHJldHVybiAoc2VydmljZSBhcyBDb21wYXQ8RXhwU2VydmljZT4pLl9kZWxlZ2F0ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2VydmljZSBhcyBFeHBTZXJ2aWNlO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIEluc3RhbnRpYXRpb25Nb2RlLFxuICBJbnN0YW5jZUZhY3RvcnksXG4gIENvbXBvbmVudFR5cGUsXG4gIERpY3Rpb25hcnksXG4gIE5hbWUsXG4gIG9uSW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2tcbn0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxuICovXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50PFQgZXh0ZW5kcyBOYW1lID0gTmFtZT4ge1xuICBtdWx0aXBsZUluc3RhbmNlcyA9IGZhbHNlO1xuICAvKipcbiAgICogUHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgc2VydmljZSBuYW1lc3BhY2VcbiAgICovXG4gIHNlcnZpY2VQcm9wczogRGljdGlvbmFyeSA9IHt9O1xuXG4gIGluc3RhbnRpYXRpb25Nb2RlID0gSW5zdGFudGlhdGlvbk1vZGUuTEFaWTtcblxuICBvbkluc3RhbmNlQ3JlYXRlZDogb25JbnN0YW5jZUNyZWF0ZWRDYWxsYmFjazxUPiB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgcHVibGljIHNlcnZpY2UgbmFtZSwgZS5nLiBhcHAsIGF1dGgsIGZpcmVzdG9yZSwgZGF0YWJhc2VcbiAgICogQHBhcmFtIGluc3RhbmNlRmFjdG9yeSBTZXJ2aWNlIGZhY3RvcnkgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBwdWJsaWMgaW50ZXJmYWNlXG4gICAqIEBwYXJhbSB0eXBlIHdoZXRoZXIgdGhlIHNlcnZpY2UgcHJvdmlkZWQgYnkgdGhlIGNvbXBvbmVudCBpcyBwdWJsaWMgb3IgcHJpdmF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgbmFtZTogVCxcbiAgICByZWFkb25seSBpbnN0YW5jZUZhY3Rvcnk6IEluc3RhbmNlRmFjdG9yeTxUPixcbiAgICByZWFkb25seSB0eXBlOiBDb21wb25lbnRUeXBlXG4gICkge31cblxuICBzZXRJbnN0YW50aWF0aW9uTW9kZShtb2RlOiBJbnN0YW50aWF0aW9uTW9kZSk6IHRoaXMge1xuICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBtb2RlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0TXVsdGlwbGVJbnN0YW5jZXMobXVsdGlwbGVJbnN0YW5jZXM6IGJvb2xlYW4pOiB0aGlzIHtcbiAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gbXVsdGlwbGVJbnN0YW5jZXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRTZXJ2aWNlUHJvcHMocHJvcHM6IERpY3Rpb25hcnkpOiB0aGlzIHtcbiAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHByb3BzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0SW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2soY2FsbGJhY2s6IG9uSW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2s8VD4pOiB0aGlzIHtcbiAgICB0aGlzLm9uSW5zdGFuY2VDcmVhdGVkID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICcuL2NvbXBvbmVudF9jb250YWluZXInO1xuaW1wb3J0IHsgREVGQVVMVF9FTlRSWV9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgSW5pdGlhbGl6ZU9wdGlvbnMsXG4gIEluc3RhbnRpYXRpb25Nb2RlLFxuICBOYW1lLFxuICBOYW1lU2VydmljZU1hcHBpbmcsXG4gIE9uSW5pdENhbGxCYWNrXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBpbnN0YW5jZSBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gJ2F1dGgnLCAnYXV0aC1pbnRlcm5hbCdcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm92aWRlcjxUIGV4dGVuZHMgTmFtZT4ge1xuICBwcml2YXRlIGNvbXBvbmVudDogQ29tcG9uZW50PFQ+IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW5zdGFuY2VzOiBNYXA8c3RyaW5nLCBOYW1lU2VydmljZU1hcHBpbmdbVF0+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IGluc3RhbmNlc0RlZmVycmVkOiBNYXA8XG4gICAgc3RyaW5nLFxuICAgIERlZmVycmVkPE5hbWVTZXJ2aWNlTWFwcGluZ1tUXT5cbiAgPiA9IG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnN0YW5jZXNPcHRpb25zOiBNYXA8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4gPVxuICAgIG5ldyBNYXAoKTtcbiAgcHJpdmF0ZSBvbkluaXRDYWxsYmFja3M6IE1hcDxzdHJpbmcsIFNldDxPbkluaXRDYWxsQmFjazxUPj4+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZTogVCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyXG4gICkge31cblxuICAvKipcbiAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXG4gICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXG4gICAqL1xuICBnZXQoaWRlbnRpZmllcj86IHN0cmluZyk6IFByb21pc2U8TmFtZVNlcnZpY2VNYXBwaW5nW1RdPiB7XG4gICAgLy8gaWYgbXVsdGlwbGVJbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBkZWZhdWx0IG5hbWVcbiAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuXG4gICAgaWYgKCF0aGlzLmluc3RhbmNlc0RlZmVycmVkLmhhcyhub3JtYWxpemVkSWRlbnRpZmllcikpIHtcbiAgICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkPE5hbWVTZXJ2aWNlTWFwcGluZ1tUXT4oKTtcbiAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBkZWZlcnJlZCk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxuICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKClcbiAgICAgICkge1xuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzZXJ2aWNlIGlmIGl0IGNhbiBiZSBhdXRvLWluaXRpYWxpemVkXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xuICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyBnZXQoKSwgaXQgc2hvdWxkIG5vdCBjYXVzZVxuICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgcmV0dXJuIHRoZSB1bnJlc29sdmVkIHByb21pc2UgaW4gdGhpcyBjYXNlLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSEucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucy5pZGVudGlmaWVyIEEgcHJvdmlkZXIgY2FuIHByb3ZpZGUgbXVsaXRwbGUgaW5zdGFuY2VzIG9mIGEgc2VydmljZVxuICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5vcHRpb25hbCBJZiBvcHRpb25hbCBpcyBmYWxzZSBvciBub3QgcHJvdmlkZWQsIHRoZSBtZXRob2QgdGhyb3dzIGFuIGVycm9yIHdoZW5cbiAgICogdGhlIHNlcnZpY2UgaXMgbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZS5cbiAgICogSWYgb3B0aW9uYWwgaXMgdHJ1ZSwgdGhlIG1ldGhvZCByZXR1cm5zIG51bGwgaWYgdGhlIHNlcnZpY2UgaXMgbm90IGltbWVkaWF0ZWx5IGF2YWlsYWJsZS5cbiAgICovXG4gIGdldEltbWVkaWF0ZShvcHRpb25zOiB7XG4gICAgaWRlbnRpZmllcj86IHN0cmluZztcbiAgICBvcHRpb25hbDogdHJ1ZTtcbiAgfSk6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSB8IG51bGw7XG4gIGdldEltbWVkaWF0ZShvcHRpb25zPzoge1xuICAgIGlkZW50aWZpZXI/OiBzdHJpbmc7XG4gICAgb3B0aW9uYWw/OiBmYWxzZTtcbiAgfSk6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXTtcbiAgZ2V0SW1tZWRpYXRlKG9wdGlvbnM/OiB7XG4gICAgaWRlbnRpZmllcj86IHN0cmluZztcbiAgICBvcHRpb25hbD86IGJvb2xlYW47XG4gIH0pOiBOYW1lU2VydmljZU1hcHBpbmdbVF0gfCBudWxsIHtcbiAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoXG4gICAgICBvcHRpb25zPy5pZGVudGlmaWVyXG4gICAgKTtcbiAgICBjb25zdCBvcHRpb25hbCA9IG9wdGlvbnM/Lm9wdGlvbmFsID8/IGZhbHNlO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxuICAgICAgdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpXG4gICAgKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcbiAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAob3B0aW9uYWwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcbiAgICAgIGlmIChvcHRpb25hbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKGBTZXJ2aWNlICR7dGhpcy5uYW1lfSBpcyBub3QgYXZhaWxhYmxlYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Q29tcG9uZW50KCk6IENvbXBvbmVudDxUPiB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudDtcbiAgfVxuXG4gIHNldENvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudDxUPik6IHZvaWQge1xuICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYE1pc21hdGNoaW5nIENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmb3IgUHJvdmlkZXIgJHt0aGlzLm5hbWV9LmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBFcnJvcihgQ29tcG9uZW50IGZvciAke3RoaXMubmFtZX0gaGFzIGFscmVhZHkgYmVlbiBwcm92aWRlZGApO1xuICAgIH1cblxuICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xuXG4gICAgLy8gcmV0dXJuIGVhcmx5IHdpdGhvdXQgYXR0ZW1wdGluZyB0byBpbml0aWFsaXplIHRoZSBjb21wb25lbnQgaWYgdGhlIGNvbXBvbmVudCByZXF1aXJlcyBleHBsaWNpdCBpbml0aWFsaXphdGlvbiAoY2FsbGluZyBgUHJvdmlkZXIuaW5pdGlhbGl6ZSgpYClcbiAgICBpZiAoIXRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSBzZXJ2aWNlIGlzIGVhZ2VyLCBpbml0aWFsaXplIHRoZSBkZWZhdWx0IGluc3RhbmNlXG4gICAgaWYgKGlzQ29tcG9uZW50RWFnZXIoY29tcG9uZW50KSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHsgaW5zdGFuY2VJZGVudGlmaWVyOiBERUZBVUxUX0VOVFJZX05BTUUgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgZm9yIGFuIGVhZ2VyIENvbXBvbmVudCB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyB0aGUgZWFnZXJcbiAgICAgICAgLy8gaW5pdGlhbGl6YXRpb24sIGl0IHNob3VsZCBub3QgY2F1c2UgYSBmYXRhbCBlcnJvci5cbiAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxuICAgICAgICAvLyBhIGZhdGFsIGVycm9yIGluIHRoaXMgY2FzZT9cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgc2VydmljZSBpbnN0YW5jZXMgZm9yIHRoZSBwZW5kaW5nIHByb21pc2VzIGFuZCByZXNvbHZlIHRoZW1cbiAgICAvLyBOT1RFOiBpZiB0aGlzLm11bHRpcGxlSW5zdGFuY2VzIGlzIGZhbHNlLCBvbmx5IHRoZSBkZWZhdWx0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZFxuICAgIC8vIGFuZCBhbGwgcHJvbWlzZXMgd2l0aCByZXNvbHZlIHdpdGggaXQgcmVnYXJkbGVzcyBvZiB0aGUgaWRlbnRpZmllci5cbiAgICBmb3IgKGNvbnN0IFtcbiAgICAgIGluc3RhbmNlSWRlbnRpZmllcixcbiAgICAgIGluc3RhbmNlRGVmZXJyZWRcbiAgICBdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9XG4gICAgICAgIHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGBnZXRPckluaXRpYWxpemVTZXJ2aWNlKClgIHNob3VsZCBhbHdheXMgcmV0dXJuIGEgdmFsaWQgaW5zdGFuY2Ugc2luY2UgYSBjb21wb25lbnQgaXMgZ3VhcmFudGVlZC4gdXNlICEgdG8gbWFrZSB0eXBlc2NyaXB0IGhhcHB5LlxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XG4gICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxuICAgICAgICB9KSE7XG4gICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxuICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IGxlYXZlIHRoZSBwcm9taXNlIHVucmVzb2x2ZWQuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xlYXJJbnN0YW5jZShpZGVudGlmaWVyOiBzdHJpbmcgPSBERUZBVUxUX0VOVFJZX05BTUUpOiB2b2lkIHtcbiAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmRlbGV0ZShpZGVudGlmaWVyKTtcbiAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuZGVsZXRlKGlkZW50aWZpZXIpO1xuICAgIHRoaXMuaW5zdGFuY2VzLmRlbGV0ZShpZGVudGlmaWVyKTtcbiAgfVxuXG4gIC8vIGFwcC5kZWxldGUoKSB3aWxsIGNhbGwgdGhpcyBtZXRob2Qgb24gZXZlcnkgcHJvdmlkZXIgdG8gZGVsZXRlIHRoZSBzZXJ2aWNlc1xuICAvLyBUT0RPOiBzaG91bGQgd2UgbWFyayB0aGUgcHJvdmlkZXIgYXMgZGVsZXRlZD9cbiAgYXN5bmMgZGVsZXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAuLi5zZXJ2aWNlc1xuICAgICAgICAuZmlsdGVyKHNlcnZpY2UgPT4gJ0lOVEVSTkFMJyBpbiBzZXJ2aWNlKSAvLyBsZWdhY3kgc2VydmljZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgLm1hcChzZXJ2aWNlID0+IChzZXJ2aWNlIGFzIGFueSkuSU5URVJOQUwhLmRlbGV0ZSgpKSxcbiAgICAgIC4uLnNlcnZpY2VzXG4gICAgICAgIC5maWx0ZXIoc2VydmljZSA9PiAnX2RlbGV0ZScgaW4gc2VydmljZSkgLy8gbW9kdWxhcml6ZWQgc2VydmljZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgLm1hcChzZXJ2aWNlID0+IChzZXJ2aWNlIGFzIGFueSkuX2RlbGV0ZSgpKVxuICAgIF0pO1xuICB9XG5cbiAgaXNDb21wb25lbnRTZXQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XG4gIH1cblxuICBpc0luaXRpYWxpemVkKGlkZW50aWZpZXI6IHN0cmluZyA9IERFRkFVTFRfRU5UUllfTkFNRSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlcy5oYXMoaWRlbnRpZmllcik7XG4gIH1cblxuICBnZXRPcHRpb25zKGlkZW50aWZpZXI6IHN0cmluZyA9IERFRkFVTFRfRU5UUllfTkFNRSk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNPcHRpb25zLmdldChpZGVudGlmaWVyKSB8fCB7fTtcbiAgfVxuXG4gIGluaXRpYWxpemUob3B0czogSW5pdGlhbGl6ZU9wdGlvbnMgPSB7fSk6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSB7XG4gICAgY29uc3QgeyBvcHRpb25zID0ge30gfSA9IG9wdHM7XG4gICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihcbiAgICAgIG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyXG4gICAgKTtcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGAke3RoaXMubmFtZX0oJHtub3JtYWxpemVkSWRlbnRpZmllcn0pIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWRgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0NvbXBvbmVudFNldCgpKSB7XG4gICAgICB0aHJvdyBFcnJvcihgQ29tcG9uZW50ICR7dGhpcy5uYW1lfSBoYXMgbm90IGJlZW4gcmVnaXN0ZXJlZCB5ZXRgKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XG4gICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyLFxuICAgICAgb3B0aW9uc1xuICAgIH0pITtcblxuICAgIC8vIHJlc29sdmUgYW55IHBlbmRpbmcgcHJvbWlzZSB3YWl0aW5nIGZvciB0aGUgc2VydmljZSBpbnN0YW5jZVxuICAgIGZvciAoY29uc3QgW1xuICAgICAgaW5zdGFuY2VJZGVudGlmaWVyLFxuICAgICAgaW5zdGFuY2VEZWZlcnJlZFxuICAgIF0gb2YgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5lbnRyaWVzKCkpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIgPVxuICAgICAgICB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRJZGVudGlmaWVyID09PSBub3JtYWxpemVkRGVmZXJyZWRJZGVudGlmaWVyKSB7XG4gICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgIGFmdGVyIHRoZSBwcm92aWRlciBoYXMgYmVlbiBpbml0aWFsaXplZCBieSBjYWxsaW5nIHByb3ZpZGVyLmluaXRpYWxpemUoKS5cbiAgICogVGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgU1lOQ0hST05PVVNMWSwgc28gaXQgc2hvdWxkIG5vdCBleGVjdXRlIGFueSBsb25ncnVubmluZyB0YXNrcyBpbiBvcmRlciB0byBub3QgYmxvY2sgdGhlIHByb2dyYW0uXG4gICAqXG4gICAqIEBwYXJhbSBpZGVudGlmaWVyIEFuIG9wdGlvbmFsIGluc3RhbmNlIGlkZW50aWZpZXJcbiAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25Jbml0KGNhbGxiYWNrOiBPbkluaXRDYWxsQmFjazxUPiwgaWRlbnRpZmllcj86IHN0cmluZyk6ICgpID0+IHZvaWQge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgY29uc3QgZXhpc3RpbmdDYWxsYmFja3MgPVxuICAgICAgdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSA/P1xuICAgICAgbmV3IFNldDxPbkluaXRDYWxsQmFjazxUPj4oKTtcbiAgICBleGlzdGluZ0NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZXhpc3RpbmdDYWxsYmFja3MpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChub3JtYWxpemVkSWRlbnRpZmllcik7XG4gICAgaWYgKGV4aXN0aW5nSW5zdGFuY2UpIHtcbiAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZSBvbkluaXQgY2FsbGJhY2tzIHN5bmNocm9ub3VzbHlcbiAgICogQHBhcmFtIGluc3RhbmNlIHRoZSBzZXJ2aWNlIGluc3RhbmNlYFxuICAgKi9cbiAgcHJpdmF0ZSBpbnZva2VPbkluaXRDYWxsYmFja3MoXG4gICAgaW5zdGFuY2U6IE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSxcbiAgICBpZGVudGlmaWVyOiBzdHJpbmdcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KGlkZW50aWZpZXIpO1xuICAgIGlmICghY2FsbGJhY2tzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYWxsYmFjayhpbnN0YW5jZSwgaWRlbnRpZmllcik7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gaWdub3JlIGVycm9ycyBpbiB0aGUgb25Jbml0IGNhbGxiYWNrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcbiAgICBpbnN0YW5jZUlkZW50aWZpZXIsXG4gICAgb3B0aW9ucyA9IHt9XG4gIH06IHtcbiAgICBpbnN0YW5jZUlkZW50aWZpZXI6IHN0cmluZztcbiAgICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH0pOiBOYW1lU2VydmljZU1hcHBpbmdbVF0gfCBudWxsIHtcbiAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQoaW5zdGFuY2VJZGVudGlmaWVyKTtcbiAgICBpZiAoIWluc3RhbmNlICYmIHRoaXMuY29tcG9uZW50KSB7XG4gICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwge1xuICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5KGluc3RhbmNlSWRlbnRpZmllciksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xuICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLnNldChpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEludm9rZSBvbkluaXQgbGlzdGVuZXJzLlxuICAgICAgICogTm90ZSB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCBpcyBkaWZmZXJlbnQsIHdoaWNoIGlzIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBjcmVhdG9yLFxuICAgICAgICogd2hpbGUgb25Jbml0IGxpc3RlbmVycyBhcmUgcmVnaXN0ZXJlZCBieSBjb25zdW1lcnMgb2YgdGhlIHByb3ZpZGVyLlxuICAgICAgICovXG4gICAgICB0aGlzLmludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaW5zdGFuY2VJZGVudGlmaWVyKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcmRlciBpcyBpbXBvcnRhbnRcbiAgICAgICAqIG9uSW5zdGFuY2VDcmVhdGVkKCkgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciB0aGlzLmluc3RhbmNlcy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7IHdoaWNoXG4gICAgICAgKiBtYWtlcyBgaXNJbml0aWFsaXplZCgpYCByZXR1cm4gdHJ1ZS5cbiAgICAgICAqL1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnQub25JbnN0YW5jZUNyZWF0ZWQoXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcixcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgLy8gaWdub3JlIGVycm9ycyBpbiB0aGUgb25JbnN0YW5jZUNyZWF0ZWRDYWxsYmFja1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XG4gIH1cblxuICBwcml2YXRlIG5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihcbiAgICBpZGVudGlmaWVyOiBzdHJpbmcgPSBERUZBVUxUX0VOVFJZX05BTUVcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyA/IGlkZW50aWZpZXIgOiBERUZBVUxUX0VOVFJZX05BTUU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpZGVudGlmaWVyOyAvLyBhc3N1bWUgbXVsdGlwbGUgaW5zdGFuY2VzIGFyZSBzdXBwb3J0ZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgcHJvdmlkZWQuXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRBdXRvSW5pdGlhbGl6ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgISF0aGlzLmNvbXBvbmVudCAmJlxuICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgIT09IEluc3RhbnRpYXRpb25Nb2RlLkVYUExJQ0lUXG4gICAgKTtcbiAgfVxufVxuXG4vLyB1bmRlZmluZWQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgc2VydmljZSBmYWN0b3J5IGZvciB0aGUgZGVmYXVsdCBpbnN0YW5jZVxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XG59XG5cbmZ1bmN0aW9uIGlzQ29tcG9uZW50RWFnZXI8VCBleHRlbmRzIE5hbWU+KGNvbXBvbmVudDogQ29tcG9uZW50PFQ+KTogYm9vbGVhbiB7XG4gIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IEluc3RhbnRpYXRpb25Nb2RlLkVBR0VSO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBOYW1lIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQ29tcG9uZW50Q29udGFpbmVyIHRoYXQgcHJvdmlkZXMgUHJvdmlkZXJzIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxuICovXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwcm92aWRlcnMgPSBuZXcgTWFwPHN0cmluZywgUHJvdmlkZXI8TmFtZT4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBuYW1lOiBzdHJpbmcpIHt9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnQgQ29tcG9uZW50IGJlaW5nIGFkZGVkXG4gICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxuICAgKiBpZiBvdmVyd3JpdGUgaXMgdHJ1ZTogb3ZlcndyaXRlIHRoZSBleGlzdGluZyBjb21wb25lbnQgd2l0aCB0aGUgbmV3IGNvbXBvbmVudCBhbmQgY3JlYXRlIGEgbmV3XG4gICAqIHByb3ZpZGVyIHdpdGggdGhlIG5ldyBjb21wb25lbnQuIEl0IGNhbiBiZSB1c2VmdWwgaW4gdGVzdHMgd2hlcmUgeW91IHdhbnQgdG8gdXNlIGRpZmZlcmVudCBtb2Nrc1xuICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxuICAgKiBpZiBvdmVyd3JpdGUgaXMgZmFsc2U6IHRocm93IGFuIGV4Y2VwdGlvblxuICAgKi9cbiAgYWRkQ29tcG9uZW50PFQgZXh0ZW5kcyBOYW1lPihjb21wb25lbnQ6IENvbXBvbmVudDxUPik6IHZvaWQge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XG4gICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCAke3RoaXMubmFtZX1gXG4gICAgICApO1xuICAgIH1cblxuICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xuICB9XG5cbiAgYWRkT3JPdmVyd3JpdGVDb21wb25lbnQ8VCBleHRlbmRzIE5hbWU+KGNvbXBvbmVudDogQ29tcG9uZW50PFQ+KTogdm9pZCB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcbiAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xuICAgICAgLy8gZGVsZXRlIHRoZSBleGlzdGluZyBwcm92aWRlciBmcm9tIHRoZSBjb250YWluZXIsIHNvIHdlIGNhbiByZWdpc3RlciB0aGUgbmV3IGNvbXBvbmVudFxuICAgICAgdGhpcy5wcm92aWRlcnMuZGVsZXRlKGNvbXBvbmVudC5uYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcbiAgICogcHJlc2VudCBpbiBOYW1lU2VydmljZU1hcHBpbmcgaW50ZXJmYWNlLlxuICAgKlxuICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcbiAgICogdGhlbXNlbHZlcy5cbiAgICovXG4gIGdldFByb3ZpZGVyPFQgZXh0ZW5kcyBOYW1lPihuYW1lOiBUKTogUHJvdmlkZXI8VD4ge1xuICAgIGlmICh0aGlzLnByb3ZpZGVycy5oYXMobmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5nZXQobmFtZSkgYXMgdW5rbm93biBhcyBQcm92aWRlcjxUPjtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgYSBQcm92aWRlciBmb3IgYSBzZXJ2aWNlIHRoYXQgaGFzbid0IHJlZ2lzdGVyZWQgd2l0aCBGaXJlYmFzZVxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFByb3ZpZGVyPFQ+KG5hbWUsIHRoaXMpO1xuICAgIHRoaXMucHJvdmlkZXJzLnNldChuYW1lLCBwcm92aWRlciBhcyB1bmtub3duIGFzIFByb3ZpZGVyPE5hbWU+KTtcblxuICAgIHJldHVybiBwcm92aWRlciBhcyBQcm92aWRlcjxUPjtcbiAgfVxuXG4gIGdldFByb3ZpZGVycygpOiBBcnJheTxQcm92aWRlcjxOYW1lPj4ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucHJvdmlkZXJzLnZhbHVlcygpKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCB0eXBlIExvZ0xldmVsU3RyaW5nID1cbiAgfCAnZGVidWcnXG4gIHwgJ3ZlcmJvc2UnXG4gIHwgJ2luZm8nXG4gIHwgJ3dhcm4nXG4gIHwgJ2Vycm9yJ1xuICB8ICdzaWxlbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ09wdGlvbnMge1xuICBsZXZlbDogTG9nTGV2ZWxTdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIExvZ0NhbGxiYWNrID0gKGNhbGxiYWNrUGFyYW1zOiBMb2dDYWxsYmFja1BhcmFtcykgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBMb2dDYWxsYmFja1BhcmFtcyB7XG4gIGxldmVsOiBMb2dMZXZlbFN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBhcmdzOiB1bmtub3duW107XG4gIHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYWxsIG9mIHRoZSBMb2dnZXIgaW5zdGFuY2VzXG4gKi9cbmV4cG9ydCBjb25zdCBpbnN0YW5jZXM6IExvZ2dlcltdID0gW107XG5cbi8qKlxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xuICogc2lsZW5jZSB0aGUgbG9ncyBhbHRvZ2V0aGVyLlxuICpcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XG4gKiBERUJVRyA8IFZFUkJPU0UgPCBJTkZPIDwgV0FSTiA8IEVSUk9SXG4gKlxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgSU5GT2AsIGVycm9ycyB3aWxsIHN0aWxsIGJlIGxvZ2dlZCwgYnV0IGBERUJVR2AgYW5kXG4gKiBgVkVSQk9TRWAgbG9ncyB3aWxsIG5vdClcbiAqL1xuZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xuICBERUJVRyxcbiAgVkVSQk9TRSxcbiAgSU5GTyxcbiAgV0FSTixcbiAgRVJST1IsXG4gIFNJTEVOVFxufVxuXG5jb25zdCBsZXZlbFN0cmluZ1RvRW51bTogeyBba2V5IGluIExvZ0xldmVsU3RyaW5nXTogTG9nTGV2ZWwgfSA9IHtcbiAgJ2RlYnVnJzogTG9nTGV2ZWwuREVCVUcsXG4gICd2ZXJib3NlJzogTG9nTGV2ZWwuVkVSQk9TRSxcbiAgJ2luZm8nOiBMb2dMZXZlbC5JTkZPLFxuICAnd2Fybic6IExvZ0xldmVsLldBUk4sXG4gICdlcnJvcic6IExvZ0xldmVsLkVSUk9SLFxuICAnc2lsZW50JzogTG9nTGV2ZWwuU0lMRU5UXG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGxvZyBsZXZlbFxuICovXG5jb25zdCBkZWZhdWx0TG9nTGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuSU5GTztcblxuLyoqXG4gKiBXZSBhbGxvdyB1c2VycyB0aGUgYWJpbGl0eSB0byBwYXNzIHRoZWlyIG93biBsb2cgaGFuZGxlci4gV2Ugd2lsbCBwYXNzIHRoZVxuICogdHlwZSBvZiBsb2csIHRoZSBjdXJyZW50IGxvZyBsZXZlbCwgYW5kIGFueSBvdGhlciBhcmd1bWVudHMgcGFzc2VkIChpLmUuIHRoZVxuICogbWVzc2FnZXMgdGhhdCB0aGUgdXNlciB3YW50cyB0byBsb2cpIHRvIHRoaXMgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCB0eXBlIExvZ0hhbmRsZXIgPSAoXG4gIGxvZ2dlckluc3RhbmNlOiBMb2dnZXIsXG4gIGxvZ1R5cGU6IExvZ0xldmVsLFxuICAuLi5hcmdzOiB1bmtub3duW11cbikgPT4gdm9pZDtcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGRpc3BsYXllZCBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgKGluXG4gKiBjaHJvbWUpLiBUbyBhdm9pZCBmb3JjaW5nIHVzZXJzIHRvIGhhdmUgdG8gb3B0LWluIHRvIHRoZXNlIGxvZ3MgdHdpY2VcbiAqIChpLmUuIG9uY2UgZm9yIGZpcmViYXNlLCBhbmQgb25jZSBpbiB0aGUgY29uc29sZSksIHdlIGFyZSBzZW5kaW5nIGBERUJVR2BcbiAqIGxvZ3MgdG8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24uXG4gKi9cbmNvbnN0IENvbnNvbGVNZXRob2QgPSB7XG4gIFtMb2dMZXZlbC5ERUJVR106ICdsb2cnLFxuICBbTG9nTGV2ZWwuVkVSQk9TRV06ICdsb2cnLFxuICBbTG9nTGV2ZWwuSU5GT106ICdpbmZvJyxcbiAgW0xvZ0xldmVsLldBUk5dOiAnd2FybicsXG4gIFtMb2dMZXZlbC5FUlJPUl06ICdlcnJvcidcbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbG9nIGhhbmRsZXIgd2lsbCBmb3J3YXJkIERFQlVHLCBWRVJCT1NFLCBJTkZPLCBXQVJOLCBhbmQgRVJST1JcbiAqIG1lc3NhZ2VzIG9uIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgY29uc29sZSBjb3VudGVycGFydHMgKGlmIHRoZSBsb2cgbWV0aG9kXG4gKiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgbG9nIGxldmVsKVxuICovXG5jb25zdCBkZWZhdWx0TG9nSGFuZGxlcjogTG9nSGFuZGxlciA9IChpbnN0YW5jZSwgbG9nVHlwZSwgLi4uYXJncyk6IHZvaWQgPT4ge1xuICBpZiAobG9nVHlwZSA8IGluc3RhbmNlLmxvZ0xldmVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgY29uc3QgbWV0aG9kID0gQ29uc29sZU1ldGhvZFtsb2dUeXBlIGFzIGtleW9mIHR5cGVvZiBDb25zb2xlTWV0aG9kXTtcbiAgaWYgKG1ldGhvZCkge1xuICAgIGNvbnNvbGVbbWV0aG9kIGFzICdsb2cnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJ10oXG4gICAgICBgWyR7bm93fV0gICR7aW5zdGFuY2UubmFtZX06YCxcbiAgICAgIC4uLmFyZ3NcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBBdHRlbXB0ZWQgdG8gbG9nIGEgbWVzc2FnZSB3aXRoIGFuIGludmFsaWQgbG9nVHlwZSAodmFsdWU6ICR7bG9nVHlwZX0pYFxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuICAvKipcbiAgICogR2l2ZXMgeW91IGFuIGluc3RhbmNlIG9mIGEgTG9nZ2VyIHRvIGNhcHR1cmUgbWVzc2FnZXMgYWNjb3JkaW5nIHRvXG4gICAqIEZpcmViYXNlJ3MgbG9nZ2luZyBzY2hlbWUuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIHRoYXQgdGhlIGxvZ3Mgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGhcbiAgICovXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lOiBzdHJpbmcpIHtcbiAgICAvKipcbiAgICAgKiBDYXB0dXJlIHRoZSBjdXJyZW50IGluc3RhbmNlIGZvciBsYXRlciB1c2VcbiAgICAgKi9cbiAgICBpbnN0YW5jZXMucHVzaCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbG9nIGxldmVsIG9mIHRoZSBnaXZlbiBMb2dnZXIgaW5zdGFuY2UuXG4gICAqL1xuICBwcml2YXRlIF9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcblxuICBnZXQgbG9nTGV2ZWwoKTogTG9nTGV2ZWwge1xuICAgIHJldHVybiB0aGlzLl9sb2dMZXZlbDtcbiAgfVxuXG4gIHNldCBsb2dMZXZlbCh2YWw6IExvZ0xldmVsKSB7XG4gICAgaWYgKCEodmFsIGluIExvZ0xldmVsKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCB2YWx1ZSBcIiR7dmFsfVwiIGFzc2lnbmVkIHRvIFxcYGxvZ0xldmVsXFxgYCk7XG4gICAgfVxuICAgIHRoaXMuX2xvZ0xldmVsID0gdmFsO1xuICB9XG5cbiAgLy8gV29ya2Fyb3VuZCBmb3Igc2V0dGVyL2dldHRlciBoYXZpbmcgdG8gYmUgdGhlIHNhbWUgdHlwZS5cbiAgc2V0TG9nTGV2ZWwodmFsOiBMb2dMZXZlbCB8IExvZ0xldmVsU3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5fbG9nTGV2ZWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IGxldmVsU3RyaW5nVG9FbnVtW3ZhbF0gOiB2YWw7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1haW4gKGludGVybmFsKSBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cbiAgICogQ2FuIGJlIHNldCB0byBhIG5ldyBmdW5jdGlvbiBpbiBpbnRlcm5hbCBwYWNrYWdlIGNvZGUgYnV0IG5vdCBieSB1c2VyLlxuICAgKi9cbiAgcHJpdmF0ZSBfbG9nSGFuZGxlcjogTG9nSGFuZGxlciA9IGRlZmF1bHRMb2dIYW5kbGVyO1xuICBnZXQgbG9nSGFuZGxlcigpOiBMb2dIYW5kbGVyIHtcbiAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcbiAgfVxuICBzZXQgbG9nSGFuZGxlcih2YWw6IExvZ0hhbmRsZXIpIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICB0aGlzLl9sb2dIYW5kbGVyID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25hbCwgYWRkaXRpb25hbCwgdXNlci1kZWZpbmVkIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxuICAgKi9cbiAgcHJpdmF0ZSBfdXNlckxvZ0hhbmRsZXI6IExvZ0hhbmRsZXIgfCBudWxsID0gbnVsbDtcbiAgZ2V0IHVzZXJMb2dIYW5kbGVyKCk6IExvZ0hhbmRsZXIgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fdXNlckxvZ0hhbmRsZXI7XG4gIH1cbiAgc2V0IHVzZXJMb2dIYW5kbGVyKHZhbDogTG9nSGFuZGxlciB8IG51bGwpIHtcbiAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb25zIGJlbG93IGFyZSBhbGwgYmFzZWQgb24gdGhlIGBjb25zb2xlYCBpbnRlcmZhY2VcbiAgICovXG5cbiAgZGVidWcoLi4uYXJnczogdW5rbm93bltdKTogdm9pZCB7XG4gICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuREVCVUcsIC4uLmFyZ3MpO1xuICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuREVCVUcsIC4uLmFyZ3MpO1xuICB9XG4gIGxvZyguLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJlxuICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuVkVSQk9TRSwgLi4uYXJncyk7XG4gICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcbiAgfVxuICBpbmZvKC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xuICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuSU5GTywgLi4uYXJncyk7XG4gIH1cbiAgd2FybiguLi5hcmdzOiB1bmtub3duW10pOiB2b2lkIHtcbiAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5XQVJOLCAuLi5hcmdzKTtcbiAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLldBUk4sIC4uLmFyZ3MpO1xuICB9XG4gIGVycm9yKC4uLmFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xuICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcbiAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLkVSUk9SLCAuLi5hcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWw6IExvZ0xldmVsU3RyaW5nIHwgTG9nTGV2ZWwpOiB2b2lkIHtcbiAgaW5zdGFuY2VzLmZvckVhY2goaW5zdCA9PiB7XG4gICAgaW5zdC5zZXRMb2dMZXZlbChsZXZlbCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VXNlckxvZ0hhbmRsZXIoXG4gIGxvZ0NhbGxiYWNrOiBMb2dDYWxsYmFjayB8IG51bGwsXG4gIG9wdGlvbnM/OiBMb2dPcHRpb25zXG4pOiB2b2lkIHtcbiAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcbiAgICBsZXQgY3VzdG9tTG9nTGV2ZWw6IExvZ0xldmVsIHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sZXZlbCkge1xuICAgICAgY3VzdG9tTG9nTGV2ZWwgPSBsZXZlbFN0cmluZ1RvRW51bVtvcHRpb25zLmxldmVsXTtcbiAgICB9XG4gICAgaWYgKGxvZ0NhbGxiYWNrID09PSBudWxsKSB7XG4gICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnVzZXJMb2dIYW5kbGVyID0gKFxuICAgICAgICBpbnN0YW5jZTogTG9nZ2VyLFxuICAgICAgICBsZXZlbDogTG9nTGV2ZWwsXG4gICAgICAgIC4uLmFyZ3M6IHVua25vd25bXVxuICAgICAgKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzXG4gICAgICAgICAgLm1hcChhcmcgPT4ge1xuICAgICAgICAgICAgaWYgKGFyZyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gYXJnLm1lc3NhZ2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maWx0ZXIoYXJnID0+IGFyZylcbiAgICAgICAgICAuam9pbignICcpO1xuICAgICAgICBpZiAobGV2ZWwgPj0gKGN1c3RvbUxvZ0xldmVsID8/IGluc3RhbmNlLmxvZ0xldmVsKSkge1xuICAgICAgICAgIGxvZ0NhbGxiYWNrKHtcbiAgICAgICAgICAgIGxldmVsOiBMb2dMZXZlbFtsZXZlbF0udG9Mb3dlckNhc2UoKSBhcyBMb2dMZXZlbFN0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgdHlwZTogaW5zdGFuY2UubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudENvbnRhaW5lcixcbiAgQ29tcG9uZW50VHlwZSxcbiAgUHJvdmlkZXIsXG4gIE5hbWVcbn0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2UsIFZlcnNpb25TZXJ2aWNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsIGltcGxlbWVudHMgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcikge31cbiAgLy8gSW4gaW5pdGlhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3aWxsIGJlIGNhbGxlZCBieSBpbnN0YWxsYXRpb25zIG9uXG4gIC8vIGF1dGggdG9rZW4gcmVmcmVzaCwgYW5kIGluc3RhbGxhdGlvbnMgd2lsbCBzZW5kIHRoaXMgc3RyaW5nLlxuICBnZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBwcm92aWRlcnMgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcnMoKTtcbiAgICAvLyBMb29wIHRocm91Z2ggcHJvdmlkZXJzIGFuZCBnZXQgbGlicmFyeS92ZXJzaW9uIHBhaXJzIGZyb20gYW55IHRoYXQgYXJlXG4gICAgLy8gdmVyc2lvbiBjb21wb25lbnRzLlxuICAgIHJldHVybiBwcm92aWRlcnNcbiAgICAgIC5tYXAocHJvdmlkZXIgPT4ge1xuICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKSBhcyBWZXJzaW9uU2VydmljZTtcbiAgICAgICAgICByZXR1cm4gYCR7c2VydmljZS5saWJyYXJ5fS8ke3NlcnZpY2UudmVyc2lvbn1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmZpbHRlcihsb2dTdHJpbmcgPT4gbG9nU3RyaW5nKVxuICAgICAgLmpvaW4oJyAnKTtcbiAgfVxufVxuLyoqXG4gKlxuICogQHBhcmFtIHByb3ZpZGVyIGNoZWNrIGlmIHRoaXMgcHJvdmlkZXIgcHJvdmlkZXMgYSBWZXJzaW9uU2VydmljZVxuICpcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxuICogcHJvdmlkZXMgVmVyc2lvblNlcnZpY2UuIFRoZSBwcm92aWRlciBpcyBub3QgbmVjZXNzYXJpbHkgYSAnYXBwLXZlcnNpb24nXG4gKiBwcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyOiBQcm92aWRlcjxOYW1lPik6IGJvb2xlYW4ge1xuICBjb25zdCBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcbiAgcmV0dXJuIGNvbXBvbmVudD8udHlwZSA9PT0gQ29tcG9uZW50VHlwZS5WRVJTSU9OO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignQGZpcmViYXNlL2FwcCcpO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IG5hbWUgYXMgYXBwTmFtZSB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGFwcENvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi9hcHAtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGFuYWx5dGljc0NvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9hbmFseXRpY3MtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGFuYWx5dGljc05hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9hbmFseXRpY3MvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgYXBwQ2hlY2tDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvYXBwLWNoZWNrLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBhcHBDaGVja05hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9hcHAtY2hlY2svcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgYXV0aE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9hdXRoL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGF1dGhDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvYXV0aC1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgZGF0YWJhc2VOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvZGF0YWJhc2UvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgZGF0YWJhc2VDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvZGF0YWJhc2UtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGZ1bmN0aW9uc05hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9mdW5jdGlvbnMvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgZnVuY3Rpb25zQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2Z1bmN0aW9ucy1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgaW5zdGFsbGF0aW9uc05hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9pbnN0YWxsYXRpb25zL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGluc3RhbGxhdGlvbnNDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvaW5zdGFsbGF0aW9ucy1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgbWVzc2FnaW5nTmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL21lc3NhZ2luZy9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBtZXNzYWdpbmdDb21wYXROYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvbWVzc2FnaW5nLWNvbXBhdC9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBwZXJmb3JtYW5jZU5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9wZXJmb3JtYW5jZS9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBwZXJmb3JtYW5jZUNvbXBhdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9wZXJmb3JtYW5jZS1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgcmVtb3RlQ29uZmlnTmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL3JlbW90ZS1jb25maWcvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgcmVtb3RlQ29uZmlnQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL3JlbW90ZS1jb25maWctY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIHN0b3JhZ2VOYW1lIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZXMvc3RvcmFnZS9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgbmFtZSBhcyBzdG9yYWdlQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL3N0b3JhZ2UtY29tcGF0L3BhY2thZ2UuanNvbic7XG5pbXBvcnQgeyBuYW1lIGFzIGZpcmVzdG9yZU5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9maXJlc3RvcmUvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgZmlyZXN0b3JlQ29tcGF0TmFtZSB9IGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL2ZpcmVzdG9yZS1jb21wYXQvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IG5hbWUgYXMgcGFja2FnZU5hbWUgfSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9maXJlYmFzZS9wYWNrYWdlLmpzb24nO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGFwcCBuYW1lXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcblxuZXhwb3J0IGNvbnN0IFBMQVRGT1JNX0xPR19TVFJJTkcgPSB7XG4gIFthcHBOYW1lXTogJ2ZpcmUtY29yZScsXG4gIFthcHBDb21wYXROYW1lXTogJ2ZpcmUtY29yZS1jb21wYXQnLFxuICBbYW5hbHl0aWNzTmFtZV06ICdmaXJlLWFuYWx5dGljcycsXG4gIFthbmFseXRpY3NDb21wYXROYW1lXTogJ2ZpcmUtYW5hbHl0aWNzLWNvbXBhdCcsXG4gIFthcHBDaGVja05hbWVdOiAnZmlyZS1hcHAtY2hlY2snLFxuICBbYXBwQ2hlY2tDb21wYXROYW1lXTogJ2ZpcmUtYXBwLWNoZWNrLWNvbXBhdCcsXG4gIFthdXRoTmFtZV06ICdmaXJlLWF1dGgnLFxuICBbYXV0aENvbXBhdE5hbWVdOiAnZmlyZS1hdXRoLWNvbXBhdCcsXG4gIFtkYXRhYmFzZU5hbWVdOiAnZmlyZS1ydGRiJyxcbiAgW2RhdGFiYXNlQ29tcGF0TmFtZV06ICdmaXJlLXJ0ZGItY29tcGF0JyxcbiAgW2Z1bmN0aW9uc05hbWVdOiAnZmlyZS1mbicsXG4gIFtmdW5jdGlvbnNDb21wYXROYW1lXTogJ2ZpcmUtZm4tY29tcGF0JyxcbiAgW2luc3RhbGxhdGlvbnNOYW1lXTogJ2ZpcmUtaWlkJyxcbiAgW2luc3RhbGxhdGlvbnNDb21wYXROYW1lXTogJ2ZpcmUtaWlkLWNvbXBhdCcsXG4gIFttZXNzYWdpbmdOYW1lXTogJ2ZpcmUtZmNtJyxcbiAgW21lc3NhZ2luZ0NvbXBhdE5hbWVdOiAnZmlyZS1mY20tY29tcGF0JyxcbiAgW3BlcmZvcm1hbmNlTmFtZV06ICdmaXJlLXBlcmYnLFxuICBbcGVyZm9ybWFuY2VDb21wYXROYW1lXTogJ2ZpcmUtcGVyZi1jb21wYXQnLFxuICBbcmVtb3RlQ29uZmlnTmFtZV06ICdmaXJlLXJjJyxcbiAgW3JlbW90ZUNvbmZpZ0NvbXBhdE5hbWVdOiAnZmlyZS1yYy1jb21wYXQnLFxuICBbc3RvcmFnZU5hbWVdOiAnZmlyZS1nY3MnLFxuICBbc3RvcmFnZUNvbXBhdE5hbWVdOiAnZmlyZS1nY3MtY29tcGF0JyxcbiAgW2ZpcmVzdG9yZU5hbWVdOiAnZmlyZS1mc3QnLFxuICBbZmlyZXN0b3JlQ29tcGF0TmFtZV06ICdmaXJlLWZzdC1jb21wYXQnLFxuICAnZmlyZS1qcyc6ICdmaXJlLWpzJywgLy8gUGxhdGZvcm0gaWRlbnRpZmllciBmb3IgSlMgU0RLLlxuICBbcGFja2FnZU5hbWVdOiAnZmlyZS1qcy1hbGwnXG59IGFzIGNvbnN0O1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZpcmViYXNlQXBwIH0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm92aWRlciwgTmFtZSB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgREVGQVVMVF9FTlRSWV9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBJbXBsIH0gZnJvbSAnLi9maXJlYmFzZUFwcCc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBfYXBwcyA9IG5ldyBNYXA8c3RyaW5nLCBGaXJlYmFzZUFwcD4oKTtcblxuLyoqXG4gKiBSZWdpc3RlcmVkIGNvbXBvbmVudHMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgY29uc3QgX2NvbXBvbmVudHMgPSBuZXcgTWFwPHN0cmluZywgQ29tcG9uZW50PGFueT4+KCk7XG5cbi8qKlxuICogQHBhcmFtIGNvbXBvbmVudCAtIHRoZSBjb21wb25lbnQgYmVpbmcgYWRkZWQgdG8gdGhpcyBhcHAncyBjb250YWluZXJcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9hZGRDb21wb25lbnQ8VCBleHRlbmRzIE5hbWU+KFxuICBhcHA6IEZpcmViYXNlQXBwLFxuICBjb21wb25lbnQ6IENvbXBvbmVudDxUPlxuKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhcbiAgICAgIGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgJHthcHAubmFtZX1gLFxuICAgICAgZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoXG4gIGFwcDogRmlyZWJhc2VBcHAsXG4gIGNvbXBvbmVudDogQ29tcG9uZW50XG4pOiB2b2lkIHtcbiAgKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCB0byByZWdpc3RlclxuICogQHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX3JlZ2lzdGVyQ29tcG9uZW50PFQgZXh0ZW5kcyBOYW1lPihcbiAgY29tcG9uZW50OiBDb21wb25lbnQ8VD5cbik6IGJvb2xlYW4ge1xuICBjb25zdCBjb21wb25lbnROYW1lID0gY29tcG9uZW50Lm5hbWU7XG4gIGlmIChfY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcbiAgICBsb2dnZXIuZGVidWcoXG4gICAgICBgVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgJHtjb21wb25lbnROYW1lfS5gXG4gICAgKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9jb21wb25lbnRzLnNldChjb21wb25lbnROYW1lLCBjb21wb25lbnQpO1xuXG4gIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcbiAgZm9yIChjb25zdCBhcHAgb2YgX2FwcHMudmFsdWVzKCkpIHtcbiAgICBfYWRkQ29tcG9uZW50KGFwcCBhcyBGaXJlYmFzZUFwcEltcGwsIGNvbXBvbmVudCk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxuICpcbiAqIEByZXR1cm5zIHRoZSBwcm92aWRlciBmb3IgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2dldFByb3ZpZGVyPFQgZXh0ZW5kcyBOYW1lPihcbiAgYXBwOiBGaXJlYmFzZUFwcCxcbiAgbmFtZTogVFxuKTogUHJvdmlkZXI8VD4ge1xuICByZXR1cm4gKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxuICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciAtIHNlcnZpY2UgaW5zdGFuY2UgaWRlbnRpZmllciBpbiBjYXNlIHRoZSBzZXJ2aWNlIHN1cHBvcnRzIG11bHRpcGxlIGluc3RhbmNlc1xuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX3JlbW92ZVNlcnZpY2VJbnN0YW5jZTxUIGV4dGVuZHMgTmFtZT4oXG4gIGFwcDogRmlyZWJhc2VBcHAsXG4gIG5hbWU6IFQsXG4gIGluc3RhbmNlSWRlbnRpZmllcjogc3RyaW5nID0gREVGQVVMVF9FTlRSWV9OQU1FXG4pOiB2b2lkIHtcbiAgX2dldFByb3ZpZGVyKGFwcCwgbmFtZSkuY2xlYXJJbnN0YW5jZShpbnN0YW5jZUlkZW50aWZpZXIpO1xufVxuXG4vKipcbiAqIFRlc3Qgb25seVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NsZWFyQ29tcG9uZW50cygpOiB2b2lkIHtcbiAgX2NvbXBvbmVudHMuY2xlYXIoKTtcbn1cblxuLyoqXG4gKiBFeHBvcnRlZCBpbiBvcmRlciB0byBiZSB1c2VkIGluIGFwcC1jb21wYXQgcGFja2FnZVxuICovXG5leHBvcnQgeyBERUZBVUxUX0VOVFJZX05BTUUgYXMgX0RFRkFVTFRfRU5UUllfTkFNRSB9O1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgRXJyb3JNYXAgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIEFwcEVycm9yIHtcbiAgTk9fQVBQID0gJ25vLWFwcCcsXG4gIEJBRF9BUFBfTkFNRSA9ICdiYWQtYXBwLW5hbWUnLFxuICBEVVBMSUNBVEVfQVBQID0gJ2R1cGxpY2F0ZS1hcHAnLFxuICBBUFBfREVMRVRFRCA9ICdhcHAtZGVsZXRlZCcsXG4gIElOVkFMSURfQVBQX0FSR1VNRU5UID0gJ2ludmFsaWQtYXBwLWFyZ3VtZW50JyxcbiAgSU5WQUxJRF9MT0dfQVJHVU1FTlQgPSAnaW52YWxpZC1sb2ctYXJndW1lbnQnXG59XG5cbmNvbnN0IEVSUk9SUzogRXJyb3JNYXA8QXBwRXJyb3I+ID0ge1xuICBbQXBwRXJyb3IuTk9fQVBQXTpcbiAgICBcIk5vIEZpcmViYXNlIEFwcCAneyRhcHBOYW1lfScgaGFzIGJlZW4gY3JlYXRlZCAtIFwiICtcbiAgICAnY2FsbCBGaXJlYmFzZSBBcHAuaW5pdGlhbGl6ZUFwcCgpJyxcbiAgW0FwcEVycm9yLkJBRF9BUFBfTkFNRV06IFwiSWxsZWdhbCBBcHAgbmFtZTogJ3skYXBwTmFtZX1cIixcbiAgW0FwcEVycm9yLkRVUExJQ0FURV9BUFBdOlxuICAgIFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGV4aXN0cyB3aXRoIGRpZmZlcmVudCBvcHRpb25zIG9yIGNvbmZpZ1wiLFxuICBbQXBwRXJyb3IuQVBQX0RFTEVURURdOiBcIkZpcmViYXNlIEFwcCBuYW1lZCAneyRhcHBOYW1lfScgYWxyZWFkeSBkZWxldGVkXCIsXG4gIFtBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVF06XG4gICAgJ2ZpcmViYXNlLnskYXBwTmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcbiAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLicsXG4gIFtBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVF06XG4gICAgJ0ZpcnN0IGFyZ3VtZW50IHRvIGBvbkxvZ2AgbXVzdCBiZSBudWxsIG9yIGEgZnVuY3Rpb24uJ1xufTtcblxuaW50ZXJmYWNlIEVycm9yUGFyYW1zIHtcbiAgW0FwcEVycm9yLk5PX0FQUF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5CQURfQVBQX05BTUVdOiB7IGFwcE5hbWU6IHN0cmluZyB9O1xuICBbQXBwRXJyb3IuRFVQTElDQVRFX0FQUF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5BUFBfREVMRVRFRF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG4gIFtBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVF06IHsgYXBwTmFtZTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeTxBcHBFcnJvciwgRXJyb3JQYXJhbXM+KFxuICAnYXBwJyxcbiAgJ0ZpcmViYXNlJyxcbiAgRVJST1JTXG4pO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEZpcmViYXNlQXBwLFxuICBGaXJlYmFzZU9wdGlvbnMsXG4gIEZpcmViYXNlQXBwU2V0dGluZ3Ncbn0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50Q29udGFpbmVyLFxuICBDb21wb25lbnQsXG4gIENvbXBvbmVudFR5cGVcbn0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBFUlJPUl9GQUNUT1JZLCBBcHBFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuZXhwb3J0IGNsYXNzIEZpcmViYXNlQXBwSW1wbCBpbXBsZW1lbnRzIEZpcmViYXNlQXBwIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfb3B0aW9uczogRmlyZWJhc2VPcHRpb25zO1xuICBwcml2YXRlIHJlYWRvbmx5IF9uYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcmlnaW5hbCBjb25maWcgdmFsdWVzIHBhc3NlZCBpbiBhcyBhIGNvbnN0cnVjdG9yIHBhcmFtZXRlci5cbiAgICogSXQgaXMgb25seSB1c2VkIHRvIGNvbXBhcmUgd2l0aCBhbm90aGVyIGNvbmZpZyBvYmplY3QgdG8gc3VwcG9ydCBpZGVtcG90ZW50IGluaXRpYWxpemVBcHAoKS5cbiAgICpcbiAgICogVXBkYXRpbmcgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkIG9uIHRoZSBBcHAgaW5zdGFuY2Ugd2lsbCBub3QgY2hhbmdlIGl0cyB2YWx1ZSBpbiBfY29uZmlnLlxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBSZXF1aXJlZDxGaXJlYmFzZUFwcFNldHRpbmdzPjtcbiAgcHJpdmF0ZSBfYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkOiBib29sZWFuO1xuICBwcml2YXRlIF9pc0RlbGV0ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSByZWFkb25seSBfY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICAgIGNvbmZpZzogUmVxdWlyZWQ8RmlyZWJhc2VBcHBTZXR0aW5ncz4sXG4gICAgY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXJcbiAgKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuX2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gICAgdGhpcy5fbmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9XG4gICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQoXG4gICAgICBuZXcgQ29tcG9uZW50KCdhcHAnLCAoKSA9PiB0aGlzLCBDb21wb25lbnRUeXBlLlBVQkxJQylcbiAgICApO1xuICB9XG5cbiAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcbiAgfVxuXG4gIHNldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQodmFsOiBib29sZWFuKSB7XG4gICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xuICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHZhbDtcbiAgfVxuXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICB9XG5cbiAgZ2V0IG9wdGlvbnMoKTogRmlyZWJhc2VPcHRpb25zIHtcbiAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gIH1cblxuICBnZXQgY29uZmlnKCk6IFJlcXVpcmVkPEZpcmViYXNlQXBwU2V0dGluZ3M+IHtcbiAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZztcbiAgfVxuXG4gIGdldCBjb250YWluZXIoKTogQ29tcG9uZW50Q29udGFpbmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICB9XG5cbiAgZ2V0IGlzRGVsZXRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNEZWxldGVkO1xuICB9XG5cbiAgc2V0IGlzRGVsZXRlZCh2YWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc0RlbGV0ZWQgPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cbiAgICogdXNlIGJlZm9yZSBwZXJmb3JtaW5nIEFQSSBhY3Rpb25zIG9uIHRoZSBBcHAuXG4gICAqL1xuICBwcml2YXRlIGNoZWNrRGVzdHJveWVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRGVsZXRlZCkge1xuICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoQXBwRXJyb3IuQVBQX0RFTEVURUQsIHsgYXBwTmFtZTogdGhpcy5fbmFtZSB9KTtcbiAgICB9XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBGaXJlYmFzZUFwcCxcbiAgRmlyZWJhc2VPcHRpb25zLFxuICBGaXJlYmFzZUFwcFNldHRpbmdzXG59IGZyb20gJy4vcHVibGljLXR5cGVzJztcbmltcG9ydCB7IERFRkFVTFRfRU5UUllfTkFNRSwgUExBVEZPUk1fTE9HX1NUUklORyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IEVSUk9SX0ZBQ1RPUlksIEFwcEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50Q29udGFpbmVyLFxuICBDb21wb25lbnQsXG4gIE5hbWUsXG4gIENvbXBvbmVudFR5cGVcbn0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vLi4vZmlyZWJhc2UvcGFja2FnZS5qc29uJztcbmltcG9ydCB7IEZpcmViYXNlQXBwSW1wbCB9IGZyb20gJy4vZmlyZWJhc2VBcHAnO1xuaW1wb3J0IHsgX2FwcHMsIF9jb21wb25lbnRzLCBfcmVnaXN0ZXJDb21wb25lbnQgfSBmcm9tICcuL2ludGVybmFsJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7XG4gIExvZ0xldmVsU3RyaW5nLFxuICBzZXRMb2dMZXZlbCBhcyBzZXRMb2dMZXZlbEltcGwsXG4gIExvZ0NhbGxiYWNrLFxuICBMb2dPcHRpb25zLFxuICBzZXRVc2VyTG9nSGFuZGxlclxufSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IGRlZXBFcXVhbCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuZXhwb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXG4gKiBUaGUgY3VycmVudCBTREsgdmVyc2lvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBTREtfVkVSU0lPTiA9IHZlcnNpb247XG5cbi8qKlxuICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UuXG4gKlxuICogU2VlXG4gKiB7QGxpbmtcbiAqICAgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvd2ViL3NldHVwI2FkZF9maXJlYmFzZV90b195b3VyX2FwcFxuICogICB8IEFkZCBGaXJlYmFzZSB0byB5b3VyIGFwcH0gYW5kXG4gKiB7QGxpbmtcbiAqICAgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3Mvd2ViL3NldHVwI211bHRpcGxlLXByb2plY3RzXG4gKiAgIHwgSW5pdGlhbGl6ZSBtdWx0aXBsZSBwcm9qZWN0c30gZm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqXG4gKiAvLyBJbml0aWFsaXplIGRlZmF1bHQgYXBwXG4gKiAvLyBSZXRyaWV2ZSB5b3VyIG93biBvcHRpb25zIHZhbHVlcyBieSBhZGRpbmcgYSB3ZWIgYXBwIG9uXG4gKiAvLyBodHRwczovL2NvbnNvbGUuZmlyZWJhc2UuZ29vZ2xlLmNvbVxuICogaW5pdGlhbGl6ZUFwcCh7XG4gKiAgIGFwaUtleTogXCJBSXphLi4uLlwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXV0aCAvIEdlbmVyYWwgVXNlXG4gKiAgIGF1dGhEb21haW46IFwiWU9VUl9BUFAuZmlyZWJhc2VhcHAuY29tXCIsICAgICAgICAgLy8gQXV0aCB3aXRoIHBvcHVwL3JlZGlyZWN0XG4gKiAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vWU9VUl9BUFAuZmlyZWJhc2Vpby5jb21cIiwgLy8gUmVhbHRpbWUgRGF0YWJhc2VcbiAqICAgc3RvcmFnZUJ1Y2tldDogXCJZT1VSX0FQUC5hcHBzcG90LmNvbVwiLCAgICAgICAgICAvLyBTdG9yYWdlXG4gKiAgIG1lc3NhZ2luZ1NlbmRlcklkOiBcIjEyMzQ1Njc4OVwiICAgICAgICAgICAgICAgICAgLy8gQ2xvdWQgTWVzc2FnaW5nXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKlxuICogLy8gSW5pdGlhbGl6ZSBhbm90aGVyIGFwcFxuICogY29uc3Qgb3RoZXJBcHAgPSBpbml0aWFsaXplQXBwKHtcbiAqICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly88T1RIRVJfREFUQUJBU0VfTkFNRT4uZmlyZWJhc2Vpby5jb21cIixcbiAqICAgc3RvcmFnZUJ1Y2tldDogXCI8T1RIRVJfU1RPUkFHRV9CVUNLRVQ+LmFwcHNwb3QuY29tXCJcbiAqIH0sIFwib3RoZXJBcHBcIik7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSBhcHAncyBzZXJ2aWNlcy5cbiAqIEBwYXJhbSBuYW1lIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgYXBwIHRvIGluaXRpYWxpemUuIElmIG5vIG5hbWVcbiAqICAgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIGBcIltERUZBVUxUXVwiYC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgaW5pdGlhbGl6ZWQgYXBwLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVBcHAoXG4gIG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucyxcbiAgbmFtZT86IHN0cmluZ1xuKTogRmlyZWJhc2VBcHA7XG4vKipcbiAqIENyZWF0ZXMgYW5kIGluaXRpYWxpemVzIGEgRmlyZWJhc2VBcHAgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgYXBwJ3Mgc2VydmljZXMuXG4gKiBAcGFyYW0gY29uZmlnIC0gRmlyZWJhc2VBcHAgQ29uZmlndXJhdGlvblxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVBcHAoXG4gIG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucyxcbiAgY29uZmlnPzogRmlyZWJhc2VBcHBTZXR0aW5nc1xuKTogRmlyZWJhc2VBcHA7XG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChcbiAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICByYXdDb25maWcgPSB7fVxuKTogRmlyZWJhc2VBcHAge1xuICBpZiAodHlwZW9mIHJhd0NvbmZpZyAhPT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBuYW1lID0gcmF3Q29uZmlnO1xuICAgIHJhd0NvbmZpZyA9IHsgbmFtZSB9O1xuICB9XG5cbiAgY29uc3QgY29uZmlnOiBSZXF1aXJlZDxGaXJlYmFzZUFwcFNldHRpbmdzPiA9IHtcbiAgICBuYW1lOiBERUZBVUxUX0VOVFJZX05BTUUsXG4gICAgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkOiBmYWxzZSxcbiAgICAuLi5yYXdDb25maWdcbiAgfTtcbiAgY29uc3QgbmFtZSA9IGNvbmZpZy5uYW1lO1xuXG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgIW5hbWUpIHtcbiAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShBcHBFcnJvci5CQURfQVBQX05BTUUsIHtcbiAgICAgIGFwcE5hbWU6IFN0cmluZyhuYW1lKVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgZXhpc3RpbmdBcHAgPSBfYXBwcy5nZXQobmFtZSkgYXMgRmlyZWJhc2VBcHBJbXBsO1xuICBpZiAoZXhpc3RpbmdBcHApIHtcbiAgICAvLyByZXR1cm4gdGhlIGV4aXN0aW5nIGFwcCBpZiBvcHRpb25zIGFuZCBjb25maWcgZGVlcCBlcXVhbCB0aGUgb25lcyBpbiB0aGUgZXhpc3RpbmcgYXBwLlxuICAgIGlmIChcbiAgICAgIGRlZXBFcXVhbChvcHRpb25zLCBleGlzdGluZ0FwcC5vcHRpb25zKSAmJlxuICAgICAgZGVlcEVxdWFsKGNvbmZpZywgZXhpc3RpbmdBcHAuY29uZmlnKVxuICAgICkge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nQXBwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShBcHBFcnJvci5EVVBMSUNBVEVfQVBQLCB7IGFwcE5hbWU6IG5hbWUgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29udGFpbmVyID0gbmV3IENvbXBvbmVudENvbnRhaW5lcihuYW1lKTtcbiAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgX2NvbXBvbmVudHMudmFsdWVzKCkpIHtcbiAgICBjb250YWluZXIuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XG4gIH1cblxuICBjb25zdCBuZXdBcHAgPSBuZXcgRmlyZWJhc2VBcHBJbXBsKG9wdGlvbnMsIGNvbmZpZywgY29udGFpbmVyKTtcblxuICBfYXBwcy5zZXQobmFtZSwgbmV3QXBwKTtcblxuICByZXR1cm4gbmV3QXBwO1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyBhIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cbiAqXG4gKiBXaGVuIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgdGhlIGRlZmF1bHQgYXBwIGlzIHJldHVybmVkLiBXaGVuIGFuIGFwcCBuYW1lXG4gKiBpcyBwcm92aWRlZCwgdGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cbiAqXG4gKiBBbiBleGNlcHRpb24gaXMgdGhyb3duIGlmIHRoZSBhcHAgYmVpbmcgcmV0cmlldmVkIGhhcyBub3QgeWV0IGJlZW5cbiAqIGluaXRpYWxpemVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgYXBwXG4gKiBjb25zdCBhcHAgPSBnZXRBcHAoKTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBSZXR1cm4gYSBuYW1lZCBhcHBcbiAqIGNvbnN0IG90aGVyQXBwID0gZ2V0QXBwKFwib3RoZXJBcHBcIik7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gbmFtZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGFwcCB0byByZXR1cm4uIElmIG5vIG5hbWUgaXNcbiAqICAgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIGBcIltERUZBVUxUXVwiYC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgYXBwIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3ZpZGVkIGFwcCBuYW1lLlxuICogICBJZiBubyBhcHAgbmFtZSBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQgYXBwIGlzIHJldHVybmVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcChuYW1lOiBzdHJpbmcgPSBERUZBVUxUX0VOVFJZX05BTUUpOiBGaXJlYmFzZUFwcCB7XG4gIGNvbnN0IGFwcCA9IF9hcHBzLmdldChuYW1lKTtcbiAgaWYgKCFhcHApIHtcbiAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShBcHBFcnJvci5OT19BUFAsIHsgYXBwTmFtZTogbmFtZSB9KTtcbiAgfVxuXG4gIHJldHVybiBhcHA7XG59XG5cbi8qKlxuICogQSAocmVhZC1vbmx5KSBhcnJheSBvZiBhbGwgaW5pdGlhbGl6ZWQgYXBwcy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcHMoKTogRmlyZWJhc2VBcHBbXSB7XG4gIHJldHVybiBBcnJheS5mcm9tKF9hcHBzLnZhbHVlcygpKTtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoaXMgYXBwIHVudXNhYmxlIGFuZCBmcmVlcyB0aGUgcmVzb3VyY2VzIG9mIGFsbCBhc3NvY2lhdGVkXG4gKiBzZXJ2aWNlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogZGVsZXRlQXBwKGFwcClcbiAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gKiAgICAgY29uc29sZS5sb2coXCJBcHAgZGVsZXRlZCBzdWNjZXNzZnVsbHlcIik7XG4gKiAgIH0pXG4gKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICogICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgZGVsZXRpbmcgYXBwOlwiLCBlcnJvcik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQXBwKGFwcDogRmlyZWJhc2VBcHApOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgbmFtZSA9IGFwcC5uYW1lO1xuICBpZiAoX2FwcHMuaGFzKG5hbWUpKSB7XG4gICAgX2FwcHMuZGVsZXRlKG5hbWUpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgKGFwcCBhcyBGaXJlYmFzZUFwcEltcGwpLmNvbnRhaW5lclxuICAgICAgICAuZ2V0UHJvdmlkZXJzKClcbiAgICAgICAgLm1hcChwcm92aWRlciA9PiBwcm92aWRlci5kZWxldGUoKSlcbiAgICApO1xuICAgIChhcHAgYXMgRmlyZWJhc2VBcHBJbXBsKS5pc0RlbGV0ZWQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgbGlicmFyeSdzIG5hbWUgYW5kIHZlcnNpb24gZm9yIHBsYXRmb3JtIGxvZ2dpbmcgcHVycG9zZXMuXG4gKiBAcGFyYW0gbGlicmFyeSAtIE5hbWUgb2YgMXAgb3IgM3AgbGlicmFyeSAoZS5nLiBmaXJlc3RvcmUsIGFuZ3VsYXJmaXJlKVxuICogQHBhcmFtIHZlcnNpb24gLSBDdXJyZW50IHZlcnNpb24gb2YgdGhhdCBsaWJyYXJ5LlxuICogQHBhcmFtIHZhcmlhbnQgLSBCdW5kbGUgdmFyaWFudCwgZS5nLiwgbm9kZSwgcm4sIGV0Yy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclZlcnNpb24oXG4gIGxpYnJhcnlLZXlPck5hbWU6IHN0cmluZyxcbiAgdmVyc2lvbjogc3RyaW5nLFxuICB2YXJpYW50Pzogc3RyaW5nXG4pOiB2b2lkIHtcbiAgLy8gVE9ETzogV2UgY2FuIHVzZSB0aGlzIGNoZWNrIHRvIHdoaXRlbGlzdCBzdHJpbmdzIHdoZW4vaWYgd2Ugc2V0IHVwXG4gIC8vIGEgZ29vZCB3aGl0ZWxpc3Qgc3lzdGVtLlxuICBsZXQgbGlicmFyeSA9IFBMQVRGT1JNX0xPR19TVFJJTkdbbGlicmFyeUtleU9yTmFtZV0gPz8gbGlicmFyeUtleU9yTmFtZTtcbiAgaWYgKHZhcmlhbnQpIHtcbiAgICBsaWJyYXJ5ICs9IGAtJHt2YXJpYW50fWA7XG4gIH1cbiAgY29uc3QgbGlicmFyeU1pc21hdGNoID0gbGlicmFyeS5tYXRjaCgvXFxzfFxcLy8pO1xuICBjb25zdCB2ZXJzaW9uTWlzbWF0Y2ggPSB2ZXJzaW9uLm1hdGNoKC9cXHN8XFwvLyk7XG4gIGlmIChsaWJyYXJ5TWlzbWF0Y2ggfHwgdmVyc2lvbk1pc21hdGNoKSB7XG4gICAgY29uc3Qgd2FybmluZyA9IFtcbiAgICAgIGBVbmFibGUgdG8gcmVnaXN0ZXIgbGlicmFyeSBcIiR7bGlicmFyeX1cIiB3aXRoIHZlcnNpb24gXCIke3ZlcnNpb259XCI6YFxuICAgIF07XG4gICAgaWYgKGxpYnJhcnlNaXNtYXRjaCkge1xuICAgICAgd2FybmluZy5wdXNoKFxuICAgICAgICBgbGlicmFyeSBuYW1lIFwiJHtsaWJyYXJ5fVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobGlicmFyeU1pc21hdGNoICYmIHZlcnNpb25NaXNtYXRjaCkge1xuICAgICAgd2FybmluZy5wdXNoKCdhbmQnKTtcbiAgICB9XG4gICAgaWYgKHZlcnNpb25NaXNtYXRjaCkge1xuICAgICAgd2FybmluZy5wdXNoKFxuICAgICAgICBgdmVyc2lvbiBuYW1lIFwiJHt2ZXJzaW9ufVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgXG4gICAgICApO1xuICAgIH1cbiAgICBsb2dnZXIud2Fybih3YXJuaW5nLmpvaW4oJyAnKSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIF9yZWdpc3RlckNvbXBvbmVudChcbiAgICBuZXcgQ29tcG9uZW50KFxuICAgICAgYCR7bGlicmFyeX0tdmVyc2lvbmAgYXMgTmFtZSxcbiAgICAgICgpID0+ICh7IGxpYnJhcnksIHZlcnNpb24gfSksXG4gICAgICBDb21wb25lbnRUeXBlLlZFUlNJT05cbiAgICApXG4gICk7XG59XG5cbi8qKlxuICogU2V0cyBsb2cgaGFuZGxlciBmb3IgYWxsIEZpcmViYXNlIFNES3MuXG4gKiBAcGFyYW0gbG9nQ2FsbGJhY2sgLSBBbiBvcHRpb25hbCBjdXN0b20gbG9nIGhhbmRsZXIgdGhhdCBleGVjdXRlcyB1c2VyIGNvZGUgd2hlbmV2ZXJcbiAqIHRoZSBGaXJlYmFzZSBTREsgbWFrZXMgYSBsb2dnaW5nIGNhbGwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gb25Mb2coXG4gIGxvZ0NhbGxiYWNrOiBMb2dDYWxsYmFjayB8IG51bGwsXG4gIG9wdGlvbnM/OiBMb2dPcHRpb25zXG4pOiB2b2lkIHtcbiAgaWYgKGxvZ0NhbGxiYWNrICE9PSBudWxsICYmIHR5cGVvZiBsb2dDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLklOVkFMSURfTE9HX0FSR1VNRU5UKTtcbiAgfVxuICBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogU2V0cyBsb2cgbGV2ZWwgZm9yIGFsbCBGaXJlYmFzZSBTREtzLlxuICpcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCBhcmUgY2FwdHVyZWQgKGkuZS4gaWZcbiAqIHlvdSBzZXQgdGhlIGxvZyBsZXZlbCB0byBgaW5mb2AsIGVycm9ycyBhcmUgbG9nZ2VkLCBidXQgYGRlYnVnYCBhbmRcbiAqIGB2ZXJib3NlYCBsb2dzIGFyZSBub3QpLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ0xldmVsKGxvZ0xldmVsOiBMb2dMZXZlbFN0cmluZyk6IHZvaWQge1xuICBzZXRMb2dMZXZlbEltcGwobG9nTGV2ZWwpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50VHlwZSB9IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbCB9IGZyb20gJy4vcGxhdGZvcm1Mb2dnZXJTZXJ2aWNlJztcbmltcG9ydCB7IG5hbWUsIHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgX3JlZ2lzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICcuL2FwaSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckNvcmVDb21wb25lbnRzKHZhcmlhbnQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgX3JlZ2lzdGVyQ29tcG9uZW50KFxuICAgIG5ldyBDb21wb25lbnQoXG4gICAgICAncGxhdGZvcm0tbG9nZ2VyJyxcbiAgICAgIGNvbnRhaW5lciA9PiBuZXcgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbChjb250YWluZXIpLFxuICAgICAgQ29tcG9uZW50VHlwZS5QUklWQVRFXG4gICAgKVxuICApO1xuXG4gIC8vIFJlZ2lzdGVyIGBhcHBgIHBhY2thZ2UuXG4gIHJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCB2YXJpYW50KTtcbiAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cbiAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdfX0JVSUxEX1RBUkdFVF9fJyk7XG4gIC8vIFJlZ2lzdGVyIHBsYXRmb3JtIFNESyBpZGVudGlmaWVyIChubyB2ZXJzaW9uKS5cbiAgcmVnaXN0ZXJWZXJzaW9uKCdmaXJlLWpzJywgJycpO1xufVxuIiwgIi8qKlxuICogRmlyZWJhc2UgQXBwXG4gKlxuICogQHJlbWFya3MgVGhpcyBwYWNrYWdlIGNvb3JkaW5hdGVzIHRoZSBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGhlIGRpZmZlcmVudCBGaXJlYmFzZSBjb21wb25lbnRzXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyByZWdpc3RlckNvcmVDb21wb25lbnRzIH0gZnJvbSAnLi9yZWdpc3RlckNvcmVDb21wb25lbnRzJztcblxuZXhwb3J0ICogZnJvbSAnLi9hcGknO1xuZXhwb3J0ICogZnJvbSAnLi9pbnRlcm5hbCc7XG5leHBvcnQgKiBmcm9tICcuL3B1YmxpYy10eXBlcyc7XG5cbnJlZ2lzdGVyQ29yZUNvbXBvbmVudHMoJ19fUlVOVElNRV9FTlZfXycpO1xuIiwgIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBnbG9iYWwsIGRlZmluZSwgU3lzdGVtLCBSZWZsZWN0LCBQcm9taXNlICovXHJcbnZhciBfX2V4dGVuZHM7XHJcbnZhciBfX2Fzc2lnbjtcclxudmFyIF9fcmVzdDtcclxudmFyIF9fZGVjb3JhdGU7XHJcbnZhciBfX3BhcmFtO1xyXG52YXIgX19tZXRhZGF0YTtcclxudmFyIF9fYXdhaXRlcjtcclxudmFyIF9fZ2VuZXJhdG9yO1xyXG52YXIgX19leHBvcnRTdGFyO1xyXG52YXIgX192YWx1ZXM7XHJcbnZhciBfX3JlYWQ7XHJcbnZhciBfX3NwcmVhZDtcclxudmFyIF9fc3ByZWFkQXJyYXlzO1xyXG52YXIgX19zcHJlYWRBcnJheTtcclxudmFyIF9fYXdhaXQ7XHJcbnZhciBfX2FzeW5jR2VuZXJhdG9yO1xyXG52YXIgX19hc3luY0RlbGVnYXRvcjtcclxudmFyIF9fYXN5bmNWYWx1ZXM7XHJcbnZhciBfX21ha2VUZW1wbGF0ZU9iamVjdDtcclxudmFyIF9faW1wb3J0U3RhcjtcclxudmFyIF9faW1wb3J0RGVmYXVsdDtcclxudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQ7XHJcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0O1xyXG52YXIgX19jcmVhdGVCaW5kaW5nO1xyXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcclxuICAgIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHR5cGVvZiB0aGlzID09PSBcIm9iamVjdFwiID8gdGhpcyA6IHt9O1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFwidHNsaWJcIiwgW1wiZXhwb3J0c1wiXSwgZnVuY3Rpb24gKGV4cG9ydHMpIHsgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290LCBjcmVhdGVFeHBvcnRlcihleHBvcnRzKSkpOyB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290LCBjcmVhdGVFeHBvcnRlcihtb2R1bGUuZXhwb3J0cykpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY3JlYXRlRXhwb3J0ZXIoZXhwb3J0cywgcHJldmlvdXMpIHtcclxuICAgICAgICBpZiAoZXhwb3J0cyAhPT0gcm9vdCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlkLCB2KSB7IHJldHVybiBleHBvcnRzW2lkXSA9IHByZXZpb3VzID8gcHJldmlvdXMoaWQsIHYpIDogdjsgfTtcclxuICAgIH1cclxufSlcclxuKGZ1bmN0aW9uIChleHBvcnRlcikge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3Jlc3QgPSBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgICAgIHZhciB0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZGVjb3JhdGUgPSBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgICAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3BhcmFtID0gZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ldGFkYXRhID0gZnVuY3Rpb24gKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdGVyID0gZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fZ2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgICAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgX19leHBvcnRTdGFyID0gZnVuY3Rpb24obSwgbykge1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxuICAgIH07XHJcblxyXG4gICAgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG4gICAgfSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgICAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgICAgIG9bazJdID0gbVtrXTtcclxuICAgIH0pO1xyXG5cclxuICAgIF9fdmFsdWVzID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3JlYWQgPSBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgICAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xyXG4gICAgX19zcHJlYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgICAgICByZXR1cm4gYXI7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xyXG4gICAgX19zcHJlYWRBcnJheXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICAgICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3NwcmVhZEFycmF5ID0gZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICAgICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hd2FpdCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNHZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgICAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jRGVsZWdhdG9yID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICB2YXIgaSwgcDtcclxuICAgICAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY1ZhbHVlcyA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCA9IGZ1bmN0aW9uIChjb29rZWQsIHJhdykge1xyXG4gICAgICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICAgICAgcmV0dXJuIGNvb2tlZDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxuICAgIH0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxuICAgIH07XHJcblxyXG4gICAgX19pbXBvcnRTdGFyID0gZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9faW1wb3J0RGVmYXVsdCA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgICAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxuICAgIH07XHJcblxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICAgICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxuICAgIH07XHJcblxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICAgICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgICAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRlcihcIl9fZXh0ZW5kc1wiLCBfX2V4dGVuZHMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2Fzc2lnblwiLCBfX2Fzc2lnbik7XHJcbiAgICBleHBvcnRlcihcIl9fcmVzdFwiLCBfX3Jlc3QpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2RlY29yYXRlXCIsIF9fZGVjb3JhdGUpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3BhcmFtXCIsIF9fcGFyYW0pO1xyXG4gICAgZXhwb3J0ZXIoXCJfX21ldGFkYXRhXCIsIF9fbWV0YWRhdGEpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2F3YWl0ZXJcIiwgX19hd2FpdGVyKTtcclxuICAgIGV4cG9ydGVyKFwiX19nZW5lcmF0b3JcIiwgX19nZW5lcmF0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2V4cG9ydFN0YXJcIiwgX19leHBvcnRTdGFyKTtcclxuICAgIGV4cG9ydGVyKFwiX19jcmVhdGVCaW5kaW5nXCIsIF9fY3JlYXRlQmluZGluZyk7XHJcbiAgICBleHBvcnRlcihcIl9fdmFsdWVzXCIsIF9fdmFsdWVzKTtcclxuICAgIGV4cG9ydGVyKFwiX19yZWFkXCIsIF9fcmVhZCk7XHJcbiAgICBleHBvcnRlcihcIl9fc3ByZWFkXCIsIF9fc3ByZWFkKTtcclxuICAgIGV4cG9ydGVyKFwiX19zcHJlYWRBcnJheXNcIiwgX19zcHJlYWRBcnJheXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3NwcmVhZEFycmF5XCIsIF9fc3ByZWFkQXJyYXkpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2F3YWl0XCIsIF9fYXdhaXQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jR2VuZXJhdG9yXCIsIF9fYXN5bmNHZW5lcmF0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jRGVsZWdhdG9yXCIsIF9fYXN5bmNEZWxlZ2F0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jVmFsdWVzXCIsIF9fYXN5bmNWYWx1ZXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX21ha2VUZW1wbGF0ZU9iamVjdFwiLCBfX21ha2VUZW1wbGF0ZU9iamVjdCk7XHJcbiAgICBleHBvcnRlcihcIl9faW1wb3J0U3RhclwiLCBfX2ltcG9ydFN0YXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2ltcG9ydERlZmF1bHRcIiwgX19pbXBvcnREZWZhdWx0KTtcclxuICAgIGV4cG9ydGVyKFwiX19jbGFzc1ByaXZhdGVGaWVsZEdldFwiLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KTtcclxuICAgIGV4cG9ydGVyKFwiX19jbGFzc1ByaXZhdGVGaWVsZFNldFwiLCBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KTtcclxufSk7XHJcbiIsICJpbXBvcnQgdHNsaWIgZnJvbSAnLi4vdHNsaWIuanMnO1xyXG5jb25zdCB7XHJcbiAgICBfX2V4dGVuZHMsXHJcbiAgICBfX2Fzc2lnbixcclxuICAgIF9fcmVzdCxcclxuICAgIF9fZGVjb3JhdGUsXHJcbiAgICBfX3BhcmFtLFxyXG4gICAgX19tZXRhZGF0YSxcclxuICAgIF9fYXdhaXRlcixcclxuICAgIF9fZ2VuZXJhdG9yLFxyXG4gICAgX19leHBvcnRTdGFyLFxyXG4gICAgX19jcmVhdGVCaW5kaW5nLFxyXG4gICAgX192YWx1ZXMsXHJcbiAgICBfX3JlYWQsXHJcbiAgICBfX3NwcmVhZCxcclxuICAgIF9fc3ByZWFkQXJyYXlzLFxyXG4gICAgX19zcHJlYWRBcnJheSxcclxuICAgIF9fYXdhaXQsXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yLFxyXG4gICAgX19hc3luY0RlbGVnYXRvcixcclxuICAgIF9fYXN5bmNWYWx1ZXMsXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcclxuICAgIF9faW1wb3J0U3RhcixcclxuICAgIF9faW1wb3J0RGVmYXVsdCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxyXG59ID0gdHNsaWI7XHJcbmV4cG9ydCB7XHJcbiAgICBfX2V4dGVuZHMsXHJcbiAgICBfX2Fzc2lnbixcclxuICAgIF9fcmVzdCxcclxuICAgIF9fZGVjb3JhdGUsXHJcbiAgICBfX3BhcmFtLFxyXG4gICAgX19tZXRhZGF0YSxcclxuICAgIF9fYXdhaXRlcixcclxuICAgIF9fZ2VuZXJhdG9yLFxyXG4gICAgX19leHBvcnRTdGFyLFxyXG4gICAgX19jcmVhdGVCaW5kaW5nLFxyXG4gICAgX192YWx1ZXMsXHJcbiAgICBfX3JlYWQsXHJcbiAgICBfX3NwcmVhZCxcclxuICAgIF9fc3ByZWFkQXJyYXlzLFxyXG4gICAgX19zcHJlYWRBcnJheSxcclxuICAgIF9fYXdhaXQsXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yLFxyXG4gICAgX19hc3luY0RlbGVnYXRvcixcclxuICAgIF9fYXN5bmNWYWx1ZXMsXHJcbiAgICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcclxuICAgIF9faW1wb3J0U3RhcixcclxuICAgIF9faW1wb3J0RGVmYXVsdCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxyXG59O1xyXG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBBbiBlbnVtIG9mIGZhY3RvcnMgdGhhdCBtYXkgYmUgdXNlZCBmb3IgbXVsdGlmYWN0b3IgYXV0aGVudGljYXRpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRmFjdG9ySWQgPSB7XG4gIC8qKiBQaG9uZSBhcyBzZWNvbmQgZmFjdG9yICovXG4gIFBIT05FOiAncGhvbmUnXG59IGFzIGNvbnN0O1xuXG4vKipcbiAqIEVudW1lcmF0aW9uIG9mIHN1cHBvcnRlZCBwcm92aWRlcnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgUHJvdmlkZXJJZCA9IHtcbiAgLyoqIEZhY2Vib29rIHByb3ZpZGVyIElEICovXG4gIEZBQ0VCT09LOiAnZmFjZWJvb2suY29tJyxcbiAgLyoqIEdpdEh1YiBwcm92aWRlciBJRCAqL1xuICBHSVRIVUI6ICdnaXRodWIuY29tJyxcbiAgLyoqIEdvb2dsZSBwcm92aWRlciBJRCAqL1xuICBHT09HTEU6ICdnb29nbGUuY29tJyxcbiAgLyoqIFBhc3N3b3JkIHByb3ZpZGVyICovXG4gIFBBU1NXT1JEOiAncGFzc3dvcmQnLFxuICAvKiogUGhvbmUgcHJvdmlkZXIgKi9cbiAgUEhPTkU6ICdwaG9uZScsXG4gIC8qKiBUd2l0dGVyIHByb3ZpZGVyIElEICovXG4gIFRXSVRURVI6ICd0d2l0dGVyLmNvbSdcbn0gYXMgY29uc3Q7XG5cbi8qKlxuICogRW51bWVyYXRpb24gb2Ygc3VwcG9ydGVkIHNpZ24taW4gbWV0aG9kcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBTaWduSW5NZXRob2QgPSB7XG4gIC8qKiBFbWFpbCBsaW5rIHNpZ24gaW4gbWV0aG9kICovXG4gIEVNQUlMX0xJTks6ICdlbWFpbExpbmsnLFxuICAvKiogRW1haWwvcGFzc3dvcmQgc2lnbiBpbiBtZXRob2QgKi9cbiAgRU1BSUxfUEFTU1dPUkQ6ICdwYXNzd29yZCcsXG4gIC8qKiBGYWNlYm9vayBzaWduIGluIG1ldGhvZCAqL1xuICBGQUNFQk9PSzogJ2ZhY2Vib29rLmNvbScsXG4gIC8qKiBHaXRIdWIgc2lnbiBpbiBtZXRob2QgKi9cbiAgR0lUSFVCOiAnZ2l0aHViLmNvbScsXG4gIC8qKiBHb29nbGUgc2lnbiBpbiBtZXRob2QgKi9cbiAgR09PR0xFOiAnZ29vZ2xlLmNvbScsXG4gIC8qKiBQaG9uZSBzaWduIGluIG1ldGhvZCAqL1xuICBQSE9ORTogJ3Bob25lJyxcbiAgLyoqIFR3aXR0ZXIgc2lnbiBpbiBtZXRob2QgKi9cbiAgVFdJVFRFUjogJ3R3aXR0ZXIuY29tJ1xufSBhcyBjb25zdDtcblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBzdXBwb3J0ZWQgb3BlcmF0aW9uIHR5cGVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IE9wZXJhdGlvblR5cGUgPSB7XG4gIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIGxpbmtpbmcgYW4gYWRkaXRpb25hbCBwcm92aWRlciB0byBhbiBhbHJlYWR5IHNpZ25lZC1pbiB1c2VyLiAqL1xuICBMSU5LOiAnbGluaycsXG4gIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIHVzaW5nIGEgcHJvdmlkZXIgdG8gcmVhdXRoZW50aWNhdGUgYW4gYWxyZWFkeSBzaWduZWQtaW4gdXNlci4gKi9cbiAgUkVBVVRIRU5USUNBVEU6ICdyZWF1dGhlbnRpY2F0ZScsXG4gIC8qKiBPcGVyYXRpb24gaW52b2x2aW5nIHNpZ25pbmcgaW4gYSB1c2VyLiAqL1xuICBTSUdOX0lOOiAnc2lnbkluJ1xufSBhcyBjb25zdDtcblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB0aGUgcG9zc2libGUgZW1haWwgYWN0aW9uIHR5cGVzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEFjdGlvbkNvZGVPcGVyYXRpb24gPSB7XG4gIC8qKiBUaGUgZW1haWwgbGluayBzaWduLWluIGFjdGlvbi4gKi9cbiAgRU1BSUxfU0lHTklOOiAnRU1BSUxfU0lHTklOJyxcbiAgLyoqIFRoZSBwYXNzd29yZCByZXNldCBhY3Rpb24uICovXG4gIFBBU1NXT1JEX1JFU0VUOiAnUEFTU1dPUkRfUkVTRVQnLFxuICAvKiogVGhlIGVtYWlsIHJldm9jYXRpb24gYWN0aW9uLiAqL1xuICBSRUNPVkVSX0VNQUlMOiAnUkVDT1ZFUl9FTUFJTCcsXG4gIC8qKiBUaGUgcmV2ZXJ0IHNlY29uZCBmYWN0b3IgYWRkaXRpb24gZW1haWwgYWN0aW9uLiAqL1xuICBSRVZFUlRfU0VDT05EX0ZBQ1RPUl9BRERJVElPTjogJ1JFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OJyxcbiAgLyoqIFRoZSByZXZlcnQgc2Vjb25kIGZhY3RvciBhZGRpdGlvbiBlbWFpbCBhY3Rpb24uICovXG4gIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMOiAnVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwnLFxuICAvKiogVGhlIGVtYWlsIHZlcmlmaWNhdGlvbiBhY3Rpb24uICovXG4gIFZFUklGWV9FTUFJTDogJ1ZFUklGWV9FTUFJTCdcbn0gYXMgY29uc3Q7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aEVycm9yTWFwLCBVc2VyIH0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgRXJyb3JNYXAgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7IElkVG9rZW5NZmFSZXNwb25zZSB9IGZyb20gJy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgQXBwTmFtZSB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuL2NyZWRlbnRpYWxzJztcblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBGaXJlYmFzZSBBdXRoIGVycm9yIGNvZGVzLlxuICogXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQXV0aEVycm9yQ29kZSB7XG4gIEFETUlOX09OTFlfT1BFUkFUSU9OID0gJ2FkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uJyxcbiAgQVJHVU1FTlRfRVJST1IgPSAnYXJndW1lbnQtZXJyb3InLFxuICBBUFBfTk9UX0FVVEhPUklaRUQgPSAnYXBwLW5vdC1hdXRob3JpemVkJyxcbiAgQVBQX05PVF9JTlNUQUxMRUQgPSAnYXBwLW5vdC1pbnN0YWxsZWQnLFxuICBDQVBUQ0hBX0NIRUNLX0ZBSUxFRCA9ICdjYXB0Y2hhLWNoZWNrLWZhaWxlZCcsXG4gIENPREVfRVhQSVJFRCA9ICdjb2RlLWV4cGlyZWQnLFxuICBDT1JET1ZBX05PVF9SRUFEWSA9ICdjb3Jkb3ZhLW5vdC1yZWFkeScsXG4gIENPUlNfVU5TVVBQT1JURUQgPSAnY29ycy11bnN1cHBvcnRlZCcsXG4gIENSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0UgPSAnY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZScsXG4gIENSRURFTlRJQUxfTUlTTUFUQ0ggPSAnY3VzdG9tLXRva2VuLW1pc21hdGNoJyxcbiAgQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOID0gJ3JlcXVpcmVzLXJlY2VudC1sb2dpbicsXG4gIERFUEVOREVOVF9TREtfSU5JVF9CRUZPUkVfQVVUSCA9ICdkZXBlbmRlbnQtc2RrLWluaXRpYWxpemVkLWJlZm9yZS1hdXRoJyxcbiAgRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQgPSAnZHluYW1pYy1saW5rLW5vdC1hY3RpdmF0ZWQnLFxuICBFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OID0gJ2VtYWlsLWNoYW5nZS1uZWVkcy12ZXJpZmljYXRpb24nLFxuICBFTUFJTF9FWElTVFMgPSAnZW1haWwtYWxyZWFkeS1pbi11c2UnLFxuICBFTVVMQVRPUl9DT05GSUdfRkFJTEVEID0gJ2VtdWxhdG9yLWNvbmZpZy1mYWlsZWQnLFxuICBFWFBJUkVEX09PQl9DT0RFID0gJ2V4cGlyZWQtYWN0aW9uLWNvZGUnLFxuICBFWFBJUkVEX1BPUFVQX1JFUVVFU1QgPSAnY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3QnLFxuICBJTlRFUk5BTF9FUlJPUiA9ICdpbnRlcm5hbC1lcnJvcicsXG4gIElOVkFMSURfQVBJX0tFWSA9ICdpbnZhbGlkLWFwaS1rZXknLFxuICBJTlZBTElEX0FQUF9DUkVERU5USUFMID0gJ2ludmFsaWQtYXBwLWNyZWRlbnRpYWwnLFxuICBJTlZBTElEX0FQUF9JRCA9ICdpbnZhbGlkLWFwcC1pZCcsXG4gIElOVkFMSURfQVVUSCA9ICdpbnZhbGlkLXVzZXItdG9rZW4nLFxuICBJTlZBTElEX0FVVEhfRVZFTlQgPSAnaW52YWxpZC1hdXRoLWV2ZW50JyxcbiAgSU5WQUxJRF9DRVJUX0hBU0ggPSAnaW52YWxpZC1jZXJ0LWhhc2gnLFxuICBJTlZBTElEX0NPREUgPSAnaW52YWxpZC12ZXJpZmljYXRpb24tY29kZScsXG4gIElOVkFMSURfQ09OVElOVUVfVVJJID0gJ2ludmFsaWQtY29udGludWUtdXJpJyxcbiAgSU5WQUxJRF9DT1JET1ZBX0NPTkZJR1VSQVRJT04gPSAnaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb24nLFxuICBJTlZBTElEX0NVU1RPTV9UT0tFTiA9ICdpbnZhbGlkLWN1c3RvbS10b2tlbicsXG4gIElOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTiA9ICdpbnZhbGlkLWR5bmFtaWMtbGluay1kb21haW4nLFxuICBJTlZBTElEX0VNQUlMID0gJ2ludmFsaWQtZW1haWwnLFxuICBJTlZBTElEX0VNVUxBVE9SX1NDSEVNRSA9ICdpbnZhbGlkLWVtdWxhdG9yLXNjaGVtZScsXG4gIElOVkFMSURfSURQX1JFU1BPTlNFID0gJ2ludmFsaWQtY3JlZGVudGlhbCcsXG4gIElOVkFMSURfTUVTU0FHRV9QQVlMT0FEID0gJ2ludmFsaWQtbWVzc2FnZS1wYXlsb2FkJyxcbiAgSU5WQUxJRF9NRkFfU0VTU0lPTiA9ICdpbnZhbGlkLW11bHRpLWZhY3Rvci1zZXNzaW9uJyxcbiAgSU5WQUxJRF9PQVVUSF9DTElFTlRfSUQgPSAnaW52YWxpZC1vYXV0aC1jbGllbnQtaWQnLFxuICBJTlZBTElEX09BVVRIX1BST1ZJREVSID0gJ2ludmFsaWQtb2F1dGgtcHJvdmlkZXInLFxuICBJTlZBTElEX09PQl9DT0RFID0gJ2ludmFsaWQtYWN0aW9uLWNvZGUnLFxuICBJTlZBTElEX09SSUdJTiA9ICd1bmF1dGhvcml6ZWQtZG9tYWluJyxcbiAgSU5WQUxJRF9QQVNTV09SRCA9ICd3cm9uZy1wYXNzd29yZCcsXG4gIElOVkFMSURfUEVSU0lTVEVOQ0UgPSAnaW52YWxpZC1wZXJzaXN0ZW5jZS10eXBlJyxcbiAgSU5WQUxJRF9QSE9ORV9OVU1CRVIgPSAnaW52YWxpZC1waG9uZS1udW1iZXInLFxuICBJTlZBTElEX1BST1ZJREVSX0lEID0gJ2ludmFsaWQtcHJvdmlkZXItaWQnLFxuICBJTlZBTElEX1JFQ0lQSUVOVF9FTUFJTCA9ICdpbnZhbGlkLXJlY2lwaWVudC1lbWFpbCcsXG4gIElOVkFMSURfU0VOREVSID0gJ2ludmFsaWQtc2VuZGVyJyxcbiAgSU5WQUxJRF9TRVNTSU9OX0lORk8gPSAnaW52YWxpZC12ZXJpZmljYXRpb24taWQnLFxuICBJTlZBTElEX1RFTkFOVF9JRCA9ICdpbnZhbGlkLXRlbmFudC1pZCcsXG4gIE1GQV9JTkZPX05PVF9GT1VORCA9ICdtdWx0aS1mYWN0b3ItaW5mby1ub3QtZm91bmQnLFxuICBNRkFfUkVRVUlSRUQgPSAnbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWQnLFxuICBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FID0gJ21pc3NpbmctYW5kcm9pZC1wa2ctbmFtZScsXG4gIE1JU1NJTkdfQVBQX0NSRURFTlRJQUwgPSAnbWlzc2luZy1hcHAtY3JlZGVudGlhbCcsXG4gIE1JU1NJTkdfQVVUSF9ET01BSU4gPSAnYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkJyxcbiAgTUlTU0lOR19DT0RFID0gJ21pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGUnLFxuICBNSVNTSU5HX0NPTlRJTlVFX1VSSSA9ICdtaXNzaW5nLWNvbnRpbnVlLXVyaScsXG4gIE1JU1NJTkdfSUZSQU1FX1NUQVJUID0gJ21pc3NpbmctaWZyYW1lLXN0YXJ0JyxcbiAgTUlTU0lOR19JT1NfQlVORExFX0lEID0gJ21pc3NpbmctaW9zLWJ1bmRsZS1pZCcsXG4gIE1JU1NJTkdfT1JfSU5WQUxJRF9OT05DRSA9ICdtaXNzaW5nLW9yLWludmFsaWQtbm9uY2UnLFxuICBNSVNTSU5HX01GQV9JTkZPID0gJ21pc3NpbmctbXVsdGktZmFjdG9yLWluZm8nLFxuICBNSVNTSU5HX01GQV9TRVNTSU9OID0gJ21pc3NpbmctbXVsdGktZmFjdG9yLXNlc3Npb24nLFxuICBNSVNTSU5HX1BIT05FX05VTUJFUiA9ICdtaXNzaW5nLXBob25lLW51bWJlcicsXG4gIE1JU1NJTkdfU0VTU0lPTl9JTkZPID0gJ21pc3NpbmctdmVyaWZpY2F0aW9uLWlkJyxcbiAgTU9EVUxFX0RFU1RST1lFRCA9ICdhcHAtZGVsZXRlZCcsXG4gIE5FRURfQ09ORklSTUFUSU9OID0gJ2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnLFxuICBORVRXT1JLX1JFUVVFU1RfRkFJTEVEID0gJ25ldHdvcmstcmVxdWVzdC1mYWlsZWQnLFxuICBOVUxMX1VTRVIgPSAnbnVsbC11c2VyJyxcbiAgTk9fQVVUSF9FVkVOVCA9ICduby1hdXRoLWV2ZW50JyxcbiAgTk9fU1VDSF9QUk9WSURFUiA9ICduby1zdWNoLXByb3ZpZGVyJyxcbiAgT1BFUkFUSU9OX05PVF9BTExPV0VEID0gJ29wZXJhdGlvbi1ub3QtYWxsb3dlZCcsXG4gIE9QRVJBVElPTl9OT1RfU1VQUE9SVEVEID0gJ29wZXJhdGlvbi1ub3Qtc3VwcG9ydGVkLWluLXRoaXMtZW52aXJvbm1lbnQnLFxuICBQT1BVUF9CTE9DS0VEID0gJ3BvcHVwLWJsb2NrZWQnLFxuICBQT1BVUF9DTE9TRURfQllfVVNFUiA9ICdwb3B1cC1jbG9zZWQtYnktdXNlcicsXG4gIFBST1ZJREVSX0FMUkVBRFlfTElOS0VEID0gJ3Byb3ZpZGVyLWFscmVhZHktbGlua2VkJyxcbiAgUVVPVEFfRVhDRUVERUQgPSAncXVvdGEtZXhjZWVkZWQnLFxuICBSRURJUkVDVF9DQU5DRUxMRURfQllfVVNFUiA9ICdyZWRpcmVjdC1jYW5jZWxsZWQtYnktdXNlcicsXG4gIFJFRElSRUNUX09QRVJBVElPTl9QRU5ESU5HID0gJ3JlZGlyZWN0LW9wZXJhdGlvbi1wZW5kaW5nJyxcbiAgUkVKRUNURURfQ1JFREVOVElBTCA9ICdyZWplY3RlZC1jcmVkZW50aWFsJyxcbiAgU0VDT05EX0ZBQ1RPUl9BTFJFQURZX0VOUk9MTEVEID0gJ3NlY29uZC1mYWN0b3ItYWxyZWFkeS1pbi11c2UnLFxuICBTRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEID0gJ21heGltdW0tc2Vjb25kLWZhY3Rvci1jb3VudC1leGNlZWRlZCcsXG4gIFRFTkFOVF9JRF9NSVNNQVRDSCA9ICd0ZW5hbnQtaWQtbWlzbWF0Y2gnLFxuICBUSU1FT1VUID0gJ3RpbWVvdXQnLFxuICBUT0tFTl9FWFBJUkVEID0gJ3VzZXItdG9rZW4tZXhwaXJlZCcsXG4gIFRPT19NQU5ZX0FUVEVNUFRTX1RSWV9MQVRFUiA9ICd0b28tbWFueS1yZXF1ZXN0cycsXG4gIFVOQVVUSE9SSVpFRF9ET01BSU4gPSAndW5hdXRob3JpemVkLWNvbnRpbnVlLXVyaScsXG4gIFVOU1VQUE9SVEVEX0ZJUlNUX0ZBQ1RPUiA9ICd1bnN1cHBvcnRlZC1maXJzdC1mYWN0b3InLFxuICBVTlNVUFBPUlRFRF9QRVJTSVNURU5DRSA9ICd1bnN1cHBvcnRlZC1wZXJzaXN0ZW5jZS10eXBlJyxcbiAgVU5TVVBQT1JURURfVEVOQU5UX09QRVJBVElPTiA9ICd1bnN1cHBvcnRlZC10ZW5hbnQtb3BlcmF0aW9uJyxcbiAgVU5WRVJJRklFRF9FTUFJTCA9ICd1bnZlcmlmaWVkLWVtYWlsJyxcbiAgVVNFUl9DQU5DRUxMRUQgPSAndXNlci1jYW5jZWxsZWQnLFxuICBVU0VSX0RFTEVURUQgPSAndXNlci1ub3QtZm91bmQnLFxuICBVU0VSX0RJU0FCTEVEID0gJ3VzZXItZGlzYWJsZWQnLFxuICBVU0VSX01JU01BVENIID0gJ3VzZXItbWlzbWF0Y2gnLFxuICBVU0VSX1NJR05FRF9PVVQgPSAndXNlci1zaWduZWQtb3V0JyxcbiAgV0VBS19QQVNTV09SRCA9ICd3ZWFrLXBhc3N3b3JkJyxcbiAgV0VCX1NUT1JBR0VfVU5TVVBQT1JURUQgPSAnd2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWQnLFxuICBBTFJFQURZX0lOSVRJQUxJWkVEID0gJ2FscmVhZHktaW5pdGlhbGl6ZWQnXG59XG5cbmZ1bmN0aW9uIF9kZWJ1Z0Vycm9yTWFwKCk6IEVycm9yTWFwPEF1dGhFcnJvckNvZGU+IHtcbiAgcmV0dXJuIHtcbiAgICBbQXV0aEVycm9yQ29kZS5BRE1JTl9PTkxZX09QRVJBVElPTl06XG4gICAgICAnVGhpcyBvcGVyYXRpb24gaXMgcmVzdHJpY3RlZCB0byBhZG1pbmlzdHJhdG9ycyBvbmx5LicsXG4gICAgW0F1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JdOiAnJyxcbiAgICBbQXV0aEVycm9yQ29kZS5BUFBfTk9UX0FVVEhPUklaRURdOlxuICAgICAgXCJUaGlzIGFwcCwgaWRlbnRpZmllZCBieSB0aGUgZG9tYWluIHdoZXJlIGl0J3MgaG9zdGVkLCBpcyBub3QgXCIgK1xuICAgICAgJ2F1dGhvcml6ZWQgdG8gdXNlIEZpcmViYXNlIEF1dGhlbnRpY2F0aW9uIHdpdGggdGhlIHByb3ZpZGVkIEFQSSBrZXkuICcgK1xuICAgICAgJ1JldmlldyB5b3VyIGtleSBjb25maWd1cmF0aW9uIGluIHRoZSBHb29nbGUgQVBJIGNvbnNvbGUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5BUFBfTk9UX0lOU1RBTExFRF06XG4gICAgICAnVGhlIHJlcXVlc3RlZCBtb2JpbGUgYXBwbGljYXRpb24gY29ycmVzcG9uZGluZyB0byB0aGUgaWRlbnRpZmllciAoJyArXG4gICAgICAnQW5kcm9pZCBwYWNrYWdlIG5hbWUgb3IgaU9TIGJ1bmRsZSBJRCkgcHJvdmlkZWQgaXMgbm90IGluc3RhbGxlZCBvbiAnICtcbiAgICAgICd0aGlzIGRldmljZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkNBUFRDSEFfQ0hFQ0tfRkFJTEVEXTpcbiAgICAgICdUaGUgcmVDQVBUQ0hBIHJlc3BvbnNlIHRva2VuIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkLCBleHBpcmVkLCAnICtcbiAgICAgICdhbHJlYWR5IHVzZWQgb3IgdGhlIGRvbWFpbiBhc3NvY2lhdGVkIHdpdGggaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGxpc3QgJyArXG4gICAgICAnb2Ygd2hpdGVsaXN0ZWQgZG9tYWlucy4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkNPREVfRVhQSVJFRF06XG4gICAgICAnVGhlIFNNUyBjb2RlIGhhcyBleHBpcmVkLiBQbGVhc2UgcmUtc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgdG8gdHJ5ICcgK1xuICAgICAgJ2FnYWluLicsXG4gICAgW0F1dGhFcnJvckNvZGUuQ09SRE9WQV9OT1RfUkVBRFldOiAnQ29yZG92YSBmcmFtZXdvcmsgaXMgbm90IHJlYWR5LicsXG4gICAgW0F1dGhFcnJvckNvZGUuQ09SU19VTlNVUFBPUlRFRF06ICdUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0VdOlxuICAgICAgJ1RoaXMgY3JlZGVudGlhbCBpcyBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBhIGRpZmZlcmVudCB1c2VyIGFjY291bnQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5DUkVERU5USUFMX01JU01BVENIXTpcbiAgICAgICdUaGUgY3VzdG9tIHRva2VuIGNvcnJlc3BvbmRzIHRvIGEgZGlmZmVyZW50IGF1ZGllbmNlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOXTpcbiAgICAgICdUaGlzIG9wZXJhdGlvbiBpcyBzZW5zaXRpdmUgYW5kIHJlcXVpcmVzIHJlY2VudCBhdXRoZW50aWNhdGlvbi4gTG9nIGluICcgK1xuICAgICAgJ2FnYWluIGJlZm9yZSByZXRyeWluZyB0aGlzIHJlcXVlc3QuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5ERVBFTkRFTlRfU0RLX0lOSVRfQkVGT1JFX0FVVEhdOlxuICAgICAgJ0Fub3RoZXIgRmlyZWJhc2UgU0RLIHdhcyBpbml0aWFsaXplZCBhbmQgaXMgdHJ5aW5nIHRvIHVzZSBBdXRoIGJlZm9yZSBBdXRoIGlzICcgK1xuICAgICAgJ2luaXRpYWxpemVkLiBQbGVhc2UgYmUgc3VyZSB0byBjYWxsIGBpbml0aWFsaXplQXV0aGAgb3IgYGdldEF1dGhgIGJlZm9yZSAnICtcbiAgICAgICdzdGFydGluZyBhbnkgb3RoZXIgRmlyZWJhc2UgU0RLLicsXG4gICAgW0F1dGhFcnJvckNvZGUuRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURURdOlxuICAgICAgJ1BsZWFzZSBhY3RpdmF0ZSBEeW5hbWljIExpbmtzIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlIGFuZCBhZ3JlZSB0byB0aGUgdGVybXMgYW5kICcgK1xuICAgICAgJ2NvbmRpdGlvbnMuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5FTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OXTpcbiAgICAgICdNdWx0aS1mYWN0b3IgdXNlcnMgbXVzdCBhbHdheXMgaGF2ZSBhIHZlcmlmaWVkIGVtYWlsLicsXG4gICAgW0F1dGhFcnJvckNvZGUuRU1BSUxfRVhJU1RTXTpcbiAgICAgICdUaGUgZW1haWwgYWRkcmVzcyBpcyBhbHJlYWR5IGluIHVzZSBieSBhbm90aGVyIGFjY291bnQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5FTVVMQVRPUl9DT05GSUdfRkFJTEVEXTpcbiAgICAgICdBdXRoIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCB0byBtYWtlIGEgbmV0d29yayBjYWxsLiBBdXRoIGNhbiAnICtcbiAgICAgICdubyBsb25nZXIgYmUgY29uZmlndXJlZCB0byB1c2UgdGhlIGVtdWxhdG9yLiBUcnkgY2FsbGluZyAnICtcbiAgICAgICdcImNvbm5lY3RBdXRoRW11bGF0b3IoKVwiIHNvb25lci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLkVYUElSRURfT09CX0NPREVdOiAnVGhlIGFjdGlvbiBjb2RlIGhhcyBleHBpcmVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuRVhQSVJFRF9QT1BVUF9SRVFVRVNUXTpcbiAgICAgICdUaGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgZHVlIHRvIGFub3RoZXIgY29uZmxpY3RpbmcgcG9wdXAgYmVpbmcgb3BlbmVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JdOiAnQW4gaW50ZXJuYWwgQXV0aEVycm9yIGhhcyBvY2N1cnJlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfQVBQX0NSRURFTlRJQUxdOlxuICAgICAgJ1RoZSBwaG9uZSB2ZXJpZmljYXRpb24gcmVxdWVzdCBjb250YWlucyBhbiBpbnZhbGlkIGFwcGxpY2F0aW9uIHZlcmlmaWVyLicgK1xuICAgICAgJyBUaGUgcmVDQVBUQ0hBIHRva2VuIHJlc3BvbnNlIGlzIGVpdGhlciBpbnZhbGlkIG9yIGV4cGlyZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0FQUF9JRF06XG4gICAgICAnVGhlIG1vYmlsZSBhcHAgaWRlbnRpZmllciBpcyBub3QgcmVnaXN0ZWQgZm9yIHRoZSBjdXJyZW50IHByb2plY3QuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0FVVEhdOlxuICAgICAgXCJUaGlzIHVzZXIncyBjcmVkZW50aWFsIGlzbid0IHZhbGlkIGZvciB0aGlzIHByb2plY3QuIFRoaXMgY2FuIGhhcHBlbiBcIiArXG4gICAgICBcImlmIHRoZSB1c2VyJ3MgdG9rZW4gaGFzIGJlZW4gdGFtcGVyZWQgd2l0aCwgb3IgaWYgdGhlIHVzZXIgaXNuJ3QgZm9yIFwiICtcbiAgICAgICd0aGUgcHJvamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBBUEkga2V5LicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9BVVRIX0VWRU5UXTogJ0FuIGludGVybmFsIEF1dGhFcnJvciBoYXMgb2NjdXJyZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0NPREVdOlxuICAgICAgJ1RoZSBTTVMgdmVyaWZpY2F0aW9uIGNvZGUgdXNlZCB0byBjcmVhdGUgdGhlIHBob25lIGF1dGggY3JlZGVudGlhbCBpcyAnICtcbiAgICAgICdpbnZhbGlkLiBQbGVhc2UgcmVzZW5kIHRoZSB2ZXJpZmljYXRpb24gY29kZSBzbXMgYW5kIGJlIHN1cmUgdG8gdXNlIHRoZSAnICtcbiAgICAgICd2ZXJpZmljYXRpb24gY29kZSBwcm92aWRlZCBieSB0aGUgdXNlci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfQ09OVElOVUVfVVJJXTpcbiAgICAgICdUaGUgY29udGludWUgVVJMIHByb3ZpZGVkIGluIHRoZSByZXF1ZXN0IGlzIGludmFsaWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0NPUkRPVkFfQ09ORklHVVJBVElPTl06XG4gICAgICAnVGhlIGZvbGxvd2luZyBDb3Jkb3ZhIHBsdWdpbnMgbXVzdCBiZSBpbnN0YWxsZWQgdG8gZW5hYmxlIE9BdXRoIHNpZ24taW46ICcgK1xuICAgICAgJ2NvcmRvdmEtcGx1Z2luLWJ1aWxkaW5mbywgY29yZG92YS11bml2ZXJzYWwtbGlua3MtcGx1Z2luLCAnICtcbiAgICAgICdjb3Jkb3ZhLXBsdWdpbi1icm93c2VydGFiLCBjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXIgYW5kICcgK1xuICAgICAgJ2NvcmRvdmEtcGx1Z2luLWN1c3RvbXVybHNjaGVtZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfQ1VTVE9NX1RPS0VOXTpcbiAgICAgICdUaGUgY3VzdG9tIHRva2VuIGZvcm1hdCBpcyBpbmNvcnJlY3QuIFBsZWFzZSBjaGVjayB0aGUgZG9jdW1lbnRhdGlvbi4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTl06XG4gICAgICAnVGhlIHByb3ZpZGVkIGR5bmFtaWMgbGluayBkb21haW4gaXMgbm90IGNvbmZpZ3VyZWQgb3IgYXV0aG9yaXplZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfRU1BSUxdOiAnVGhlIGVtYWlsIGFkZHJlc3MgaXMgYmFkbHkgZm9ybWF0dGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9FTVVMQVRPUl9TQ0hFTUVdOlxuICAgICAgJ0VtdWxhdG9yIFVSTCBtdXN0IHN0YXJ0IHdpdGggYSB2YWxpZCBzY2hlbWUgKGh0dHA6Ly8gb3IgaHR0cHM6Ly8pLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9BUElfS0VZXTpcbiAgICAgICdZb3VyIEFQSSBrZXkgaXMgaW52YWxpZCwgcGxlYXNlIGNoZWNrIHlvdSBoYXZlIGNvcGllZCBpdCBjb3JyZWN0bHkuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX0NFUlRfSEFTSF06XG4gICAgICAnVGhlIFNIQS0xIGNlcnRpZmljYXRlIGhhc2ggcHJvdmlkZWQgaXMgaW52YWxpZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfSURQX1JFU1BPTlNFXTpcbiAgICAgICdUaGUgc3VwcGxpZWQgYXV0aCBjcmVkZW50aWFsIGlzIG1hbGZvcm1lZCBvciBoYXMgZXhwaXJlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfTUVTU0FHRV9QQVlMT0FEXTpcbiAgICAgICdUaGUgZW1haWwgdGVtcGxhdGUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgaW4gaXRzIG1lc3NhZ2UuICcgK1xuICAgICAgJ1BsZWFzZSBmaXggYnkgZ29pbmcgdG8gdGhlIEF1dGggZW1haWwgdGVtcGxhdGVzIHNlY3Rpb24gaW4gdGhlIEZpcmViYXNlIENvbnNvbGUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX01GQV9TRVNTSU9OXTpcbiAgICAgICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgcHJvb2Ygb2YgZmlyc3QgZmFjdG9yIHN1Y2Nlc3NmdWwgc2lnbi1pbi4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfT0FVVEhfUFJPVklERVJdOlxuICAgICAgJ0VtYWlsQXV0aFByb3ZpZGVyIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgb3BlcmF0aW9uLiBUaGlzIG9wZXJhdGlvbiAnICtcbiAgICAgICdvbmx5IHN1cHBvcnRzIE9BdXRoIHByb3ZpZGVycy4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfT0FVVEhfQ0xJRU5UX0lEXTpcbiAgICAgICdUaGUgT0F1dGggY2xpZW50IElEIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkIG9yIGRvZXMgbm90IG1hdGNoIHRoZSAnICtcbiAgICAgICdzcGVjaWZpZWQgQVBJIGtleS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfT1JJR0lOXTpcbiAgICAgICdUaGlzIGRvbWFpbiBpcyBub3QgYXV0aG9yaXplZCBmb3IgT0F1dGggb3BlcmF0aW9ucyBmb3IgeW91ciBGaXJlYmFzZSAnICtcbiAgICAgICdwcm9qZWN0LiBFZGl0IHRoZSBsaXN0IG9mIGF1dGhvcml6ZWQgZG9tYWlucyBmcm9tIHRoZSBGaXJlYmFzZSBjb25zb2xlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9PT0JfQ09ERV06XG4gICAgICAnVGhlIGFjdGlvbiBjb2RlIGlzIGludmFsaWQuIFRoaXMgY2FuIGhhcHBlbiBpZiB0aGUgY29kZSBpcyBtYWxmb3JtZWQsICcgK1xuICAgICAgJ2V4cGlyZWQsIG9yIGhhcyBhbHJlYWR5IGJlZW4gdXNlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfUEFTU1dPUkRdOlxuICAgICAgJ1RoZSBwYXNzd29yZCBpcyBpbnZhbGlkIG9yIHRoZSB1c2VyIGRvZXMgbm90IGhhdmUgYSBwYXNzd29yZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLklOVkFMSURfUEVSU0lTVEVOQ0VdOlxuICAgICAgJ1RoZSBzcGVjaWZpZWQgcGVyc2lzdGVuY2UgdHlwZSBpcyBpbnZhbGlkLiBJdCBjYW4gb25seSBiZSBsb2NhbCwgc2Vzc2lvbiBvciBub25lLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9QSE9ORV9OVU1CRVJdOlxuICAgICAgJ1RoZSBmb3JtYXQgb2YgdGhlIHBob25lIG51bWJlciBwcm92aWRlZCBpcyBpbmNvcnJlY3QuIFBsZWFzZSBlbnRlciB0aGUgJyArXG4gICAgICAncGhvbmUgbnVtYmVyIGluIGEgZm9ybWF0IHRoYXQgY2FuIGJlIHBhcnNlZCBpbnRvIEUuMTY0IGZvcm1hdC4gRS4xNjQgJyArXG4gICAgICAncGhvbmUgbnVtYmVycyBhcmUgd3JpdHRlbiBpbiB0aGUgZm9ybWF0IFsrXVtjb3VudHJ5IGNvZGVdW3N1YnNjcmliZXIgJyArXG4gICAgICAnbnVtYmVyIGluY2x1ZGluZyBhcmVhIGNvZGVdLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9QUk9WSURFUl9JRF06XG4gICAgICAnVGhlIHNwZWNpZmllZCBwcm92aWRlciBJRCBpcyBpbnZhbGlkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9SRUNJUElFTlRfRU1BSUxdOlxuICAgICAgJ1RoZSBlbWFpbCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYWN0aW9uIGZhaWxlZCB0byBzZW5kIGFzIHRoZSBwcm92aWRlZCAnICtcbiAgICAgICdyZWNpcGllbnQgZW1haWwgYWRkcmVzcyBpcyBpbnZhbGlkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9TRU5ERVJdOlxuICAgICAgJ1RoZSBlbWFpbCB0ZW1wbGF0ZSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgYWN0aW9uIGNvbnRhaW5zIGFuIGludmFsaWQgc2VuZGVyIGVtYWlsIG9yIG5hbWUuICcgK1xuICAgICAgJ1BsZWFzZSBmaXggYnkgZ29pbmcgdG8gdGhlIEF1dGggZW1haWwgdGVtcGxhdGVzIHNlY3Rpb24gaW4gdGhlIEZpcmViYXNlIENvbnNvbGUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX1NFU1NJT05fSU5GT106XG4gICAgICAnVGhlIHZlcmlmaWNhdGlvbiBJRCB1c2VkIHRvIGNyZWF0ZSB0aGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIGlzIGludmFsaWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5JTlZBTElEX1RFTkFOVF9JRF06XG4gICAgICBcIlRoZSBBdXRoIGluc3RhbmNlJ3MgdGVuYW50IElEIGlzIGludmFsaWQuXCIsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19BTkRST0lEX1BBQ0tBR0VfTkFNRV06XG4gICAgICAnQW4gQW5kcm9pZCBQYWNrYWdlIE5hbWUgbXVzdCBiZSBwcm92aWRlZCBpZiB0aGUgQW5kcm9pZCBBcHAgaXMgcmVxdWlyZWQgdG8gYmUgaW5zdGFsbGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19BVVRIX0RPTUFJTl06XG4gICAgICAnQmUgc3VyZSB0byBpbmNsdWRlIGF1dGhEb21haW4gd2hlbiBjYWxsaW5nIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKSwgJyArXG4gICAgICAnYnkgZm9sbG93aW5nIHRoZSBpbnN0cnVjdGlvbnMgaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX0FQUF9DUkVERU5USUFMXTpcbiAgICAgICdUaGUgcGhvbmUgdmVyaWZpY2F0aW9uIHJlcXVlc3QgaXMgbWlzc2luZyBhbiBhcHBsaWNhdGlvbiB2ZXJpZmllciAnICtcbiAgICAgICdhc3NlcnRpb24uIEEgcmVDQVBUQ0hBIHJlc3BvbnNlIHRva2VuIG5lZWRzIHRvIGJlIHByb3ZpZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19DT0RFXTpcbiAgICAgICdUaGUgcGhvbmUgYXV0aCBjcmVkZW50aWFsIHdhcyBjcmVhdGVkIHdpdGggYW4gZW1wdHkgU01TIHZlcmlmaWNhdGlvbiBjb2RlLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19DT05USU5VRV9VUkldOlxuICAgICAgJ0EgY29udGludWUgVVJMIG11c3QgYmUgcHJvdmlkZWQgaW4gdGhlIHJlcXVlc3QuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NSVNTSU5HX0lGUkFNRV9TVEFSVF06ICdBbiBpbnRlcm5hbCBBdXRoRXJyb3IgaGFzIG9jY3VycmVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19JT1NfQlVORExFX0lEXTpcbiAgICAgICdBbiBpT1MgQnVuZGxlIElEIG11c3QgYmUgcHJvdmlkZWQgaWYgYW4gQXBwIFN0b3JlIElEIGlzIHByb3ZpZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19PUl9JTlZBTElEX05PTkNFXTpcbiAgICAgICdUaGUgcmVxdWVzdCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgbm9uY2UuIFRoaXMgY2FuIG9jY3VyIGlmIHRoZSAnICtcbiAgICAgICdTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkIHJhdyBub25jZSBkb2VzIG5vdCBtYXRjaCB0aGUgaGFzaGVkIG5vbmNlICcgK1xuICAgICAgJ2luIHRoZSBJRCB0b2tlbiBwYXlsb2FkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19NRkFfSU5GT106XG4gICAgICAnTm8gc2Vjb25kIGZhY3RvciBpZGVudGlmaWVyIGlzIHByb3ZpZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19NRkFfU0VTU0lPTl06XG4gICAgICAnVGhlIHJlcXVlc3QgaXMgbWlzc2luZyBwcm9vZiBvZiBmaXJzdCBmYWN0b3Igc3VjY2Vzc2Z1bCBzaWduLWluLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19QSE9ORV9OVU1CRVJdOlxuICAgICAgJ1RvIHNlbmQgdmVyaWZpY2F0aW9uIGNvZGVzLCBwcm92aWRlIGEgcGhvbmUgbnVtYmVyIGZvciB0aGUgcmVjaXBpZW50LicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUlTU0lOR19TRVNTSU9OX0lORk9dOlxuICAgICAgJ1RoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgd2FzIGNyZWF0ZWQgd2l0aCBhbiBlbXB0eSB2ZXJpZmljYXRpb24gSUQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NT0RVTEVfREVTVFJPWUVEXTpcbiAgICAgICdUaGlzIGluc3RhbmNlIG9mIEZpcmViYXNlQXBwIGhhcyBiZWVuIGRlbGV0ZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5NRkFfSU5GT19OT1RfRk9VTkRdOlxuICAgICAgJ1RoZSB1c2VyIGRvZXMgbm90IGhhdmUgYSBzZWNvbmQgZmFjdG9yIG1hdGNoaW5nIHRoZSBpZGVudGlmaWVyIHByb3ZpZGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEXTpcbiAgICAgICdQcm9vZiBvZiBvd25lcnNoaXAgb2YgYSBzZWNvbmQgZmFjdG9yIGlzIHJlcXVpcmVkIHRvIGNvbXBsZXRlIHNpZ24taW4uJyxcbiAgICBbQXV0aEVycm9yQ29kZS5ORUVEX0NPTkZJUk1BVElPTl06XG4gICAgICAnQW4gYWNjb3VudCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzYW1lIGVtYWlsIGFkZHJlc3MgYnV0IGRpZmZlcmVudCAnICtcbiAgICAgICdzaWduLWluIGNyZWRlbnRpYWxzLiBTaWduIGluIHVzaW5nIGEgcHJvdmlkZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgJyArXG4gICAgICAnZW1haWwgYWRkcmVzcy4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRURdOlxuICAgICAgJ0EgbmV0d29yayBBdXRoRXJyb3IgKHN1Y2ggYXMgdGltZW91dCwgaW50ZXJydXB0ZWQgY29ubmVjdGlvbiBvciB1bnJlYWNoYWJsZSBob3N0KSBoYXMgb2NjdXJyZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5OT19BVVRIX0VWRU5UXTogJ0FuIGludGVybmFsIEF1dGhFcnJvciBoYXMgb2NjdXJyZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5OT19TVUNIX1BST1ZJREVSXTpcbiAgICAgICdVc2VyIHdhcyBub3QgbGlua2VkIHRvIGFuIGFjY291bnQgd2l0aCB0aGUgZ2l2ZW4gcHJvdmlkZXIuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5OVUxMX1VTRVJdOlxuICAgICAgJ0EgbnVsbCB1c2VyIG9iamVjdCB3YXMgcHJvdmlkZWQgYXMgdGhlIGFyZ3VtZW50IGZvciBhbiBvcGVyYXRpb24gd2hpY2ggJyArXG4gICAgICAncmVxdWlyZXMgYSBub24tbnVsbCB1c2VyIG9iamVjdC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfQUxMT1dFRF06XG4gICAgICAnVGhlIGdpdmVuIHNpZ24taW4gcHJvdmlkZXIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgRmlyZWJhc2UgcHJvamVjdC4gJyArXG4gICAgICAnRW5hYmxlIGl0IGluIHRoZSBGaXJlYmFzZSBjb25zb2xlLCB1bmRlciB0aGUgc2lnbi1pbiBtZXRob2QgdGFiIG9mIHRoZSAnICtcbiAgICAgICdBdXRoIHNlY3Rpb24uJyxcbiAgICBbQXV0aEVycm9yQ29kZS5PUEVSQVRJT05fTk9UX1NVUFBPUlRFRF06XG4gICAgICAnVGhpcyBvcGVyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgZW52aXJvbm1lbnQgdGhpcyBhcHBsaWNhdGlvbiBpcyAnICtcbiAgICAgICdydW5uaW5nIG9uLiBcImxvY2F0aW9uLnByb3RvY29sXCIgbXVzdCBiZSBodHRwLCBodHRwcyBvciBjaHJvbWUtZXh0ZW5zaW9uJyArXG4gICAgICAnIGFuZCB3ZWIgc3RvcmFnZSBtdXN0IGJlIGVuYWJsZWQuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5QT1BVUF9CTE9DS0VEXTpcbiAgICAgICdVbmFibGUgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBwb3B1cC4gSXQgbWF5IGhhdmUgYmVlbiBibG9ja2VkIGJ5IHRoZSBicm93c2VyLicsXG4gICAgW0F1dGhFcnJvckNvZGUuUE9QVVBfQ0xPU0VEX0JZX1VTRVJdOlxuICAgICAgJ1RoZSBwb3B1cCBoYXMgYmVlbiBjbG9zZWQgYnkgdGhlIHVzZXIgYmVmb3JlIGZpbmFsaXppbmcgdGhlIG9wZXJhdGlvbi4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlBST1ZJREVSX0FMUkVBRFlfTElOS0VEXTpcbiAgICAgICdVc2VyIGNhbiBvbmx5IGJlIGxpbmtlZCB0byBvbmUgaWRlbnRpdHkgZm9yIHRoZSBnaXZlbiBwcm92aWRlci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlFVT1RBX0VYQ0VFREVEXTpcbiAgICAgIFwiVGhlIHByb2plY3QncyBxdW90YSBmb3IgdGhpcyBvcGVyYXRpb24gaGFzIGJlZW4gZXhjZWVkZWQuXCIsXG4gICAgW0F1dGhFcnJvckNvZGUuUkVESVJFQ1RfQ0FOQ0VMTEVEX0JZX1VTRVJdOlxuICAgICAgJ1RoZSByZWRpcmVjdCBvcGVyYXRpb24gaGFzIGJlZW4gY2FuY2VsbGVkIGJ5IHRoZSB1c2VyIGJlZm9yZSBmaW5hbGl6aW5nLicsXG4gICAgW0F1dGhFcnJvckNvZGUuUkVESVJFQ1RfT1BFUkFUSU9OX1BFTkRJTkddOlxuICAgICAgJ0EgcmVkaXJlY3Qgc2lnbi1pbiBvcGVyYXRpb24gaXMgYWxyZWFkeSBwZW5kaW5nLicsXG4gICAgW0F1dGhFcnJvckNvZGUuUkVKRUNURURfQ1JFREVOVElBTF06XG4gICAgICAnVGhlIHJlcXVlc3QgY29udGFpbnMgbWFsZm9ybWVkIG9yIG1pc21hdGNoaW5nIGNyZWRlbnRpYWxzLicsXG4gICAgW0F1dGhFcnJvckNvZGUuU0VDT05EX0ZBQ1RPUl9BTFJFQURZX0VOUk9MTEVEXTpcbiAgICAgICdUaGUgc2Vjb25kIGZhY3RvciBpcyBhbHJlYWR5IGVucm9sbGVkIG9uIHRoaXMgYWNjb3VudC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERURdOlxuICAgICAgJ1RoZSBtYXhpbXVtIGFsbG93ZWQgbnVtYmVyIG9mIHNlY29uZCBmYWN0b3JzIG9uIGEgdXNlciBoYXMgYmVlbiBleGNlZWRlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlRFTkFOVF9JRF9NSVNNQVRDSF06XG4gICAgICBcIlRoZSBwcm92aWRlZCB0ZW5hbnQgSUQgZG9lcyBub3QgbWF0Y2ggdGhlIEF1dGggaW5zdGFuY2UncyB0ZW5hbnQgSURcIixcbiAgICBbQXV0aEVycm9yQ29kZS5USU1FT1VUXTogJ1RoZSBvcGVyYXRpb24gaGFzIHRpbWVkIG91dC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlRPS0VOX0VYUElSRURdOlxuICAgICAgXCJUaGUgdXNlcidzIGNyZWRlbnRpYWwgaXMgbm8gbG9uZ2VyIHZhbGlkLiBUaGUgdXNlciBtdXN0IHNpZ24gaW4gYWdhaW4uXCIsXG4gICAgW0F1dGhFcnJvckNvZGUuVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSXTpcbiAgICAgICdXZSBoYXZlIGJsb2NrZWQgYWxsIHJlcXVlc3RzIGZyb20gdGhpcyBkZXZpY2UgZHVlIHRvIHVudXN1YWwgYWN0aXZpdHkuICcgK1xuICAgICAgJ1RyeSBhZ2FpbiBsYXRlci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVOQVVUSE9SSVpFRF9ET01BSU5dOlxuICAgICAgJ1RoZSBkb21haW4gb2YgdGhlIGNvbnRpbnVlIFVSTCBpcyBub3Qgd2hpdGVsaXN0ZWQuICBQbGVhc2Ugd2hpdGVsaXN0ICcgK1xuICAgICAgJ3RoZSBkb21haW4gaW4gdGhlIEZpcmViYXNlIGNvbnNvbGUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5VTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1JdOlxuICAgICAgJ0Vucm9sbGluZyBhIHNlY29uZCBmYWN0b3Igb3Igc2lnbmluZyBpbiB3aXRoIGEgbXVsdGktZmFjdG9yIGFjY291bnQgcmVxdWlyZXMgc2lnbi1pbiB3aXRoIGEgc3VwcG9ydGVkIGZpcnN0IGZhY3Rvci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVOU1VQUE9SVEVEX1BFUlNJU1RFTkNFXTpcbiAgICAgICdUaGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBzcGVjaWZpZWQgcGVyc2lzdGVuY2UgdHlwZS4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT05dOlxuICAgICAgJ1RoaXMgb3BlcmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYSBtdWx0aS10ZW5hbnQgY29udGV4dC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVOVkVSSUZJRURfRU1BSUxdOlxuICAgICAgJ1RoZSBvcGVyYXRpb24gcmVxdWlyZXMgYSB2ZXJpZmllZCBlbWFpbC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVTRVJfQ0FOQ0VMTEVEXTpcbiAgICAgICdUaGUgdXNlciBkaWQgbm90IGdyYW50IHlvdXIgYXBwbGljYXRpb24gdGhlIHBlcm1pc3Npb25zIGl0IHJlcXVlc3RlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVTRVJfREVMRVRFRF06XG4gICAgICAnVGhlcmUgaXMgbm8gdXNlciByZWNvcmQgY29ycmVzcG9uZGluZyB0byB0aGlzIGlkZW50aWZpZXIuIFRoZSB1c2VyIG1heSAnICtcbiAgICAgICdoYXZlIGJlZW4gZGVsZXRlZC4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVTRVJfRElTQUJMRURdOlxuICAgICAgJ1RoZSB1c2VyIGFjY291bnQgaGFzIGJlZW4gZGlzYWJsZWQgYnkgYW4gYWRtaW5pc3RyYXRvci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVTRVJfTUlTTUFUQ0hdOlxuICAgICAgJ1RoZSBzdXBwbGllZCBjcmVkZW50aWFscyBkbyBub3QgY29ycmVzcG9uZCB0byB0aGUgcHJldmlvdXNseSBzaWduZWQgaW4gdXNlci4nLFxuICAgIFtBdXRoRXJyb3JDb2RlLlVTRVJfU0lHTkVEX09VVF06ICcnLFxuICAgIFtBdXRoRXJyb3JDb2RlLldFQUtfUEFTU1dPUkRdOlxuICAgICAgJ1RoZSBwYXNzd29yZCBtdXN0IGJlIDYgY2hhcmFjdGVycyBsb25nIG9yIG1vcmUuJyxcbiAgICBbQXV0aEVycm9yQ29kZS5XRUJfU1RPUkFHRV9VTlNVUFBPUlRFRF06XG4gICAgICAnVGhpcyBicm93c2VyIGlzIG5vdCBzdXBwb3J0ZWQgb3IgM3JkIHBhcnR5IGNvb2tpZXMgYW5kIGRhdGEgbWF5IGJlIGRpc2FibGVkLicsXG4gICAgW0F1dGhFcnJvckNvZGUuQUxSRUFEWV9JTklUSUFMSVpFRF06XG4gICAgICAnaW5pdGlhbGl6ZUF1dGgoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCB3aXRoICcgK1xuICAgICAgJ2RpZmZlcmVudCBvcHRpb25zLiBUbyBhdm9pZCB0aGlzIGVycm9yLCBjYWxsIGluaXRpYWxpemVBdXRoKCkgd2l0aCB0aGUgJyArXG4gICAgICAnc2FtZSBvcHRpb25zIGFzIHdoZW4gaXQgd2FzIG9yaWdpbmFsbHkgY2FsbGVkLCBvciBjYWxsIGdldEF1dGgoKSB0byByZXR1cm4gdGhlJyArXG4gICAgICAnIGFscmVhZHkgaW5pdGlhbGl6ZWQgaW5zdGFuY2UuJ1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWFwUmV0cmlldmVyIGV4dGVuZHMgQXV0aEVycm9yTWFwIHtcbiAgKCk6IEVycm9yTWFwPEF1dGhFcnJvckNvZGU+O1xufVxuXG5mdW5jdGlvbiBfcHJvZEVycm9yTWFwKCk6IEVycm9yTWFwPEF1dGhFcnJvckNvZGU+IHtcbiAgLy8gV2Ugd2lsbCBpbmNsdWRlIHRoaXMgb25lIG1lc3NhZ2UgaW4gdGhlIHByb2QgZXJyb3IgbWFwIHNpbmNlIGJ5IHRoZSB2ZXJ5XG4gIC8vIG5hdHVyZSBvZiB0aGlzIGVycm9yLCBkZXZlbG9wZXJzIHdpbGwgbmV2ZXIgYmUgYWJsZSB0byBzZWUgdGhlIG1lc3NhZ2VcbiAgLy8gdXNpbmcgdGhlIGRlYnVnRXJyb3JNYXAgKHdoaWNoIGlzIGluc3RhbGxlZCBkdXJpbmcgYXV0aCBpbml0aWFsaXphdGlvbikuXG4gIHJldHVybiB7XG4gICAgW0F1dGhFcnJvckNvZGUuREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIXTpcbiAgICAgICdBbm90aGVyIEZpcmViYXNlIFNESyB3YXMgaW5pdGlhbGl6ZWQgYW5kIGlzIHRyeWluZyB0byB1c2UgQXV0aCBiZWZvcmUgQXV0aCBpcyAnICtcbiAgICAgICdpbml0aWFsaXplZC4gUGxlYXNlIGJlIHN1cmUgdG8gY2FsbCBgaW5pdGlhbGl6ZUF1dGhgIG9yIGBnZXRBdXRoYCBiZWZvcmUgJyArXG4gICAgICAnc3RhcnRpbmcgYW55IG90aGVyIEZpcmViYXNlIFNESy4nXG4gIH0gYXMgRXJyb3JNYXA8QXV0aEVycm9yQ29kZT47XG59XG5cbi8qKlxuICogQSB2ZXJib3NlIGVycm9yIG1hcCB3aXRoIGRldGFpbGVkIGRlc2NyaXB0aW9ucyBmb3IgbW9zdCBlcnJvciBjb2Rlcy5cbiAqXG4gKiBTZWUgZGlzY3Vzc2lvbiBhdCB7QGxpbmsgQXV0aEVycm9yTWFwfVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGRlYnVnRXJyb3JNYXA6IEF1dGhFcnJvck1hcCA9IF9kZWJ1Z0Vycm9yTWFwO1xuXG4vKipcbiAqIEEgbWluaW1hbCBlcnJvciBtYXAgd2l0aCBhbGwgdmVyYm9zZSBlcnJvciBtZXNzYWdlcyBzdHJpcHBlZC5cbiAqXG4gKiBTZWUgZGlzY3Vzc2lvbiBhdCB7QGxpbmsgQXV0aEVycm9yTWFwfVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2RFcnJvck1hcDogQXV0aEVycm9yTWFwID0gX3Byb2RFcnJvck1hcDtcblxuZXhwb3J0IGludGVyZmFjZSBOYW1lZEVycm9yUGFyYW1zIHtcbiAgYXBwTmFtZTogQXBwTmFtZTtcbiAgY3JlZGVudGlhbD86IEF1dGhDcmVkZW50aWFsO1xuICBlbWFpbD86IHN0cmluZztcbiAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xuICB1c2VyPzogVXNlcjtcbiAgX3NlcnZlclJlc3BvbnNlPzogb2JqZWN0O1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG50eXBlIEdlbmVyaWNBdXRoRXJyb3JQYXJhbXMgPSB7XG4gIFtrZXkgaW4gRXhjbHVkZTxcbiAgICBBdXRoRXJyb3JDb2RlLFxuICAgIHwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICAgIHwgQXV0aEVycm9yQ29kZS5ERVBFTkRFTlRfU0RLX0lOSVRfQkVGT1JFX0FVVEhcbiAgICB8IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICB8IEF1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEXG4gICAgfCBBdXRoRXJyb3JDb2RlLk5PX0FVVEhfRVZFTlRcbiAgICB8IEF1dGhFcnJvckNvZGUuT1BFUkFUSU9OX05PVF9TVVBQT1JURURcbiAgPl06IHtcbiAgICBhcHBOYW1lOiBBcHBOYW1lO1xuICAgIGVtYWlsPzogc3RyaW5nO1xuICAgIHBob25lTnVtYmVyPzogc3RyaW5nO1xuICB9O1xufTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdXRoRXJyb3JQYXJhbXMgZXh0ZW5kcyBHZW5lcmljQXV0aEVycm9yUGFyYW1zIHtcbiAgW0F1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JdOiB7IGFwcE5hbWU/OiBBcHBOYW1lIH07XG4gIFtBdXRoRXJyb3JDb2RlLkRFUEVOREVOVF9TREtfSU5JVF9CRUZPUkVfQVVUSF06IHsgYXBwTmFtZT86IEFwcE5hbWUgfTtcbiAgW0F1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JdOiB7IGFwcE5hbWU/OiBBcHBOYW1lIH07XG4gIFtBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXTogeyBhcHBOYW1lPzogQXBwTmFtZSB9O1xuICBbQXV0aEVycm9yQ29kZS5OT19BVVRIX0VWRU5UXTogeyBhcHBOYW1lPzogQXBwTmFtZSB9O1xuICBbQXV0aEVycm9yQ29kZS5NRkFfUkVRVUlSRURdOiB7XG4gICAgYXBwTmFtZTogQXBwTmFtZTtcbiAgICBfc2VydmVyUmVzcG9uc2U6IElkVG9rZW5NZmFSZXNwb25zZTtcbiAgfTtcbiAgW0F1dGhFcnJvckNvZGUuSU5WQUxJRF9DT1JET1ZBX0NPTkZJR1VSQVRJT05dOiB7XG4gICAgYXBwTmFtZTogQXBwTmFtZTtcbiAgICBtaXNzaW5nUGx1Z2luPzogc3RyaW5nO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgX0RFRkFVTFRfQVVUSF9FUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeTxcbiAgQXV0aEVycm9yQ29kZSxcbiAgQXV0aEVycm9yUGFyYW1zXG4+KCdhdXRoJywgJ0ZpcmViYXNlJywgX3Byb2RFcnJvck1hcCgpKTtcblxuLyoqXG4gKiBBIG1hcCBvZiBwb3RlbnRpYWwgYEF1dGhgIGVycm9yIGNvZGVzLCBmb3IgZWFzaWVyIGNvbXBhcmlzb24gd2l0aCBlcnJvcnNcbiAqIHRocm93biBieSB0aGUgU0RLLlxuICpcbiAqIEByZW1hcmtzXG4gKiBOb3RlIHRoYXQgeW91IGNhbid0IHRyZWUtc2hha2UgaW5kaXZpZHVhbCBrZXlzXG4gKiBpbiB0aGUgbWFwLCBzbyBieSB1c2luZyB0aGUgbWFwIHlvdSBtaWdodCBzdWJzdGFudGlhbGx5IGluY3JlYXNlIHlvdXJcbiAqIGJ1bmRsZSBzaXplLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEFVVEhfRVJST1JfQ09ERVNfTUFQX0RPX05PVF9VU0VfSU5URVJOQUxMWSA9IHtcbiAgQURNSU5fT05MWV9PUEVSQVRJT046ICdhdXRoL2FkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uJyxcbiAgQVJHVU1FTlRfRVJST1I6ICdhdXRoL2FyZ3VtZW50LWVycm9yJyxcbiAgQVBQX05PVF9BVVRIT1JJWkVEOiAnYXV0aC9hcHAtbm90LWF1dGhvcml6ZWQnLFxuICBBUFBfTk9UX0lOU1RBTExFRDogJ2F1dGgvYXBwLW5vdC1pbnN0YWxsZWQnLFxuICBDQVBUQ0hBX0NIRUNLX0ZBSUxFRDogJ2F1dGgvY2FwdGNoYS1jaGVjay1mYWlsZWQnLFxuICBDT0RFX0VYUElSRUQ6ICdhdXRoL2NvZGUtZXhwaXJlZCcsXG4gIENPUkRPVkFfTk9UX1JFQURZOiAnYXV0aC9jb3Jkb3ZhLW5vdC1yZWFkeScsXG4gIENPUlNfVU5TVVBQT1JURUQ6ICdhdXRoL2NvcnMtdW5zdXBwb3J0ZWQnLFxuICBDUkVERU5USUFMX0FMUkVBRFlfSU5fVVNFOiAnYXV0aC9jcmVkZW50aWFsLWFscmVhZHktaW4tdXNlJyxcbiAgQ1JFREVOVElBTF9NSVNNQVRDSDogJ2F1dGgvY3VzdG9tLXRva2VuLW1pc21hdGNoJyxcbiAgQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOOiAnYXV0aC9yZXF1aXJlcy1yZWNlbnQtbG9naW4nLFxuICBERVBFTkRFTlRfU0RLX0lOSVRfQkVGT1JFX0FVVEg6ICdhdXRoL2RlcGVuZGVudC1zZGstaW5pdGlhbGl6ZWQtYmVmb3JlLWF1dGgnLFxuICBEWU5BTUlDX0xJTktfTk9UX0FDVElWQVRFRDogJ2F1dGgvZHluYW1pYy1saW5rLW5vdC1hY3RpdmF0ZWQnLFxuICBFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OOiAnYXV0aC9lbWFpbC1jaGFuZ2UtbmVlZHMtdmVyaWZpY2F0aW9uJyxcbiAgRU1BSUxfRVhJU1RTOiAnYXV0aC9lbWFpbC1hbHJlYWR5LWluLXVzZScsXG4gIEVNVUxBVE9SX0NPTkZJR19GQUlMRUQ6ICdhdXRoL2VtdWxhdG9yLWNvbmZpZy1mYWlsZWQnLFxuICBFWFBJUkVEX09PQl9DT0RFOiAnYXV0aC9leHBpcmVkLWFjdGlvbi1jb2RlJyxcbiAgRVhQSVJFRF9QT1BVUF9SRVFVRVNUOiAnYXV0aC9jYW5jZWxsZWQtcG9wdXAtcmVxdWVzdCcsXG4gIElOVEVSTkFMX0VSUk9SOiAnYXV0aC9pbnRlcm5hbC1lcnJvcicsXG4gIElOVkFMSURfQVBJX0tFWTogJ2F1dGgvaW52YWxpZC1hcGkta2V5JyxcbiAgSU5WQUxJRF9BUFBfQ1JFREVOVElBTDogJ2F1dGgvaW52YWxpZC1hcHAtY3JlZGVudGlhbCcsXG4gIElOVkFMSURfQVBQX0lEOiAnYXV0aC9pbnZhbGlkLWFwcC1pZCcsXG4gIElOVkFMSURfQVVUSDogJ2F1dGgvaW52YWxpZC11c2VyLXRva2VuJyxcbiAgSU5WQUxJRF9BVVRIX0VWRU5UOiAnYXV0aC9pbnZhbGlkLWF1dGgtZXZlbnQnLFxuICBJTlZBTElEX0NFUlRfSEFTSDogJ2F1dGgvaW52YWxpZC1jZXJ0LWhhc2gnLFxuICBJTlZBTElEX0NPREU6ICdhdXRoL2ludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGUnLFxuICBJTlZBTElEX0NPTlRJTlVFX1VSSTogJ2F1dGgvaW52YWxpZC1jb250aW51ZS11cmknLFxuICBJTlZBTElEX0NPUkRPVkFfQ09ORklHVVJBVElPTjogJ2F1dGgvaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb24nLFxuICBJTlZBTElEX0NVU1RPTV9UT0tFTjogJ2F1dGgvaW52YWxpZC1jdXN0b20tdG9rZW4nLFxuICBJTlZBTElEX0RZTkFNSUNfTElOS19ET01BSU46ICdhdXRoL2ludmFsaWQtZHluYW1pYy1saW5rLWRvbWFpbicsXG4gIElOVkFMSURfRU1BSUw6ICdhdXRoL2ludmFsaWQtZW1haWwnLFxuICBJTlZBTElEX0VNVUxBVE9SX1NDSEVNRTogJ2F1dGgvaW52YWxpZC1lbXVsYXRvci1zY2hlbWUnLFxuICBJTlZBTElEX0lEUF9SRVNQT05TRTogJ2F1dGgvaW52YWxpZC1jcmVkZW50aWFsJyxcbiAgSU5WQUxJRF9NRVNTQUdFX1BBWUxPQUQ6ICdhdXRoL2ludmFsaWQtbWVzc2FnZS1wYXlsb2FkJyxcbiAgSU5WQUxJRF9NRkFfU0VTU0lPTjogJ2F1dGgvaW52YWxpZC1tdWx0aS1mYWN0b3Itc2Vzc2lvbicsXG4gIElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEOiAnYXV0aC9pbnZhbGlkLW9hdXRoLWNsaWVudC1pZCcsXG4gIElOVkFMSURfT0FVVEhfUFJPVklERVI6ICdhdXRoL2ludmFsaWQtb2F1dGgtcHJvdmlkZXInLFxuICBJTlZBTElEX09PQl9DT0RFOiAnYXV0aC9pbnZhbGlkLWFjdGlvbi1jb2RlJyxcbiAgSU5WQUxJRF9PUklHSU46ICdhdXRoL3VuYXV0aG9yaXplZC1kb21haW4nLFxuICBJTlZBTElEX1BBU1NXT1JEOiAnYXV0aC93cm9uZy1wYXNzd29yZCcsXG4gIElOVkFMSURfUEVSU0lTVEVOQ0U6ICdhdXRoL2ludmFsaWQtcGVyc2lzdGVuY2UtdHlwZScsXG4gIElOVkFMSURfUEhPTkVfTlVNQkVSOiAnYXV0aC9pbnZhbGlkLXBob25lLW51bWJlcicsXG4gIElOVkFMSURfUFJPVklERVJfSUQ6ICdhdXRoL2ludmFsaWQtcHJvdmlkZXItaWQnLFxuICBJTlZBTElEX1JFQ0lQSUVOVF9FTUFJTDogJ2F1dGgvaW52YWxpZC1yZWNpcGllbnQtZW1haWwnLFxuICBJTlZBTElEX1NFTkRFUjogJ2F1dGgvaW52YWxpZC1zZW5kZXInLFxuICBJTlZBTElEX1NFU1NJT05fSU5GTzogJ2F1dGgvaW52YWxpZC12ZXJpZmljYXRpb24taWQnLFxuICBJTlZBTElEX1RFTkFOVF9JRDogJ2F1dGgvaW52YWxpZC10ZW5hbnQtaWQnLFxuICBNRkFfSU5GT19OT1RfRk9VTkQ6ICdhdXRoL211bHRpLWZhY3Rvci1pbmZvLW5vdC1mb3VuZCcsXG4gIE1GQV9SRVFVSVJFRDogJ2F1dGgvbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWQnLFxuICBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FOiAnYXV0aC9taXNzaW5nLWFuZHJvaWQtcGtnLW5hbWUnLFxuICBNSVNTSU5HX0FQUF9DUkVERU5USUFMOiAnYXV0aC9taXNzaW5nLWFwcC1jcmVkZW50aWFsJyxcbiAgTUlTU0lOR19BVVRIX0RPTUFJTjogJ2F1dGgvYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkJyxcbiAgTUlTU0lOR19DT0RFOiAnYXV0aC9taXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlJyxcbiAgTUlTU0lOR19DT05USU5VRV9VUkk6ICdhdXRoL21pc3NpbmctY29udGludWUtdXJpJyxcbiAgTUlTU0lOR19JRlJBTUVfU1RBUlQ6ICdhdXRoL21pc3NpbmctaWZyYW1lLXN0YXJ0JyxcbiAgTUlTU0lOR19JT1NfQlVORExFX0lEOiAnYXV0aC9taXNzaW5nLWlvcy1idW5kbGUtaWQnLFxuICBNSVNTSU5HX09SX0lOVkFMSURfTk9OQ0U6ICdhdXRoL21pc3Npbmctb3ItaW52YWxpZC1ub25jZScsXG4gIE1JU1NJTkdfTUZBX0lORk86ICdhdXRoL21pc3NpbmctbXVsdGktZmFjdG9yLWluZm8nLFxuICBNSVNTSU5HX01GQV9TRVNTSU9OOiAnYXV0aC9taXNzaW5nLW11bHRpLWZhY3Rvci1zZXNzaW9uJyxcbiAgTUlTU0lOR19QSE9ORV9OVU1CRVI6ICdhdXRoL21pc3NpbmctcGhvbmUtbnVtYmVyJyxcbiAgTUlTU0lOR19TRVNTSU9OX0lORk86ICdhdXRoL21pc3NpbmctdmVyaWZpY2F0aW9uLWlkJyxcbiAgTU9EVUxFX0RFU1RST1lFRDogJ2F1dGgvYXBwLWRlbGV0ZWQnLFxuICBORUVEX0NPTkZJUk1BVElPTjogJ2F1dGgvYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbCcsXG4gIE5FVFdPUktfUkVRVUVTVF9GQUlMRUQ6ICdhdXRoL25ldHdvcmstcmVxdWVzdC1mYWlsZWQnLFxuICBOVUxMX1VTRVI6ICdhdXRoL251bGwtdXNlcicsXG4gIE5PX0FVVEhfRVZFTlQ6ICdhdXRoL25vLWF1dGgtZXZlbnQnLFxuICBOT19TVUNIX1BST1ZJREVSOiAnYXV0aC9uby1zdWNoLXByb3ZpZGVyJyxcbiAgT1BFUkFUSU9OX05PVF9BTExPV0VEOiAnYXV0aC9vcGVyYXRpb24tbm90LWFsbG93ZWQnLFxuICBPUEVSQVRJT05fTk9UX1NVUFBPUlRFRDogJ2F1dGgvb3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudCcsXG4gIFBPUFVQX0JMT0NLRUQ6ICdhdXRoL3BvcHVwLWJsb2NrZWQnLFxuICBQT1BVUF9DTE9TRURfQllfVVNFUjogJ2F1dGgvcG9wdXAtY2xvc2VkLWJ5LXVzZXInLFxuICBQUk9WSURFUl9BTFJFQURZX0xJTktFRDogJ2F1dGgvcHJvdmlkZXItYWxyZWFkeS1saW5rZWQnLFxuICBRVU9UQV9FWENFRURFRDogJ2F1dGgvcXVvdGEtZXhjZWVkZWQnLFxuICBSRURJUkVDVF9DQU5DRUxMRURfQllfVVNFUjogJ2F1dGgvcmVkaXJlY3QtY2FuY2VsbGVkLWJ5LXVzZXInLFxuICBSRURJUkVDVF9PUEVSQVRJT05fUEVORElORzogJ2F1dGgvcmVkaXJlY3Qtb3BlcmF0aW9uLXBlbmRpbmcnLFxuICBSRUpFQ1RFRF9DUkVERU5USUFMOiAnYXV0aC9yZWplY3RlZC1jcmVkZW50aWFsJyxcbiAgU0VDT05EX0ZBQ1RPUl9BTFJFQURZX0VOUk9MTEVEOiAnYXV0aC9zZWNvbmQtZmFjdG9yLWFscmVhZHktaW4tdXNlJyxcbiAgU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRDogJ2F1dGgvbWF4aW11bS1zZWNvbmQtZmFjdG9yLWNvdW50LWV4Y2VlZGVkJyxcbiAgVEVOQU5UX0lEX01JU01BVENIOiAnYXV0aC90ZW5hbnQtaWQtbWlzbWF0Y2gnLFxuICBUSU1FT1VUOiAnYXV0aC90aW1lb3V0JyxcbiAgVE9LRU5fRVhQSVJFRDogJ2F1dGgvdXNlci10b2tlbi1leHBpcmVkJyxcbiAgVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSOiAnYXV0aC90b28tbWFueS1yZXF1ZXN0cycsXG4gIFVOQVVUSE9SSVpFRF9ET01BSU46ICdhdXRoL3VuYXV0aG9yaXplZC1jb250aW51ZS11cmknLFxuICBVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1I6ICdhdXRoL3Vuc3VwcG9ydGVkLWZpcnN0LWZhY3RvcicsXG4gIFVOU1VQUE9SVEVEX1BFUlNJU1RFTkNFOiAnYXV0aC91bnN1cHBvcnRlZC1wZXJzaXN0ZW5jZS10eXBlJyxcbiAgVU5TVVBQT1JURURfVEVOQU5UX09QRVJBVElPTjogJ2F1dGgvdW5zdXBwb3J0ZWQtdGVuYW50LW9wZXJhdGlvbicsXG4gIFVOVkVSSUZJRURfRU1BSUw6ICdhdXRoL3VudmVyaWZpZWQtZW1haWwnLFxuICBVU0VSX0NBTkNFTExFRDogJ2F1dGgvdXNlci1jYW5jZWxsZWQnLFxuICBVU0VSX0RFTEVURUQ6ICdhdXRoL3VzZXItbm90LWZvdW5kJyxcbiAgVVNFUl9ESVNBQkxFRDogJ2F1dGgvdXNlci1kaXNhYmxlZCcsXG4gIFVTRVJfTUlTTUFUQ0g6ICdhdXRoL3VzZXItbWlzbWF0Y2gnLFxuICBVU0VSX1NJR05FRF9PVVQ6ICdhdXRoL3VzZXItc2lnbmVkLW91dCcsXG4gIFdFQUtfUEFTU1dPUkQ6ICdhdXRoL3dlYWstcGFzc3dvcmQnLFxuICBXRUJfU1RPUkFHRV9VTlNVUFBPUlRFRDogJ2F1dGgvd2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWQnLFxuICBBTFJFQURZX0lOSVRJQUxJWkVEOiAnYXV0aC9hbHJlYWR5LWluaXRpYWxpemVkJ1xufSBhcyBjb25zdDtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBMb2dnZXIsIExvZ0xldmVsIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBTREtfVkVSU0lPTiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG5leHBvcnQgeyBMb2dMZXZlbCB9O1xuXG5jb25zdCBsb2dDbGllbnQgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXV0aCcpO1xuXG4vLyBIZWxwZXIgbWV0aG9kcyBhcmUgbmVlZGVkIGJlY2F1c2UgdmFyaWFibGVzIGNhbid0IGJlIGV4cG9ydGVkIGFzIHJlYWQvd3JpdGVcbmV4cG9ydCBmdW5jdGlvbiBfZ2V0TG9nTGV2ZWwoKTogTG9nTGV2ZWwge1xuICByZXR1cm4gbG9nQ2xpZW50LmxvZ0xldmVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3NldExvZ0xldmVsKG5ld0xldmVsOiBMb2dMZXZlbCk6IHZvaWQge1xuICBsb2dDbGllbnQubG9nTGV2ZWwgPSBuZXdMZXZlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9sb2dEZWJ1Zyhtc2c6IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkIHtcbiAgaWYgKGxvZ0NsaWVudC5sb2dMZXZlbCA8PSBMb2dMZXZlbC5ERUJVRykge1xuICAgIGxvZ0NsaWVudC5kZWJ1ZyhgQXV0aCAoJHtTREtfVkVSU0lPTn0pOiAke21zZ31gLCAuLi5hcmdzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2xvZ0Vycm9yKG1zZzogc3RyaW5nLCAuLi5hcmdzOiBzdHJpbmdbXSk6IHZvaWQge1xuICBpZiAobG9nQ2xpZW50LmxvZ0xldmVsIDw9IExvZ0xldmVsLkVSUk9SKSB7XG4gICAgbG9nQ2xpZW50LmVycm9yKGBBdXRoICgke1NES19WRVJTSU9OfSk6ICR7bXNnfWAsIC4uLmFyZ3MpO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7XG4gIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWSxcbiAgQXV0aEVycm9yQ29kZSxcbiAgQXV0aEVycm9yUGFyYW1zLFxuICBwcm9kRXJyb3JNYXAsXG4gIEVycm9yTWFwUmV0cmlldmVyXG59IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfbG9nRXJyb3IgfSBmcm9tICcuL2xvZyc7XG5cbnR5cGUgQXV0aEVycm9yTGlzdFBhcmFtczxLPiA9IEsgZXh0ZW5kcyBrZXlvZiBBdXRoRXJyb3JQYXJhbXNcbiAgPyBbQXV0aEVycm9yUGFyYW1zW0tdXVxuICA6IFtdO1xudHlwZSBMZXNzQXBwTmFtZTxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4gPSBPbWl0PEF1dGhFcnJvclBhcmFtc1tLXSwgJ2FwcE5hbWUnPjtcblxuLyoqXG4gKiBVbmNvbmRpdGlvbmFsbHkgZmFpbHMsIHRocm93aW5nIGEgZGV2ZWxvcGVyIGZhY2luZyBJTlRFUk5BTF9FUlJPUlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuTUZBX1JFUVVJUkVEKTsgIC8vIEVycm9yOiB0aGUgTUZBX1JFUVVJUkVEIGVycm9yIG5lZWRzIG1vcmUgcGFyYW1zIHRoYW4gYXBwTmFtZVxuICogZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk1GQV9SRVFVSVJFRCwge3NlcnZlclJlc3BvbnNlfSk7ICAvLyBDb21waWxlc1xuICogZmFpbChBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTsgIC8vIENvbXBpbGVzOyBpbnRlcm5hbCBlcnJvciBkb2VzIG5vdCBuZWVkIGFwcE5hbWVcbiAqIGZhaWwoQXV0aEVycm9yQ29kZS5VU0VSX0RFTEVURUQpOyAgLy8gRXJyb3I6IFVTRVJfREVMRVRFRCByZXF1aXJlcyBhcHAgbmFtZVxuICogZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLlVTRVJfREVMRVRFRCk7ICAvLyBDb21waWxlczsgVVNFUl9ERUxFVEVEIF9vbmx5XyBuZWVkcyBhcHAgbmFtZVxuICogYGBgXG4gKlxuICogQHBhcmFtIGFwcE5hbWUgQXBwIG5hbWUgZm9yIHRhZ2dpbmcgdGhlIGVycm9yXG4gKiBAdGhyb3dzIEZpcmViYXNlRXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9mYWlsPEsgZXh0ZW5kcyBBdXRoRXJyb3JDb2RlPihcbiAgY29kZTogSyxcbiAgLi4uZGF0YToge30gZXh0ZW5kcyBBdXRoRXJyb3JQYXJhbXNbS11cbiAgICA/IFtBdXRoRXJyb3JQYXJhbXNbS10/XVxuICAgIDogW0F1dGhFcnJvclBhcmFtc1tLXV1cbik6IG5ldmVyO1xuZXhwb3J0IGZ1bmN0aW9uIF9mYWlsPEsgZXh0ZW5kcyBBdXRoRXJyb3JDb2RlPihcbiAgYXV0aDogQXV0aCxcbiAgY29kZTogSyxcbiAgLi4uZGF0YToge30gZXh0ZW5kcyBMZXNzQXBwTmFtZTxLPiA/IFtMZXNzQXBwTmFtZTxLPj9dIDogW0xlc3NBcHBOYW1lPEs+XVxuKTogbmV2ZXI7XG5leHBvcnQgZnVuY3Rpb24gX2ZhaWw8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhdXRoT3JDb2RlOiBBdXRoIHwgSyxcbiAgLi4ucmVzdDogdW5rbm93bltdXG4pOiBuZXZlciB7XG4gIHRocm93IGNyZWF0ZUVycm9ySW50ZXJuYWwoYXV0aE9yQ29kZSwgLi4ucmVzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY3JlYXRlRXJyb3I8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBjb2RlOiBLLFxuICAuLi5kYXRhOiB7fSBleHRlbmRzIEF1dGhFcnJvclBhcmFtc1tLXVxuICAgID8gW0F1dGhFcnJvclBhcmFtc1tLXT9dXG4gICAgOiBbQXV0aEVycm9yUGFyYW1zW0tdXVxuKTogRmlyZWJhc2VFcnJvcjtcbmV4cG9ydCBmdW5jdGlvbiBfY3JlYXRlRXJyb3I8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhdXRoOiBBdXRoLFxuICBjb2RlOiBLLFxuICAuLi5kYXRhOiB7fSBleHRlbmRzIExlc3NBcHBOYW1lPEs+ID8gW0xlc3NBcHBOYW1lPEs+P10gOiBbTGVzc0FwcE5hbWU8Sz5dXG4pOiBGaXJlYmFzZUVycm9yO1xuZXhwb3J0IGZ1bmN0aW9uIF9jcmVhdGVFcnJvcjxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4oXG4gIGF1dGhPckNvZGU6IEF1dGggfCBLLFxuICAuLi5yZXN0OiB1bmtub3duW11cbik6IEZpcmViYXNlRXJyb3Ige1xuICByZXR1cm4gY3JlYXRlRXJyb3JJbnRlcm5hbChhdXRoT3JDb2RlLCAuLi5yZXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9lcnJvcldpdGhDdXN0b21NZXNzYWdlKGF1dGg6IEF1dGgsIGNvZGU6IEF1dGhFcnJvckNvZGUsIG1lc3NhZ2U6IHN0cmluZyk6IEZpcmViYXNlRXJyb3Ige1xuICBjb25zdCBlcnJvck1hcCA9IHsuLi4ocHJvZEVycm9yTWFwIGFzIEVycm9yTWFwUmV0cmlldmVyKSgpLCBbY29kZV06IG1lc3NhZ2V9O1xuICBjb25zdCBmYWN0b3J5ID0gbmV3IEVycm9yRmFjdG9yeTxBdXRoRXJyb3JDb2RlLCBBdXRoRXJyb3JQYXJhbXM+KFxuICAgICdhdXRoJyxcbiAgICAnRmlyZWJhc2UnLFxuICAgIGVycm9yTWFwXG4gICk7XG4gIHJldHVybiBmYWN0b3J5LmNyZWF0ZShjb2RlLCB7XG4gICAgYXBwTmFtZTogYXV0aC5uYW1lLFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9hc3NlcnRJbnN0YW5jZU9mKGF1dGg6IEF1dGgsIG9iamVjdDogb2JqZWN0LCBpbnN0YW5jZTogdW5rbm93bik6IHZvaWQge1xuICBjb25zdCBjb25zdHJ1Y3Rvckluc3RhbmNlID0gIChpbnN0YW5jZSBhcyB7IG5ldyAoLi4uYXJnczogdW5rbm93bltdKTogdW5rbm93biB9KTtcbiAgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3JJbnN0YW5jZSkpIHtcbiAgICBpZiAoY29uc3RydWN0b3JJbnN0YW5jZS5uYW1lICE9PSBvYmplY3QuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgX2ZhaWwoYXV0aCwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUik7XG4gICAgfVxuXG4gICAgdGhyb3cgX2Vycm9yV2l0aEN1c3RvbU1lc3NhZ2UoYXV0aCwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUixcbiAgICAgIGBUeXBlIG9mICR7b2JqZWN0LmNvbnN0cnVjdG9yLm5hbWV9IGRvZXMgbm90IG1hdGNoIGV4cGVjdGVkIGluc3RhbmNlLmAgK1xuICAgICAgYERpZCB5b3UgcGFzcyBhIHJlZmVyZW5jZSBmcm9tIGEgZGlmZmVyZW50IEF1dGggU0RLP2ApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9ySW50ZXJuYWw8SyBleHRlbmRzIEF1dGhFcnJvckNvZGU+KFxuICBhdXRoT3JDb2RlOiBBdXRoIHwgSyxcbiAgLi4ucmVzdDogdW5rbm93bltdXG4pOiBGaXJlYmFzZUVycm9yIHtcbiAgaWYgKHR5cGVvZiBhdXRoT3JDb2RlICE9PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGNvZGUgPSByZXN0WzBdIGFzIEs7XG4gICAgY29uc3QgZnVsbFBhcmFtcyA9IFsuLi5yZXN0LnNsaWNlKDEpXSBhcyBBdXRoRXJyb3JMaXN0UGFyYW1zPEs+O1xuICAgIGlmIChmdWxsUGFyYW1zWzBdKSB7XG4gICAgICBmdWxsUGFyYW1zWzBdLmFwcE5hbWUgPSBhdXRoT3JDb2RlLm5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIChhdXRoT3JDb2RlIGFzIEF1dGhJbnRlcm5hbCkuX2Vycm9yRmFjdG9yeS5jcmVhdGUoXG4gICAgICBjb2RlLFxuICAgICAgLi4uZnVsbFBhcmFtc1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gX0RFRkFVTFRfQVVUSF9FUlJPUl9GQUNUT1JZLmNyZWF0ZShcbiAgICBhdXRoT3JDb2RlLFxuICAgIC4uLihyZXN0IGFzIEF1dGhFcnJvckxpc3RQYXJhbXM8Sz4pXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfYXNzZXJ0PEsgZXh0ZW5kcyBBdXRoRXJyb3JDb2RlPihcbiAgYXNzZXJ0aW9uOiB1bmtub3duLFxuICBjb2RlOiBLLFxuICAuLi5kYXRhOiB7fSBleHRlbmRzIEF1dGhFcnJvclBhcmFtc1tLXVxuICAgID8gW0F1dGhFcnJvclBhcmFtc1tLXT9dXG4gICAgOiBbQXV0aEVycm9yUGFyYW1zW0tdXVxuKTogYXNzZXJ0cyBhc3NlcnRpb247XG5leHBvcnQgZnVuY3Rpb24gX2Fzc2VydDxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4oXG4gIGFzc2VydGlvbjogdW5rbm93bixcbiAgYXV0aDogQXV0aCxcbiAgY29kZTogSyxcbiAgLi4uZGF0YToge30gZXh0ZW5kcyBMZXNzQXBwTmFtZTxLPiA/IFtMZXNzQXBwTmFtZTxLPj9dIDogW0xlc3NBcHBOYW1lPEs+XVxuKTogYXNzZXJ0cyBhc3NlcnRpb247XG5leHBvcnQgZnVuY3Rpb24gX2Fzc2VydDxLIGV4dGVuZHMgQXV0aEVycm9yQ29kZT4oXG4gIGFzc2VydGlvbjogdW5rbm93bixcbiAgYXV0aE9yQ29kZTogQXV0aCB8IEssXG4gIC4uLnJlc3Q6IHVua25vd25bXVxuKTogYXNzZXJ0cyBhc3NlcnRpb24ge1xuICBpZiAoIWFzc2VydGlvbikge1xuICAgIHRocm93IGNyZWF0ZUVycm9ySW50ZXJuYWwoYXV0aE9yQ29kZSwgLi4ucmVzdCk7XG4gIH1cbn1cblxuLy8gV2UgcmVhbGx5IGRvIHdhbnQgdG8gYWNjZXB0IGxpdGVyYWxseSBhbnkgZnVuY3Rpb24gdHlwZSBoZXJlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xudHlwZSBUeXBlRXhwZWN0YXRpb24gPSBGdW5jdGlvbiB8IHN0cmluZyB8IE1hcFR5cGU7XG5cbmludGVyZmFjZSBNYXBUeXBlIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgVHlwZUV4cGVjdGF0aW9uIHwgT3B0aW9uYWw+IHt9XG5cbmNsYXNzIE9wdGlvbmFsIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgdHlwZTogVHlwZUV4cGVjdGF0aW9uKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb3B0KHR5cGU6IFR5cGVFeHBlY3RhdGlvbik6IE9wdGlvbmFsIHtcbiAgcmV0dXJuIG5ldyBPcHRpb25hbCh0eXBlKTtcbn1cblxuLyoqXG4gKiBBc3NlcnRzIHRoZSBydW50aW1lIHR5cGVzIG9mIGFyZ3VtZW50cy4gVGhlICdleHBlY3RlZCcgZmllbGQgY2FuIGJlIG9uZSBvZlxuICogYSBjbGFzcywgYSBzdHJpbmcgKHJlcHJlc2VudGluZyBhIFwidHlwZW9mXCIgY2FsbCksIG9yIGEgcmVjb3JkIG1hcCBvZiBuYW1lXG4gKiB0byB0eXBlLiBGdXJ0aGVybW9yZSwgdGhlIG9wdCgpIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIG1hcmsgYSBmaWVsZCBhc1xuICogb3B0aW9uYWwuIEZvciBleGFtcGxlOlxuICpcbiAqIGZ1bmN0aW9uIGZvbyhhdXRoOiBBdXRoLCBwcm9maWxlOiB7ZGlzcGxheU5hbWU/OiBzdHJpbmd9LCB1cGRhdGUgPSBmYWxzZSkge1xuICogICBhc3NlcnRUeXBlcyhhcmd1bWVudHMsIFtBdXRoSW1wbCwge2Rpc3BsYXlOYW1lOiBvcHQoJ3N0cmluZycpfSwgb3B0KCdib29sZWFuJyldKTtcbiAqIH1cbiAqXG4gKiBvcHQoKSBjYW4gYmUgdXNlZCBmb3IgYW55IHR5cGU6XG4gKiBmdW5jdGlvbiBmb28oYXV0aD86IEF1dGgpIHtcbiAqICAgYXNzZXJ0VHlwZXMoYXJndW1lbnRzLCBbb3B0KEF1dGhJbXBsKV0pO1xuICogfVxuICpcbiAqIFRoZSBzdHJpbmcgdHlwZXMgY2FuIGJlIG9yJ2QgdG9nZXRoZXIsIGFuZCB5b3UgY2FuIHVzZSBcIm51bGxcIiBhcyB3ZWxsIChub3RlXG4gKiB0aGF0IHR5cGVvZiBudWxsID09PSAnb2JqZWN0JzsgdGhpcyBpcyBhbiBlZGdlIGNhc2UpLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBmdW5jdGlvbiBmb28ocHJvZmlsZToge2Rpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbH0pIHtcbiAqICAgYXNzZXJ0VHlwZXMoYXJndW1lbnRzLCBbe2Rpc3BsYXlOYW1lOiBvcHQoJ3N0cmluZ3xudWxsJyl9XSk7XG4gKiB9XG4gKlxuICogQHBhcmFtIGFyZ3NcbiAqIEBwYXJhbSBleHBlY3RlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHlwZXMoXG4gIGFyZ3M6IE9taXQ8SUFyZ3VtZW50cywgJ2NhbGxlZSc+LFxuICAuLi5leHBlY3RlZDogQXJyYXk8VHlwZUV4cGVjdGF0aW9uIHwgT3B0aW9uYWw+XG4pOiB2b2lkIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID4gZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgX2ZhaWwoQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUiwge30pO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHBlY3RlZC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBleHBlY3QgPSBleHBlY3RlZFtpXTtcbiAgICBjb25zdCBhcmcgPSBhcmdzW2ldO1xuXG4gICAgaWYgKGV4cGVjdCBpbnN0YW5jZW9mIE9wdGlvbmFsKSB7XG4gICAgICAvLyBJZiB0aGUgYXJnIGlzIHVuZGVmaW5lZCwgdGhlbiBpdCBtYXRjaGVzIFwib3B0aW9uYWxcIiBhbmQgd2UgY2FuIG1vdmUgdG9cbiAgICAgIC8vIHRoZSBuZXh0IGFyZ1xuICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZXhwZWN0ID0gZXhwZWN0LnR5cGU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBleHBlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBIYW5kbGUgdGhlIGVkZ2UgY2FzZSBmb3IgbnVsbCBiZWNhdXNlIHR5cGVvZiBudWxsID09PSAnb2JqZWN0J1xuICAgICAgaWYgKGV4cGVjdC5pbmNsdWRlcygnbnVsbCcpICYmIGFyZyA9PT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVxdWlyZWQgPSBleHBlY3Quc3BsaXQoJ3wnKTtcbiAgICAgIF9hc3NlcnQocmVxdWlyZWQuaW5jbHVkZXModHlwZW9mIGFyZyksIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IsIHt9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBlY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBSZWN1cnNpdmVseSBjaGVjayByZWNvcmQgYXJndW1lbnRzXG4gICAgICBjb25zdCByZWNvcmQgPSBhcmcgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICBjb25zdCBtYXAgPSBleHBlY3QgYXMgTWFwVHlwZTtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhleHBlY3QpO1xuXG4gICAgICBhc3NlcnRUeXBlcyhcbiAgICAgICAga2V5cy5tYXAoayA9PiByZWNvcmRba10pLFxuICAgICAgICAuLi5rZXlzLm1hcChrID0+IG1hcFtrXSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9hc3NlcnQoYXJnIGluc3RhbmNlb2YgZXhwZWN0LCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SLCB7fSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVW5jb25kaXRpb25hbGx5IGZhaWxzLCB0aHJvd2luZyBhbiBpbnRlcm5hbCBlcnJvciB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSBmYWlsdXJlIHR5cGUgb2YgZmFpbHVyZSBlbmNvdW50ZXJlZFxuICogQHRocm93cyBFcnJvclxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVidWdGYWlsKGZhaWx1cmU6IHN0cmluZyk6IG5ldmVyIHtcbiAgLy8gTG9nIHRoZSBmYWlsdXJlIGluIGFkZGl0aW9uIHRvIHRocm93IGFuIGV4Y2VwdGlvbiwganVzdCBpbiBjYXNlIHRoZVxuICAvLyBleGNlcHRpb24gaXMgc3dhbGxvd2VkLlxuICBjb25zdCBtZXNzYWdlID0gYElOVEVSTkFMIEFTU0VSVElPTiBGQUlMRUQ6IGAgKyBmYWlsdXJlO1xuICBfbG9nRXJyb3IobWVzc2FnZSk7XG5cbiAgLy8gTk9URTogV2UgZG9uJ3QgdXNlIEZpcmViYXNlRXJyb3IgaGVyZSBiZWNhdXNlIHRoZXNlIGFyZSBpbnRlcm5hbCBmYWlsdXJlc1xuICAvLyB0aGF0IGNhbm5vdCBiZSBoYW5kbGVkIGJ5IHRoZSB1c2VyLiAoQWxzbyBpdCB3b3VsZCBjcmVhdGUgYSBjaXJjdWxhclxuICAvLyBkZXBlbmRlbmN5IGJldHdlZW4gdGhlIGVycm9yIGFuZCBhc3NlcnQgbW9kdWxlcyB3aGljaCBkb2Vzbid0IHdvcmsuKVxuICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRmFpbHMgaWYgdGhlIGdpdmVuIGFzc2VydGlvbiBjb25kaXRpb24gaXMgZmFsc2UsIHRocm93aW5nIGFuIEVycm9yIHdpdGggdGhlXG4gKiBnaXZlbiBtZXNzYWdlIGlmIGl0IGRpZC5cbiAqXG4gKiBAcGFyYW0gYXNzZXJ0aW9uXG4gKiBAcGFyYW0gbWVzc2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVidWdBc3NlcnQoXG4gIGFzc2VydGlvbjogdW5rbm93bixcbiAgbWVzc2FnZTogc3RyaW5nXG4pOiBhc3NlcnRzIGFzc2VydGlvbiB7XG4gIGlmICghYXNzZXJ0aW9uKSB7XG4gICAgZGVidWdGYWlsKG1lc3NhZ2UpO1xuICB9XG59XG5cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBkZWJ1Z0Fzc2VydCB9IGZyb20gJy4vYXNzZXJ0JztcblxuLyoqXG4gKiBPdXIgQVBJIGhhcyBhIGxvdCBvZiBvbmUtb2ZmIGNvbnN0YW50cyB0aGF0IGFyZSB1c2VkIHRvIGRvIHRoaW5ncy5cbiAqIFVuZm9ydHVuYXRlbHkgd2UgY2FuJ3QgZXhwb3J0IHRoZXNlIGFzIGNsYXNzZXMgaW5zdGFudGlhdGVkIGRpcmVjdGx5IHNpbmNlXG4gKiB0aGUgY29uc3RydWN0b3IgbWF5IHNpZGUgZWZmZWN0IGFuZCB0aGVyZWZvcmUgY2FuJ3QgYmUgcHJvdmVuIHRvIGJlIHNhZmVseVxuICogY3VsbGVkLiBJbnN0ZWFkLCB3ZSBleHBvcnQgdGhlc2UgY2xhc3NlcyB0aGVtc2VsdmVzIGFzIGEgbG93ZXJDYW1lbENhc2VcbiAqIGNvbnN0YW50LCBhbmQgaW5zdGFudGlhdGUgdGhlbSB1bmRlciB0aGUgaG9vZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaW5nbGV0b25JbnN0YW50aWF0b3I8VD4ge1xuICBuZXcgKCk6IFQ7XG59XG5cbmNvbnN0IGluc3RhbmNlQ2FjaGU6IE1hcDx1bmtub3duLCB1bmtub3duPiA9IG5ldyBNYXAoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRJbnN0YW5jZTxUPihjbHM6IHVua25vd24pOiBUIHtcbiAgZGVidWdBc3NlcnQoY2xzIGluc3RhbmNlb2YgRnVuY3Rpb24sICdFeHBlY3RlZCBhIGNsYXNzIGRlZmluaXRpb24nKTtcbiAgbGV0IGluc3RhbmNlID0gaW5zdGFuY2VDYWNoZS5nZXQoY2xzKSBhcyBUIHwgdW5kZWZpbmVkO1xuXG4gIGlmIChpbnN0YW5jZSkge1xuICAgIGRlYnVnQXNzZXJ0KFxuICAgICAgaW5zdGFuY2UgaW5zdGFuY2VvZiBjbHMsXG4gICAgICAnSW5zdGFuY2Ugc3RvcmVkIGluIGNhY2hlIG1pc21hdGNoZWQgd2l0aCBjbGFzcydcbiAgICApO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuXG4gIGluc3RhbmNlID0gbmV3IChjbHMgYXMgU2luZ2xldG9uSW5zdGFudGlhdG9yPFQ+KSgpO1xuICBpbnN0YW5jZUNhY2hlLnNldChjbHMsIGluc3RhbmNlKTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2NsZWFySW5zdGFuY2VNYXAoKTogdm9pZCB7XG4gIGluc3RhbmNlQ2FjaGUuY2xlYXIoKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfZ2V0UHJvdmlkZXIsIEZpcmViYXNlQXBwIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBkZWVwRXF1YWwgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoLCBEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IFBlcnNpc3RlbmNlSW50ZXJuYWwgfSBmcm9tICcuLi9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBfZmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uL3V0aWwvaW5zdGFudGlhdG9yJztcbmltcG9ydCB7IEF1dGhJbXBsIH0gZnJvbSAnLi9hdXRoX2ltcGwnO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIHtAbGluayBBdXRofSBpbnN0YW5jZSB3aXRoIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXJcbiAqIHtAbGluayBEZXBlbmRlbmNpZXN9LlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgbW9yZSBjb250cm9sIG92ZXIgdGhlIHtAbGluayBBdXRofSBpbnN0YW5jZSB0aGFuXG4gKiB7QGxpbmsgZ2V0QXV0aH0uIGBnZXRBdXRoYCB1c2VzIHBsYXRmb3JtLXNwZWNpZmljIGRlZmF1bHRzIHRvIHN1cHBseVxuICogdGhlIHtAbGluayBEZXBlbmRlbmNpZXN9LiBJbiBnZW5lcmFsLCBgZ2V0QXV0aGAgaXMgdGhlIGVhc2llc3Qgd2F5IHRvXG4gKiBpbml0aWFsaXplIEF1dGggYW5kIHdvcmtzIGZvciBtb3N0IHVzZSBjYXNlcy4gVXNlIGBpbml0aWFsaXplQXV0aGAgaWYgeW91XG4gKiBuZWVkIGNvbnRyb2wgb3ZlciB3aGljaCBwZXJzaXN0ZW5jZSBsYXllciBpcyB1c2VkLCBvciB0byBtaW5pbWl6ZSBidW5kbGVcbiAqIHNpemUgaWYgeW91J3JlIG5vdCB1c2luZyBlaXRoZXIgYHNpZ25JbldpdGhQb3B1cGAgb3IgYHNpZ25JbldpdGhSZWRpcmVjdGAuXG4gKlxuICogRm9yIGV4YW1wbGUsIGlmIHlvdXIgYXBwIG9ubHkgdXNlcyBhbm9ueW1vdXMgYWNjb3VudHMgYW5kIHlvdSBvbmx5IHdhbnRcbiAqIGFjY291bnRzIHNhdmVkIGZvciB0aGUgY3VycmVudCBzZXNzaW9uLCBpbml0aWFsaXplIGBBdXRoYCB3aXRoOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBhdXRoID0gaW5pdGlhbGl6ZUF1dGgoYXBwLCB7XG4gKiAgIHBlcnNpc3RlbmNlOiBicm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlLFxuICogICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IHVuZGVmaW5lZCxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUF1dGgoYXBwOiBGaXJlYmFzZUFwcCwgZGVwcz86IERlcGVuZGVuY2llcyk6IEF1dGgge1xuICBjb25zdCBwcm92aWRlciA9IF9nZXRQcm92aWRlcihhcHAsICdhdXRoJyk7XG5cbiAgaWYgKHByb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSkge1xuICAgIGNvbnN0IGF1dGggPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKSBhcyBBdXRoSW1wbDtcbiAgICBjb25zdCBpbml0aWFsT3B0aW9ucyA9IHByb3ZpZGVyLmdldE9wdGlvbnMoKSBhcyBEZXBlbmRlbmNpZXM7XG4gICAgaWYgKGRlZXBFcXVhbChpbml0aWFsT3B0aW9ucywgZGVwcyA/PyB7fSkpIHtcbiAgICAgIHJldHVybiBhdXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLkFMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGF1dGggPSBwcm92aWRlci5pbml0aWFsaXplKHsgb3B0aW9uczogZGVwcyB9KSBhcyBBdXRoSW1wbDtcblxuICByZXR1cm4gYXV0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pbml0aWFsaXplQXV0aEluc3RhbmNlKFxuICBhdXRoOiBBdXRoSW1wbCxcbiAgZGVwcz86IERlcGVuZGVuY2llc1xuKTogdm9pZCB7XG4gIGNvbnN0IHBlcnNpc3RlbmNlID0gZGVwcz8ucGVyc2lzdGVuY2UgfHwgW107XG4gIGNvbnN0IGhpZXJhcmNoeSA9IChcbiAgICBBcnJheS5pc0FycmF5KHBlcnNpc3RlbmNlKSA/IHBlcnNpc3RlbmNlIDogW3BlcnNpc3RlbmNlXVxuICApLm1hcDxQZXJzaXN0ZW5jZUludGVybmFsPihfZ2V0SW5zdGFuY2UpO1xuICBpZiAoZGVwcz8uZXJyb3JNYXApIHtcbiAgICBhdXRoLl91cGRhdGVFcnJvck1hcChkZXBzLmVycm9yTWFwKTtcbiAgfVxuXG4gIC8vIFRoaXMgcHJvbWlzZSBpcyBpbnRlbmRlZCB0byBmbG9hdDsgYXV0aCBpbml0aWFsaXphdGlvbiBoYXBwZW5zIGluIHRoZVxuICAvLyBiYWNrZ3JvdW5kLCBtZWFud2hpbGUgdGhlIGF1dGggb2JqZWN0IG1heSBiZSB1c2VkIGJ5IHRoZSBhcHAuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgYXV0aC5faW5pdGlhbGl6ZVdpdGhQZXJzaXN0ZW5jZShoaWVyYXJjaHksIGRlcHM/LnBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRDdXJyZW50VXJsKCk6IHN0cmluZyB7XG4gIHJldHVybiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYubG9jYXRpb24/LmhyZWYpIHx8ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lzSHR0cE9ySHR0cHMoKTogYm9vbGVhbiB7XG4gIHJldHVybiBfZ2V0Q3VycmVudFNjaGVtZSgpID09PSAnaHR0cDonIHx8IF9nZXRDdXJyZW50U2NoZW1lKCkgPT09ICdodHRwczonO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldEN1cnJlbnRTY2hlbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gIHJldHVybiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYubG9jYXRpb24/LnByb3RvY29sKSB8fCBudWxsO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGlzQnJvd3NlckV4dGVuc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IF9pc0h0dHBPckh0dHBzIH0gZnJvbSAnLi9sb2NhdGlvbic7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGJyb3dzZXIgaXMgd29ya2luZyBvbmxpbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pc09ubGluZSgpOiBib29sZWFuIHtcbiAgaWYgKFxuICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgbmF2aWdhdG9yICYmXG4gICAgJ29uTGluZScgaW4gbmF2aWdhdG9yICYmXG4gICAgdHlwZW9mIG5hdmlnYXRvci5vbkxpbmUgPT09ICdib29sZWFuJyAmJlxuICAgIC8vIEFwcGx5IG9ubHkgZm9yIHRyYWRpdGlvbmFsIHdlYiBhcHBzIGFuZCBDaHJvbWUgZXh0ZW5zaW9ucy5cbiAgICAvLyBUaGlzIGlzIGVzcGVjaWFsbHkgdHJ1ZSBmb3IgQ29yZG92YSBhcHBzIHdoaWNoIGhhdmUgdW5yZWxpYWJsZVxuICAgIC8vIG5hdmlnYXRvci5vbkxpbmUgYmVoYXZpb3IgdW5sZXNzIGNvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24gaXNcbiAgICAvLyBpbnN0YWxsZWQgd2hpY2ggb3ZlcndyaXRlcyB0aGUgbmF0aXZlIG5hdmlnYXRvci5vbkxpbmUgdmFsdWUgYW5kXG4gICAgLy8gZGVmaW5lcyBuYXZpZ2F0b3IuY29ubmVjdGlvbi5cbiAgICAoX2lzSHR0cE9ySHR0cHMoKSB8fCBpc0Jyb3dzZXJFeHRlbnNpb24oKSB8fCAnY29ubmVjdGlvbicgaW4gbmF2aWdhdG9yKVxuICApIHtcbiAgICByZXR1cm4gbmF2aWdhdG9yLm9uTGluZTtcbiAgfVxuICAvLyBJZiB3ZSBjYW4ndCBkZXRlcm1pbmUgdGhlIHN0YXRlLCBhc3N1bWUgaXQgaXMgb25saW5lLlxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRVc2VyTGFuZ3VhZ2UoKTogc3RyaW5nIHwgbnVsbCB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG5hdmlnYXRvckxhbmd1YWdlOiBOYXZpZ2F0b3JMYW5ndWFnZSA9IG5hdmlnYXRvcjtcbiAgcmV0dXJuIChcbiAgICAvLyBNb3N0IHJlbGlhYmxlLCBidXQgb25seSBzdXBwb3J0ZWQgaW4gQ2hyb21lL0ZpcmVmb3guXG4gICAgKG5hdmlnYXRvckxhbmd1YWdlLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3JMYW5ndWFnZS5sYW5ndWFnZXNbMF0pIHx8XG4gICAgLy8gU3VwcG9ydGVkIGluIG1vc3QgYnJvd3NlcnMsIGJ1dCByZXR1cm5zIHRoZSBsYW5ndWFnZSBvZiB0aGUgYnJvd3NlclxuICAgIC8vIFVJLCBub3QgdGhlIGxhbmd1YWdlIHNldCBpbiBicm93c2VyIHNldHRpbmdzLlxuICAgIG5hdmlnYXRvckxhbmd1YWdlLmxhbmd1YWdlIHx8XG4gICAgLy8gQ291bGRuJ3QgZGV0ZXJtaW5lIGxhbmd1YWdlLlxuICAgIG51bGxcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBpc01vYmlsZUNvcmRvdmEsIGlzUmVhY3ROYXRpdmUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBfaXNPbmxpbmUgfSBmcm9tICcuL25hdmlnYXRvcic7XG5pbXBvcnQgeyBkZWJ1Z0Fzc2VydCB9IGZyb20gJy4vYXNzZXJ0JztcblxuZXhwb3J0IGNvbnN0IGVudW0gRGVsYXlNaW4ge1xuICBPRkZMSU5FID0gNTAwMFxufVxuXG4vKipcbiAqIEEgc3RydWN0dXJlIHRvIGhlbHAgcGljayBiZXR3ZWVuIGEgcmFuZ2Ugb2YgbG9uZyBhbmQgc2hvcnQgZGVsYXkgZHVyYXRpb25zXG4gKiBkZXBlbmRpbmcgb24gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuIEluIGdlbmVyYWwsIHRoZSBsb25nIGRlbGF5IGlzIHVzZWQgZm9yXG4gKiBtb2JpbGUgZW52aXJvbm1lbnRzIHdoZXJlYXMgc2hvcnQgZGVsYXlzIGFyZSB1c2VkIGZvciBkZXNrdG9wIGVudmlyb25tZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIERlbGF5IHtcbiAgLy8gVGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBvZmZsaW5lIGRlbGF5IHRpbWVvdXQgaW4gbXMuXG5cbiAgcHJpdmF0ZSByZWFkb25seSBpc01vYmlsZTogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaG9ydERlbGF5OiBudW1iZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBsb25nRGVsYXk6IG51bWJlclxuICApIHtcbiAgICAvLyBJbnRlcm5hbCBlcnJvciB3aGVuIGltcHJvcGVybHkgaW5pdGlhbGl6ZWQuXG4gICAgZGVidWdBc3NlcnQoXG4gICAgICBsb25nRGVsYXkgPiBzaG9ydERlbGF5LFxuICAgICAgJ1Nob3J0IGRlbGF5IHNob3VsZCBiZSBsZXNzIHRoYW4gbG9uZyBkZWxheSEnXG4gICAgKTtcbiAgICB0aGlzLmlzTW9iaWxlID0gaXNNb2JpbGVDb3Jkb3ZhKCkgfHwgaXNSZWFjdE5hdGl2ZSgpO1xuICB9XG5cbiAgZ2V0KCk6IG51bWJlciB7XG4gICAgaWYgKCFfaXNPbmxpbmUoKSkge1xuICAgICAgLy8gUGljayB0aGUgc2hvcnRlciB0aW1lb3V0LlxuICAgICAgcmV0dXJuIE1hdGgubWluKERlbGF5TWluLk9GRkxJTkUsIHRoaXMuc2hvcnREZWxheSk7XG4gICAgfVxuICAgIC8vIElmIHJ1bm5pbmcgaW4gYSBtb2JpbGUgZW52aXJvbm1lbnQsIHJldHVybiB0aGUgbG9uZyBkZWxheSwgb3RoZXJ3aXNlXG4gICAgLy8gcmV0dXJuIHRoZSBzaG9ydCBkZWxheS5cbiAgICAvLyBUaGlzIGNvdWxkIGJlIGltcHJvdmVkIGluIHRoZSBmdXR1cmUgdG8gZHluYW1pY2FsbHkgY2hhbmdlIGJhc2VkIG9uIG90aGVyXG4gICAgLy8gdmFyaWFibGVzIGluc3RlYWQgb2YganVzdCByZWFkaW5nIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICAgIHJldHVybiB0aGlzLmlzTW9iaWxlID8gdGhpcy5sb25nRGVsYXkgOiB0aGlzLnNob3J0RGVsYXk7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb25maWdJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgZGVidWdBc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBfZW11bGF0b3JVcmwoY29uZmlnOiBDb25maWdJbnRlcm5hbCwgcGF0aD86IHN0cmluZyk6IHN0cmluZyB7XG4gIGRlYnVnQXNzZXJ0KGNvbmZpZy5lbXVsYXRvciwgJ0VtdWxhdG9yIHNob3VsZCBhbHdheXMgYmUgc2V0IGhlcmUnKTtcbiAgY29uc3QgeyB1cmwgfSA9IGNvbmZpZy5lbXVsYXRvcjtcblxuICBpZiAoIXBhdGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgcmV0dXJuIGAke3VybH0ke3BhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgxKSA6IHBhdGh9YDtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBkZWJ1Z0ZhaWwgfSBmcm9tICcuL2Fzc2VydCc7XG5cbmV4cG9ydCBjbGFzcyBGZXRjaFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgZmV0Y2hJbXBsOiB0eXBlb2YgZmV0Y2ggfCBudWxsO1xuICBwcml2YXRlIHN0YXRpYyBoZWFkZXJzSW1wbDogdHlwZW9mIEhlYWRlcnMgfCBudWxsO1xuICBwcml2YXRlIHN0YXRpYyByZXNwb25zZUltcGw6IHR5cGVvZiBSZXNwb25zZSB8IG51bGw7XG5cbiAgc3RhdGljIGluaXRpYWxpemUoXG4gICAgZmV0Y2hJbXBsOiB0eXBlb2YgZmV0Y2gsXG4gICAgaGVhZGVyc0ltcGw/OiB0eXBlb2YgSGVhZGVycyxcbiAgICByZXNwb25zZUltcGw/OiB0eXBlb2YgUmVzcG9uc2VcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5mZXRjaEltcGwgPSBmZXRjaEltcGw7XG4gICAgaWYgKGhlYWRlcnNJbXBsKSB7XG4gICAgICB0aGlzLmhlYWRlcnNJbXBsID0gaGVhZGVyc0ltcGw7XG4gICAgfVxuICAgIGlmIChyZXNwb25zZUltcGwpIHtcbiAgICAgIHRoaXMucmVzcG9uc2VJbXBsID0gcmVzcG9uc2VJbXBsO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmZXRjaCgpOiB0eXBlb2YgZmV0Y2gge1xuICAgIGlmICh0aGlzLmZldGNoSW1wbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hJbXBsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmICdmZXRjaCcgaW4gc2VsZikge1xuICAgICAgcmV0dXJuIHNlbGYuZmV0Y2g7XG4gICAgfVxuICAgIGRlYnVnRmFpbChcbiAgICAgICdDb3VsZCBub3QgZmluZCBmZXRjaCBpbXBsZW1lbnRhdGlvbiwgbWFrZSBzdXJlIHlvdSBjYWxsIEZldGNoUHJvdmlkZXIuaW5pdGlhbGl6ZSgpIHdpdGggYW4gYXBwcm9wcmlhdGUgcG9seWZpbGwnXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBoZWFkZXJzKCk6IHR5cGVvZiBIZWFkZXJzIHtcbiAgICBpZiAodGhpcy5oZWFkZXJzSW1wbCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVhZGVyc0ltcGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hlYWRlcnMnIGluIHNlbGYpIHtcbiAgICAgIHJldHVybiBzZWxmLkhlYWRlcnM7XG4gICAgfVxuICAgIGRlYnVnRmFpbChcbiAgICAgICdDb3VsZCBub3QgZmluZCBIZWFkZXJzIGltcGxlbWVudGF0aW9uLCBtYWtlIHN1cmUgeW91IGNhbGwgRmV0Y2hQcm92aWRlci5pbml0aWFsaXplKCkgd2l0aCBhbiBhcHByb3ByaWF0ZSBwb2x5ZmlsbCdcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIHJlc3BvbnNlKCk6IHR5cGVvZiBSZXNwb25zZSB7XG4gICAgaWYgKHRoaXMucmVzcG9uc2VJbXBsKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNwb25zZUltcGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgJ1Jlc3BvbnNlJyBpbiBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5SZXNwb25zZTtcbiAgICB9XG4gICAgZGVidWdGYWlsKFxuICAgICAgJ0NvdWxkIG5vdCBmaW5kIFJlc3BvbnNlIGltcGxlbWVudGF0aW9uLCBtYWtlIHN1cmUgeW91IGNhbGwgRmV0Y2hQcm92aWRlci5pbml0aWFsaXplKCkgd2l0aCBhbiBhcHByb3ByaWF0ZSBwb2x5ZmlsbCdcbiAgICApO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcblxuLyoqXG4gKiBFcnJvcnMgdGhhdCBjYW4gYmUgcmV0dXJuZWQgYnkgdGhlIGJhY2tlbmRcbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gU2VydmVyRXJyb3Ige1xuICBBRE1JTl9PTkxZX09QRVJBVElPTiA9ICdBRE1JTl9PTkxZX09QRVJBVElPTicsXG4gIEJMT0NLSU5HX0ZVTkNUSU9OX0VSUk9SX1JFU1BPTlNFID0gJ0JMT0NLSU5HX0ZVTkNUSU9OX0VSUk9SX1JFU1BPTlNFJyxcbiAgQ0FQVENIQV9DSEVDS19GQUlMRUQgPSAnQ0FQVENIQV9DSEVDS19GQUlMRUQnLFxuICBDT1JTX1VOU1VQUE9SVEVEID0gJ0NPUlNfVU5TVVBQT1JURUQnLFxuICBDUkVERU5USUFMX01JU01BVENIID0gJ0NSRURFTlRJQUxfTUlTTUFUQ0gnLFxuICBDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU4gPSAnQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOJyxcbiAgRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQgPSAnRFlOQU1JQ19MSU5LX05PVF9BQ1RJVkFURUQnLFxuICBFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OID0gJ0VNQUlMX0NIQU5HRV9ORUVEU19WRVJJRklDQVRJT04nLFxuICBFTUFJTF9FWElTVFMgPSAnRU1BSUxfRVhJU1RTJyxcbiAgRU1BSUxfTk9UX0ZPVU5EID0gJ0VNQUlMX05PVF9GT1VORCcsXG4gIEVYUElSRURfT09CX0NPREUgPSAnRVhQSVJFRF9PT0JfQ09ERScsXG4gIEZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEID0gJ0ZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEJyxcbiAgSU5WQUxJRF9BUFBfQ1JFREVOVElBTCA9ICdJTlZBTElEX0FQUF9DUkVERU5USUFMJyxcbiAgSU5WQUxJRF9BUFBfSUQgPSAnSU5WQUxJRF9BUFBfSUQnLFxuICBJTlZBTElEX0NFUlRfSEFTSCA9ICdJTlZBTElEX0NFUlRfSEFTSCcsXG4gIElOVkFMSURfQ09ERSA9ICdJTlZBTElEX0NPREUnLFxuICBJTlZBTElEX0NPTlRJTlVFX1VSSSA9ICdJTlZBTElEX0NPTlRJTlVFX1VSSScsXG4gIElOVkFMSURfQ1VTVE9NX1RPS0VOID0gJ0lOVkFMSURfQ1VTVE9NX1RPS0VOJyxcbiAgSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOID0gJ0lOVkFMSURfRFlOQU1JQ19MSU5LX0RPTUFJTicsXG4gIElOVkFMSURfRU1BSUwgPSAnSU5WQUxJRF9FTUFJTCcsXG4gIElOVkFMSURfSURfVE9LRU4gPSAnSU5WQUxJRF9JRF9UT0tFTicsXG4gIElOVkFMSURfSURQX1JFU1BPTlNFID0gJ0lOVkFMSURfSURQX1JFU1BPTlNFJyxcbiAgSU5WQUxJRF9JREVOVElGSUVSID0gJ0lOVkFMSURfSURFTlRJRklFUicsXG4gIElOVkFMSURfTUVTU0FHRV9QQVlMT0FEID0gJ0lOVkFMSURfTUVTU0FHRV9QQVlMT0FEJyxcbiAgSU5WQUxJRF9NRkFfUEVORElOR19DUkVERU5USUFMID0gJ0lOVkFMSURfTUZBX1BFTkRJTkdfQ1JFREVOVElBTCcsXG4gIElOVkFMSURfT0FVVEhfQ0xJRU5UX0lEID0gJ0lOVkFMSURfT0FVVEhfQ0xJRU5UX0lEJyxcbiAgSU5WQUxJRF9PT0JfQ09ERSA9ICdJTlZBTElEX09PQl9DT0RFJyxcbiAgSU5WQUxJRF9QQVNTV09SRCA9ICdJTlZBTElEX1BBU1NXT1JEJyxcbiAgSU5WQUxJRF9QRU5ESU5HX1RPS0VOID0gJ0lOVkFMSURfUEVORElOR19UT0tFTicsXG4gIElOVkFMSURfUEhPTkVfTlVNQkVSID0gJ0lOVkFMSURfUEhPTkVfTlVNQkVSJyxcbiAgSU5WQUxJRF9QUk9WSURFUl9JRCA9ICdJTlZBTElEX1BST1ZJREVSX0lEJyxcbiAgSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwgPSAnSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwnLFxuICBJTlZBTElEX1NFTkRFUiA9ICdJTlZBTElEX1NFTkRFUicsXG4gIElOVkFMSURfU0VTU0lPTl9JTkZPID0gJ0lOVkFMSURfU0VTU0lPTl9JTkZPJyxcbiAgSU5WQUxJRF9URU1QT1JBUllfUFJPT0YgPSAnSU5WQUxJRF9URU1QT1JBUllfUFJPT0YnLFxuICBJTlZBTElEX1RFTkFOVF9JRCA9ICdJTlZBTElEX1RFTkFOVF9JRCcsXG4gIE1GQV9FTlJPTExNRU5UX05PVF9GT1VORCA9ICdNRkFfRU5ST0xMTUVOVF9OT1RfRk9VTkQnLFxuICBNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FID0gJ01JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUUnLFxuICBNSVNTSU5HX0FQUF9DUkVERU5USUFMID0gJ01JU1NJTkdfQVBQX0NSRURFTlRJQUwnLFxuICBNSVNTSU5HX0NPREUgPSAnTUlTU0lOR19DT0RFJyxcbiAgTUlTU0lOR19DT05USU5VRV9VUkkgPSAnTUlTU0lOR19DT05USU5VRV9VUkknLFxuICBNSVNTSU5HX0NVU1RPTV9UT0tFTiA9ICdNSVNTSU5HX0NVU1RPTV9UT0tFTicsXG4gIE1JU1NJTkdfSU9TX0JVTkRMRV9JRCA9ICdNSVNTSU5HX0lPU19CVU5ETEVfSUQnLFxuICBNSVNTSU5HX01GQV9FTlJPTExNRU5UX0lEID0gJ01JU1NJTkdfTUZBX0VOUk9MTE1FTlRfSUQnLFxuICBNSVNTSU5HX01GQV9QRU5ESU5HX0NSRURFTlRJQUwgPSAnTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMJyxcbiAgTUlTU0lOR19PT0JfQ09ERSA9ICdNSVNTSU5HX09PQl9DT0RFJyxcbiAgTUlTU0lOR19PUl9JTlZBTElEX05PTkNFID0gJ01JU1NJTkdfT1JfSU5WQUxJRF9OT05DRScsXG4gIE1JU1NJTkdfUEFTU1dPUkQgPSAnTUlTU0lOR19QQVNTV09SRCcsXG4gIE1JU1NJTkdfUkVRX1RZUEUgPSAnTUlTU0lOR19SRVFfVFlQRScsXG4gIE1JU1NJTkdfUEhPTkVfTlVNQkVSID0gJ01JU1NJTkdfUEhPTkVfTlVNQkVSJyxcbiAgTUlTU0lOR19TRVNTSU9OX0lORk8gPSAnTUlTU0lOR19TRVNTSU9OX0lORk8nLFxuICBPUEVSQVRJT05fTk9UX0FMTE9XRUQgPSAnT1BFUkFUSU9OX05PVF9BTExPV0VEJyxcbiAgUEFTU1dPUkRfTE9HSU5fRElTQUJMRUQgPSAnUEFTU1dPUkRfTE9HSU5fRElTQUJMRUQnLFxuICBRVU9UQV9FWENFRURFRCA9ICdRVU9UQV9FWENFRURFRCcsXG4gIFJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVCA9ICdSRVNFVF9QQVNTV09SRF9FWENFRURfTElNSVQnLFxuICBSRUpFQ1RFRF9DUkVERU5USUFMID0gJ1JFSkVDVEVEX0NSRURFTlRJQUwnLFxuICBTRUNPTkRfRkFDVE9SX0VYSVNUUyA9ICdTRUNPTkRfRkFDVE9SX0VYSVNUUycsXG4gIFNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQgPSAnU0VDT05EX0ZBQ1RPUl9MSU1JVF9FWENFRURFRCcsXG4gIFNFU1NJT05fRVhQSVJFRCA9ICdTRVNTSU9OX0VYUElSRUQnLFxuICBURU5BTlRfSURfTUlTTUFUQ0ggPSAnVEVOQU5UX0lEX01JU01BVENIJyxcbiAgVE9LRU5fRVhQSVJFRCA9ICdUT0tFTl9FWFBJUkVEJyxcbiAgVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSID0gJ1RPT19NQU5ZX0FUVEVNUFRTX1RSWV9MQVRFUicsXG4gIFVOU1VQUE9SVEVEX0ZJUlNUX0ZBQ1RPUiA9ICdVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1InLFxuICBVTlNVUFBPUlRFRF9URU5BTlRfT1BFUkFUSU9OID0gJ1VOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT04nLFxuICBVTkFVVEhPUklaRURfRE9NQUlOID0gJ1VOQVVUSE9SSVpFRF9ET01BSU4nLFxuICBVTlZFUklGSUVEX0VNQUlMID0gJ1VOVkVSSUZJRURfRU1BSUwnLFxuICBVU0VSX0NBTkNFTExFRCA9ICdVU0VSX0NBTkNFTExFRCcsXG4gIFVTRVJfRElTQUJMRUQgPSAnVVNFUl9ESVNBQkxFRCcsXG4gIFVTRVJfTk9UX0ZPVU5EID0gJ1VTRVJfTk9UX0ZPVU5EJyxcbiAgV0VBS19QQVNTV09SRCA9ICdXRUFLX1BBU1NXT1JEJ1xufVxuXG4vKipcbiAqIEFQSSBSZXNwb25zZSBpbiB0aGUgZXZlbnQgb2YgYW4gZXJyb3JcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKc29uRXJyb3Ige1xuICBlcnJvcjoge1xuICAgIGNvZGU6IG51bWJlcjtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgZXJyb3JzPzogW1xuICAgICAge1xuICAgICAgICBtZXNzYWdlOiBTZXJ2ZXJFcnJvcjtcbiAgICAgICAgZG9tYWluOiBzdHJpbmc7XG4gICAgICAgIHJlYXNvbjogc3RyaW5nO1xuICAgICAgfVxuICAgIF07XG4gIH07XG59XG5cbi8qKlxuICogVHlwZSBkZWZpbml0aW9uIGZvciBhIG1hcCBmcm9tIHNlcnZlciBlcnJvcnMgdG8gZGV2ZWxvcGVyIHZpc2libGUgZXJyb3JzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIHR5cGUgU2VydmVyRXJyb3JNYXA8QXBpRXJyb3IgZXh0ZW5kcyBzdHJpbmc+ID0ge1xuICByZWFkb25seSBbSyBpbiBBcGlFcnJvcl06IEF1dGhFcnJvckNvZGU7XG59O1xuXG4vKipcbiAqIE1hcCBmcm9tIGVycm9ycyByZXR1cm5lZCBieSB0aGUgc2VydmVyIHRvIGVycm9ycyB0byBkZXZlbG9wZXIgdmlzaWJsZSBlcnJvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IFNFUlZFUl9FUlJPUl9NQVA6IFBhcnRpYWw8U2VydmVyRXJyb3JNYXA8U2VydmVyRXJyb3I+PiA9IHtcbiAgLy8gQ3VzdG9tIHRva2VuIGVycm9ycy5cbiAgW1NlcnZlckVycm9yLkNSRURFTlRJQUxfTUlTTUFUQ0hdOiBBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfTUlTTUFUQ0gsXG4gIC8vIFRoaXMgY2FuIG9ubHkgaGFwcGVuIGlmIHRoZSBTREsgc2VuZHMgYSBiYWQgcmVxdWVzdC5cbiAgW1NlcnZlckVycm9yLk1JU1NJTkdfQ1VTVE9NX1RPS0VOXTogQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcblxuICAvLyBDcmVhdGUgQXV0aCBVUkkgZXJyb3JzLlxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9JREVOVElGSUVSXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX0VNQUlMLFxuICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX0NPTlRJTlVFX1VSSV06IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsXG5cbiAgLy8gU2lnbiBpbiB3aXRoIGVtYWlsIGFuZCBwYXNzd29yZCBlcnJvcnMgKHNvbWUgYXBwbHkgdG8gc2lnbiB1cCB0b28pLlxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9QQVNTV09SRF06IEF1dGhFcnJvckNvZGUuSU5WQUxJRF9QQVNTV09SRCxcbiAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW4gaWYgdGhlIFNESyBzZW5kcyBhIGJhZCByZXF1ZXN0LlxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19QQVNTV09SRF06IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsXG5cbiAgLy8gU2lnbiB1cCB3aXRoIGVtYWlsIGFuZCBwYXNzd29yZCBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5FTUFJTF9FWElTVFNdOiBBdXRoRXJyb3JDb2RlLkVNQUlMX0VYSVNUUyxcbiAgW1NlcnZlckVycm9yLlBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEXTogQXV0aEVycm9yQ29kZS5PUEVSQVRJT05fTk9UX0FMTE9XRUQsXG5cbiAgLy8gVmVyaWZ5IGFzc2VydGlvbiBmb3Igc2lnbiBpbiB3aXRoIGNyZWRlbnRpYWwgZXJyb3JzOlxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9JRFBfUkVTUE9OU0VdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfSURQX1JFU1BPTlNFLFxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9QRU5ESU5HX1RPS0VOXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX0lEUF9SRVNQT05TRSxcbiAgW1NlcnZlckVycm9yLkZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEXTpcbiAgICBBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfQUxSRUFEWV9JTl9VU0UsXG5cbiAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW4gaWYgdGhlIFNESyBzZW5kcyBhIGJhZCByZXF1ZXN0LlxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19SRVFfVFlQRV06IEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IsXG5cbiAgLy8gU2VuZCBQYXNzd29yZCByZXNldCBlbWFpbCBlcnJvcnM6XG4gIFtTZXJ2ZXJFcnJvci5FTUFJTF9OT1RfRk9VTkRdOiBBdXRoRXJyb3JDb2RlLlVTRVJfREVMRVRFRCxcbiAgW1NlcnZlckVycm9yLlJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVF06XG4gICAgQXV0aEVycm9yQ29kZS5UT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVIsXG5cbiAgW1NlcnZlckVycm9yLkVYUElSRURfT09CX0NPREVdOiBBdXRoRXJyb3JDb2RlLkVYUElSRURfT09CX0NPREUsXG4gIFtTZXJ2ZXJFcnJvci5JTlZBTElEX09PQl9DT0RFXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX09PQl9DT0RFLFxuICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbiBpZiB0aGUgU0RLIHNlbmRzIGEgYmFkIHJlcXVlc3QuXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX09PQl9DT0RFXTogQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcblxuICAvLyBPcGVyYXRpb25zIHRoYXQgcmVxdWlyZSBJRCB0b2tlbiBpbiByZXF1ZXN0OlxuICBbU2VydmVyRXJyb3IuQ1JFREVOVElBTF9UT09fT0xEX0xPR0lOX0FHQUlOXTpcbiAgICBBdXRoRXJyb3JDb2RlLkNSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTixcbiAgW1NlcnZlckVycm9yLklOVkFMSURfSURfVE9LRU5dOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfQVVUSCxcbiAgW1NlcnZlckVycm9yLlRPS0VOX0VYUElSRURdOiBBdXRoRXJyb3JDb2RlLlRPS0VOX0VYUElSRUQsXG4gIFtTZXJ2ZXJFcnJvci5VU0VSX05PVF9GT1VORF06IEF1dGhFcnJvckNvZGUuVE9LRU5fRVhQSVJFRCxcblxuICAvLyBPdGhlciBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5UT09fTUFOWV9BVFRFTVBUU19UUllfTEFURVJdOlxuICAgIEF1dGhFcnJvckNvZGUuVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSLFxuXG4gIC8vIFBob25lIEF1dGggcmVsYXRlZCBlcnJvcnMuXG4gIFtTZXJ2ZXJFcnJvci5JTlZBTElEX0NPREVdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfQ09ERSxcbiAgW1NlcnZlckVycm9yLklOVkFMSURfU0VTU0lPTl9JTkZPXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX1NFU1NJT05fSU5GTyxcbiAgW1NlcnZlckVycm9yLklOVkFMSURfVEVNUE9SQVJZX1BST09GXTogQXV0aEVycm9yQ29kZS5JTlZBTElEX0lEUF9SRVNQT05TRSxcbiAgW1NlcnZlckVycm9yLk1JU1NJTkdfU0VTU0lPTl9JTkZPXTogQXV0aEVycm9yQ29kZS5NSVNTSU5HX1NFU1NJT05fSU5GTyxcbiAgW1NlcnZlckVycm9yLlNFU1NJT05fRVhQSVJFRF06IEF1dGhFcnJvckNvZGUuQ09ERV9FWFBJUkVELFxuXG4gIC8vIE90aGVyIGFjdGlvbiBjb2RlIGVycm9ycyB3aGVuIGFkZGl0aW9uYWwgc2V0dGluZ3MgcGFzc2VkLlxuICAvLyBNSVNTSU5HX0NPTlRJTlVFX1VSSSBpcyBnZXR0aW5nIG1hcHBlZCB0byBJTlRFUk5BTF9FUlJPUiBhYm92ZS5cbiAgLy8gVGhpcyBpcyBPSyBhcyB0aGlzIGVycm9yIHdpbGwgYmUgY2F1Z2h0IGJ5IGNsaWVudCBzaWRlIHZhbGlkYXRpb24uXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FXTpcbiAgICBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUUsXG4gIFtTZXJ2ZXJFcnJvci5VTkFVVEhPUklaRURfRE9NQUlOXTogQXV0aEVycm9yQ29kZS5VTkFVVEhPUklaRURfRE9NQUlOLFxuXG4gIC8vIGdldFByb2plY3RDb25maWcgZXJyb3JzIHdoZW4gY2xpZW50SWQgaXMgcGFzc2VkLlxuICBbU2VydmVyRXJyb3IuSU5WQUxJRF9PQVVUSF9DTElFTlRfSURdOiBBdXRoRXJyb3JDb2RlLklOVkFMSURfT0FVVEhfQ0xJRU5UX0lELFxuXG4gIC8vIFVzZXIgYWN0aW9ucyAoc2lnbi11cCBvciBkZWxldGlvbikgZGlzYWJsZWQgZXJyb3JzLlxuICBbU2VydmVyRXJyb3IuQURNSU5fT05MWV9PUEVSQVRJT05dOiBBdXRoRXJyb3JDb2RlLkFETUlOX09OTFlfT1BFUkFUSU9OLFxuXG4gIC8vIE11bHRpIGZhY3RvciByZWxhdGVkIGVycm9ycy5cbiAgW1NlcnZlckVycm9yLklOVkFMSURfTUZBX1BFTkRJTkdfQ1JFREVOVElBTF06XG4gICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX01GQV9TRVNTSU9OLFxuICBbU2VydmVyRXJyb3IuTUZBX0VOUk9MTE1FTlRfTk9UX0ZPVU5EXTogQXV0aEVycm9yQ29kZS5NRkFfSU5GT19OT1RfRk9VTkQsXG4gIFtTZXJ2ZXJFcnJvci5NSVNTSU5HX01GQV9FTlJPTExNRU5UX0lEXTogQXV0aEVycm9yQ29kZS5NSVNTSU5HX01GQV9JTkZPLFxuICBbU2VydmVyRXJyb3IuTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMXTpcbiAgICBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfTUZBX1NFU1NJT04sXG4gIFtTZXJ2ZXJFcnJvci5TRUNPTkRfRkFDVE9SX0VYSVNUU106XG4gICAgQXV0aEVycm9yQ29kZS5TRUNPTkRfRkFDVE9SX0FMUkVBRFlfRU5ST0xMRUQsXG4gIFtTZXJ2ZXJFcnJvci5TRUNPTkRfRkFDVE9SX0xJTUlUX0VYQ0VFREVEXTpcbiAgICBBdXRoRXJyb3JDb2RlLlNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQsXG5cbiAgLy8gQmxvY2tpbmcgZnVuY3Rpb25zIHJlbGF0ZWQgZXJyb3JzLlxuICBbU2VydmVyRXJyb3IuQkxPQ0tJTkdfRlVOQ1RJT05fRVJST1JfUkVTUE9OU0VdOiBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SLFxufTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yLCBxdWVyeXN0cmluZyB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSwgTmFtZWRFcnJvclBhcmFtcyB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9jcmVhdGVFcnJvciwgX2Vycm9yV2l0aEN1c3RvbU1lc3NhZ2UsIF9mYWlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBEZWxheSB9IGZyb20gJy4uL2NvcmUvdXRpbC9kZWxheSc7XG5pbXBvcnQgeyBfZW11bGF0b3JVcmwgfSBmcm9tICcuLi9jb3JlL3V0aWwvZW11bGF0b3InO1xuaW1wb3J0IHsgRmV0Y2hQcm92aWRlciB9IGZyb20gJy4uL2NvcmUvdXRpbC9mZXRjaF9wcm92aWRlcic7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCwgQ29uZmlnSW50ZXJuYWwgfSBmcm9tICcuLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSwgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBJZFRva2VuTWZhUmVzcG9uc2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQgeyBTRVJWRVJfRVJST1JfTUFQLCBTZXJ2ZXJFcnJvciwgU2VydmVyRXJyb3JNYXAgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIEh0dHBNZXRob2Qge1xuICBQT1NUID0gJ1BPU1QnLFxuICBHRVQgPSAnR0VUJ1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBIdHRwSGVhZGVyIHtcbiAgQ09OVEVOVF9UWVBFID0gJ0NvbnRlbnQtVHlwZScsXG4gIFhfRklSRUJBU0VfTE9DQUxFID0gJ1gtRmlyZWJhc2UtTG9jYWxlJyxcbiAgWF9DTElFTlRfVkVSU0lPTiA9ICdYLUNsaWVudC1WZXJzaW9uJyxcbiAgWF9GSVJFQkFTRV9HTVBJRCA9ICdYLUZpcmViYXNlLWdtcGlkJ1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBFbmRwb2ludCB7XG4gIENSRUFURV9BVVRIX1VSSSA9ICcvdjEvYWNjb3VudHM6Y3JlYXRlQXV0aFVyaScsXG4gIERFTEVURV9BQ0NPVU5UID0gJy92MS9hY2NvdW50czpkZWxldGUnLFxuICBSRVNFVF9QQVNTV09SRCA9ICcvdjEvYWNjb3VudHM6cmVzZXRQYXNzd29yZCcsXG4gIFNJR05fVVAgPSAnL3YxL2FjY291bnRzOnNpZ25VcCcsXG4gIFNJR05fSU5fV0lUSF9DVVNUT01fVE9LRU4gPSAnL3YxL2FjY291bnRzOnNpZ25JbldpdGhDdXN0b21Ub2tlbicsXG4gIFNJR05fSU5fV0lUSF9FTUFJTF9MSU5LID0gJy92MS9hY2NvdW50czpzaWduSW5XaXRoRW1haWxMaW5rJyxcbiAgU0lHTl9JTl9XSVRIX0lEUCA9ICcvdjEvYWNjb3VudHM6c2lnbkluV2l0aElkcCcsXG4gIFNJR05fSU5fV0lUSF9QQVNTV09SRCA9ICcvdjEvYWNjb3VudHM6c2lnbkluV2l0aFBhc3N3b3JkJyxcbiAgU0lHTl9JTl9XSVRIX1BIT05FX05VTUJFUiA9ICcvdjEvYWNjb3VudHM6c2lnbkluV2l0aFBob25lTnVtYmVyJyxcbiAgU0VORF9WRVJJRklDQVRJT05fQ09ERSA9ICcvdjEvYWNjb3VudHM6c2VuZFZlcmlmaWNhdGlvbkNvZGUnLFxuICBTRU5EX09PQl9DT0RFID0gJy92MS9hY2NvdW50czpzZW5kT29iQ29kZScsXG4gIFNFVF9BQ0NPVU5UX0lORk8gPSAnL3YxL2FjY291bnRzOnVwZGF0ZScsXG4gIEdFVF9BQ0NPVU5UX0lORk8gPSAnL3YxL2FjY291bnRzOmxvb2t1cCcsXG4gIEdFVF9SRUNBUFRDSEFfUEFSQU0gPSAnL3YxL3JlY2FwdGNoYVBhcmFtcycsXG4gIFNUQVJUX1BIT05FX01GQV9FTlJPTExNRU5UID0gJy92Mi9hY2NvdW50cy9tZmFFbnJvbGxtZW50OnN0YXJ0JyxcbiAgRklOQUxJWkVfUEhPTkVfTUZBX0VOUk9MTE1FTlQgPSAnL3YyL2FjY291bnRzL21mYUVucm9sbG1lbnQ6ZmluYWxpemUnLFxuICBTVEFSVF9QSE9ORV9NRkFfU0lHTl9JTiA9ICcvdjIvYWNjb3VudHMvbWZhU2lnbkluOnN0YXJ0JyxcbiAgRklOQUxJWkVfUEhPTkVfTUZBX1NJR05fSU4gPSAnL3YyL2FjY291bnRzL21mYVNpZ25JbjpmaW5hbGl6ZScsXG4gIFdJVEhEUkFXX01GQSA9ICcvdjIvYWNjb3VudHMvbWZhRW5yb2xsbWVudDp3aXRoZHJhdycsXG4gIEdFVF9QUk9KRUNUX0NPTkZJRyA9ICcvdjEvcHJvamVjdHMnXG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FQSV9USU1FT1VUX01TID0gbmV3IERlbGF5KDMwXzAwMCwgNjBfMDAwKTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9hZGRUaWRJZk5lY2Vzc2FyeTxUIGV4dGVuZHMgeyB0ZW5hbnRJZD86IHN0cmluZyB9PihcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogVFxuKTogVCB7XG4gIGlmIChhdXRoLnRlbmFudElkICYmICFyZXF1ZXN0LnRlbmFudElkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlcXVlc3QsXG4gICAgICB0ZW5hbnRJZDogYXV0aC50ZW5hbnRJZFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3Q7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfcGVyZm9ybUFwaVJlcXVlc3Q8VCwgVj4oXG4gIGF1dGg6IEF1dGgsXG4gIG1ldGhvZDogSHR0cE1ldGhvZCxcbiAgcGF0aDogRW5kcG9pbnQsXG4gIHJlcXVlc3Q/OiBULFxuICBjdXN0b21FcnJvck1hcDogUGFydGlhbDxTZXJ2ZXJFcnJvck1hcDxTZXJ2ZXJFcnJvcj4+ID0ge31cbik6IFByb21pc2U8Vj4ge1xuICByZXR1cm4gX3BlcmZvcm1GZXRjaFdpdGhFcnJvckhhbmRsaW5nKGF1dGgsIGN1c3RvbUVycm9yTWFwLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGJvZHkgPSB7fTtcbiAgICBsZXQgcGFyYW1zID0ge307XG4gICAgaWYgKHJlcXVlc3QpIHtcbiAgICAgIGlmIChtZXRob2QgPT09IEh0dHBNZXRob2QuR0VUKSB7XG4gICAgICAgIHBhcmFtcyA9IHJlcXVlc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib2R5ID0ge1xuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcXVlcnkgPSBxdWVyeXN0cmluZyh7XG4gICAgICBrZXk6IGF1dGguY29uZmlnLmFwaUtleSxcbiAgICAgIC4uLnBhcmFtc1xuICAgIH0pLnNsaWNlKDEpO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IGF3YWl0IChhdXRoIGFzIEF1dGhJbnRlcm5hbCkuX2dldEFkZGl0aW9uYWxIZWFkZXJzKCk7XG4gICAgaGVhZGVyc1tIdHRwSGVhZGVyLkNPTlRFTlRfVFlQRV0gPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICBpZiAoYXV0aC5sYW5ndWFnZUNvZGUpIHtcbiAgICAgIGhlYWRlcnNbSHR0cEhlYWRlci5YX0ZJUkVCQVNFX0xPQ0FMRV0gPSBhdXRoLmxhbmd1YWdlQ29kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gRmV0Y2hQcm92aWRlci5mZXRjaCgpKFxuICAgICAgX2dldEZpbmFsVGFyZ2V0KGF1dGgsIGF1dGguY29uZmlnLmFwaUhvc3QsIHBhdGgsIHF1ZXJ5KSxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgICByZWZlcnJlclBvbGljeTogJ25vLXJlZmVycmVyJyxcbiAgICAgICAgLi4uYm9keVxuICAgICAgfVxuICAgICk7XG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3BlcmZvcm1GZXRjaFdpdGhFcnJvckhhbmRsaW5nPFY+KFxuICBhdXRoOiBBdXRoLFxuICBjdXN0b21FcnJvck1hcDogUGFydGlhbDxTZXJ2ZXJFcnJvck1hcDxTZXJ2ZXJFcnJvcj4+LFxuICBmZXRjaEZuOiAoKSA9PiBQcm9taXNlPFJlc3BvbnNlPlxuKTogUHJvbWlzZTxWPiB7XG4gIChhdXRoIGFzIEF1dGhJbnRlcm5hbCkuX2NhbkluaXRFbXVsYXRvciA9IGZhbHNlO1xuICBjb25zdCBlcnJvck1hcCA9IHsgLi4uU0VSVkVSX0VSUk9SX01BUCwgLi4uY3VzdG9tRXJyb3JNYXAgfTtcbiAgdHJ5IHtcbiAgICBjb25zdCBuZXR3b3JrVGltZW91dCA9IG5ldyBOZXR3b3JrVGltZW91dDxSZXNwb25zZT4oYXV0aCk7XG4gICAgY29uc3QgcmVzcG9uc2U6IFJlc3BvbnNlID0gYXdhaXQgUHJvbWlzZS5yYWNlPFByb21pc2U8UmVzcG9uc2U+PihbXG4gICAgICBmZXRjaEZuKCksXG4gICAgICBuZXR3b3JrVGltZW91dC5wcm9taXNlXG4gICAgXSk7XG5cbiAgICAvLyBJZiB3ZSd2ZSByZWFjaGVkIHRoaXMgcG9pbnQsIHRoZSBmZXRjaCBzdWNjZWVkZWQgYW5kIHRoZSBuZXR3b3JrVGltZW91dFxuICAgIC8vIGRpZG4ndCB0aHJvdzsgY2xlYXIgdGhlIG5ldHdvcmsgdGltZW91dCBkZWxheSBzbyB0aGF0IE5vZGUgd29uJ3QgaGFuZ1xuICAgIG5ldHdvcmtUaW1lb3V0LmNsZWFyTmV0d29ya1RpbWVvdXQoKTtcblxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgaWYgKCduZWVkQ29uZmlybWF0aW9uJyBpbiBqc29uKSB7XG4gICAgICB0aHJvdyBfbWFrZVRhZ2dlZEVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuTkVFRF9DT05GSVJNQVRJT04sIGpzb24pO1xuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5vayAmJiAhKCdlcnJvck1lc3NhZ2UnIGluIGpzb24pKSB7XG4gICAgICByZXR1cm4ganNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gcmVzcG9uc2Uub2sgPyBqc29uLmVycm9yTWVzc2FnZSA6IGpzb24uZXJyb3IubWVzc2FnZTtcbiAgICAgIGNvbnN0IFtzZXJ2ZXJFcnJvckNvZGUsIHNlcnZlckVycm9yTWVzc2FnZV0gPSBlcnJvck1lc3NhZ2Uuc3BsaXQoJyA6ICcpO1xuICAgICAgaWYgKHNlcnZlckVycm9yQ29kZSA9PT0gU2VydmVyRXJyb3IuRkVERVJBVEVEX1VTRVJfSURfQUxSRUFEWV9MSU5LRUQpIHtcbiAgICAgICAgdGhyb3cgX21ha2VUYWdnZWRFcnJvcihcbiAgICAgICAgICBhdXRoLFxuICAgICAgICAgIEF1dGhFcnJvckNvZGUuQ1JFREVOVElBTF9BTFJFQURZX0lOX1VTRSxcbiAgICAgICAgICBqc29uXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHNlcnZlckVycm9yQ29kZSA9PT0gU2VydmVyRXJyb3IuRU1BSUxfRVhJU1RTKSB7XG4gICAgICAgIHRocm93IF9tYWtlVGFnZ2VkRXJyb3IoYXV0aCwgQXV0aEVycm9yQ29kZS5FTUFJTF9FWElTVFMsIGpzb24pO1xuICAgICAgfVxuICAgICAgY29uc3QgYXV0aEVycm9yID1cbiAgICAgICAgZXJyb3JNYXBbc2VydmVyRXJyb3JDb2RlIGFzIFNlcnZlckVycm9yXSB8fFxuICAgICAgICAoKHNlcnZlckVycm9yQ29kZVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgLnJlcGxhY2UoL1tfXFxzXSsvZywgJy0nKSBhcyB1bmtub3duKSBhcyBBdXRoRXJyb3JDb2RlKTtcbiAgICAgIGlmIChzZXJ2ZXJFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGhyb3cgX2Vycm9yV2l0aEN1c3RvbU1lc3NhZ2UoYXV0aCwgYXV0aEVycm9yLCBzZXJ2ZXJFcnJvck1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2ZhaWwoYXV0aCwgYXV0aEVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIF9mYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRCk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9wZXJmb3JtU2lnbkluUmVxdWVzdDxULCBWIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlPihcbiAgYXV0aDogQXV0aCxcbiAgbWV0aG9kOiBIdHRwTWV0aG9kLFxuICBwYXRoOiBFbmRwb2ludCxcbiAgcmVxdWVzdD86IFQsXG4gIGN1c3RvbUVycm9yTWFwOiBQYXJ0aWFsPFNlcnZlckVycm9yTWFwPFNlcnZlckVycm9yPj4gPSB7fVxuKTogUHJvbWlzZTxWPiB7XG4gIGNvbnN0IHNlcnZlclJlc3BvbnNlID0gKGF3YWl0IF9wZXJmb3JtQXBpUmVxdWVzdDxULCBWIHwgSWRUb2tlbk1mYVJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIG1ldGhvZCxcbiAgICBwYXRoLFxuICAgIHJlcXVlc3QsXG4gICAgY3VzdG9tRXJyb3JNYXBcbiAgKSkgYXMgVjtcbiAgaWYgKCdtZmFQZW5kaW5nQ3JlZGVudGlhbCcgaW4gc2VydmVyUmVzcG9uc2UpIHtcbiAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk1GQV9SRVFVSVJFRCwge1xuICAgICAgX3NlcnZlclJlc3BvbnNlOiBzZXJ2ZXJSZXNwb25zZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNlcnZlclJlc3BvbnNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dldEZpbmFsVGFyZ2V0KFxuICBhdXRoOiBBdXRoLFxuICBob3N0OiBzdHJpbmcsXG4gIHBhdGg6IHN0cmluZyxcbiAgcXVlcnk6IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgY29uc3QgYmFzZSA9IGAke2hvc3R9JHtwYXRofT8ke3F1ZXJ5fWA7XG5cbiAgaWYgKCEoYXV0aCBhcyBBdXRoSW50ZXJuYWwpLmNvbmZpZy5lbXVsYXRvcikge1xuICAgIHJldHVybiBgJHthdXRoLmNvbmZpZy5hcGlTY2hlbWV9Oi8vJHtiYXNlfWA7XG4gIH1cblxuICByZXR1cm4gX2VtdWxhdG9yVXJsKGF1dGguY29uZmlnIGFzIENvbmZpZ0ludGVybmFsLCBiYXNlKTtcbn1cblxuY2xhc3MgTmV0d29ya1RpbWVvdXQ8VD4ge1xuICAvLyBOb2RlIHRpbWVycyBhbmQgYnJvd3NlciB0aW1lcnMgYXJlIGZ1bmRhbWVudGFsbHkgaW5jb21wYXRpYmxlLCBidXQgd2VcbiAgLy8gZG9uJ3QgY2FyZSBhYm91dCB0aGUgdmFsdWUgaGVyZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIHRpbWVyOiBhbnkgfCBudWxsID0gbnVsbDtcbiAgcmVhZG9ubHkgcHJvbWlzZSA9IG5ldyBQcm9taXNlPFQ+KChfLCByZWplY3QpID0+IHtcbiAgICB0aGlzLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZXR1cm4gcmVqZWN0KF9jcmVhdGVFcnJvcih0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuVElNRU9VVCkpO1xuICAgIH0sIERFRkFVTFRfQVBJX1RJTUVPVVRfTVMuZ2V0KCkpO1xuICB9KTtcblxuICBjbGVhck5ldHdvcmtUaW1lb3V0KCk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXV0aDogQXV0aCkge31cbn1cblxuaW50ZXJmYWNlIFBvdGVudGlhbFJlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHtcbiAgZW1haWw/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX21ha2VUYWdnZWRFcnJvcihcbiAgYXV0aDogQXV0aCxcbiAgY29kZTogQXV0aEVycm9yQ29kZSxcbiAgcmVzcG9uc2U6IFBvdGVudGlhbFJlc3BvbnNlXG4pOiBGaXJlYmFzZUVycm9yIHtcbiAgY29uc3QgZXJyb3JQYXJhbXM6IE5hbWVkRXJyb3JQYXJhbXMgPSB7XG4gICAgYXBwTmFtZTogYXV0aC5uYW1lXG4gIH07XG5cbiAgaWYgKHJlc3BvbnNlLmVtYWlsKSB7XG4gICAgZXJyb3JQYXJhbXMuZW1haWwgPSByZXNwb25zZS5lbWFpbDtcbiAgfVxuICBpZiAocmVzcG9uc2UucGhvbmVOdW1iZXIpIHtcbiAgICBlcnJvclBhcmFtcy5waG9uZU51bWJlciA9IHJlc3BvbnNlLnBob25lTnVtYmVyO1xuICB9XG5cbiAgY29uc3QgZXJyb3IgPSBfY3JlYXRlRXJyb3IoYXV0aCwgY29kZSwgZXJyb3JQYXJhbXMpO1xuXG4gIC8vIFdlIGtub3cgY3VzdG9tRGF0YSBpcyBkZWZpbmVkIG9uIGVycm9yIGJlY2F1c2UgZXJyb3JQYXJhbXMgaXMgZGVmaW5lZFxuICAoZXJyb3IuY3VzdG9tRGF0YSEgYXMgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UpLl90b2tlblJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBFbmRwb2ludCwgSHR0cE1ldGhvZCwgX3BlcmZvcm1BcGlSZXF1ZXN0IH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgTWZhRW5yb2xsbWVudCB9IGZyb20gJy4vbWZhJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlbGV0ZUFjY291bnRSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQWNjb3VudChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogRGVsZXRlQWNjb3VudFJlcXVlc3Rcbik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PERlbGV0ZUFjY291bnRSZXF1ZXN0LCB2b2lkPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5ERUxFVEVfQUNDT1VOVCxcbiAgICByZXF1ZXN0XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJVc2VySW5mbyB7XG4gIHByb3ZpZGVySWQ6IHN0cmluZztcbiAgcmF3SWQ/OiBzdHJpbmc7XG4gIGVtYWlsPzogc3RyaW5nO1xuICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgcGhvdG9Vcmw/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbGV0ZUxpbmtlZEFjY291bnRzUmVxdWVzdCB7XG4gIGlkVG9rZW46IHN0cmluZztcbiAgZGVsZXRlUHJvdmlkZXI6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlbGV0ZUxpbmtlZEFjY291bnRzUmVzcG9uc2Uge1xuICBwcm92aWRlclVzZXJJbmZvOiBQcm92aWRlclVzZXJJbmZvW107XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVMaW5rZWRBY2NvdW50cyhcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogRGVsZXRlTGlua2VkQWNjb3VudHNSZXF1ZXN0XG4pOiBQcm9taXNlPERlbGV0ZUxpbmtlZEFjY291bnRzUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBEZWxldGVMaW5rZWRBY2NvdW50c1JlcXVlc3QsXG4gICAgRGVsZXRlTGlua2VkQWNjb3VudHNSZXNwb25zZVxuICA+KGF1dGgsIEh0dHBNZXRob2QuUE9TVCwgRW5kcG9pbnQuU0VUX0FDQ09VTlRfSU5GTywgcmVxdWVzdCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQVBJVXNlckluZm8ge1xuICBsb2NhbElkPzogc3RyaW5nO1xuICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgcGhvdG9Vcmw/OiBzdHJpbmc7XG4gIGVtYWlsPzogc3RyaW5nO1xuICBlbWFpbFZlcmlmaWVkPzogYm9vbGVhbjtcbiAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG4gIGxhc3RMb2dpbkF0PzogbnVtYmVyO1xuICBjcmVhdGVkQXQ/OiBudW1iZXI7XG4gIHRlbmFudElkPzogc3RyaW5nO1xuICBwYXNzd29yZEhhc2g/OiBzdHJpbmc7XG4gIHByb3ZpZGVyVXNlckluZm8/OiBQcm92aWRlclVzZXJJbmZvW107XG4gIG1mYUluZm8/OiBNZmFFbnJvbGxtZW50W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0QWNjb3VudEluZm9SZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEFjY291bnRJbmZvUmVzcG9uc2Uge1xuICB1c2VyczogQVBJVXNlckluZm9bXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjY291bnRJbmZvKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBHZXRBY2NvdW50SW5mb1JlcXVlc3Rcbik6IFByb21pc2U8R2V0QWNjb3VudEluZm9SZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PEdldEFjY291bnRJbmZvUmVxdWVzdCwgR2V0QWNjb3VudEluZm9SZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuR0VUX0FDQ09VTlRfSU5GTyxcbiAgICByZXF1ZXN0XG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHV0Y1RpbWVzdGFtcFRvRGF0ZVN0cmluZyhcbiAgdXRjVGltZXN0YW1wPzogc3RyaW5nIHwgbnVtYmVyXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBpZiAoIXV0Y1RpbWVzdGFtcCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBDb252ZXJ0IHRvIGRhdGUgb2JqZWN0LlxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShOdW1iZXIodXRjVGltZXN0YW1wKSk7XG4gICAgLy8gVGVzdCBkYXRlIGlzIHZhbGlkLlxuICAgIGlmICghaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgICAvLyBDb252ZXJ0IHRvIFVUQyBkYXRlIHN0cmluZy5cbiAgICAgIHJldHVybiBkYXRlLnRvVVRDU3RyaW5nKCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gRG8gbm90aGluZy4gdW5kZWZpbmVkIHdpbGwgYmUgcmV0dXJuZWQuXG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJZFRva2VuUmVzdWx0LCBQYXJzZWRUb2tlbiwgVXNlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBiYXNlNjREZWNvZGUsIGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX2xvZ0Vycm9yIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nIH0gZnJvbSAnLi4vdXRpbC90aW1lJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG4vKipcbiAqIFJldHVybnMgYSBKU09OIFdlYiBUb2tlbiAoSldUKSB1c2VkIHRvIGlkZW50aWZ5IHRoZSB1c2VyIHRvIGEgRmlyZWJhc2Ugc2VydmljZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogUmV0dXJucyB0aGUgY3VycmVudCB0b2tlbiBpZiBpdCBoYXMgbm90IGV4cGlyZWQgb3IgaWYgaXQgd2lsbCBub3QgZXhwaXJlIGluIHRoZSBuZXh0IGZpdmVcbiAqIG1pbnV0ZXMuIE90aGVyd2lzZSwgdGhpcyB3aWxsIHJlZnJlc2ggdGhlIHRva2VuIGFuZCByZXR1cm4gYSBuZXcgb25lLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gZm9yY2VSZWZyZXNoIC0gRm9yY2UgcmVmcmVzaCByZWdhcmRsZXNzIG9mIHRva2VuIGV4cGlyYXRpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRUb2tlbih1c2VyOiBVc2VyLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikuZ2V0SWRUb2tlbihmb3JjZVJlZnJlc2gpO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBkZXNlcmlhbGl6ZWQgSlNPTiBXZWIgVG9rZW4gKEpXVCkgdXNlZCB0byBpZGVudGl0ZnkgdGhlIHVzZXIgdG8gYSBGaXJlYmFzZSBzZXJ2aWNlLlxuICpcbiAqIEByZW1hcmtzXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHRva2VuIGlmIGl0IGhhcyBub3QgZXhwaXJlZCBvciBpZiBpdCB3aWxsIG5vdCBleHBpcmUgaW4gdGhlIG5leHQgZml2ZVxuICogbWludXRlcy4gT3RoZXJ3aXNlLCB0aGlzIHdpbGwgcmVmcmVzaCB0aGUgdG9rZW4gYW5kIHJldHVybiBhIG5ldyBvbmUuXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqIEBwYXJhbSBmb3JjZVJlZnJlc2ggLSBGb3JjZSByZWZyZXNoIHJlZ2FyZGxlc3Mgb2YgdG9rZW4gZXhwaXJhdGlvbi5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJZFRva2VuUmVzdWx0KFxuICB1c2VyOiBVc2VyLFxuICBmb3JjZVJlZnJlc2ggPSBmYWxzZVxuKTogUHJvbWlzZTxJZFRva2VuUmVzdWx0PiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWw7XG4gIGNvbnN0IHRva2VuID0gYXdhaXQgdXNlckludGVybmFsLmdldElkVG9rZW4oZm9yY2VSZWZyZXNoKTtcbiAgY29uc3QgY2xhaW1zID0gX3BhcnNlVG9rZW4odG9rZW4pO1xuXG4gIF9hc3NlcnQoXG4gICAgY2xhaW1zICYmIGNsYWltcy5leHAgJiYgY2xhaW1zLmF1dGhfdGltZSAmJiBjbGFpbXMuaWF0LFxuICAgIHVzZXJJbnRlcm5hbC5hdXRoLFxuICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgKTtcbiAgY29uc3QgZmlyZWJhc2UgPVxuICAgIHR5cGVvZiBjbGFpbXMuZmlyZWJhc2UgPT09ICdvYmplY3QnID8gY2xhaW1zLmZpcmViYXNlIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHNpZ25JblByb3ZpZGVyOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBmaXJlYmFzZT8uWydzaWduX2luX3Byb3ZpZGVyJ107XG5cbiAgcmV0dXJuIHtcbiAgICBjbGFpbXMsXG4gICAgdG9rZW4sXG4gICAgYXV0aFRpbWU6IHV0Y1RpbWVzdGFtcFRvRGF0ZVN0cmluZyhcbiAgICAgIHNlY29uZHNTdHJpbmdUb01pbGxpc2Vjb25kcyhjbGFpbXMuYXV0aF90aW1lKVxuICAgICkhLFxuICAgIGlzc3VlZEF0VGltZTogdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nKFxuICAgICAgc2Vjb25kc1N0cmluZ1RvTWlsbGlzZWNvbmRzKGNsYWltcy5pYXQpXG4gICAgKSEsXG4gICAgZXhwaXJhdGlvblRpbWU6IHV0Y1RpbWVzdGFtcFRvRGF0ZVN0cmluZyhcbiAgICAgIHNlY29uZHNTdHJpbmdUb01pbGxpc2Vjb25kcyhjbGFpbXMuZXhwKVxuICAgICkhLFxuICAgIHNpZ25JblByb3ZpZGVyOiBzaWduSW5Qcm92aWRlciB8fCBudWxsLFxuICAgIHNpZ25JblNlY29uZEZhY3RvcjogZmlyZWJhc2U/Llsnc2lnbl9pbl9zZWNvbmRfZmFjdG9yJ10gfHwgbnVsbFxuICB9O1xufVxuXG5mdW5jdGlvbiBzZWNvbmRzU3RyaW5nVG9NaWxsaXNlY29uZHMoc2Vjb25kczogc3RyaW5nKTogbnVtYmVyIHtcbiAgcmV0dXJuIE51bWJlcihzZWNvbmRzKSAqIDEwMDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcGFyc2VUb2tlbih0b2tlbjogc3RyaW5nKTogUGFyc2VkVG9rZW4gfCBudWxsIHtcbiAgY29uc3QgW2FsZ29yaXRobSwgcGF5bG9hZCwgc2lnbmF0dXJlXSA9IHRva2VuLnNwbGl0KCcuJyk7XG4gIGlmIChcbiAgICBhbGdvcml0aG0gPT09IHVuZGVmaW5lZCB8fFxuICAgIHBheWxvYWQgPT09IHVuZGVmaW5lZCB8fFxuICAgIHNpZ25hdHVyZSA9PT0gdW5kZWZpbmVkXG4gICkge1xuICAgIF9sb2dFcnJvcignSldUIG1hbGZvcm1lZCwgY29udGFpbmVkIGZld2VyIHRoYW4gMyBzZWN0aW9ucycpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkZWNvZGVkID0gYmFzZTY0RGVjb2RlKHBheWxvYWQpO1xuICAgIGlmICghZGVjb2RlZCkge1xuICAgICAgX2xvZ0Vycm9yKCdGYWlsZWQgdG8gZGVjb2RlIGJhc2U2NCBKV1QgcGF5bG9hZCcpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZWQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgX2xvZ0Vycm9yKCdDYXVnaHQgZXJyb3IgcGFyc2luZyBKV1QgcGF5bG9hZCBhcyBKU09OJywgZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRyYWN0IGV4cGlyZXNJbiBUVEwgZnJvbSBhIHRva2VuIGJ5IHN1YnRyYWN0aW5nIHRoZSBleHBpcmF0aW9uIGZyb20gdGhlIGlzc3VhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX3Rva2VuRXhwaXJlc0luKHRva2VuOiBzdHJpbmcpOiBudW1iZXIge1xuICBjb25zdCBwYXJzZWRUb2tlbiA9IF9wYXJzZVRva2VuKHRva2VuKTtcbiAgX2Fzc2VydChwYXJzZWRUb2tlbiwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIF9hc3NlcnQodHlwZW9mIHBhcnNlZFRva2VuLmV4cCAhPT0gJ3VuZGVmaW5lZCcsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICBfYXNzZXJ0KHR5cGVvZiBwYXJzZWRUb2tlbi5pYXQgIT09ICd1bmRlZmluZWQnLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgcmV0dXJuIE51bWJlcihwYXJzZWRUb2tlbi5leHApIC0gTnVtYmVyKHBhcnNlZFRva2VuLmlhdCk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9sb2dvdXRJZkludmFsaWRhdGVkPFQ+KFxuICB1c2VyOiBVc2VySW50ZXJuYWwsXG4gIHByb21pc2U6IFByb21pc2U8VD4sXG4gIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlXG4pOiBQcm9taXNlPFQ+IHtcbiAgaWYgKGJ5cGFzc0F1dGhTdGF0ZSkge1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IgJiYgaXNVc2VySW52YWxpZGF0ZWQoZSkpIHtcbiAgICAgIGlmICh1c2VyLmF1dGguY3VycmVudFVzZXIgPT09IHVzZXIpIHtcbiAgICAgICAgYXdhaXQgdXNlci5hdXRoLnNpZ25PdXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVXNlckludmFsaWRhdGVkKHsgY29kZSB9OiBGaXJlYmFzZUVycm9yKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgY29kZSA9PT0gYGF1dGgvJHtBdXRoRXJyb3JDb2RlLlVTRVJfRElTQUJMRUR9YCB8fFxuICAgIGNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5UT0tFTl9FWFBJUkVEfWBcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG4vLyBSZWZyZXNoIHRoZSB0b2tlbiBmaXZlIG1pbnV0ZXMgYmVmb3JlIGV4cGlyYXRpb25cbmV4cG9ydCBjb25zdCBlbnVtIER1cmF0aW9uIHtcbiAgT0ZGU0VUID0gNSAqIDEwMDAgKiA2MCxcbiAgUkVUUllfQkFDS09GRl9NSU4gPSAzMCAqIDEwMDAsXG4gIFJFVFJZX0JBQ0tPRkZfTUFYID0gMTYgKiA2MCAqIDEwMDBcbn1cblxuZXhwb3J0IGNsYXNzIFByb2FjdGl2ZVJlZnJlc2gge1xuICBwcml2YXRlIGlzUnVubmluZyA9IGZhbHNlO1xuXG4gIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyByZXR1cm4gZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgdHlwZXMuXG4gIC8vIFdlIGRvbid0IGFjdHVhbGx5IGNhcmUgd2hhdCB0aGUgdmFsdWUgaXMgYnV0IFRTIHdvbid0IGFjY2VwdCB1bmtub3duIGFuZFxuICAvLyB3ZSBjYW4ndCBjYXN0IHByb3Blcmx5IGluIGJvdGggZW52aXJvbm1lbnRzLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwcml2YXRlIHRpbWVySWQ6IGFueSB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGVycm9yQmFja29mZiA9IER1cmF0aW9uLlJFVFJZX0JBQ0tPRkZfTUlOO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdXNlcjogVXNlckludGVybmFsKSB7fVxuXG4gIF9zdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7XG4gICAgdGhpcy5zY2hlZHVsZSgpO1xuICB9XG5cbiAgX3N0b3AoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMudGltZXJJZCAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRJbnRlcnZhbCh3YXNFcnJvcjogYm9vbGVhbik6IG51bWJlciB7XG4gICAgaWYgKHdhc0Vycm9yKSB7XG4gICAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuZXJyb3JCYWNrb2ZmO1xuICAgICAgdGhpcy5lcnJvckJhY2tvZmYgPSBNYXRoLm1pbihcbiAgICAgICAgdGhpcy5lcnJvckJhY2tvZmYgKiAyLFxuICAgICAgICBEdXJhdGlvbi5SRVRSWV9CQUNLT0ZGX01BWFxuICAgICAgKTtcbiAgICAgIHJldHVybiBpbnRlcnZhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVzZXQgdGhlIGVycm9yIGJhY2tvZmZcbiAgICAgIHRoaXMuZXJyb3JCYWNrb2ZmID0gRHVyYXRpb24uUkVUUllfQkFDS09GRl9NSU47XG4gICAgICBjb25zdCBleHBUaW1lID0gdGhpcy51c2VyLnN0c1Rva2VuTWFuYWdlci5leHBpcmF0aW9uVGltZSA/PyAwO1xuICAgICAgY29uc3QgaW50ZXJ2YWwgPSBleHBUaW1lIC0gRGF0ZS5ub3coKSAtIER1cmF0aW9uLk9GRlNFVDtcblxuICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIGludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNjaGVkdWxlKHdhc0Vycm9yID0gZmFsc2UpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICAvLyBKdXN0IGluIGNhc2UuLi5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnRlcnZhbCA9IHRoaXMuZ2V0SW50ZXJ2YWwod2FzRXJyb3IpO1xuICAgIHRoaXMudGltZXJJZCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5pdGVyYXRpb24oKTtcbiAgICB9LCBpbnRlcnZhbCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGl0ZXJhdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy51c2VyLmdldElkVG9rZW4odHJ1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gT25seSByZXRyeSBvbiBuZXR3b3JrIGVycm9yc1xuICAgICAgaWYgKGUuY29kZSA9PT0gYGF1dGgvJHtBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRUR9YCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlKC8qIHdhc0Vycm9yICovIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2NoZWR1bGUoKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJNZXRhZGF0YSBhcyBVc2VyTWV0YWRhdGFUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgdXRjVGltZXN0YW1wVG9EYXRlU3RyaW5nIH0gZnJvbSAnLi4vdXRpbC90aW1lJztcblxuZXhwb3J0IGNsYXNzIFVzZXJNZXRhZGF0YSBpbXBsZW1lbnRzIFVzZXJNZXRhZGF0YVR5cGUge1xuICBjcmVhdGlvblRpbWU/OiBzdHJpbmc7XG4gIGxhc3RTaWduSW5UaW1lPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY3JlYXRlZEF0Pzogc3RyaW5nIHwgbnVtYmVyLFxuICAgIHByaXZhdGUgbGFzdExvZ2luQXQ/OiBzdHJpbmcgfCBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZVRpbWUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2luaXRpYWxpemVUaW1lKCk6IHZvaWQge1xuICAgIHRoaXMubGFzdFNpZ25JblRpbWUgPSB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcodGhpcy5sYXN0TG9naW5BdCk7XG4gICAgdGhpcy5jcmVhdGlvblRpbWUgPSB1dGNUaW1lc3RhbXBUb0RhdGVTdHJpbmcodGhpcy5jcmVhdGVkQXQpO1xuICB9XG5cbiAgX2NvcHkobWV0YWRhdGE6IFVzZXJNZXRhZGF0YSk6IHZvaWQge1xuICAgIHRoaXMuY3JlYXRlZEF0ID0gbWV0YWRhdGEuY3JlYXRlZEF0O1xuICAgIHRoaXMubGFzdExvZ2luQXQgPSBtZXRhZGF0YS5sYXN0TG9naW5BdDtcbiAgICB0aGlzLl9pbml0aWFsaXplVGltZSgpO1xuICB9XG5cbiAgdG9KU09OKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZWRBdDogdGhpcy5jcmVhdGVkQXQsXG4gICAgICBsYXN0TG9naW5BdDogdGhpcy5sYXN0TG9naW5BdFxuICAgIH07XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBVc2VyLCBVc2VySW5mbyB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7XG4gIGdldEFjY291bnRJbmZvLFxuICBQcm92aWRlclVzZXJJbmZvXG59IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvYWNjb3VudCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9sb2dvdXRJZkludmFsaWRhdGVkIH0gZnJvbSAnLi9pbnZhbGlkYXRpb24nO1xuaW1wb3J0IHsgVXNlck1ldGFkYXRhIH0gZnJvbSAnLi91c2VyX21ldGFkYXRhJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9yZWxvYWRXaXRob3V0U2F2aW5nKHVzZXI6IFVzZXJJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBhdXRoID0gdXNlci5hdXRoO1xuICBjb25zdCBpZFRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgdXNlcixcbiAgICBnZXRBY2NvdW50SW5mbyhhdXRoLCB7IGlkVG9rZW4gfSlcbiAgKTtcblxuICBfYXNzZXJ0KHJlc3BvbnNlPy51c2Vycy5sZW5ndGgsIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuXG4gIGNvbnN0IGNvcmVBY2NvdW50ID0gcmVzcG9uc2UudXNlcnNbMF07XG5cbiAgdXNlci5fbm90aWZ5UmVsb2FkTGlzdGVuZXIoY29yZUFjY291bnQpO1xuXG4gIGNvbnN0IG5ld1Byb3ZpZGVyRGF0YSA9IGNvcmVBY2NvdW50LnByb3ZpZGVyVXNlckluZm8/Lmxlbmd0aFxuICAgID8gZXh0cmFjdFByb3ZpZGVyRGF0YShjb3JlQWNjb3VudC5wcm92aWRlclVzZXJJbmZvKVxuICAgIDogW107XG5cbiAgY29uc3QgcHJvdmlkZXJEYXRhID0gbWVyZ2VQcm92aWRlckRhdGEodXNlci5wcm92aWRlckRhdGEsIG5ld1Byb3ZpZGVyRGF0YSk7XG5cbiAgLy8gUHJlc2VydmVzIHRoZSBub24tbm9ueW1vdXMgc3RhdHVzIG9mIHRoZSBzdG9yZWQgdXNlciwgZXZlbiBpZiBubyBtb3JlXG4gIC8vIGNyZWRlbnRpYWxzIChmZWRlcmF0ZWQgb3IgZW1haWwvcGFzc3dvcmQpIGFyZSBsaW5rZWQgdG8gdGhlIHVzZXIuIElmXG4gIC8vIHRoZSB1c2VyIHdhcyBwcmV2aW91c2x5IGFub255bW91cywgdGhlbiB1c2UgcHJvdmlkZXIgZGF0YSB0byB1cGRhdGUuXG4gIC8vIE9uIHRoZSBvdGhlciBoYW5kLCBpZiBpdCB3YXMgbm90IGFub255bW91cyBiZWZvcmUsIGl0IHNob3VsZCBuZXZlciBiZVxuICAvLyBjb25zaWRlcmVkIGFub255bW91cyBub3cuXG4gIGNvbnN0IG9sZElzQW5vbnltb3VzID0gdXNlci5pc0Fub255bW91cztcbiAgY29uc3QgbmV3SXNBbm9ueW1vdXMgPVxuICAgICEodXNlci5lbWFpbCAmJiBjb3JlQWNjb3VudC5wYXNzd29yZEhhc2gpICYmICFwcm92aWRlckRhdGE/Lmxlbmd0aDtcbiAgY29uc3QgaXNBbm9ueW1vdXMgPSAhb2xkSXNBbm9ueW1vdXMgPyBmYWxzZSA6IG5ld0lzQW5vbnltb3VzO1xuXG4gIGNvbnN0IHVwZGF0ZXM6IFBhcnRpYWw8VXNlckludGVybmFsPiA9IHtcbiAgICB1aWQ6IGNvcmVBY2NvdW50LmxvY2FsSWQsXG4gICAgZGlzcGxheU5hbWU6IGNvcmVBY2NvdW50LmRpc3BsYXlOYW1lIHx8IG51bGwsXG4gICAgcGhvdG9VUkw6IGNvcmVBY2NvdW50LnBob3RvVXJsIHx8IG51bGwsXG4gICAgZW1haWw6IGNvcmVBY2NvdW50LmVtYWlsIHx8IG51bGwsXG4gICAgZW1haWxWZXJpZmllZDogY29yZUFjY291bnQuZW1haWxWZXJpZmllZCB8fCBmYWxzZSxcbiAgICBwaG9uZU51bWJlcjogY29yZUFjY291bnQucGhvbmVOdW1iZXIgfHwgbnVsbCxcbiAgICB0ZW5hbnRJZDogY29yZUFjY291bnQudGVuYW50SWQgfHwgbnVsbCxcbiAgICBwcm92aWRlckRhdGEsXG4gICAgbWV0YWRhdGE6IG5ldyBVc2VyTWV0YWRhdGEoY29yZUFjY291bnQuY3JlYXRlZEF0LCBjb3JlQWNjb3VudC5sYXN0TG9naW5BdCksXG4gICAgaXNBbm9ueW1vdXNcbiAgfTtcblxuICBPYmplY3QuYXNzaWduKHVzZXIsIHVwZGF0ZXMpO1xufVxuXG4vKipcbiAqIFJlbG9hZHMgdXNlciBhY2NvdW50IGRhdGEsIGlmIHNpZ25lZCBpbi5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbG9hZCh1c2VyOiBVc2VyKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbDogVXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgYXdhaXQgX3JlbG9hZFdpdGhvdXRTYXZpbmcodXNlckludGVybmFsKTtcblxuICAvLyBFdmVuIHRob3VnaCB0aGUgY3VycmVudCB1c2VyIGhhc24ndCBjaGFuZ2VkLCB1cGRhdGVcbiAgLy8gY3VycmVudCB1c2VyIHdpbGwgdHJpZ2dlciBhIHBlcnNpc3RlbmNlIHVwZGF0ZSB3LyB0aGVcbiAgLy8gbmV3IGluZm8uXG4gIGF3YWl0IHVzZXJJbnRlcm5hbC5hdXRoLl9wZXJzaXN0VXNlcklmQ3VycmVudCh1c2VySW50ZXJuYWwpO1xuICB1c2VySW50ZXJuYWwuYXV0aC5fbm90aWZ5TGlzdGVuZXJzSWZDdXJyZW50KHVzZXJJbnRlcm5hbCk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvdmlkZXJEYXRhKFxuICBvcmlnaW5hbDogVXNlckluZm9bXSxcbiAgbmV3RGF0YTogVXNlckluZm9bXVxuKTogVXNlckluZm9bXSB7XG4gIGNvbnN0IGRlZHVwZWQgPSBvcmlnaW5hbC5maWx0ZXIoXG4gICAgbyA9PiAhbmV3RGF0YS5zb21lKG4gPT4gbi5wcm92aWRlcklkID09PSBvLnByb3ZpZGVySWQpXG4gICk7XG4gIHJldHVybiBbLi4uZGVkdXBlZCwgLi4ubmV3RGF0YV07XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm92aWRlckRhdGEocHJvdmlkZXJzOiBQcm92aWRlclVzZXJJbmZvW10pOiBVc2VySW5mb1tdIHtcbiAgcmV0dXJuIHByb3ZpZGVycy5tYXAoKHsgcHJvdmlkZXJJZCwgLi4ucHJvdmlkZXIgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBwcm92aWRlcklkLFxuICAgICAgdWlkOiBwcm92aWRlci5yYXdJZCB8fCAnJyxcbiAgICAgIGRpc3BsYXlOYW1lOiBwcm92aWRlci5kaXNwbGF5TmFtZSB8fCBudWxsLFxuICAgICAgZW1haWw6IHByb3ZpZGVyLmVtYWlsIHx8IG51bGwsXG4gICAgICBwaG9uZU51bWJlcjogcHJvdmlkZXIucGhvbmVOdW1iZXIgfHwgbnVsbCxcbiAgICAgIHBob3RvVVJMOiBwcm92aWRlci5waG90b1VybCB8fCBudWxsXG4gICAgfTtcbiAgfSk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5cbmltcG9ydCB7IHF1ZXJ5c3RyaW5nIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQge1xuICBfZ2V0RmluYWxUYXJnZXQsXG4gIF9wZXJmb3JtRmV0Y2hXaXRoRXJyb3JIYW5kbGluZyxcbiAgSHR0cE1ldGhvZCxcbiAgSHR0cEhlYWRlclxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBGZXRjaFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2ZldGNoX3Byb3ZpZGVyJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIEVuZHBvaW50IHtcbiAgVE9LRU4gPSAnL3YxL3Rva2VuJ1xufVxuXG4vKiogVGhlIHNlcnZlciByZXNwb25zZXMgd2l0aCBzbmFrZV9jYXNlOyB3ZSBjb252ZXJ0IHRvIGNhbWVsQ2FzZSAqL1xuaW50ZXJmYWNlIFJlcXVlc3RTdHNUb2tlblNlcnZlclJlc3BvbnNlIHtcbiAgYWNjZXNzX3Rva2VuOiBzdHJpbmc7XG4gIGV4cGlyZXNfaW46IHN0cmluZztcbiAgcmVmcmVzaF90b2tlbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RTdHNUb2tlblJlc3BvbnNlIHtcbiAgYWNjZXNzVG9rZW46IHN0cmluZztcbiAgZXhwaXJlc0luOiBzdHJpbmc7XG4gIHJlZnJlc2hUb2tlbjogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVxdWVzdFN0c1Rva2VuKFxuICBhdXRoOiBBdXRoLFxuICByZWZyZXNoVG9rZW46IHN0cmluZ1xuKTogUHJvbWlzZTxSZXF1ZXN0U3RzVG9rZW5SZXNwb25zZT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9wZXJmb3JtRmV0Y2hXaXRoRXJyb3JIYW5kbGluZzxSZXF1ZXN0U3RzVG9rZW5TZXJ2ZXJSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICB7fSxcbiAgICBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBib2R5ID0gcXVlcnlzdHJpbmcoe1xuICAgICAgICAnZ3JhbnRfdHlwZSc6ICdyZWZyZXNoX3Rva2VuJyxcbiAgICAgICAgJ3JlZnJlc2hfdG9rZW4nOiByZWZyZXNoVG9rZW5cbiAgICAgIH0pLnNsaWNlKDEpO1xuICAgICAgY29uc3QgeyB0b2tlbkFwaUhvc3QsIGFwaUtleSB9ID0gYXV0aC5jb25maWc7XG4gICAgICBjb25zdCB1cmwgPSBfZ2V0RmluYWxUYXJnZXQoXG4gICAgICAgIGF1dGgsXG4gICAgICAgIHRva2VuQXBpSG9zdCxcbiAgICAgICAgRW5kcG9pbnQuVE9LRU4sXG4gICAgICAgIGBrZXk9JHthcGlLZXl9YFxuICAgICAgKTtcblxuICAgICAgY29uc3QgaGVhZGVycyA9IGF3YWl0IChhdXRoIGFzIEF1dGhJbnRlcm5hbCkuX2dldEFkZGl0aW9uYWxIZWFkZXJzKCk7XG4gICAgICBoZWFkZXJzW0h0dHBIZWFkZXIuQ09OVEVOVF9UWVBFXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuXG4gICAgICByZXR1cm4gRmV0Y2hQcm92aWRlci5mZXRjaCgpKHVybCwge1xuICAgICAgICBtZXRob2Q6IEh0dHBNZXRob2QuUE9TVCxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgICAgYm9keVxuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIC8vIFRoZSByZXNwb25zZSBjb21lcyBiYWNrIGluIHNuYWtlX2Nhc2UuIENvbnZlcnQgdG8gY2FtZWw6XG4gIHJldHVybiB7XG4gICAgYWNjZXNzVG9rZW46IHJlc3BvbnNlLmFjY2Vzc190b2tlbixcbiAgICBleHBpcmVzSW46IHJlc3BvbnNlLmV4cGlyZXNfaW4sXG4gICAgcmVmcmVzaFRva2VuOiByZXNwb25zZS5yZWZyZXNoX3Rva2VuXG4gIH07XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmluYWxpemVNZmFSZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgcmVxdWVzdFN0c1Rva2VuIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL3Rva2VuJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBQZXJzaXN0ZWRCbG9iIH0gZnJvbSAnLi4vcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHsgX2Fzc2VydCwgZGVidWdGYWlsIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX3Rva2VuRXhwaXJlc0luIH0gZnJvbSAnLi9pZF90b2tlbl9yZXN1bHQnO1xuXG4vKipcbiAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJlZm9yZSB0aGUgb2ZmaWNpYWwgZXhwaXJhdGlvbiB0aW1lIG9mIGEgdG9rZW5cbiAqIHRvIHJlZnJlc2ggdGhhdCB0b2tlbiwgdG8gcHJvdmlkZSBhIGJ1ZmZlciBmb3IgUlBDcyB0byBjb21wbGV0ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQnVmZmVyIHtcbiAgVE9LRU5fUkVGUkVTSCA9IDMwXzAwMFxufVxuXG4vKipcbiAqIFdlIG5lZWQgdG8gbWFyayB0aGlzIGNsYXNzIGFzIGludGVybmFsIGV4cGxpY2l0bHkgdG8gZXhjbHVkZSBpdCBpbiB0aGUgcHVibGljIHR5cGluZ3MsIGJlY2F1c2VcbiAqIGl0IHJlZmVyZW5jZXMgQXV0aEludGVybmFsIHdoaWNoIGhhcyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgd2l0aCBVc2VySW50ZXJuYWwuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHNUb2tlbk1hbmFnZXIge1xuICByZWZyZXNoVG9rZW46IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGV4cGlyYXRpb25UaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICBnZXQgaXNFeHBpcmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAhdGhpcy5leHBpcmF0aW9uVGltZSB8fFxuICAgICAgRGF0ZS5ub3coKSA+IHRoaXMuZXhwaXJhdGlvblRpbWUgLSBCdWZmZXIuVE9LRU5fUkVGUkVTSFxuICAgICk7XG4gIH1cblxuICB1cGRhdGVGcm9tU2VydmVyUmVzcG9uc2UoXG4gICAgcmVzcG9uc2U6IElkVG9rZW5SZXNwb25zZSB8IEZpbmFsaXplTWZhUmVzcG9uc2VcbiAgKTogdm9pZCB7XG4gICAgX2Fzc2VydChyZXNwb25zZS5pZFRva2VuLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICBfYXNzZXJ0KFxuICAgICAgdHlwZW9mIHJlc3BvbnNlLmlkVG9rZW4gIT09ICd1bmRlZmluZWQnLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiByZXNwb25zZS5yZWZyZXNoVG9rZW4gIT09ICd1bmRlZmluZWQnLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG4gICAgY29uc3QgZXhwaXJlc0luID1cbiAgICAgICdleHBpcmVzSW4nIGluIHJlc3BvbnNlICYmIHR5cGVvZiByZXNwb25zZS5leHBpcmVzSW4gIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gTnVtYmVyKHJlc3BvbnNlLmV4cGlyZXNJbilcbiAgICAgICAgOiBfdG9rZW5FeHBpcmVzSW4ocmVzcG9uc2UuaWRUb2tlbik7XG4gICAgdGhpcy51cGRhdGVUb2tlbnNBbmRFeHBpcmF0aW9uKFxuICAgICAgcmVzcG9uc2UuaWRUb2tlbixcbiAgICAgIHJlc3BvbnNlLnJlZnJlc2hUb2tlbixcbiAgICAgIGV4cGlyZXNJblxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRUb2tlbihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgZm9yY2VSZWZyZXNoID0gZmFsc2VcbiAgKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgX2Fzc2VydChcbiAgICAgICF0aGlzLmFjY2Vzc1Rva2VuIHx8IHRoaXMucmVmcmVzaFRva2VuLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuVE9LRU5fRVhQSVJFRFxuICAgICk7XG5cbiAgICBpZiAoIWZvcmNlUmVmcmVzaCAmJiB0aGlzLmFjY2Vzc1Rva2VuICYmICF0aGlzLmlzRXhwaXJlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzVG9rZW47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVmcmVzaFRva2VuKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlZnJlc2goYXV0aCwgdGhpcy5yZWZyZXNoVG9rZW4hKTtcbiAgICAgIHJldHVybiB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY2xlYXJSZWZyZXNoVG9rZW4oKTogdm9pZCB7XG4gICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZWZyZXNoKGF1dGg6IEF1dGhJbnRlcm5hbCwgb2xkVG9rZW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbiwgZXhwaXJlc0luIH0gPSBhd2FpdCByZXF1ZXN0U3RzVG9rZW4oXG4gICAgICBhdXRoLFxuICAgICAgb2xkVG9rZW5cbiAgICApO1xuICAgIHRoaXMudXBkYXRlVG9rZW5zQW5kRXhwaXJhdGlvbihcbiAgICAgIGFjY2Vzc1Rva2VuLFxuICAgICAgcmVmcmVzaFRva2VuLFxuICAgICAgTnVtYmVyKGV4cGlyZXNJbilcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVUb2tlbnNBbmRFeHBpcmF0aW9uKFxuICAgIGFjY2Vzc1Rva2VuOiBzdHJpbmcsXG4gICAgcmVmcmVzaFRva2VuOiBzdHJpbmcsXG4gICAgZXhwaXJlc0luU2VjOiBudW1iZXJcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5yZWZyZXNoVG9rZW4gPSByZWZyZXNoVG9rZW4gfHwgbnVsbDtcbiAgICB0aGlzLmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW4gfHwgbnVsbDtcbiAgICB0aGlzLmV4cGlyYXRpb25UaW1lID0gRGF0ZS5ub3coKSArIGV4cGlyZXNJblNlYyAqIDEwMDA7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oYXBwTmFtZTogc3RyaW5nLCBvYmplY3Q6IFBlcnNpc3RlZEJsb2IpOiBTdHNUb2tlbk1hbmFnZXIge1xuICAgIGNvbnN0IHsgcmVmcmVzaFRva2VuLCBhY2Nlc3NUb2tlbiwgZXhwaXJhdGlvblRpbWUgfSA9IG9iamVjdDtcblxuICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgU3RzVG9rZW5NYW5hZ2VyKCk7XG4gICAgaWYgKHJlZnJlc2hUb2tlbikge1xuICAgICAgX2Fzc2VydCh0eXBlb2YgcmVmcmVzaFRva2VuID09PSAnc3RyaW5nJywgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUiwge1xuICAgICAgICBhcHBOYW1lXG4gICAgICB9KTtcbiAgICAgIG1hbmFnZXIucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xuICAgIH1cbiAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgIF9hc3NlcnQodHlwZW9mIGFjY2Vzc1Rva2VuID09PSAnc3RyaW5nJywgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUiwge1xuICAgICAgICBhcHBOYW1lXG4gICAgICB9KTtcbiAgICAgIG1hbmFnZXIuYWNjZXNzVG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICB9XG4gICAgaWYgKGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICBfYXNzZXJ0KFxuICAgICAgICB0eXBlb2YgZXhwaXJhdGlvblRpbWUgPT09ICdudW1iZXInLFxuICAgICAgICBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SLFxuICAgICAgICB7XG4gICAgICAgICAgYXBwTmFtZVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgbWFuYWdlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgIH1cbiAgICByZXR1cm4gbWFuYWdlcjtcbiAgfVxuXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICByZWZyZXNoVG9rZW46IHRoaXMucmVmcmVzaFRva2VuLFxuICAgICAgYWNjZXNzVG9rZW46IHRoaXMuYWNjZXNzVG9rZW4sXG4gICAgICBleHBpcmF0aW9uVGltZTogdGhpcy5leHBpcmF0aW9uVGltZVxuICAgIH07XG4gIH1cblxuICBfYXNzaWduKHN0c1Rva2VuTWFuYWdlcjogU3RzVG9rZW5NYW5hZ2VyKTogdm9pZCB7XG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHN0c1Rva2VuTWFuYWdlci5hY2Nlc3NUb2tlbjtcbiAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IHN0c1Rva2VuTWFuYWdlci5yZWZyZXNoVG9rZW47XG4gICAgdGhpcy5leHBpcmF0aW9uVGltZSA9IHN0c1Rva2VuTWFuYWdlci5leHBpcmF0aW9uVGltZTtcbiAgfVxuXG4gIF9jbG9uZSgpOiBTdHNUb2tlbk1hbmFnZXIge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBTdHNUb2tlbk1hbmFnZXIoKSwgdGhpcy50b0pTT04oKSk7XG4gIH1cblxuICBfcGVyZm9ybVJlZnJlc2goKTogbmV2ZXIge1xuICAgIHJldHVybiBkZWJ1Z0ZhaWwoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSWRUb2tlblJlc3VsdCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBOZXh0Rm4gfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7XG4gIEFQSVVzZXJJbmZvLFxuICBkZWxldGVBY2NvdW50XG59IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvYWNjb3VudCc7XG5pbXBvcnQgeyBGaW5hbGl6ZU1mYVJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7XG4gIE11dGFibGVVc2VySW5mbyxcbiAgVXNlckludGVybmFsLFxuICBVc2VyUGFyYW1ldGVyc1xufSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgUGVyc2lzdGVkQmxvYiB9IGZyb20gJy4uL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBnZXRJZFRva2VuUmVzdWx0IH0gZnJvbSAnLi9pZF90b2tlbl9yZXN1bHQnO1xuaW1wb3J0IHsgX2xvZ291dElmSW52YWxpZGF0ZWQgfSBmcm9tICcuL2ludmFsaWRhdGlvbic7XG5pbXBvcnQgeyBQcm9hY3RpdmVSZWZyZXNoIH0gZnJvbSAnLi9wcm9hY3RpdmVfcmVmcmVzaCc7XG5pbXBvcnQgeyBfcmVsb2FkV2l0aG91dFNhdmluZywgcmVsb2FkIH0gZnJvbSAnLi9yZWxvYWQnO1xuaW1wb3J0IHsgU3RzVG9rZW5NYW5hZ2VyIH0gZnJvbSAnLi90b2tlbl9tYW5hZ2VyJztcbmltcG9ydCB7IFVzZXJNZXRhZGF0YSB9IGZyb20gJy4vdXNlcl9tZXRhZGF0YSc7XG5pbXBvcnQgeyBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG5mdW5jdGlvbiBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChcbiAgYXNzZXJ0aW9uOiB1bmtub3duLFxuICBhcHBOYW1lOiBzdHJpbmdcbik6IGFzc2VydHMgYXNzZXJ0aW9uIGlzIHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIF9hc3NlcnQoXG4gICAgdHlwZW9mIGFzc2VydGlvbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFzc2VydGlvbiA9PT0gJ3VuZGVmaW5lZCcsXG4gICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUixcbiAgICB7IGFwcE5hbWUgfVxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgVXNlckltcGwgaW1wbGVtZW50cyBVc2VySW50ZXJuYWwge1xuICAvLyBGb3IgdGhlIHVzZXIgb2JqZWN0LCBwcm92aWRlciBpcyBhbHdheXMgRmlyZWJhc2UuXG4gIHJlYWRvbmx5IHByb3ZpZGVySWQgPSBQcm92aWRlcklkLkZJUkVCQVNFO1xuICBzdHNUb2tlbk1hbmFnZXI6IFN0c1Rva2VuTWFuYWdlcjtcbiAgLy8gTGFzdCBrbm93biBhY2Nlc3NUb2tlbiBzbyB3ZSBrbm93IHdoZW4gaXQgY2hhbmdlc1xuICBwcml2YXRlIGFjY2Vzc1Rva2VuOiBzdHJpbmcgfCBudWxsO1xuXG4gIHVpZDogc3RyaW5nO1xuICBhdXRoOiBBdXRoSW50ZXJuYWw7XG4gIGVtYWlsVmVyaWZpZWQgPSBmYWxzZTtcbiAgaXNBbm9ueW1vdXMgPSBmYWxzZTtcbiAgdGVuYW50SWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICByZWFkb25seSBtZXRhZGF0YTogVXNlck1ldGFkYXRhO1xuICBwcm92aWRlckRhdGE6IE11dGFibGVVc2VySW5mb1tdID0gW107XG5cbiAgLy8gT3B0aW9uYWwgZmllbGRzIGZyb20gVXNlckluZm9cbiAgZGlzcGxheU5hbWU6IHN0cmluZyB8IG51bGw7XG4gIGVtYWlsOiBzdHJpbmcgfCBudWxsO1xuICBwaG9uZU51bWJlcjogc3RyaW5nIHwgbnVsbDtcbiAgcGhvdG9VUkw6IHN0cmluZyB8IG51bGw7XG5cbiAgX3JlZGlyZWN0RXZlbnRJZD86IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBwcm9hY3RpdmVSZWZyZXNoID0gbmV3IFByb2FjdGl2ZVJlZnJlc2godGhpcyk7XG5cbiAgY29uc3RydWN0b3IoeyB1aWQsIGF1dGgsIHN0c1Rva2VuTWFuYWdlciwgLi4ub3B0IH06IFVzZXJQYXJhbWV0ZXJzKSB7XG4gICAgdGhpcy51aWQgPSB1aWQ7XG4gICAgdGhpcy5hdXRoID0gYXV0aDtcbiAgICB0aGlzLnN0c1Rva2VuTWFuYWdlciA9IHN0c1Rva2VuTWFuYWdlcjtcbiAgICB0aGlzLmFjY2Vzc1Rva2VuID0gc3RzVG9rZW5NYW5hZ2VyLmFjY2Vzc1Rva2VuO1xuICAgIHRoaXMuZGlzcGxheU5hbWUgPSBvcHQuZGlzcGxheU5hbWUgfHwgbnVsbDtcbiAgICB0aGlzLmVtYWlsID0gb3B0LmVtYWlsIHx8IG51bGw7XG4gICAgdGhpcy5lbWFpbFZlcmlmaWVkID0gb3B0LmVtYWlsVmVyaWZpZWQgfHwgZmFsc2U7XG4gICAgdGhpcy5waG9uZU51bWJlciA9IG9wdC5waG9uZU51bWJlciB8fCBudWxsO1xuICAgIHRoaXMucGhvdG9VUkwgPSBvcHQucGhvdG9VUkwgfHwgbnVsbDtcbiAgICB0aGlzLmlzQW5vbnltb3VzID0gb3B0LmlzQW5vbnltb3VzIHx8IGZhbHNlO1xuICAgIHRoaXMudGVuYW50SWQgPSBvcHQudGVuYW50SWQgfHwgbnVsbDtcbiAgICB0aGlzLm1ldGFkYXRhID0gbmV3IFVzZXJNZXRhZGF0YShcbiAgICAgIG9wdC5jcmVhdGVkQXQgfHwgdW5kZWZpbmVkLFxuICAgICAgb3B0Lmxhc3RMb2dpbkF0IHx8IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRJZFRva2VuKGZvcmNlUmVmcmVzaD86IGJvb2xlYW4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5zdHNUb2tlbk1hbmFnZXIuZ2V0VG9rZW4odGhpcy5hdXRoLCBmb3JjZVJlZnJlc2gpXG4gICAgKTtcbiAgICBfYXNzZXJ0KGFjY2Vzc1Rva2VuLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuXG4gICAgaWYgKHRoaXMuYWNjZXNzVG9rZW4gIT09IGFjY2Vzc1Rva2VuKSB7XG4gICAgICB0aGlzLmFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW47XG4gICAgICBhd2FpdCB0aGlzLmF1dGguX3BlcnNpc3RVc2VySWZDdXJyZW50KHRoaXMpO1xuICAgICAgdGhpcy5hdXRoLl9ub3RpZnlMaXN0ZW5lcnNJZkN1cnJlbnQodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY2Vzc1Rva2VuO1xuICB9XG5cbiAgZ2V0SWRUb2tlblJlc3VsdChmb3JjZVJlZnJlc2g/OiBib29sZWFuKTogUHJvbWlzZTxJZFRva2VuUmVzdWx0PiB7XG4gICAgcmV0dXJuIGdldElkVG9rZW5SZXN1bHQodGhpcywgZm9yY2VSZWZyZXNoKTtcbiAgfVxuXG4gIHJlbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcmVsb2FkKHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWxvYWRVc2VySW5mbzogQVBJVXNlckluZm8gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWxvYWRMaXN0ZW5lcjogTmV4dEZuPEFQSVVzZXJJbmZvPiB8IG51bGwgPSBudWxsO1xuXG4gIF9hc3NpZ24odXNlcjogVXNlckludGVybmFsKTogdm9pZCB7XG4gICAgaWYgKHRoaXMgPT09IHVzZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2Fzc2VydCh0aGlzLnVpZCA9PT0gdXNlci51aWQsIHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgdGhpcy5kaXNwbGF5TmFtZSA9IHVzZXIuZGlzcGxheU5hbWU7XG4gICAgdGhpcy5waG90b1VSTCA9IHVzZXIucGhvdG9VUkw7XG4gICAgdGhpcy5lbWFpbCA9IHVzZXIuZW1haWw7XG4gICAgdGhpcy5lbWFpbFZlcmlmaWVkID0gdXNlci5lbWFpbFZlcmlmaWVkO1xuICAgIHRoaXMucGhvbmVOdW1iZXIgPSB1c2VyLnBob25lTnVtYmVyO1xuICAgIHRoaXMuaXNBbm9ueW1vdXMgPSB1c2VyLmlzQW5vbnltb3VzO1xuICAgIHRoaXMudGVuYW50SWQgPSB1c2VyLnRlbmFudElkO1xuICAgIHRoaXMucHJvdmlkZXJEYXRhID0gdXNlci5wcm92aWRlckRhdGEubWFwKHVzZXJJbmZvID0+ICh7IC4uLnVzZXJJbmZvIH0pKTtcbiAgICB0aGlzLm1ldGFkYXRhLl9jb3B5KHVzZXIubWV0YWRhdGEpO1xuICAgIHRoaXMuc3RzVG9rZW5NYW5hZ2VyLl9hc3NpZ24odXNlci5zdHNUb2tlbk1hbmFnZXIpO1xuICB9XG5cbiAgX2Nsb25lKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFVzZXJJbnRlcm5hbCB7XG4gICAgcmV0dXJuIG5ldyBVc2VySW1wbCh7XG4gICAgICAuLi50aGlzLFxuICAgICAgYXV0aCxcbiAgICAgIHN0c1Rva2VuTWFuYWdlcjogdGhpcy5zdHNUb2tlbk1hbmFnZXIuX2Nsb25lKClcbiAgICB9KTtcbiAgfVxuXG4gIF9vblJlbG9hZChjYWxsYmFjazogTmV4dEZuPEFQSVVzZXJJbmZvPik6IHZvaWQge1xuICAgIC8vIFRoZXJlIHNob3VsZCBvbmx5IGV2ZXIgYmUgb25lIGxpc3RlbmVyLCBhbmQgdGhhdCBpcyBhIHNpbmdsZSBpbnN0YW5jZSBvZiBNdWx0aUZhY3RvclVzZXJcbiAgICBfYXNzZXJ0KCF0aGlzLnJlbG9hZExpc3RlbmVyLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHRoaXMucmVsb2FkTGlzdGVuZXIgPSBjYWxsYmFjaztcbiAgICBpZiAodGhpcy5yZWxvYWRVc2VySW5mbykge1xuICAgICAgdGhpcy5fbm90aWZ5UmVsb2FkTGlzdGVuZXIodGhpcy5yZWxvYWRVc2VySW5mbyk7XG4gICAgICB0aGlzLnJlbG9hZFVzZXJJbmZvID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBfbm90aWZ5UmVsb2FkTGlzdGVuZXIodXNlckluZm86IEFQSVVzZXJJbmZvKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucmVsb2FkTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucmVsb2FkTGlzdGVuZXIodXNlckluZm8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBubyBsaXN0ZW5lciBpcyBzdWJzY3JpYmVkIHlldCwgc2F2ZSB0aGUgcmVzdWx0IHNvIGl0J3MgYXZhaWxhYmxlIHdoZW4gdGhleSBkbyBzdWJzY3JpYmVcbiAgICAgIHRoaXMucmVsb2FkVXNlckluZm8gPSB1c2VySW5mbztcbiAgICB9XG4gIH1cblxuICBfc3RhcnRQcm9hY3RpdmVSZWZyZXNoKCk6IHZvaWQge1xuICAgIHRoaXMucHJvYWN0aXZlUmVmcmVzaC5fc3RhcnQoKTtcbiAgfVxuXG4gIF9zdG9wUHJvYWN0aXZlUmVmcmVzaCgpOiB2b2lkIHtcbiAgICB0aGlzLnByb2FjdGl2ZVJlZnJlc2guX3N0b3AoKTtcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVUb2tlbnNJZk5lY2Vzc2FyeShcbiAgICByZXNwb25zZTogSWRUb2tlblJlc3BvbnNlIHwgRmluYWxpemVNZmFSZXNwb25zZSxcbiAgICByZWxvYWQgPSBmYWxzZVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBsZXQgdG9rZW5zUmVmcmVzaGVkID0gZmFsc2U7XG4gICAgaWYgKFxuICAgICAgcmVzcG9uc2UuaWRUb2tlbiAmJlxuICAgICAgcmVzcG9uc2UuaWRUb2tlbiAhPT0gdGhpcy5zdHNUb2tlbk1hbmFnZXIuYWNjZXNzVG9rZW5cbiAgICApIHtcbiAgICAgIHRoaXMuc3RzVG9rZW5NYW5hZ2VyLnVwZGF0ZUZyb21TZXJ2ZXJSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICB0b2tlbnNSZWZyZXNoZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChyZWxvYWQpIHtcbiAgICAgIGF3YWl0IF9yZWxvYWRXaXRob3V0U2F2aW5nKHRoaXMpO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuYXV0aC5fcGVyc2lzdFVzZXJJZkN1cnJlbnQodGhpcyk7XG4gICAgaWYgKHRva2Vuc1JlZnJlc2hlZCkge1xuICAgICAgdGhpcy5hdXRoLl9ub3RpZnlMaXN0ZW5lcnNJZkN1cnJlbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB0aGlzLmdldElkVG9rZW4oKTtcbiAgICBhd2FpdCBfbG9nb3V0SWZJbnZhbGlkYXRlZCh0aGlzLCBkZWxldGVBY2NvdW50KHRoaXMuYXV0aCwgeyBpZFRva2VuIH0pKTtcbiAgICB0aGlzLnN0c1Rva2VuTWFuYWdlci5jbGVhclJlZnJlc2hUb2tlbigpO1xuXG4gICAgLy8gVE9ETzogRGV0ZXJtaW5lIGlmIGNhbmNlbGxhYmxlLXByb21pc2VzIGFyZSBuZWNlc3NhcnkgdG8gdXNlIGluIHRoaXMgY2xhc3Mgc28gdGhhdCBkZWxldGUoKVxuICAgIC8vICAgICAgIGNhbmNlbHMgcGVuZGluZyBhY3Rpb25zLi4uXG5cbiAgICByZXR1cm4gdGhpcy5hdXRoLnNpZ25PdXQoKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBQZXJzaXN0ZWRCbG9iIHtcbiAgICByZXR1cm4ge1xuICAgICAgdWlkOiB0aGlzLnVpZCxcbiAgICAgIGVtYWlsOiB0aGlzLmVtYWlsIHx8IHVuZGVmaW5lZCxcbiAgICAgIGVtYWlsVmVyaWZpZWQ6IHRoaXMuZW1haWxWZXJpZmllZCxcbiAgICAgIGRpc3BsYXlOYW1lOiB0aGlzLmRpc3BsYXlOYW1lIHx8IHVuZGVmaW5lZCxcbiAgICAgIGlzQW5vbnltb3VzOiB0aGlzLmlzQW5vbnltb3VzLFxuICAgICAgcGhvdG9VUkw6IHRoaXMucGhvdG9VUkwgfHwgdW5kZWZpbmVkLFxuICAgICAgcGhvbmVOdW1iZXI6IHRoaXMucGhvbmVOdW1iZXIgfHwgdW5kZWZpbmVkLFxuICAgICAgdGVuYW50SWQ6IHRoaXMudGVuYW50SWQgfHwgdW5kZWZpbmVkLFxuICAgICAgcHJvdmlkZXJEYXRhOiB0aGlzLnByb3ZpZGVyRGF0YS5tYXAodXNlckluZm8gPT4gKHsgLi4udXNlckluZm8gfSkpLFxuICAgICAgc3RzVG9rZW5NYW5hZ2VyOiB0aGlzLnN0c1Rva2VuTWFuYWdlci50b0pTT04oKSxcbiAgICAgIC8vIFJlZGlyZWN0IGV2ZW50IElEIG11c3QgYmUgbWFpbnRhaW5lZCBpbiBjYXNlIHRoZXJlIGlzIGEgcGVuZGluZ1xuICAgICAgLy8gcmVkaXJlY3QgZXZlbnQuXG4gICAgICBfcmVkaXJlY3RFdmVudElkOiB0aGlzLl9yZWRpcmVjdEV2ZW50SWQsXG4gICAgICAuLi50aGlzLm1ldGFkYXRhLnRvSlNPTigpLFxuXG4gICAgICAvLyBSZXF1aXJlZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBsZWdhY3kgU0RLIChnby9maXJlYmFzZS1hdXRoLXNkay1wZXJzaXN0ZW5jZS1wYXJzaW5nKTpcbiAgICAgIGFwaUtleTogdGhpcy5hdXRoLmNvbmZpZy5hcGlLZXksXG4gICAgICBhcHBOYW1lOiB0aGlzLmF1dGgubmFtZVxuICAgICAgLy8gTWlzc2luZyBhdXRoRG9tYWluIHdpbGwgYmUgdG9sZXJhdGVkIGJ5IHRoZSBsZWdhY3kgU0RLLlxuICAgICAgLy8gc3RzVG9rZW5NYW5hZ2VyLmFwaUtleSBpc24ndCBhY3R1YWxseSByZXF1aXJlZCAoZGVzcGl0ZSB0aGUgbGVnYWN5IFNESyBwZXJzaXN0aW5nIGl0KS5cbiAgICB9O1xuICB9XG5cbiAgZ2V0IHJlZnJlc2hUb2tlbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnN0c1Rva2VuTWFuYWdlci5yZWZyZXNoVG9rZW4gfHwgJyc7XG4gIH1cblxuICBzdGF0aWMgX2Zyb21KU09OKGF1dGg6IEF1dGhJbnRlcm5hbCwgb2JqZWN0OiBQZXJzaXN0ZWRCbG9iKTogVXNlckludGVybmFsIHtcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IG9iamVjdC5kaXNwbGF5TmFtZSA/PyB1bmRlZmluZWQ7XG4gICAgY29uc3QgZW1haWwgPSBvYmplY3QuZW1haWwgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHBob25lTnVtYmVyID0gb2JqZWN0LnBob25lTnVtYmVyID8/IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwaG90b1VSTCA9IG9iamVjdC5waG90b1VSTCA/PyB1bmRlZmluZWQ7XG4gICAgY29uc3QgdGVuYW50SWQgPSBvYmplY3QudGVuYW50SWQgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IF9yZWRpcmVjdEV2ZW50SWQgPSBvYmplY3QuX3JlZGlyZWN0RXZlbnRJZCA/PyB1bmRlZmluZWQ7XG4gICAgY29uc3QgY3JlYXRlZEF0ID0gb2JqZWN0LmNyZWF0ZWRBdCA/PyB1bmRlZmluZWQ7XG4gICAgY29uc3QgbGFzdExvZ2luQXQgPSBvYmplY3QubGFzdExvZ2luQXQgPz8gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHtcbiAgICAgIHVpZCxcbiAgICAgIGVtYWlsVmVyaWZpZWQsXG4gICAgICBpc0Fub255bW91cyxcbiAgICAgIHByb3ZpZGVyRGF0YSxcbiAgICAgIHN0c1Rva2VuTWFuYWdlcjogcGxhaW5PYmplY3RUb2tlbk1hbmFnZXJcbiAgICB9ID0gb2JqZWN0O1xuXG4gICAgX2Fzc2VydCh1aWQgJiYgcGxhaW5PYmplY3RUb2tlbk1hbmFnZXIsIGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuXG4gICAgY29uc3Qgc3RzVG9rZW5NYW5hZ2VyID0gU3RzVG9rZW5NYW5hZ2VyLmZyb21KU09OKFxuICAgICAgdGhpcy5uYW1lLFxuICAgICAgcGxhaW5PYmplY3RUb2tlbk1hbmFnZXIgYXMgUGVyc2lzdGVkQmxvYlxuICAgICk7XG5cbiAgICBfYXNzZXJ0KHR5cGVvZiB1aWQgPT09ICdzdHJpbmcnLCBhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChkaXNwbGF5TmFtZSwgYXV0aC5uYW1lKTtcbiAgICBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChlbWFpbCwgYXV0aC5uYW1lKTtcbiAgICBfYXNzZXJ0KFxuICAgICAgdHlwZW9mIGVtYWlsVmVyaWZpZWQgPT09ICdib29sZWFuJyxcbiAgICAgIGF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SXG4gICAgKTtcbiAgICBfYXNzZXJ0KFxuICAgICAgdHlwZW9mIGlzQW5vbnltb3VzID09PSAnYm9vbGVhbicsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQocGhvbmVOdW1iZXIsIGF1dGgubmFtZSk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQocGhvdG9VUkwsIGF1dGgubmFtZSk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQodGVuYW50SWQsIGF1dGgubmFtZSk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQoX3JlZGlyZWN0RXZlbnRJZCwgYXV0aC5uYW1lKTtcbiAgICBhc3NlcnRTdHJpbmdPclVuZGVmaW5lZChjcmVhdGVkQXQsIGF1dGgubmFtZSk7XG4gICAgYXNzZXJ0U3RyaW5nT3JVbmRlZmluZWQobGFzdExvZ2luQXQsIGF1dGgubmFtZSk7XG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VySW1wbCh7XG4gICAgICB1aWQsXG4gICAgICBhdXRoLFxuICAgICAgZW1haWwsXG4gICAgICBlbWFpbFZlcmlmaWVkLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICBpc0Fub255bW91cyxcbiAgICAgIHBob3RvVVJMLFxuICAgICAgcGhvbmVOdW1iZXIsXG4gICAgICB0ZW5hbnRJZCxcbiAgICAgIHN0c1Rva2VuTWFuYWdlcixcbiAgICAgIGNyZWF0ZWRBdCxcbiAgICAgIGxhc3RMb2dpbkF0XG4gICAgfSk7XG5cbiAgICBpZiAocHJvdmlkZXJEYXRhICYmIEFycmF5LmlzQXJyYXkocHJvdmlkZXJEYXRhKSkge1xuICAgICAgdXNlci5wcm92aWRlckRhdGEgPSBwcm92aWRlckRhdGEubWFwKHVzZXJJbmZvID0+ICh7IC4uLnVzZXJJbmZvIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoX3JlZGlyZWN0RXZlbnRJZCkge1xuICAgICAgdXNlci5fcmVkaXJlY3RFdmVudElkID0gX3JlZGlyZWN0RXZlbnRJZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdXNlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgVXNlciBmcm9tIGFuIGlkVG9rZW4gc2VydmVyIHJlc3BvbnNlXG4gICAqIEBwYXJhbSBhdXRoXG4gICAqIEBwYXJhbSBpZFRva2VuUmVzcG9uc2VcbiAgICovXG4gIHN0YXRpYyBhc3luYyBfZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgaWRUb2tlblJlc3BvbnNlOiBJZFRva2VuUmVzcG9uc2UsXG4gICAgaXNBbm9ueW1vdXM6IGJvb2xlYW4gPSBmYWxzZVxuICApOiBQcm9taXNlPFVzZXJJbnRlcm5hbD4ge1xuICAgIGNvbnN0IHN0c1Rva2VuTWFuYWdlciA9IG5ldyBTdHNUb2tlbk1hbmFnZXIoKTtcbiAgICBzdHNUb2tlbk1hbmFnZXIudXBkYXRlRnJvbVNlcnZlclJlc3BvbnNlKGlkVG9rZW5SZXNwb25zZSk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBGaXJlYmFzZSBBdXRoIHVzZXIuXG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VySW1wbCh7XG4gICAgICB1aWQ6IGlkVG9rZW5SZXNwb25zZS5sb2NhbElkLFxuICAgICAgYXV0aCxcbiAgICAgIHN0c1Rva2VuTWFuYWdlcixcbiAgICAgIGlzQW5vbnltb3VzXG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGVzIHRoZSB1c2VyIGluZm8gYW5kIGRhdGEgYW5kIHJlc29sdmVzIHdpdGggYSB1c2VyIGluc3RhbmNlLlxuICAgIGF3YWl0IF9yZWxvYWRXaXRob3V0U2F2aW5nKHVzZXIpO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGVyc2lzdGVuY2UgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQge1xuICBQZXJzaXN0ZW5jZUludGVybmFsLFxuICBQZXJzaXN0ZW5jZVR5cGUsXG4gIFBlcnNpc3RlbmNlVmFsdWUsXG4gIFN0b3JhZ2VFdmVudExpc3RlbmVyXG59IGZyb20gJy4uL3BlcnNpc3RlbmNlJztcblxuZXhwb3J0IGNsYXNzIEluTWVtb3J5UGVyc2lzdGVuY2UgaW1wbGVtZW50cyBQZXJzaXN0ZW5jZUludGVybmFsIHtcbiAgc3RhdGljIHR5cGU6ICdOT05FJyA9ICdOT05FJztcbiAgcmVhZG9ubHkgdHlwZSA9IFBlcnNpc3RlbmNlVHlwZS5OT05FO1xuICBzdG9yYWdlOiBSZWNvcmQ8c3RyaW5nLCBQZXJzaXN0ZW5jZVZhbHVlPiA9IHt9O1xuXG4gIGFzeW5jIF9pc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIF9zZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5zdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGFzeW5jIF9nZXQ8VCBleHRlbmRzIFBlcnNpc3RlbmNlVmFsdWU+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5zdG9yYWdlW2tleV07XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBudWxsIDogKHZhbHVlIGFzIFQpO1xuICB9XG5cbiAgYXN5bmMgX3JlbW92ZShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGRlbGV0ZSB0aGlzLnN0b3JhZ2Vba2V5XTtcbiAgfVxuXG4gIF9hZGRMaXN0ZW5lcihfa2V5OiBzdHJpbmcsIF9saXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICAvLyBMaXN0ZW5lcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIGluLW1lbW9yeSBzdG9yYWdlIHNpbmNlIGl0IGNhbm5vdCBiZSBzaGFyZWQgYWNyb3NzIHdpbmRvd3Mvd29ya2Vyc1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9yZW1vdmVMaXN0ZW5lcihfa2V5OiBzdHJpbmcsIF9saXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICAvLyBMaXN0ZW5lcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIGluLW1lbW9yeSBzdG9yYWdlIHNpbmNlIGl0IGNhbm5vdCBiZSBzaGFyZWQgYWNyb3NzIHdpbmRvd3Mvd29ya2Vyc1xuICAgIHJldHVybjtcbiAgfVxufVxuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBQZXJzaXN0ZW5jZX0gb2YgdHlwZSAnTk9ORScuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgaW5NZW1vcnlQZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2UgPSBJbk1lbW9yeVBlcnNpc3RlbmNlO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFwaUtleSwgQXBwTmFtZSwgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IFBlcnNpc3RlZEJsb2IsIFBlcnNpc3RlbmNlSW50ZXJuYWwgfSBmcm9tICcuLi9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBVc2VySW1wbCB9IGZyb20gJy4uL3VzZXIvdXNlcl9pbXBsJztcbmltcG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uL3V0aWwvaW5zdGFudGlhdG9yJztcbmltcG9ydCB7IGluTWVtb3J5UGVyc2lzdGVuY2UgfSBmcm9tICcuL2luX21lbW9yeSc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIEtleU5hbWUge1xuICBBVVRIX1VTRVIgPSAnYXV0aFVzZXInLFxuICBBVVRIX0VWRU5UID0gJ2F1dGhFdmVudCcsXG4gIFJFRElSRUNUX1VTRVIgPSAncmVkaXJlY3RVc2VyJyxcbiAgUEVSU0lTVEVOQ0VfVVNFUiA9ICdwZXJzaXN0ZW5jZSdcbn1cbmV4cG9ydCBjb25zdCBlbnVtIE5hbWVzcGFjZSB7XG4gIFBFUlNJU1RFTkNFID0gJ2ZpcmViYXNlJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3BlcnNpc3RlbmNlS2V5TmFtZShcbiAga2V5OiBzdHJpbmcsXG4gIGFwaUtleTogQXBpS2V5LFxuICBhcHBOYW1lOiBBcHBOYW1lXG4pOiBzdHJpbmcge1xuICByZXR1cm4gYCR7TmFtZXNwYWNlLlBFUlNJU1RFTkNFfToke2tleX06JHthcGlLZXl9OiR7YXBwTmFtZX1gO1xufVxuXG5leHBvcnQgY2xhc3MgUGVyc2lzdGVuY2VVc2VyTWFuYWdlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZnVsbFVzZXJLZXk6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBmdWxsUGVyc2lzdGVuY2VLZXk6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBib3VuZEV2ZW50SGFuZGxlcjogKCkgPT4gdm9pZDtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2VJbnRlcm5hbCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVzZXJLZXk6IHN0cmluZ1xuICApIHtcbiAgICBjb25zdCB7IGNvbmZpZywgbmFtZSB9ID0gdGhpcy5hdXRoO1xuICAgIHRoaXMuZnVsbFVzZXJLZXkgPSBfcGVyc2lzdGVuY2VLZXlOYW1lKHRoaXMudXNlcktleSwgY29uZmlnLmFwaUtleSwgbmFtZSk7XG4gICAgdGhpcy5mdWxsUGVyc2lzdGVuY2VLZXkgPSBfcGVyc2lzdGVuY2VLZXlOYW1lKFxuICAgICAgS2V5TmFtZS5QRVJTSVNURU5DRV9VU0VSLFxuICAgICAgY29uZmlnLmFwaUtleSxcbiAgICAgIG5hbWVcbiAgICApO1xuICAgIHRoaXMuYm91bmRFdmVudEhhbmRsZXIgPSBhdXRoLl9vblN0b3JhZ2VFdmVudC5iaW5kKGF1dGgpO1xuICAgIHRoaXMucGVyc2lzdGVuY2UuX2FkZExpc3RlbmVyKHRoaXMuZnVsbFVzZXJLZXksIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xuICB9XG5cbiAgc2V0Q3VycmVudFVzZXIodXNlcjogVXNlckludGVybmFsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuX3NldCh0aGlzLmZ1bGxVc2VyS2V5LCB1c2VyLnRvSlNPTigpKTtcbiAgfVxuXG4gIGFzeW5jIGdldEN1cnJlbnRVc2VyKCk6IFByb21pc2U8VXNlckludGVybmFsIHwgbnVsbD4ge1xuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCB0aGlzLnBlcnNpc3RlbmNlLl9nZXQ8UGVyc2lzdGVkQmxvYj4odGhpcy5mdWxsVXNlcktleSk7XG4gICAgcmV0dXJuIGJsb2IgPyBVc2VySW1wbC5fZnJvbUpTT04odGhpcy5hdXRoLCBibG9iKSA6IG51bGw7XG4gIH1cblxuICByZW1vdmVDdXJyZW50VXNlcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wZXJzaXN0ZW5jZS5fcmVtb3ZlKHRoaXMuZnVsbFVzZXJLZXkpO1xuICB9XG5cbiAgc2F2ZVBlcnNpc3RlbmNlRm9yUmVkaXJlY3QoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMucGVyc2lzdGVuY2UuX3NldChcbiAgICAgIHRoaXMuZnVsbFBlcnNpc3RlbmNlS2V5LFxuICAgICAgdGhpcy5wZXJzaXN0ZW5jZS50eXBlXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHNldFBlcnNpc3RlbmNlKG5ld1BlcnNpc3RlbmNlOiBQZXJzaXN0ZW5jZUludGVybmFsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMucGVyc2lzdGVuY2UgPT09IG5ld1BlcnNpc3RlbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudFVzZXIgPSBhd2FpdCB0aGlzLmdldEN1cnJlbnRVc2VyKCk7XG4gICAgYXdhaXQgdGhpcy5yZW1vdmVDdXJyZW50VXNlcigpO1xuXG4gICAgdGhpcy5wZXJzaXN0ZW5jZSA9IG5ld1BlcnNpc3RlbmNlO1xuXG4gICAgaWYgKGN1cnJlbnRVc2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRDdXJyZW50VXNlcihjdXJyZW50VXNlcik7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlKCk6IHZvaWQge1xuICAgIHRoaXMucGVyc2lzdGVuY2UuX3JlbW92ZUxpc3RlbmVyKHRoaXMuZnVsbFVzZXJLZXksIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZShcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgcGVyc2lzdGVuY2VIaWVyYXJjaHk6IFBlcnNpc3RlbmNlSW50ZXJuYWxbXSxcbiAgICB1c2VyS2V5ID0gS2V5TmFtZS5BVVRIX1VTRVJcbiAgKTogUHJvbWlzZTxQZXJzaXN0ZW5jZVVzZXJNYW5hZ2VyPiB7XG4gICAgaWYgKCFwZXJzaXN0ZW5jZUhpZXJhcmNoeS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VVc2VyTWFuYWdlcihcbiAgICAgICAgX2dldEluc3RhbmNlKGluTWVtb3J5UGVyc2lzdGVuY2UpLFxuICAgICAgICBhdXRoLFxuICAgICAgICB1c2VyS2V5XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEVsaW1pbmF0ZSBhbnkgcGVyc2lzdGVuY2VzIHRoYXQgYXJlIG5vdCBhdmFpbGFibGVcbiAgICBjb25zdCBhdmFpbGFibGVQZXJzaXN0ZW5jZXMgPSAoXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgcGVyc2lzdGVuY2VIaWVyYXJjaHkubWFwKGFzeW5jIHBlcnNpc3RlbmNlID0+IHtcbiAgICAgICAgICBpZiAoYXdhaXQgcGVyc2lzdGVuY2UuX2lzQXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwZXJzaXN0ZW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICApLmZpbHRlcihwZXJzaXN0ZW5jZSA9PiBwZXJzaXN0ZW5jZSkgYXMgUGVyc2lzdGVuY2VJbnRlcm5hbFtdO1xuXG4gICAgLy8gRmFsbCBiYWNrIHRvIHRoZSBmaXJzdCBwZXJzaXN0ZW5jZSBsaXN0ZWQsIG9yIGluIG1lbW9yeSBpZiBub25lIGF2YWlsYWJsZVxuICAgIGxldCBzZWxlY3RlZFBlcnNpc3RlbmNlID1cbiAgICAgIGF2YWlsYWJsZVBlcnNpc3RlbmNlc1swXSB8fFxuICAgICAgX2dldEluc3RhbmNlPFBlcnNpc3RlbmNlSW50ZXJuYWw+KGluTWVtb3J5UGVyc2lzdGVuY2UpO1xuXG4gICAgY29uc3Qga2V5ID0gX3BlcnNpc3RlbmNlS2V5TmFtZSh1c2VyS2V5LCBhdXRoLmNvbmZpZy5hcGlLZXksIGF1dGgubmFtZSk7XG5cbiAgICAvLyBQdWxsIG91dCB0aGUgZXhpc3RpbmcgdXNlciwgc2V0dGluZyB0aGUgY2hvc2VuIHBlcnNpc3RlbmNlIHRvIHRoYXRcbiAgICAvLyBwZXJzaXN0ZW5jZSBpZiB0aGUgdXNlciBleGlzdHMuXG4gICAgbGV0IHVzZXJUb01pZ3JhdGU6IFVzZXJJbnRlcm5hbCB8IG51bGwgPSBudWxsO1xuICAgIC8vIE5vdGUsIGhlcmUgd2UgY2hlY2sgZm9yIGEgdXNlciBpbiBfYWxsXyBwZXJzaXN0ZW5jZXMsIG5vdCBqdXN0IHRoZVxuICAgIC8vIG9uZXMgZGVlbWVkIGF2YWlsYWJsZS4gSWYgd2UgY2FuIG1pZ3JhdGUgYSB1c2VyIG91dCBvZiBhIGJyb2tlblxuICAgIC8vIHBlcnNpc3RlbmNlLCB3ZSB3aWxsIChidXQgb25seSBpZiB0aGF0IHBlcnNpc3RlbmNlIHN1cHBvcnRzIG1pZ3JhdGlvbikuXG4gICAgZm9yIChjb25zdCBwZXJzaXN0ZW5jZSBvZiBwZXJzaXN0ZW5jZUhpZXJhcmNoeSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHBlcnNpc3RlbmNlLl9nZXQ8UGVyc2lzdGVkQmxvYj4oa2V5KTtcbiAgICAgICAgaWYgKGJsb2IpIHtcbiAgICAgICAgICBjb25zdCB1c2VyID0gVXNlckltcGwuX2Zyb21KU09OKGF1dGgsIGJsb2IpOyAvLyB0aHJvd3MgZm9yIHVucGFyc2FibGUgYmxvYiAod3JvbmcgZm9ybWF0KVxuICAgICAgICAgIGlmIChwZXJzaXN0ZW5jZSAhPT0gc2VsZWN0ZWRQZXJzaXN0ZW5jZSkge1xuICAgICAgICAgICAgdXNlclRvTWlncmF0ZSA9IHVzZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbGVjdGVkUGVyc2lzdGVuY2UgPSBwZXJzaXN0ZW5jZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCB7fVxuICAgIH1cblxuICAgIC8vIElmIHdlIGZpbmQgdGhlIHVzZXIgaW4gYSBwZXJzaXN0ZW5jZSB0aGF0IGRvZXMgc3VwcG9ydCBtaWdyYXRpb24sIHVzZVxuICAgIC8vIHRoYXQgbWlncmF0aW9uIHBhdGggKG9mIG9ubHkgcGVyc2lzdGVuY2VzIHRoYXQgc3VwcG9ydCBtaWdyYXRpb24pXG4gICAgY29uc3QgbWlncmF0aW9uSGllcmFyY2h5ID0gYXZhaWxhYmxlUGVyc2lzdGVuY2VzLmZpbHRlcihcbiAgICAgIHAgPT4gcC5fc2hvdWxkQWxsb3dNaWdyYXRpb25cbiAgICApO1xuXG4gICAgLy8gSWYgdGhlIHBlcnNpc3RlbmNlIGRvZXMgX25vdF8gYWxsb3cgbWlncmF0aW9uLCBqdXN0IGZpbmlzaCBvZmYgaGVyZVxuICAgIGlmIChcbiAgICAgICFzZWxlY3RlZFBlcnNpc3RlbmNlLl9zaG91bGRBbGxvd01pZ3JhdGlvbiB8fFxuICAgICAgIW1pZ3JhdGlvbkhpZXJhcmNoeS5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VVc2VyTWFuYWdlcihzZWxlY3RlZFBlcnNpc3RlbmNlLCBhdXRoLCB1c2VyS2V5KTtcbiAgICB9XG5cbiAgICBzZWxlY3RlZFBlcnNpc3RlbmNlID0gbWlncmF0aW9uSGllcmFyY2h5WzBdO1xuICAgIGlmICh1c2VyVG9NaWdyYXRlKSB7XG4gICAgICAvLyBUaGlzIG5vcm1hbGx5IHNob3VsZG4ndCB0aHJvdyBzaW5jZSBjaG9zZW5QZXJzaXN0ZW5jZS5pc0F2YWlsYWJsZSgpIGlzIHRydWUsIGJ1dCBpZiBpdCBkb2VzXG4gICAgICAvLyB3ZSdsbCBqdXN0IGxldCBpdCBidWJibGUgdG8gc3VyZmFjZSB0aGUgZXJyb3IuXG4gICAgICBhd2FpdCBzZWxlY3RlZFBlcnNpc3RlbmNlLl9zZXQoa2V5LCB1c2VyVG9NaWdyYXRlLnRvSlNPTigpKTtcbiAgICB9XG5cbiAgICAvLyBBdHRlbXB0IHRvIGNsZWFyIHRoZSBrZXkgaW4gb3RoZXIgcGVyc2lzdGVuY2VzIGJ1dCBpZ25vcmUgZXJyb3JzLiBUaGlzIGhlbHBzIHByZXZlbnQgaXNzdWVzXG4gICAgLy8gc3VjaCBhcyB1c2VycyBnZXR0aW5nIHN0dWNrIHdpdGggYSBwcmV2aW91cyBhY2NvdW50IGFmdGVyIHNpZ25pbmcgb3V0IGFuZCByZWZyZXNoaW5nIHRoZSB0YWIuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBwZXJzaXN0ZW5jZUhpZXJhcmNoeS5tYXAoYXN5bmMgcGVyc2lzdGVuY2UgPT4ge1xuICAgICAgICBpZiAocGVyc2lzdGVuY2UgIT09IHNlbGVjdGVkUGVyc2lzdGVuY2UpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgcGVyc2lzdGVuY2UuX3JlbW92ZShrZXkpO1xuICAgICAgICAgIH0gY2F0Y2gge31cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybiBuZXcgUGVyc2lzdGVuY2VVc2VyTWFuYWdlcihzZWxlY3RlZFBlcnNpc3RlbmNlLCBhdXRoLCB1c2VyS2V5KTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IGlzSUUsIGdldFVBIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbnRlcmZhY2UgTmF2aWdhdG9yU3RhbmRhbG9uZSBleHRlbmRzIE5hdmlnYXRvciB7XG4gIHN0YW5kYWxvbmU/OiB1bmtub3duO1xufVxuXG5pbnRlcmZhY2UgRG9jdW1lbnQge1xuICBkb2N1bWVudE1vZGU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogRW51bXMgZm9yIEJyb3dzZXIgbmFtZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gQnJvd3Nlck5hbWUge1xuICBBTkRST0lEID0gJ0FuZHJvaWQnLFxuICBCTEFDS0JFUlJZID0gJ0JsYWNrYmVycnknLFxuICBFREdFID0gJ0VkZ2UnLFxuICBGSVJFRk9YID0gJ0ZpcmVmb3gnLFxuICBJRSA9ICdJRScsXG4gIElFTU9CSUxFID0gJ0lFTW9iaWxlJyxcbiAgT1BFUkEgPSAnT3BlcmEnLFxuICBPVEhFUiA9ICdPdGhlcicsXG4gIENIUk9NRSA9ICdDaHJvbWUnLFxuICBTQUZBUkkgPSAnU2FmYXJpJyxcbiAgU0lMSyA9ICdTaWxrJyxcbiAgV0VCT1MgPSAnV2Vib3MnXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBicm93c2VyIGZvciB0aGUgcHVycG9zZXMgb2YgcmVwb3J0aW5nIHVzYWdlIHRvIHRoZSBBUElcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9nZXRCcm93c2VyTmFtZSh1c2VyQWdlbnQ6IHN0cmluZyk6IEJyb3dzZXJOYW1lIHwgc3RyaW5nIHtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgaWYgKHVhLmluY2x1ZGVzKCdvcGVyYS8nKSB8fCB1YS5pbmNsdWRlcygnb3ByLycpIHx8IHVhLmluY2x1ZGVzKCdvcGlvcy8nKSkge1xuICAgIHJldHVybiBCcm93c2VyTmFtZS5PUEVSQTtcbiAgfSBlbHNlIGlmIChfaXNJRU1vYmlsZSh1YSkpIHtcbiAgICAvLyBXaW5kb3dzIHBob25lIElFTW9iaWxlIGJyb3dzZXIuXG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLklFTU9CSUxFO1xuICB9IGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdtc2llJykgfHwgdWEuaW5jbHVkZXMoJ3RyaWRlbnQvJykpIHtcbiAgICByZXR1cm4gQnJvd3Nlck5hbWUuSUU7XG4gIH0gZWxzZSBpZiAodWEuaW5jbHVkZXMoJ2VkZ2UvJykpIHtcbiAgICByZXR1cm4gQnJvd3Nlck5hbWUuRURHRTtcbiAgfSBlbHNlIGlmIChfaXNGaXJlZm94KHVhKSkge1xuICAgIHJldHVybiBCcm93c2VyTmFtZS5GSVJFRk9YO1xuICB9IGVsc2UgaWYgKHVhLmluY2x1ZGVzKCdzaWxrLycpKSB7XG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLlNJTEs7XG4gIH0gZWxzZSBpZiAoX2lzQmxhY2tCZXJyeSh1YSkpIHtcbiAgICAvLyBCbGFja2JlcnJ5IGJyb3dzZXIuXG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLkJMQUNLQkVSUlk7XG4gIH0gZWxzZSBpZiAoX2lzV2ViT1ModWEpKSB7XG4gICAgLy8gV2ViT1MgZGVmYXVsdCBicm93c2VyLlxuICAgIHJldHVybiBCcm93c2VyTmFtZS5XRUJPUztcbiAgfSBlbHNlIGlmIChfaXNTYWZhcmkodWEpKSB7XG4gICAgcmV0dXJuIEJyb3dzZXJOYW1lLlNBRkFSSTtcbiAgfSBlbHNlIGlmIChcbiAgICAodWEuaW5jbHVkZXMoJ2Nocm9tZS8nKSB8fCBfaXNDaHJvbWVJT1ModWEpKSAmJlxuICAgICF1YS5pbmNsdWRlcygnZWRnZS8nKVxuICApIHtcbiAgICByZXR1cm4gQnJvd3Nlck5hbWUuQ0hST01FO1xuICB9IGVsc2UgaWYgKF9pc0FuZHJvaWQodWEpKSB7XG4gICAgLy8gQW5kcm9pZCBzdG9jayBicm93c2VyLlxuICAgIHJldHVybiBCcm93c2VyTmFtZS5BTkRST0lEO1xuICB9IGVsc2Uge1xuICAgIC8vIE1vc3QgbW9kZXJuIGJyb3dzZXJzIGhhdmUgbmFtZS92ZXJzaW9uIGF0IGVuZCBvZiB1c2VyIGFnZW50IHN0cmluZy5cbiAgICBjb25zdCByZSA9IC8oW2EtekEtWlxcZFxcLl0rKVxcL1thLXpBLVpcXGRcXC5dKiQvO1xuICAgIGNvbnN0IG1hdGNoZXMgPSB1c2VyQWdlbnQubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaGVzPy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQnJvd3Nlck5hbWUuT1RIRVI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNGaXJlZm94KHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL2ZpcmVmb3hcXC8vaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc1NhZmFyaSh1c2VyQWdlbnQgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIGNvbnN0IHVhID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAoXG4gICAgdWEuaW5jbHVkZXMoJ3NhZmFyaS8nKSAmJlxuICAgICF1YS5pbmNsdWRlcygnY2hyb21lLycpICYmXG4gICAgIXVhLmluY2x1ZGVzKCdjcmlvcy8nKSAmJlxuICAgICF1YS5pbmNsdWRlcygnYW5kcm9pZCcpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNDaHJvbWVJT1ModWEgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAvY3Jpb3NcXC8vaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0lFTW9iaWxlKHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL2llbW9iaWxlL2kudGVzdCh1YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNBbmRyb2lkKHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL2FuZHJvaWQvaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0JsYWNrQmVycnkodWEgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAvYmxhY2tiZXJyeS9pLnRlc3QodWEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lzV2ViT1ModWEgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAvd2Vib3MvaS50ZXN0KHVhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0lPUyh1YSA9IGdldFVBKCkpOiBib29sZWFuIHtcbiAgcmV0dXJuIC9pcGhvbmV8aXBhZHxpcG9kL2kudGVzdCh1YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNJT1M3T3I4KHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIC8oaVBhZHxpUGhvbmV8aVBvZCkuKk9TIDdfXFxkL2kudGVzdCh1YSkgfHxcbiAgICAvKGlQYWR8aVBob25lfGlQb2QpLipPUyA4X1xcZC9pLnRlc3QodWEpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNJT1NTdGFuZGFsb25lKHVhID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gX2lzSU9TKHVhKSAmJiAhISh3aW5kb3cubmF2aWdhdG9yIGFzIE5hdmlnYXRvclN0YW5kYWxvbmUpPy5zdGFuZGFsb25lO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2lzSUUxMCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSUUoKSAmJiAoZG9jdW1lbnQgYXMgRG9jdW1lbnQpLmRvY3VtZW50TW9kZSA9PT0gMTA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfaXNNb2JpbGVCcm93c2VyKHVhOiBzdHJpbmcgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIC8vIFRPRE86IGltcGxlbWVudCBnZXRCcm93c2VyTmFtZSBlcXVpdmFsZW50IGZvciBPUy5cbiAgcmV0dXJuIChcbiAgICBfaXNJT1ModWEpIHx8XG4gICAgX2lzQW5kcm9pZCh1YSkgfHxcbiAgICBfaXNXZWJPUyh1YSkgfHxcbiAgICBfaXNCbGFja0JlcnJ5KHVhKSB8fFxuICAgIC93aW5kb3dzIHBob25lL2kudGVzdCh1YSkgfHxcbiAgICBfaXNJRU1vYmlsZSh1YSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc0lmcmFtZSgpOiBib29sZWFuIHtcbiAgdHJ5IHtcbiAgICAvLyBDaGVjayB0aGF0IHRoZSBjdXJyZW50IHdpbmRvdyBpcyBub3QgdGhlIHRvcCB3aW5kb3cuXG4gICAgLy8gSWYgc28sIHJldHVybiB0cnVlLlxuICAgIHJldHVybiAhISh3aW5kb3cgJiYgd2luZG93ICE9PSB3aW5kb3cudG9wKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBfZ2V0QnJvd3Nlck5hbWUgfSBmcm9tICcuL2Jyb3dzZXInO1xuaW1wb3J0IHsgZ2V0VUEgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIENsaWVudEltcGxlbWVudGF0aW9uIHtcbiAgQ09SRSA9ICdKc0NvcmUnXG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBlbnVtIENsaWVudFBsYXRmb3JtIHtcbiAgQlJPV1NFUiA9ICdCcm93c2VyJyxcbiAgTk9ERSA9ICdOb2RlJyxcbiAgUkVBQ1RfTkFUSVZFID0gJ1JlYWN0TmF0aXZlJyxcbiAgQ09SRE9WQSA9ICdDb3Jkb3ZhJyxcbiAgV09SS0VSID0gJ1dvcmtlcidcbn1cblxuLypcbiAqIERldGVybWluZSB0aGUgU0RLIHZlcnNpb24gc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0Q2xpZW50VmVyc2lvbihcbiAgY2xpZW50UGxhdGZvcm06IENsaWVudFBsYXRmb3JtLFxuICBmcmFtZXdvcmtzOiByZWFkb25seSBzdHJpbmdbXSA9IFtdXG4pOiBzdHJpbmcge1xuICBsZXQgcmVwb3J0ZWRQbGF0Zm9ybTogc3RyaW5nO1xuICBzd2l0Y2ggKGNsaWVudFBsYXRmb3JtKSB7XG4gICAgY2FzZSBDbGllbnRQbGF0Zm9ybS5CUk9XU0VSOlxuICAgICAgLy8gSW4gYSBicm93c2VyIGVudmlyb25tZW50LCByZXBvcnQgdGhlIGJyb3dzZXIgbmFtZS5cbiAgICAgIHJlcG9ydGVkUGxhdGZvcm0gPSBfZ2V0QnJvd3Nlck5hbWUoZ2V0VUEoKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIENsaWVudFBsYXRmb3JtLldPUktFUjpcbiAgICAgIC8vIFRlY2huaWNhbGx5IGEgd29ya2VyIHJ1bnMgZnJvbSBhIGJyb3dzZXIgYnV0IHdlIG5lZWQgdG8gZGlmZmVyZW50aWF0ZSBhXG4gICAgICAvLyB3b3JrZXIgZnJvbSBhIGJyb3dzZXIuXG4gICAgICAvLyBGb3IgZXhhbXBsZTogQ2hyb21lLVdvcmtlci9Kc0NvcmUvNC45LjEvRmlyZWJhc2VDb3JlLXdlYi5cbiAgICAgIHJlcG9ydGVkUGxhdGZvcm0gPSBgJHtfZ2V0QnJvd3Nlck5hbWUoZ2V0VUEoKSl9LSR7Y2xpZW50UGxhdGZvcm19YDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXBvcnRlZFBsYXRmb3JtID0gY2xpZW50UGxhdGZvcm07XG4gIH1cbiAgY29uc3QgcmVwb3J0ZWRGcmFtZXdvcmtzID0gZnJhbWV3b3Jrcy5sZW5ndGhcbiAgICA/IGZyYW1ld29ya3Muam9pbignLCcpXG4gICAgOiAnRmlyZWJhc2VDb3JlLXdlYic7IC8qIGRlZmF1bHQgdmFsdWUgaWYgbm8gb3RoZXIgZnJhbWV3b3JrIGlzIHVzZWQgKi9cbiAgcmV0dXJuIGAke3JlcG9ydGVkUGxhdGZvcm19LyR7Q2xpZW50SW1wbGVtZW50YXRpb24uQ09SRX0vJHtTREtfVkVSU0lPTn0vJHtyZXBvcnRlZEZyYW1ld29ya3N9YDtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfRmlyZWJhc2VTZXJ2aWNlLCBGaXJlYmFzZUFwcCB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHtcbiAgQXV0aCxcbiAgQXV0aEVycm9yTWFwLFxuICBBdXRoU2V0dGluZ3MsXG4gIEVtdWxhdG9yQ29uZmlnLFxuICBOZXh0T3JPYnNlcnZlcixcbiAgUGVyc2lzdGVuY2UsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlcixcbiAgVXNlcixcbiAgVXNlckNyZWRlbnRpYWwsXG4gIENvbXBsZXRlRm4sXG4gIEVycm9yRm4sXG4gIE5leHRGbixcbiAgVW5zdWJzY3JpYmVcbn0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7XG4gIGNyZWF0ZVN1YnNjcmliZSxcbiAgRXJyb3JGYWN0b3J5LFxuICBnZXRNb2R1bGFySW5zdGFuY2UsXG4gIE9ic2VydmVyLFxuICBTdWJzY3JpYmVcbn0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwsIENvbmZpZ0ludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHtcbiAgQXV0aEVycm9yQ29kZSxcbiAgQXV0aEVycm9yUGFyYW1zLFxuICBFcnJvck1hcFJldHJpZXZlcixcbiAgX0RFRkFVTFRfQVVUSF9FUlJPUl9GQUNUT1JZXG59IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBQZXJzaXN0ZW5jZUludGVybmFsIH0gZnJvbSAnLi4vcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHtcbiAgS2V5TmFtZSxcbiAgUGVyc2lzdGVuY2VVc2VyTWFuYWdlclxufSBmcm9tICcuLi9wZXJzaXN0ZW5jZS9wZXJzaXN0ZW5jZV91c2VyX21hbmFnZXInO1xuaW1wb3J0IHsgX3JlbG9hZFdpdGhvdXRTYXZpbmcgfSBmcm9tICcuLi91c2VyL3JlbG9hZCc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX2dldEluc3RhbmNlIH0gZnJvbSAnLi4vdXRpbC9pbnN0YW50aWF0b3InO1xuaW1wb3J0IHsgX2dldFVzZXJMYW5ndWFnZSB9IGZyb20gJy4uL3V0aWwvbmF2aWdhdG9yJztcbmltcG9ydCB7IF9nZXRDbGllbnRWZXJzaW9uIH0gZnJvbSAnLi4vdXRpbC92ZXJzaW9uJztcbmltcG9ydCB7IEh0dHBIZWFkZXIgfSBmcm9tICcuLi8uLi9hcGknO1xuXG5pbnRlcmZhY2UgQXN5bmNBY3Rpb24ge1xuICAoKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gRGVmYXVsdENvbmZpZyB7XG4gIFRPS0VOX0FQSV9IT1NUID0gJ3NlY3VyZXRva2VuLmdvb2dsZWFwaXMuY29tJyxcbiAgQVBJX0hPU1QgPSAnaWRlbnRpdHl0b29sa2l0Lmdvb2dsZWFwaXMuY29tJyxcbiAgQVBJX1NDSEVNRSA9ICdodHRwcydcbn1cblxuZXhwb3J0IGNsYXNzIEF1dGhJbXBsIGltcGxlbWVudHMgQXV0aEludGVybmFsLCBfRmlyZWJhc2VTZXJ2aWNlIHtcbiAgY3VycmVudFVzZXI6IFVzZXIgfCBudWxsID0gbnVsbDtcbiAgZW11bGF0b3JDb25maWc6IEVtdWxhdG9yQ29uZmlnIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgb3BlcmF0aW9ucyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICBwcml2YXRlIHBlcnNpc3RlbmNlTWFuYWdlcj86IFBlcnNpc3RlbmNlVXNlck1hbmFnZXI7XG4gIHByaXZhdGUgcmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXI/OiBQZXJzaXN0ZW5jZVVzZXJNYW5hZ2VyO1xuICBwcml2YXRlIGF1dGhTdGF0ZVN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb248VXNlcj4odGhpcyk7XG4gIHByaXZhdGUgaWRUb2tlblN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb248VXNlcj4odGhpcyk7XG4gIHByaXZhdGUgcmVkaXJlY3RVc2VyOiBVc2VySW50ZXJuYWwgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkID0gZmFsc2U7XG5cbiAgLy8gQW55IG5ldHdvcmsgY2FsbHMgd2lsbCBzZXQgdGhpcyB0byB0cnVlIGFuZCBwcmV2ZW50IHN1YnNlcXVlbnQgZW11bGF0b3JcbiAgLy8gaW5pdGlhbGl6YXRpb25cbiAgX2NhbkluaXRFbXVsYXRvciA9IHRydWU7XG4gIF9pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gIF9kZWxldGVkID0gZmFsc2U7XG4gIF9pbml0aWFsaXphdGlvblByb21pc2U6IFByb21pc2U8dm9pZD4gfCBudWxsID0gbnVsbDtcbiAgX3BvcHVwUmVkaXJlY3RSZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwgfCBudWxsID0gbnVsbDtcbiAgX2Vycm9yRmFjdG9yeTogRXJyb3JGYWN0b3J5PEF1dGhFcnJvckNvZGUsIEF1dGhFcnJvclBhcmFtcz4gPVxuICAgIF9ERUZBVUxUX0FVVEhfRVJST1JfRkFDVE9SWTtcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8vIFRyYWNrcyB0aGUgbGFzdCBub3RpZmllZCBVSUQgZm9yIHN0YXRlIGNoYW5nZSBsaXN0ZW5lcnMgdG8gcHJldmVudFxuICAvLyByZXBlYXRlZCBjYWxscyB0byB0aGUgY2FsbGJhY2tzLiBVbmRlZmluZWQgbWVhbnMgaXQncyBuZXZlciBiZWVuXG4gIC8vIGNhbGxlZCwgd2hlcmVhcyBudWxsIG1lYW5zIGl0J3MgYmVlbiBjYWxsZWQgd2l0aCBhIHNpZ25lZCBvdXQgdXNlclxuICBwcml2YXRlIGxhc3ROb3RpZmllZFVpZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBsYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICB0ZW5hbnRJZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHNldHRpbmdzOiBBdXRoU2V0dGluZ3MgPSB7IGFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZzogZmFsc2UgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXBwOiBGaXJlYmFzZUFwcCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlnOiBDb25maWdJbnRlcm5hbFxuICApIHtcbiAgICB0aGlzLm5hbWUgPSBhcHAubmFtZTtcbiAgICB0aGlzLmNsaWVudFZlcnNpb24gPSBjb25maWcuc2RrQ2xpZW50VmVyc2lvbjtcbiAgfVxuXG4gIF9pbml0aWFsaXplV2l0aFBlcnNpc3RlbmNlKFxuICAgIHBlcnNpc3RlbmNlSGllcmFyY2h5OiBQZXJzaXN0ZW5jZUludGVybmFsW10sXG4gICAgcG9wdXBSZWRpcmVjdFJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChwb3B1cFJlZGlyZWN0UmVzb2x2ZXIpIHtcbiAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciA9IF9nZXRJbnN0YW5jZShwb3B1cFJlZGlyZWN0UmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIC8vIEhhdmUgdG8gY2hlY2sgZm9yIGFwcCBkZWxldGlvbiB0aHJvdWdob3V0IGluaXRpYWxpemF0aW9uIChhZnRlciBlYWNoXG4gICAgLy8gcHJvbWlzZSByZXNvbHV0aW9uKVxuICAgIHRoaXMuX2luaXRpYWxpemF0aW9uUHJvbWlzZSA9IHRoaXMucXVldWUoYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IGF3YWl0IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIuY3JlYXRlKFxuICAgICAgICB0aGlzLFxuICAgICAgICBwZXJzaXN0ZW5jZUhpZXJhcmNoeVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0aWFsaXplIHRoZSByZXNvbHZlciBlYXJseSBpZiBuZWNlc3NhcnkgKG9ubHkgYXBwbGljYWJsZSB0byB3ZWI6XG4gICAgICAvLyB0aGlzIHdpbGwgY2F1c2UgdGhlIGlmcmFtZSB0byBsb2FkIGltbWVkaWF0ZWx5IGluIGNlcnRhaW4gY2FzZXMpXG4gICAgICBpZiAodGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyPy5fc2hvdWxkSW5pdFByb2FjdGl2ZWx5KSB7XG4gICAgICAgIC8vIElmIHRoaXMgZmFpbHMsIGRvbid0IGhhbHQgYXV0aCBsb2FkaW5nXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyLl9pbml0aWFsaXplKHRoaXMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSB0aGUgZXJyb3IgKi8gfVxuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVDdXJyZW50VXNlcihwb3B1cFJlZGlyZWN0UmVzb2x2ZXIpO1xuICAgICAgdGhpcy5sYXN0Tm90aWZpZWRVaWQgPSB0aGlzLmN1cnJlbnRVc2VyPy51aWQgfHwgbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX2RlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIHBlcnNpc3RlbmNlIGlzIGNoYW5nZWQgaW4gYW5vdGhlciB3aW5kb3csIHRoZSB1c2VyIG1hbmFnZXIgd2lsbCBsZXQgdXMga25vd1xuICAgKi9cbiAgYXN5bmMgX29uU3RvcmFnZUV2ZW50KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9kZWxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHRoaXMuYXNzZXJ0ZWRQZXJzaXN0ZW5jZS5nZXRDdXJyZW50VXNlcigpO1xuXG4gICAgaWYgKCF0aGlzLmN1cnJlbnRVc2VyICYmICF1c2VyKSB7XG4gICAgICAvLyBObyBjaGFuZ2UsIGRvIG5vdGhpbmcgKHdhcyBzaWduZWQgb3V0IGFuZCByZW1haW5lZCBzaWduZWQgb3V0KS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc2FtZSB1c2VyIGlzIHRvIGJlIHN5bmNocm9uaXplZC5cbiAgICBpZiAodGhpcy5jdXJyZW50VXNlciAmJiB1c2VyICYmIHRoaXMuY3VycmVudFVzZXIudWlkID09PSB1c2VyLnVpZCkge1xuICAgICAgLy8gRGF0YSB1cGRhdGUsIHNpbXBseSBjb3B5IGRhdGEgY2hhbmdlcy5cbiAgICAgIHRoaXMuX2N1cnJlbnRVc2VyLl9hc3NpZ24odXNlcik7XG4gICAgICAvLyBJZiB0b2tlbnMgY2hhbmdlZCBmcm9tIHByZXZpb3VzIHVzZXIgdG9rZW5zLCB0aGlzIHdpbGwgdHJpZ2dlclxuICAgICAgLy8gbm90aWZ5QXV0aExpc3RlbmVyc18uXG4gICAgICBhd2FpdCB0aGlzLmN1cnJlbnRVc2VyLmdldElkVG9rZW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgY3VycmVudCBBdXRoIHN0YXRlLiBFaXRoZXIgYSBuZXcgbG9naW4gb3IgbG9nb3V0LlxuICAgIGF3YWl0IHRoaXMuX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplQ3VycmVudFVzZXIoXG4gICAgcG9wdXBSZWRpcmVjdFJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIEZpcnN0IGNoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcGVuZGluZyByZWRpcmVjdCBldmVudC5cbiAgICBsZXQgc3RvcmVkVXNlciA9XG4gICAgICAoYXdhaXQgdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLmdldEN1cnJlbnRVc2VyKCkpIGFzIFVzZXJJbnRlcm5hbCB8IG51bGw7XG4gICAgaWYgKHBvcHVwUmVkaXJlY3RSZXNvbHZlciAmJiB0aGlzLmNvbmZpZy5hdXRoRG9tYWluKSB7XG4gICAgICBhd2FpdCB0aGlzLmdldE9ySW5pdFJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyKCk7XG4gICAgICBjb25zdCByZWRpcmVjdFVzZXJFdmVudElkID0gdGhpcy5yZWRpcmVjdFVzZXI/Ll9yZWRpcmVjdEV2ZW50SWQ7XG4gICAgICBjb25zdCBzdG9yZWRVc2VyRXZlbnRJZCA9IHN0b3JlZFVzZXI/Ll9yZWRpcmVjdEV2ZW50SWQ7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRyeVJlZGlyZWN0U2lnbkluKHBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XG5cbiAgICAgIC8vIElmIHRoZSBzdG9yZWQgdXNlciAoaS5lLiB0aGUgb2xkIFwiY3VycmVudFVzZXJcIikgaGFzIGEgcmVkaXJlY3RJZCB0aGF0XG4gICAgICAvLyBtYXRjaGVzIHRoZSByZWRpcmVjdCB1c2VyLCB0aGVuIHdlIHdhbnQgdG8gaW5pdGlhbGx5IHNpZ24gaW4gd2l0aCB0aGVcbiAgICAgIC8vIG5ldyB1c2VyIG9iamVjdCBmcm9tIHJlc3VsdC5cbiAgICAgIC8vIFRPRE8oc2FtZ2hvKTogTW9yZSB0aG9yb3VnaGx5IHRlc3QgYWxsIG9mIHRoaXNcbiAgICAgIGlmIChcbiAgICAgICAgKCFyZWRpcmVjdFVzZXJFdmVudElkIHx8IHJlZGlyZWN0VXNlckV2ZW50SWQgPT09IHN0b3JlZFVzZXJFdmVudElkKSAmJlxuICAgICAgICByZXN1bHQ/LnVzZXJcbiAgICAgICkge1xuICAgICAgICBzdG9yZWRVc2VyID0gcmVzdWx0LnVzZXIgYXMgVXNlckludGVybmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIHVzZXIgaW4gcGVyc2lzdGVuY2UsIHRoZXJlIGlzIG5vIGN1cnJlbnQgdXNlci4gU2V0IHRvIG51bGwuXG4gICAgaWYgKCFzdG9yZWRVc2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXJlY3RseVNldEN1cnJlbnRVc2VyKG51bGwpO1xuICAgIH1cblxuICAgIGlmICghc3RvcmVkVXNlci5fcmVkaXJlY3RFdmVudElkKSB7XG4gICAgICAvLyBUaGlzIGlzbid0IGEgcmVkaXJlY3QgdXNlciwgd2UgY2FuIHJlbG9hZCBhbmQgYmFpbFxuICAgICAgLy8gVGhpcyB3aWxsIGFsc28gY2F0Y2ggdGhlIHJlZGlyZWN0ZWQgdXNlciwgaWYgYXZhaWxhYmxlLCBhcyB0aGF0IG1ldGhvZFxuICAgICAgLy8gc3RyaXBzIHRoZSBfcmVkaXJlY3RFdmVudElkXG4gICAgICByZXR1cm4gdGhpcy5yZWxvYWRBbmRTZXRDdXJyZW50VXNlck9yQ2xlYXIoc3RvcmVkVXNlcik7XG4gICAgfVxuXG4gICAgX2Fzc2VydCh0aGlzLl9wb3B1cFJlZGlyZWN0UmVzb2x2ZXIsIHRoaXMsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuICAgIGF3YWl0IHRoaXMuZ2V0T3JJbml0UmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIoKTtcblxuICAgIC8vIElmIHRoZSByZWRpcmVjdCB1c2VyJ3MgZXZlbnQgSUQgbWF0Y2hlcyB0aGUgY3VycmVudCB1c2VyJ3MgZXZlbnQgSUQsXG4gICAgLy8gRE8gTk9UIHJlbG9hZCB0aGUgY3VycmVudCB1c2VyLCBvdGhlcndpc2UgdGhleSdsbCBiZSBjbGVhcmVkIGZyb20gc3RvcmFnZS5cbiAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgdGhlIHJlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KCkgZmxvdy5cbiAgICBpZiAoXG4gICAgICB0aGlzLnJlZGlyZWN0VXNlciAmJlxuICAgICAgdGhpcy5yZWRpcmVjdFVzZXIuX3JlZGlyZWN0RXZlbnRJZCA9PT0gc3RvcmVkVXNlci5fcmVkaXJlY3RFdmVudElkXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXJlY3RseVNldEN1cnJlbnRVc2VyKHN0b3JlZFVzZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbG9hZEFuZFNldEN1cnJlbnRVc2VyT3JDbGVhcihzdG9yZWRVc2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdHJ5UmVkaXJlY3RTaWduSW4oXG4gICAgcmVkaXJlY3RSZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8VXNlckNyZWRlbnRpYWwgfCBudWxsPiB7XG4gICAgLy8gVGhlIHJlZGlyZWN0IHVzZXIgbmVlZHMgdG8gYmUgY2hlY2tlZCAoYW5kIHNpZ25lZCBpbiBpZiBhdmFpbGFibGUpXG4gICAgLy8gZHVyaW5nIGF1dGggaW5pdGlhbGl6YXRpb24uIEFsbCBvZiB0aGUgbm9ybWFsIHNpZ24gaW4gYW5kIGxpbmsvcmVhdXRoXG4gICAgLy8gZmxvd3MgY2FsbCBiYWNrIGludG8gYXV0aCBhbmQgcHVzaCB0aGluZ3Mgb250byB0aGUgcHJvbWlzZSBxdWV1ZS4gV2VcbiAgICAvLyBuZWVkIHRvIGF3YWl0IHRoZSByZXN1bHQgb2YgdGhlIHJlZGlyZWN0IHNpZ24gaW4gKmluc2lkZSB0aGUgcHJvbWlzZVxuICAgIC8vIHF1ZXVlKi4gVGhpcyBwcmVzZW50cyBhIHByb2JsZW06IHdlIHJ1biBpbnRvIGRlYWRsb2NrLiBTZWU6XG4gICAgLy8gICAgXHUyNTBDPiBbSW5pdGlhbGl6YXRpb25dIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUxMFxuICAgIC8vICAgIFx1MjUwQz4gWzxvdGhlciBxdWV1ZSB0YXNrcz5dIFx1MjUwMlxuICAgIC8vICAgIFx1MjUxNFx1MjUwMCBbZ2V0UmVkaXJlY3RSZXN1bHRdIDxcdTI1MDBcdTI1MThcbiAgICAvLyAgICB3aGVyZSBbXSBhcmUgdGFza3Mgb24gdGhlIHF1ZXVlIGFuZCBhcnJvd3MgZGVub3RlIGF3YWl0c1xuICAgIC8vIEluaXRpYWxpemF0aW9uIHdpbGwgbmV2ZXIgY29tcGxldGUgYmVjYXVzZSBpdCdzIHdhaXRpbmcgb24gc29tZXRoaW5nXG4gICAgLy8gdGhhdCdzIHdhaXRpbmcgZm9yIGluaXRpYWxpemF0aW9uIHRvIGNvbXBsZXRlIVxuICAgIC8vXG4gICAgLy8gSW5zdGVhZCwgdGhpcyBtZXRob2QgY2FsbHMgZ2V0UmVkaXJlY3RSZXN1bHQoKSAoc3RvcmVkIGluXG4gICAgLy8gX2NvbXBsZXRlUmVkaXJlY3RGbikgd2l0aCBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCBpbnN0cnVjdHMgYWxsIG9mXG4gICAgLy8gdGhlIHVuZGVybHlpbmcgYXV0aCBvcGVyYXRpb25zIHRvIHNraXAgYW55dGhpbmcgdGhhdCBtdXRhdGVzIGF1dGggc3RhdGUuXG5cbiAgICBsZXQgcmVzdWx0OiBVc2VyQ3JlZGVudGlhbCB8IG51bGwgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZSBrbm93IHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlciBpcyBzZXQgc2luY2UgcmVkaXJlY3RSZXNvbHZlclxuICAgICAgLy8gaXMgcGFzc2VkIGluLiBUaGUgX2NvbXBsZXRlUmVkaXJlY3RGbiBleHBlY3RzIHRoZSB1bndyYXBwZWQgZXh0ZXJuLlxuICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyIS5fY29tcGxldGVSZWRpcmVjdEZuKFxuICAgICAgICB0aGlzLFxuICAgICAgICByZWRpcmVjdFJlc29sdmVyLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFN3YWxsb3cgYW55IGVycm9ycyBoZXJlOyB0aGUgY29kZSBjYW4gcmV0cmlldmUgdGhlbSBpblxuICAgICAgLy8gZ2V0UmVkaXJlY3RSZXN1bHQoKS5cbiAgICAgIGF3YWl0IHRoaXMuX3NldFJlZGlyZWN0VXNlcihudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZWxvYWRBbmRTZXRDdXJyZW50VXNlck9yQ2xlYXIoXG4gICAgdXNlcjogVXNlckludGVybmFsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBfcmVsb2FkV2l0aG91dFNhdmluZyh1c2VyKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5jb2RlICE9PSBgYXV0aC8ke0F1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRH1gKSB7XG4gICAgICAgIC8vIFNvbWV0aGluZydzIHdyb25nIHdpdGggdGhlIHVzZXIncyB0b2tlbi4gTG9nIHRoZW0gb3V0IGFuZCByZW1vdmVcbiAgICAgICAgLy8gdGhlbSBmcm9tIHN0b3JhZ2VcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0bHlTZXRDdXJyZW50VXNlcihudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kaXJlY3RseVNldEN1cnJlbnRVc2VyKHVzZXIpO1xuICB9XG5cbiAgdXNlRGV2aWNlTGFuZ3VhZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5sYW5ndWFnZUNvZGUgPSBfZ2V0VXNlckxhbmd1YWdlKCk7XG4gIH1cblxuICBhc3luYyBfZGVsZXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuX2RlbGV0ZWQgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlQ3VycmVudFVzZXIodXNlckV4dGVybjogVXNlciB8IG51bGwpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBUaGUgcHVibGljIHVwZGF0ZUN1cnJlbnRVc2VyIG1ldGhvZCBuZWVkcyB0byBtYWtlIGEgY29weSBvZiB0aGUgdXNlcixcbiAgICAvLyBhbmQgYWxzbyBjaGVjayB0aGF0IHRoZSBwcm9qZWN0IG1hdGNoZXNcbiAgICBjb25zdCB1c2VyID0gdXNlckV4dGVyblxuICAgICAgPyAoZ2V0TW9kdWxhckluc3RhbmNlKHVzZXJFeHRlcm4pIGFzIFVzZXJJbnRlcm5hbClcbiAgICAgIDogbnVsbDtcbiAgICBpZiAodXNlcikge1xuICAgICAgX2Fzc2VydChcbiAgICAgICAgdXNlci5hdXRoLmNvbmZpZy5hcGlLZXkgPT09IHRoaXMuY29uZmlnLmFwaUtleSxcbiAgICAgICAgdGhpcyxcbiAgICAgICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX0FVVEhcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl91cGRhdGVDdXJyZW50VXNlcih1c2VyICYmIHVzZXIuX2Nsb25lKHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVDdXJyZW50VXNlcih1c2VyOiBVc2VyIHwgbnVsbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9kZWxldGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1c2VyKSB7XG4gICAgICBfYXNzZXJ0KFxuICAgICAgICB0aGlzLnRlbmFudElkID09PSB1c2VyLnRlbmFudElkLFxuICAgICAgICB0aGlzLFxuICAgICAgICBBdXRoRXJyb3JDb2RlLlRFTkFOVF9JRF9NSVNNQVRDSFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5xdWV1ZShhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIodXNlciBhcyBVc2VySW50ZXJuYWwgfCBudWxsKTtcbiAgICAgIHRoaXMubm90aWZ5QXV0aExpc3RlbmVycygpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2lnbk91dCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBDbGVhciB0aGUgcmVkaXJlY3QgdXNlciB3aGVuIHNpZ25PdXQgaXMgY2FsbGVkXG4gICAgaWYgKHRoaXMucmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIgfHwgdGhpcy5fcG9wdXBSZWRpcmVjdFJlc29sdmVyKSB7XG4gICAgICBhd2FpdCB0aGlzLl9zZXRSZWRpcmVjdFVzZXIobnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZUN1cnJlbnRVc2VyKG51bGwpO1xuICB9XG5cbiAgc2V0UGVyc2lzdGVuY2UocGVyc2lzdGVuY2U6IFBlcnNpc3RlbmNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMucXVldWUoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5hc3NlcnRlZFBlcnNpc3RlbmNlLnNldFBlcnNpc3RlbmNlKF9nZXRJbnN0YW5jZShwZXJzaXN0ZW5jZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgX2dldFBlcnNpc3RlbmNlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXJ0ZWRQZXJzaXN0ZW5jZS5wZXJzaXN0ZW5jZS50eXBlO1xuICB9XG5cbiAgX3VwZGF0ZUVycm9yTWFwKGVycm9yTWFwOiBBdXRoRXJyb3JNYXApOiB2b2lkIHtcbiAgICB0aGlzLl9lcnJvckZhY3RvcnkgPSBuZXcgRXJyb3JGYWN0b3J5PEF1dGhFcnJvckNvZGUsIEF1dGhFcnJvclBhcmFtcz4oXG4gICAgICAnYXV0aCcsXG4gICAgICAnRmlyZWJhc2UnLFxuICAgICAgKGVycm9yTWFwIGFzIEVycm9yTWFwUmV0cmlldmVyKSgpXG4gICAgKTtcbiAgfVxuXG4gIG9uQXV0aFN0YXRlQ2hhbmdlZChcbiAgICBuZXh0T3JPYnNlcnZlcjogTmV4dE9yT2JzZXJ2ZXI8VXNlcj4sXG4gICAgZXJyb3I/OiBFcnJvckZuLFxuICAgIGNvbXBsZXRlZD86IENvbXBsZXRlRm5cbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyU3RhdGVMaXN0ZW5lcihcbiAgICAgIHRoaXMuYXV0aFN0YXRlU3Vic2NyaXB0aW9uLFxuICAgICAgbmV4dE9yT2JzZXJ2ZXIsXG4gICAgICBlcnJvcixcbiAgICAgIGNvbXBsZXRlZFxuICAgICk7XG4gIH1cblxuICBvbklkVG9rZW5DaGFuZ2VkKFxuICAgIG5leHRPck9ic2VydmVyOiBOZXh0T3JPYnNlcnZlcjxVc2VyPixcbiAgICBlcnJvcj86IEVycm9yRm4sXG4gICAgY29tcGxldGVkPzogQ29tcGxldGVGblxuICApOiBVbnN1YnNjcmliZSB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJTdGF0ZUxpc3RlbmVyKFxuICAgICAgdGhpcy5pZFRva2VuU3Vic2NyaXB0aW9uLFxuICAgICAgbmV4dE9yT2JzZXJ2ZXIsXG4gICAgICBlcnJvcixcbiAgICAgIGNvbXBsZXRlZFxuICAgICk7XG4gIH1cblxuICB0b0pTT04oKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgYXBpS2V5OiB0aGlzLmNvbmZpZy5hcGlLZXksXG4gICAgICBhdXRoRG9tYWluOiB0aGlzLmNvbmZpZy5hdXRoRG9tYWluLFxuICAgICAgYXBwTmFtZTogdGhpcy5uYW1lLFxuICAgICAgY3VycmVudFVzZXI6IHRoaXMuX2N1cnJlbnRVc2VyPy50b0pTT04oKVxuICAgIH07XG4gIH1cblxuICBhc3luYyBfc2V0UmVkaXJlY3RVc2VyKFxuICAgIHVzZXI6IFVzZXJJbnRlcm5hbCB8IG51bGwsXG4gICAgcG9wdXBSZWRpcmVjdFJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlZGlyZWN0TWFuYWdlciA9IGF3YWl0IHRoaXMuZ2V0T3JJbml0UmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIoXG4gICAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgICApO1xuICAgIHJldHVybiB1c2VyID09PSBudWxsXG4gICAgICA/IHJlZGlyZWN0TWFuYWdlci5yZW1vdmVDdXJyZW50VXNlcigpXG4gICAgICA6IHJlZGlyZWN0TWFuYWdlci5zZXRDdXJyZW50VXNlcih1c2VyKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0T3JJbml0UmVkaXJlY3RQZXJzaXN0ZW5jZU1hbmFnZXIoXG4gICAgcG9wdXBSZWRpcmVjdFJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4gICk6IFByb21pc2U8UGVyc2lzdGVuY2VVc2VyTWFuYWdlcj4ge1xuICAgIGlmICghdGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlcikge1xuICAgICAgY29uc3QgcmVzb2x2ZXI6IFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsIHwgbnVsbCA9XG4gICAgICAgIChwb3B1cFJlZGlyZWN0UmVzb2x2ZXIgJiYgX2dldEluc3RhbmNlKHBvcHVwUmVkaXJlY3RSZXNvbHZlcikpIHx8XG4gICAgICAgIHRoaXMuX3BvcHVwUmVkaXJlY3RSZXNvbHZlcjtcbiAgICAgIF9hc3NlcnQocmVzb2x2ZXIsIHRoaXMsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuICAgICAgdGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlciA9IGF3YWl0IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIuY3JlYXRlKFxuICAgICAgICB0aGlzLFxuICAgICAgICBbX2dldEluc3RhbmNlKHJlc29sdmVyLl9yZWRpcmVjdFBlcnNpc3RlbmNlKV0sXG4gICAgICAgIEtleU5hbWUuUkVESVJFQ1RfVVNFUlxuICAgICAgKTtcbiAgICAgIHRoaXMucmVkaXJlY3RVc2VyID1cbiAgICAgICAgYXdhaXQgdGhpcy5yZWRpcmVjdFBlcnNpc3RlbmNlTWFuYWdlci5nZXRDdXJyZW50VXNlcigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlZGlyZWN0UGVyc2lzdGVuY2VNYW5hZ2VyO1xuICB9XG5cbiAgYXN5bmMgX3JlZGlyZWN0VXNlckZvcklkKGlkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXJJbnRlcm5hbCB8IG51bGw+IHtcbiAgICAvLyBNYWtlIHN1cmUgd2UndmUgY2xlYXJlZCBhbnkgcGVuZGluZyBwZXJzaXN0ZW5jZSBhY3Rpb25zIGlmIHdlJ3JlIG5vdCBpblxuICAgIC8vIHRoZSBpbml0aWFsaXplclxuICAgIGlmICh0aGlzLl9pc0luaXRpYWxpemVkKSB7XG4gICAgICBhd2FpdCB0aGlzLnF1ZXVlKGFzeW5jICgpID0+IHt9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY3VycmVudFVzZXI/Ll9yZWRpcmVjdEV2ZW50SWQgPT09IGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY3VycmVudFVzZXI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVkaXJlY3RVc2VyPy5fcmVkaXJlY3RFdmVudElkID09PSBpZCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVkaXJlY3RVc2VyO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgX3BlcnNpc3RVc2VySWZDdXJyZW50KHVzZXI6IFVzZXJJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh1c2VyID09PSB0aGlzLmN1cnJlbnRVc2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZShhc3luYyAoKSA9PiB0aGlzLmRpcmVjdGx5U2V0Q3VycmVudFVzZXIodXNlcikpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBOb3RpZmllcyBsaXN0ZW5lcnMgb25seSBpZiB0aGUgdXNlciBpcyBjdXJyZW50ICovXG4gIF9ub3RpZnlMaXN0ZW5lcnNJZkN1cnJlbnQodXNlcjogVXNlckludGVybmFsKTogdm9pZCB7XG4gICAgaWYgKHVzZXIgPT09IHRoaXMuY3VycmVudFVzZXIpIHtcbiAgICAgIHRoaXMubm90aWZ5QXV0aExpc3RlbmVycygpO1xuICAgIH1cbiAgfVxuXG4gIF9rZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jb25maWcuYXV0aERvbWFpbn06JHt0aGlzLmNvbmZpZy5hcGlLZXl9OiR7dGhpcy5uYW1lfWA7XG4gIH1cblxuICBfc3RhcnRQcm9hY3RpdmVSZWZyZXNoKCk6IHZvaWQge1xuICAgIHRoaXMuaXNQcm9hY3RpdmVSZWZyZXNoRW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHRoaXMuY3VycmVudFVzZXIpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRVc2VyLl9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICBfc3RvcFByb2FjdGl2ZVJlZnJlc2goKTogdm9pZCB7XG4gICAgdGhpcy5pc1Byb2FjdGl2ZVJlZnJlc2hFbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuY3VycmVudFVzZXIpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRVc2VyLl9zdG9wUHJvYWN0aXZlUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBSZXR1cm5zIHRoZSBjdXJyZW50IHVzZXIgY2FzdCBhcyB0aGUgaW50ZXJuYWwgdHlwZSAqL1xuICBnZXQgX2N1cnJlbnRVc2VyKCk6IFVzZXJJbnRlcm5hbCB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFVzZXIgYXMgVXNlckludGVybmFsO1xuICB9XG5cbiAgcHJpdmF0ZSBub3RpZnlBdXRoTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaWRUb2tlblN1YnNjcmlwdGlvbi5uZXh0KHRoaXMuY3VycmVudFVzZXIpO1xuXG4gICAgY29uc3QgY3VycmVudFVpZCA9IHRoaXMuY3VycmVudFVzZXI/LnVpZCA/PyBudWxsO1xuICAgIGlmICh0aGlzLmxhc3ROb3RpZmllZFVpZCAhPT0gY3VycmVudFVpZCkge1xuICAgICAgdGhpcy5sYXN0Tm90aWZpZWRVaWQgPSBjdXJyZW50VWlkO1xuICAgICAgdGhpcy5hdXRoU3RhdGVTdWJzY3JpcHRpb24ubmV4dCh0aGlzLmN1cnJlbnRVc2VyKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyU3RhdGVMaXN0ZW5lcihcbiAgICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjxVc2VyPixcbiAgICBuZXh0T3JPYnNlcnZlcjogTmV4dE9yT2JzZXJ2ZXI8VXNlcj4sXG4gICAgZXJyb3I/OiBFcnJvckZuLFxuICAgIGNvbXBsZXRlZD86IENvbXBsZXRlRm5cbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIGlmICh0aGlzLl9kZWxldGVkKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge307XG4gICAgfVxuXG4gICAgY29uc3QgY2IgPVxuICAgICAgdHlwZW9mIG5leHRPck9ic2VydmVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gbmV4dE9yT2JzZXJ2ZXJcbiAgICAgICAgOiBuZXh0T3JPYnNlcnZlci5uZXh0LmJpbmQobmV4dE9yT2JzZXJ2ZXIpO1xuXG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuX2lzSW5pdGlhbGl6ZWRcbiAgICAgID8gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIDogdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICAgIF9hc3NlcnQocHJvbWlzZSwgdGhpcywgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgLy8gVGhlIGNhbGxiYWNrIG5lZWRzIHRvIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseSBwZXIgdGhlIHNwZWMuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgIHByb21pc2UudGhlbigoKSA9PiBjYih0aGlzLmN1cnJlbnRVc2VyKSk7XG5cbiAgICBpZiAodHlwZW9mIG5leHRPck9ic2VydmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLmFkZE9ic2VydmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi5hZGRPYnNlcnZlcihuZXh0T3JPYnNlcnZlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVucHJvdGVjdGVkIChmcm9tIHJhY2UgY29uZGl0aW9ucykgbWV0aG9kIHRvIHNldCB0aGUgY3VycmVudCB1c2VyLiBUaGlzXG4gICAqIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tIHdpdGhpbiBhIHF1ZXVlZCBjYWxsYmFjay4gVGhpcyBpcyBuZWNlc3NhcnlcbiAgICogYmVjYXVzZSB0aGUgcXVldWUgc2hvdWxkbid0IHJlbHkgb24gYW5vdGhlciBxdWV1ZWQgY2FsbGJhY2suXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGRpcmVjdGx5U2V0Q3VycmVudFVzZXIoXG4gICAgdXNlcjogVXNlckludGVybmFsIHwgbnVsbFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5jdXJyZW50VXNlciAmJiB0aGlzLmN1cnJlbnRVc2VyICE9PSB1c2VyKSB7XG4gICAgICB0aGlzLl9jdXJyZW50VXNlci5fc3RvcFByb2FjdGl2ZVJlZnJlc2goKTtcbiAgICAgIGlmICh1c2VyICYmIHRoaXMuaXNQcm9hY3RpdmVSZWZyZXNoRW5hYmxlZCkge1xuICAgICAgICB1c2VyLl9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRVc2VyID0gdXNlcjtcblxuICAgIGlmICh1c2VyKSB7XG4gICAgICBhd2FpdCB0aGlzLmFzc2VydGVkUGVyc2lzdGVuY2Uuc2V0Q3VycmVudFVzZXIodXNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMuYXNzZXJ0ZWRQZXJzaXN0ZW5jZS5yZW1vdmVDdXJyZW50VXNlcigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcXVldWUoYWN0aW9uOiBBc3luY0FjdGlvbik6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIEluIGNhc2Ugc29tZXRoaW5nIGVycm9ycywgdGhlIGNhbGxiYWNrIHN0aWxsIHNob3VsZCBiZSBjYWxsZWQgaW4gb3JkZXJcbiAgICAvLyB0byBrZWVwIHRoZSBwcm9taXNlIGNoYWluIGFsaXZlXG4gICAgdGhpcy5vcGVyYXRpb25zID0gdGhpcy5vcGVyYXRpb25zLnRoZW4oYWN0aW9uLCBhY3Rpb24pO1xuICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIGdldCBhc3NlcnRlZFBlcnNpc3RlbmNlKCk6IFBlcnNpc3RlbmNlVXNlck1hbmFnZXIge1xuICAgIF9hc3NlcnQodGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIsIHRoaXMsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHJldHVybiB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlcjtcbiAgfVxuXG4gIHByaXZhdGUgZnJhbWV3b3Jrczogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBjbGllbnRWZXJzaW9uOiBzdHJpbmc7XG4gIF9sb2dGcmFtZXdvcmsoZnJhbWV3b3JrOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoIWZyYW1ld29yayB8fCB0aGlzLmZyYW1ld29ya3MuaW5jbHVkZXMoZnJhbWV3b3JrKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmZyYW1ld29ya3MucHVzaChmcmFtZXdvcmspO1xuXG4gICAgLy8gU29ydCBhbHBoYWJldGljYWxseSBzbyB0aGF0IFwiRmlyZWJhc2VDb3JlLXdlYixGaXJlYmFzZVVJLXdlYlwiIGFuZFxuICAgIC8vIFwiRmlyZWJhc2VVSS13ZWIsRmlyZWJhc2VDb3JlLXdlYlwiIGFyZW4ndCB2aWV3ZWQgYXMgZGlmZmVyZW50LlxuICAgIHRoaXMuZnJhbWV3b3Jrcy5zb3J0KCk7XG4gICAgdGhpcy5jbGllbnRWZXJzaW9uID0gX2dldENsaWVudFZlcnNpb24oXG4gICAgICB0aGlzLmNvbmZpZy5jbGllbnRQbGF0Zm9ybSxcbiAgICAgIHRoaXMuX2dldEZyYW1ld29ya3MoKVxuICAgICk7XG4gIH1cbiAgX2dldEZyYW1ld29ya3MoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmZyYW1ld29ya3M7XG4gIH1cbiAgYXN5bmMgX2dldEFkZGl0aW9uYWxIZWFkZXJzKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4ge1xuICAgIC8vIEFkZGl0aW9uYWwgaGVhZGVycyBvbiBldmVyeSByZXF1ZXN0XG4gICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIFtIdHRwSGVhZGVyLlhfQ0xJRU5UX1ZFUlNJT05dOiB0aGlzLmNsaWVudFZlcnNpb24sXG4gICAgfTtcbiAgICBpZiAodGhpcy5hcHAub3B0aW9ucy5hcHBJZCkge1xuICAgICAgaGVhZGVyc1tIdHRwSGVhZGVyLlhfRklSRUJBU0VfR01QSURdID0gdGhpcy5hcHAub3B0aW9ucy5hcHBJZDtcbiAgICB9XG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgdXNlZCB0byBjYXN0IGRvd24gdG8gb3VyIHByaXZhdGUgaW1wbG1lbnRhdGlvbiBvZiBBdXRoLlxuICogSXQgd2lsbCBhbHNvIGhhbmRsZSB1bndyYXBwaW5nIGZyb20gdGhlIGNvbXBhdCB0eXBlIGlmIG5lY2Vzc2FyeVxuICpcbiAqIEBwYXJhbSBhdXRoIEF1dGggb2JqZWN0IHBhc3NlZCBpbiBmcm9tIGRldmVsb3BlclxuICovXG5leHBvcnQgZnVuY3Rpb24gX2Nhc3RBdXRoKGF1dGg6IEF1dGgpOiBBdXRoSW50ZXJuYWwge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpIGFzIEF1dGhJbnRlcm5hbDtcbn1cblxuLyoqIEhlbHBlciBjbGFzcyB0byB3cmFwIHN1YnNjcmliZXIgbG9naWMgKi9cbmNsYXNzIFN1YnNjcmlwdGlvbjxUPiB7XG4gIHByaXZhdGUgb2JzZXJ2ZXI6IE9ic2VydmVyPFQgfCBudWxsPiB8IG51bGwgPSBudWxsO1xuICByZWFkb25seSBhZGRPYnNlcnZlcjogU3Vic2NyaWJlPFQgfCBudWxsPiA9IGNyZWF0ZVN1YnNjcmliZShcbiAgICBvYnNlcnZlciA9PiAodGhpcy5vYnNlcnZlciA9IG9ic2VydmVyKVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCkge31cblxuICBnZXQgbmV4dCgpOiBOZXh0Rm48VCB8IG51bGw+IHtcbiAgICBfYXNzZXJ0KHRoaXMub2JzZXJ2ZXIsIHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXIubmV4dC5iaW5kKHRoaXMub2JzZXJ2ZXIpO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi9hdXRoX2ltcGwnO1xuXG4vKipcbiAqIENoYW5nZXMgdGhlIHtAbGluayBBdXRofSBpbnN0YW5jZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBGaXJlYmFzZSBBdXRoIEVtdWxhdG9yLCBpbnN0ZWFkIG9mIHByb2R1Y3Rpb25cbiAqIEZpcmViYXNlIEF1dGggc2VydmljZXMuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoaXMgbXVzdCBiZSBjYWxsZWQgc3luY2hyb25vdXNseSBpbW1lZGlhdGVseSBmb2xsb3dpbmcgdGhlIGZpcnN0IGNhbGwgdG9cbiAqIHtAbGluayBpbml0aWFsaXplQXV0aH0uICBEbyBub3QgdXNlIHdpdGggcHJvZHVjdGlvbiBjcmVkZW50aWFscyBhcyBlbXVsYXRvclxuICogdHJhZmZpYyBpcyBub3QgZW5jcnlwdGVkLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29ubmVjdEF1dGhFbXVsYXRvcihhdXRoLCAnaHR0cDovLzEyNy4wLjAuMTo5MDk5JywgeyBkaXNhYmxlV2FybmluZ3M6IHRydWUgfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gdXJsIC0gVGhlIFVSTCBhdCB3aGljaCB0aGUgZW11bGF0b3IgaXMgcnVubmluZyAoZWcsICdodHRwOi8vbG9jYWxob3N0OjkwOTknKS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIGBvcHRpb25zLmRpc2FibGVXYXJuaW5nc2AgZGVmYXVsdHMgdG8gYGZhbHNlYC4gU2V0IGl0IHRvXG4gKiBgdHJ1ZWAgdG8gZGlzYWJsZSB0aGUgd2FybmluZyBiYW5uZXIgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25uZWN0QXV0aEVtdWxhdG9yKFxuICBhdXRoOiBBdXRoLFxuICB1cmw6IHN0cmluZyxcbiAgb3B0aW9ucz86IHsgZGlzYWJsZVdhcm5pbmdzOiBib29sZWFuIH1cbik6IHZvaWQge1xuICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XG4gIF9hc3NlcnQoXG4gICAgYXV0aEludGVybmFsLl9jYW5Jbml0RW11bGF0b3IsXG4gICAgYXV0aEludGVybmFsLFxuICAgIEF1dGhFcnJvckNvZGUuRU1VTEFUT1JfQ09ORklHX0ZBSUxFRFxuICApO1xuXG4gIF9hc3NlcnQoXG4gICAgL15odHRwcz86XFwvXFwvLy50ZXN0KHVybCksXG4gICAgYXV0aEludGVybmFsLFxuICAgIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9FTVVMQVRPUl9TQ0hFTUVcbiAgKTtcblxuICBjb25zdCBkaXNhYmxlV2FybmluZ3MgPSAhIW9wdGlvbnM/LmRpc2FibGVXYXJuaW5ncztcblxuICBjb25zdCBwcm90b2NvbCA9IGV4dHJhY3RQcm90b2NvbCh1cmwpO1xuICBjb25zdCB7IGhvc3QsIHBvcnQgfSA9IGV4dHJhY3RIb3N0QW5kUG9ydCh1cmwpO1xuICBjb25zdCBwb3J0U3RyID0gcG9ydCA9PT0gbnVsbCA/ICcnIDogYDoke3BvcnR9YDtcblxuICAvLyBBbHdheXMgcmVwbGFjZSBwYXRoIHdpdGggXCIvXCIgKGV2ZW4gaWYgaW5wdXQgdXJsIGhhZCBubyBwYXRoIGF0IGFsbCwgb3IgaGFkIGEgZGlmZmVyZW50IG9uZSkuXG4gIGF1dGhJbnRlcm5hbC5jb25maWcuZW11bGF0b3IgPSB7IHVybDogYCR7cHJvdG9jb2x9Ly8ke2hvc3R9JHtwb3J0U3RyfS9gIH07XG4gIGF1dGhJbnRlcm5hbC5zZXR0aW5ncy5hcHBWZXJpZmljYXRpb25EaXNhYmxlZEZvclRlc3RpbmcgPSB0cnVlO1xuICBhdXRoSW50ZXJuYWwuZW11bGF0b3JDb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgICBob3N0LFxuICAgIHBvcnQsXG4gICAgcHJvdG9jb2w6IHByb3RvY29sLnJlcGxhY2UoJzonLCAnJyksXG4gICAgb3B0aW9uczogT2JqZWN0LmZyZWV6ZSh7IGRpc2FibGVXYXJuaW5ncyB9KVxuICB9KTtcblxuICBpZiAoIWRpc2FibGVXYXJuaW5ncykge1xuICAgIGVtaXRFbXVsYXRvcldhcm5pbmcoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0UHJvdG9jb2wodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBwcm90b2NvbEVuZCA9IHVybC5pbmRleE9mKCc6Jyk7XG4gIHJldHVybiBwcm90b2NvbEVuZCA8IDAgPyAnJyA6IHVybC5zdWJzdHIoMCwgcHJvdG9jb2xFbmQgKyAxKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEhvc3RBbmRQb3J0KHVybDogc3RyaW5nKToge1xuICBob3N0OiBzdHJpbmc7XG4gIHBvcnQ6IG51bWJlciB8IG51bGw7XG59IHtcbiAgY29uc3QgcHJvdG9jb2wgPSBleHRyYWN0UHJvdG9jb2wodXJsKTtcbiAgY29uc3QgYXV0aG9yaXR5ID0gLyhcXC9cXC8pPyhbXj8jL10rKS8uZXhlYyh1cmwuc3Vic3RyKHByb3RvY29sLmxlbmd0aCkpOyAvLyBCZXR3ZWVuIC8vIGFuZCAvLCA/IG9yICMuXG4gIGlmICghYXV0aG9yaXR5KSB7XG4gICAgcmV0dXJuIHsgaG9zdDogJycsIHBvcnQ6IG51bGwgfTtcbiAgfVxuICBjb25zdCBob3N0QW5kUG9ydCA9IGF1dGhvcml0eVsyXS5zcGxpdCgnQCcpLnBvcCgpIHx8ICcnOyAvLyBTdHJpcCBvdXQgXCJ1c2VybmFtZTpwYXNzd29yZEBcIi5cbiAgY29uc3QgYnJhY2tldGVkSVB2NiA9IC9eKFxcW1teXFxdXStcXF0pKDp8JCkvLmV4ZWMoaG9zdEFuZFBvcnQpO1xuICBpZiAoYnJhY2tldGVkSVB2Nikge1xuICAgIGNvbnN0IGhvc3QgPSBicmFja2V0ZWRJUHY2WzFdO1xuICAgIHJldHVybiB7IGhvc3QsIHBvcnQ6IHBhcnNlUG9ydChob3N0QW5kUG9ydC5zdWJzdHIoaG9zdC5sZW5ndGggKyAxKSkgfTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBbaG9zdCwgcG9ydF0gPSBob3N0QW5kUG9ydC5zcGxpdCgnOicpO1xuICAgIHJldHVybiB7IGhvc3QsIHBvcnQ6IHBhcnNlUG9ydChwb3J0KSB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlUG9ydChwb3J0U3RyOiBzdHJpbmcpOiBudW1iZXIgfCBudWxsIHtcbiAgaWYgKCFwb3J0U3RyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcG9ydCA9IE51bWJlcihwb3J0U3RyKTtcbiAgaWYgKGlzTmFOKHBvcnQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBvcnQ7XG59XG5cbmZ1bmN0aW9uIGVtaXRFbXVsYXRvcldhcm5pbmcoKTogdm9pZCB7XG4gIGZ1bmN0aW9uIGF0dGFjaEJhbm5lcigpOiB2b2lkIHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCBzdHkgPSBlbC5zdHlsZTtcbiAgICBlbC5pbm5lclRleHQgPVxuICAgICAgJ1J1bm5pbmcgaW4gZW11bGF0b3IgbW9kZS4gRG8gbm90IHVzZSB3aXRoIHByb2R1Y3Rpb24gY3JlZGVudGlhbHMuJztcbiAgICBzdHkucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgIHN0eS53aWR0aCA9ICcxMDAlJztcbiAgICBzdHkuYmFja2dyb3VuZENvbG9yID0gJyNmZmZmZmYnO1xuICAgIHN0eS5ib3JkZXIgPSAnLjFlbSBzb2xpZCAjMDAwMDAwJztcbiAgICBzdHkuY29sb3IgPSAnI2I1MDAwMCc7XG4gICAgc3R5LmJvdHRvbSA9ICcwcHgnO1xuICAgIHN0eS5sZWZ0ID0gJzBweCc7XG4gICAgc3R5Lm1hcmdpbiA9ICcwcHgnO1xuICAgIHN0eS56SW5kZXggPSAnMTAwMDAnO1xuICAgIHN0eS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBlbC5jbGFzc0xpc3QuYWRkKCdmaXJlYmFzZS1lbXVsYXRvci13YXJuaW5nJyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmluZm8gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmluZm8oXG4gICAgICAnV0FSTklORzogWW91IGFyZSB1c2luZyB0aGUgQXV0aCBFbXVsYXRvciwnICtcbiAgICAgICAgJyB3aGljaCBpcyBpbnRlbmRlZCBmb3IgbG9jYWwgdGVzdGluZyBvbmx5LiAgRG8gbm90IHVzZSB3aXRoJyArXG4gICAgICAgICcgcHJvZHVjdGlvbiBjcmVkZW50aWFscy4nXG4gICAgKTtcbiAgfVxuICBpZiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICkge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgYXR0YWNoQmFubmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXR0YWNoQmFubmVyKCk7XG4gICAgfVxuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgUGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBkZWJ1Z0ZhaWwgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5cbi8qKlxuICogSW50ZXJmYWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY3JlZGVudGlhbHMgcmV0dXJuZWQgYnkgYW4ge0BsaW5rIEF1dGhQcm92aWRlcn0uXG4gKlxuICogQHJlbWFya3NcbiAqIEltcGxlbWVudGF0aW9ucyBzcGVjaWZ5IHRoZSBkZXRhaWxzIGFib3V0IGVhY2ggYXV0aCBwcm92aWRlcidzIGNyZWRlbnRpYWwgcmVxdWlyZW1lbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhDcmVkZW50aWFsIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIGF1dGhlbnRpY2F0aW9uIHByb3ZpZGVyIElEIGZvciB0aGUgY3JlZGVudGlhbC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogRm9yIGV4YW1wbGUsICdmYWNlYm9vay5jb20nLCBvciAnZ29vZ2xlLmNvbScuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgIC8qKlxuICAgICAqIFRoZSBhdXRoZW50aWNhdGlvbiBzaWduIGluIG1ldGhvZCBmb3IgdGhlIGNyZWRlbnRpYWwuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIEZvciBleGFtcGxlLCB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9QQVNTV09SRCwgb3JcbiAgICAgKiB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9MSU5LLiBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBzaWduLWluIG1ldGhvZFxuICAgICAqIGlkZW50aWZpZXIgYXMgcmV0dXJuZWQgaW4ge0BsaW5rIGZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsfS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzaWduSW5NZXRob2Q6IHN0cmluZ1xuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cbiAgICpcbiAgICogQHJldHVybnMgYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cbiAgICovXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiBkZWJ1Z0ZhaWwoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0SWRUb2tlblJlc3BvbnNlKF9hdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPFBob25lT3JPYXV0aFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIF9saW5rVG9JZFRva2VuKFxuICAgIF9hdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgX2lkVG9rZW46IHN0cmluZ1xuICApOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBkZWJ1Z0ZhaWwoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2dldFJlYXV0aGVudGljYXRpb25SZXNvbHZlcihfYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZGVidWdGYWlsKCdub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFjdGlvbkNvZGVPcGVyYXRpb24sIEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQge1xuICBFbmRwb2ludCxcbiAgSHR0cE1ldGhvZCxcbiAgX2FkZFRpZElmTmVjZXNzYXJ5LFxuICBfcGVyZm9ybUFwaVJlcXVlc3Rcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgTWZhRW5yb2xsbWVudCB9IGZyb20gJy4vbWZhJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNldFBhc3N3b3JkUmVxdWVzdCB7XG4gIG9vYkNvZGU6IHN0cmluZztcbiAgbmV3UGFzc3dvcmQ/OiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc2V0UGFzc3dvcmRSZXNwb25zZSB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG5ld0VtYWlsPzogc3RyaW5nO1xuICByZXF1ZXN0VHlwZT86IEFjdGlvbkNvZGVPcGVyYXRpb247XG4gIG1mYUluZm8/OiBNZmFFbnJvbGxtZW50O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzZXRQYXNzd29yZChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogUmVzZXRQYXNzd29yZFJlcXVlc3Rcbik6IFByb21pc2U8UmVzZXRQYXNzd29yZFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8UmVzZXRQYXNzd29yZFJlcXVlc3QsIFJlc2V0UGFzc3dvcmRSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuUkVTRVRfUEFTU1dPUkQsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICByZXR1cm5TZWN1cmVUb2tlbj86IGJvb2xlYW47XG4gIGVtYWlsPzogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVFbWFpbFBhc3N3b3JkUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge31cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUVtYWlsUGFzc3dvcmQoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0XG4pOiBQcm9taXNlPFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFxuICAgIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0LFxuICAgIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXNwb25zZVxuICA+KGF1dGgsIEh0dHBNZXRob2QuUE9TVCwgRW5kcG9pbnQuU0VUX0FDQ09VTlRfSU5GTywgcmVxdWVzdCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbHlBY3Rpb25Db2RlUmVxdWVzdCB7XG4gIG9vYkNvZGU6IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbHlBY3Rpb25Db2RlUmVzcG9uc2Uge31cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwcGx5QWN0aW9uQ29kZShcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogQXBwbHlBY3Rpb25Db2RlUmVxdWVzdFxuKTogUHJvbWlzZTxBcHBseUFjdGlvbkNvZGVSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PEFwcGx5QWN0aW9uQ29kZVJlcXVlc3QsIEFwcGx5QWN0aW9uQ29kZVJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TRVRfQUNDT1VOVF9JTkZPLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEFjdGlvbkNvZGVPcGVyYXRpb24sIEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQge1xuICBFbmRwb2ludCxcbiAgSHR0cE1ldGhvZCxcbiAgX2FkZFRpZElmTmVjZXNzYXJ5LFxuICBfcGVyZm9ybUFwaVJlcXVlc3QsXG4gIF9wZXJmb3JtU2lnbkluUmVxdWVzdFxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBJZFRva2VuLCBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aFBhc3N3b3JkUmVxdWVzdCB7XG4gIHJldHVyblNlY3VyZVRva2VuPzogYm9vbGVhbjtcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aFBhc3N3b3JkUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBlbWFpbDogc3RyaW5nO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBhc3N3b3JkKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoUGFzc3dvcmRSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhQYXNzd29yZFJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8XG4gICAgU2lnbkluV2l0aFBhc3N3b3JkUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoUGFzc3dvcmRSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9QQVNTV09SRCxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRPb2JDb2RlUmVxdWVzdCB7XG4gIGVtYWlsPzogc3RyaW5nOyAvLyBFdmVyeXRoaW5nIGV4Y2VwdCBWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFxuICBjb250aW51ZVVybD86IHN0cmluZztcbiAgaU9TQnVuZGxlSWQ/OiBzdHJpbmc7XG4gIGlvc0FwcFN0b3JlSWQ/OiBzdHJpbmc7XG4gIGFuZHJvaWRQYWNrYWdlTmFtZT86IHN0cmluZztcbiAgYW5kcm9pZEluc3RhbGxBcHA/OiBib29sZWFuO1xuICBhbmRyb2lkTWluaW11bVZlcnNpb25Db2RlPzogc3RyaW5nO1xuICBjYW5IYW5kbGVDb2RlSW5BcHA/OiBib29sZWFuO1xuICBkeW5hbWljTGlua0RvbWFpbj86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG4gIHRhcmdldFByb2plY3RpZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZXJpZnlFbWFpbFJlcXVlc3QgZXh0ZW5kcyBHZXRPb2JDb2RlUmVxdWVzdCB7XG4gIHJlcXVlc3RUeXBlOiBBY3Rpb25Db2RlT3BlcmF0aW9uLlZFUklGWV9FTUFJTDtcbiAgaWRUb2tlbjogSWRUb2tlbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXNzd29yZFJlc2V0UmVxdWVzdCBleHRlbmRzIEdldE9vYkNvZGVSZXF1ZXN0IHtcbiAgcmVxdWVzdFR5cGU6IEFjdGlvbkNvZGVPcGVyYXRpb24uUEFTU1dPUkRfUkVTRVQ7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGNhcHRjaGFSZXNwPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsU2lnbkluUmVxdWVzdCBleHRlbmRzIEdldE9vYkNvZGVSZXF1ZXN0IHtcbiAgcmVxdWVzdFR5cGU6IEFjdGlvbkNvZGVPcGVyYXRpb24uRU1BSUxfU0lHTklOO1xuICBlbWFpbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlcmlmeUFuZENoYW5nZUVtYWlsUmVxdWVzdCBleHRlbmRzIEdldE9vYkNvZGVSZXF1ZXN0IHtcbiAgcmVxdWVzdFR5cGU6IEFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0FORF9DSEFOR0VfRU1BSUw7XG4gIGlkVG9rZW46IElkVG9rZW47XG4gIG5ld0VtYWlsOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBHZXRPb2JDb2RlUmVzcG9uc2Uge1xuICBlbWFpbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlcmlmeUVtYWlsUmVzcG9uc2UgZXh0ZW5kcyBHZXRPb2JDb2RlUmVzcG9uc2Uge31cbmV4cG9ydCBpbnRlcmZhY2UgUGFzc3dvcmRSZXNldFJlc3BvbnNlIGV4dGVuZHMgR2V0T29iQ29kZVJlc3BvbnNlIHt9XG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsU2lnbkluUmVzcG9uc2UgZXh0ZW5kcyBHZXRPb2JDb2RlUmVzcG9uc2Uge31cbmV4cG9ydCBpbnRlcmZhY2UgVmVyaWZ5QW5kQ2hhbmdlRW1haWxSZXNwb25zZSBleHRlbmRzIEdldE9vYkNvZGVSZXF1ZXN0IHt9XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbmRPb2JDb2RlKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBHZXRPb2JDb2RlUmVxdWVzdFxuKTogUHJvbWlzZTxHZXRPb2JDb2RlUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxHZXRPb2JDb2RlUmVxdWVzdCwgR2V0T29iQ29kZVJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TRU5EX09PQl9DT0RFLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZEVtYWlsVmVyaWZpY2F0aW9uKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBWZXJpZnlFbWFpbFJlcXVlc3Rcbik6IFByb21pc2U8VmVyaWZ5RW1haWxSZXNwb25zZT4ge1xuICByZXR1cm4gc2VuZE9vYkNvZGUoYXV0aCwgcmVxdWVzdCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kUGFzc3dvcmRSZXNldEVtYWlsKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBQYXNzd29yZFJlc2V0UmVxdWVzdFxuKTogUHJvbWlzZTxQYXNzd29yZFJlc2V0UmVzcG9uc2U+IHtcbiAgcmV0dXJuIHNlbmRPb2JDb2RlKGF1dGgsIHJlcXVlc3QpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZFNpZ25JbkxpbmtUb0VtYWlsKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBFbWFpbFNpZ25JblJlcXVlc3Rcbik6IFByb21pc2U8RW1haWxTaWduSW5SZXNwb25zZT4ge1xuICByZXR1cm4gc2VuZE9vYkNvZGUoYXV0aCwgcmVxdWVzdCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlBbmRDaGFuZ2VFbWFpbChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogVmVyaWZ5QW5kQ2hhbmdlRW1haWxSZXF1ZXN0XG4pOiBQcm9taXNlPFZlcmlmeUFuZENoYW5nZUVtYWlsUmVzcG9uc2U+IHtcbiAgcmV0dXJuIHNlbmRPb2JDb2RlKGF1dGgsIHJlcXVlc3QpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIF9wZXJmb3JtU2lnbkluUmVxdWVzdCxcbiAgRW5kcG9pbnQsXG4gIEh0dHBNZXRob2QsXG4gIF9hZGRUaWRJZk5lY2Vzc2FyeVxufSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoRW1haWxMaW5rUmVxdWVzdCB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG9vYkNvZGU6IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aEVtYWlsTGlua1Jlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHtcbiAgZW1haWw6IHN0cmluZztcbiAgaXNOZXdVc2VyOiBib29sZWFuO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aEVtYWlsTGluayhcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogU2lnbkluV2l0aEVtYWlsTGlua1JlcXVlc3Rcbik6IFByb21pc2U8U2lnbkluV2l0aEVtYWlsTGlua1Jlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8XG4gICAgU2lnbkluV2l0aEVtYWlsTGlua1JlcXVlc3QsXG4gICAgU2lnbkluV2l0aEVtYWlsTGlua1Jlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9JTl9XSVRIX0VNQUlMX0xJTkssXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aEVtYWlsTGlua0ZvckxpbmtpbmdSZXF1ZXN0XG4gIGV4dGVuZHMgU2lnbkluV2l0aEVtYWlsTGlua1JlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoRW1haWxMaW5rRm9yTGlua2luZyhcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogU2lnbkluV2l0aEVtYWlsTGlua0ZvckxpbmtpbmdSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhFbWFpbExpbmtSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0PFxuICAgIFNpZ25JbldpdGhFbWFpbExpbmtGb3JMaW5raW5nUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoRW1haWxMaW5rUmVzcG9uc2VcbiAgPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TSUdOX0lOX1dJVEhfRU1BSUxfTElOSyxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQcm92aWRlcklkLCBTaWduSW5NZXRob2QgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbmltcG9ydCB7IHVwZGF0ZUVtYWlsUGFzc3dvcmQgfSBmcm9tICcuLi8uLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQgeyBzaWduSW5XaXRoUGFzc3dvcmQgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vZW1haWxfYW5kX3Bhc3N3b3JkJztcbmltcG9ydCB7XG4gIHNpZ25JbldpdGhFbWFpbExpbmssXG4gIHNpZ25JbldpdGhFbWFpbExpbmtGb3JMaW5raW5nXG59IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9lbWFpbF9saW5rJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfZmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9hdXRoX2NyZWRlbnRpYWwnO1xuXG4vKipcbiAqIEludGVyZmFjZSB0aGF0IHJlcHJlc2VudHMgdGhlIGNyZWRlbnRpYWxzIHJldHVybmVkIGJ5IHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gZm9yXG4gKiB7QGxpbmsgUHJvdmlkZXJJZH0uUEFTU1dPUkRcbiAqXG4gKiBAcmVtYXJrc1xuICogQ292ZXJzIGJvdGgge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfUEFTU1dPUkQgYW5kXG4gKiB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9MSU5LLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEVtYWlsQXV0aENyZWRlbnRpYWwgZXh0ZW5kcyBBdXRoQ3JlZGVudGlhbCB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmVhZG9ubHkgX2VtYWlsOiBzdHJpbmcsXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHJlYWRvbmx5IF9wYXNzd29yZDogc3RyaW5nLFxuICAgIHNpZ25Jbk1ldGhvZDogU2lnbkluTWV0aG9kLFxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICByZWFkb25seSBfdGVuYW50SWQ6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gICkge1xuICAgIHN1cGVyKFByb3ZpZGVySWQuUEFTU1dPUkQsIHNpZ25Jbk1ldGhvZCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyBfZnJvbUVtYWlsQW5kUGFzc3dvcmQoXG4gICAgZW1haWw6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nXG4gICk6IEVtYWlsQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBuZXcgRW1haWxBdXRoQ3JlZGVudGlhbChcbiAgICAgIGVtYWlsLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBTaWduSW5NZXRob2QuRU1BSUxfUEFTU1dPUkRcbiAgICApO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21FbWFpbEFuZENvZGUoXG4gICAgZW1haWw6IHN0cmluZyxcbiAgICBvb2JDb2RlOiBzdHJpbmcsXG4gICAgdGVuYW50SWQ6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gICk6IEVtYWlsQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBuZXcgRW1haWxBdXRoQ3JlZGVudGlhbChcbiAgICAgIGVtYWlsLFxuICAgICAgb29iQ29kZSxcbiAgICAgIFNpZ25Jbk1ldGhvZC5FTUFJTF9MSU5LLFxuICAgICAgdGVuYW50SWRcbiAgICApO1xuICB9XG5cbiAgLyoqIHtAaW5oZXJpdGRvYyBBdXRoQ3JlZGVudGlhbC50b0pTT059ICovXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBlbWFpbDogdGhpcy5fZW1haWwsXG4gICAgICBwYXNzd29yZDogdGhpcy5fcGFzc3dvcmQsXG4gICAgICBzaWduSW5NZXRob2Q6IHRoaXMuc2lnbkluTWV0aG9kLFxuICAgICAgdGVuYW50SWQ6IHRoaXMuX3RlbmFudElkXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgbWV0aG9kIHRvIGRlc2VyaWFsaXplIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhbiBvYmplY3QgaW50byBhbiB7QGxpbmsgIEF1dGhDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIGpzb24gLSBFaXRoZXIgYG9iamVjdGAgb3IgdGhlIHN0cmluZ2lmaWVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QuIFdoZW4gc3RyaW5nIGlzXG4gICAqIHByb3ZpZGVkLCBgSlNPTi5wYXJzZWAgd291bGQgYmUgY2FsbGVkIGZpcnN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBJZiB0aGUgSlNPTiBpbnB1dCBkb2VzIG5vdCByZXByZXNlbnQgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSwgbnVsbCBpcyByZXR1cm5lZC5cbiAgICovXG4gIHN0YXRpYyBmcm9tSlNPTihqc29uOiBvYmplY3QgfCBzdHJpbmcpOiBFbWFpbEF1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgY29uc3Qgb2JqID0gdHlwZW9mIGpzb24gPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShqc29uKSA6IGpzb247XG4gICAgaWYgKG9iaj8uZW1haWwgJiYgb2JqPy5wYXNzd29yZCkge1xuICAgICAgaWYgKG9iai5zaWduSW5NZXRob2QgPT09IFNpZ25Jbk1ldGhvZC5FTUFJTF9QQVNTV09SRCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJvbUVtYWlsQW5kUGFzc3dvcmQob2JqLmVtYWlsLCBvYmoucGFzc3dvcmQpO1xuICAgICAgfSBlbHNlIGlmIChvYmouc2lnbkluTWV0aG9kID09PSBTaWduSW5NZXRob2QuRU1BSUxfTElOSykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJvbUVtYWlsQW5kQ29kZShvYmouZW1haWwsIG9iai5wYXNzd29yZCwgb2JqLnRlbmFudElkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIF9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBzd2l0Y2ggKHRoaXMuc2lnbkluTWV0aG9kKSB7XG4gICAgICBjYXNlIFNpZ25Jbk1ldGhvZC5FTUFJTF9QQVNTV09SRDpcbiAgICAgICAgcmV0dXJuIHNpZ25JbldpdGhQYXNzd29yZChhdXRoLCB7XG4gICAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXG4gICAgICAgICAgZW1haWw6IHRoaXMuX2VtYWlsLFxuICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLl9wYXNzd29yZFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgU2lnbkluTWV0aG9kLkVNQUlMX0xJTks6XG4gICAgICAgIHJldHVybiBzaWduSW5XaXRoRW1haWxMaW5rKGF1dGgsIHtcbiAgICAgICAgICBlbWFpbDogdGhpcy5fZW1haWwsXG4gICAgICAgICAgb29iQ29kZTogdGhpcy5fcGFzc3dvcmRcbiAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIF9saW5rVG9JZFRva2VuKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBzd2l0Y2ggKHRoaXMuc2lnbkluTWV0aG9kKSB7XG4gICAgICBjYXNlIFNpZ25Jbk1ldGhvZC5FTUFJTF9QQVNTV09SRDpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUVtYWlsUGFzc3dvcmQoYXV0aCwge1xuICAgICAgICAgIGlkVG9rZW4sXG4gICAgICAgICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXG4gICAgICAgICAgZW1haWw6IHRoaXMuX2VtYWlsLFxuICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLl9wYXNzd29yZFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgU2lnbkluTWV0aG9kLkVNQUlMX0xJTks6XG4gICAgICAgIHJldHVybiBzaWduSW5XaXRoRW1haWxMaW5rRm9yTGlua2luZyhhdXRoLCB7XG4gICAgICAgICAgaWRUb2tlbixcbiAgICAgICAgICBlbWFpbDogdGhpcy5fZW1haWwsXG4gICAgICAgICAgb29iQ29kZTogdGhpcy5fcGFzc3dvcmRcbiAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICB9XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGgpO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgRW5kcG9pbnQsXG4gIEh0dHBNZXRob2QsXG4gIF9hZGRUaWRJZk5lY2Vzc2FyeSxcbiAgX3BlcmZvcm1TaWduSW5SZXF1ZXN0XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IElkVG9rZW4sIElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhJZHBSZXF1ZXN0IHtcbiAgcmVxdWVzdFVyaTogc3RyaW5nO1xuICBwb3N0Qm9keT86IHN0cmluZztcbiAgc2Vzc2lvbklkPzogc3RyaW5nO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbiAgcmV0dXJuU2VjdXJlVG9rZW46IGJvb2xlYW47XG4gIHJldHVybklkcENyZWRlbnRpYWw/OiBib29sZWFuO1xuICBpZFRva2VuPzogSWRUb2tlbjtcbiAgYXV0b0NyZWF0ZT86IGJvb2xlYW47XG4gIHBlbmRpbmdUb2tlbj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoSWRwUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBvYXV0aEFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICBvYXV0aFRva2VuU2VjcmV0Pzogc3RyaW5nO1xuICBub25jZT86IHN0cmluZztcbiAgb2F1dGhJZFRva2VuPzogc3RyaW5nO1xuICBwZW5kaW5nVG9rZW4/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoSWRwKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoSWRwUmVxdWVzdFxuKTogUHJvbWlzZTxTaWduSW5XaXRoSWRwUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdDxTaWduSW5XaXRoSWRwUmVxdWVzdCwgU2lnbkluV2l0aElkcFJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5TSUdOX0lOX1dJVEhfSURQLFxuICAgIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KVxuICApO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHF1ZXJ5c3RyaW5nIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQge1xuICBzaWduSW5XaXRoSWRwLFxuICBTaWduSW5XaXRoSWRwUmVxdWVzdFxufSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vaWRwJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfZmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9hdXRoX2NyZWRlbnRpYWwnO1xuXG5jb25zdCBJRFBfUkVRVUVTVF9VUkkgPSAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT0F1dGhDcmVkZW50aWFsUGFyYW1zIHtcbiAgLy8gT0F1dGggMiB1c2VzIGVpdGhlciBpZCB0b2tlbiBvciBhY2Nlc3MgdG9rZW5cbiAgaWRUb2tlbj86IHN0cmluZyB8IG51bGw7XG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nIHwgbnVsbDtcblxuICAvLyBUaGVzZSBmaWVsZHMgYXJlIHVzZWQgd2l0aCBPQXV0aCAxXG4gIG9hdXRoVG9rZW4/OiBzdHJpbmc7XG4gIHNlY3JldD86IHN0cmluZztcbiAgb2F1dGhUb2tlblNlY3JldD86IHN0cmluZztcblxuICAvLyBOb25jZSBpcyBvbmx5IHNldCBpZiBwZW5kaW5nVG9rZW4gaXMgbm90IHByZXNlbnRcbiAgbm9uY2U/OiBzdHJpbmc7XG4gIHBlbmRpbmdUb2tlbj86IHN0cmluZztcblxuICAvLyBVdGlsaXRpZXNcbiAgcHJvdmlkZXJJZDogc3RyaW5nO1xuICBzaWduSW5NZXRob2Q6IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBPQXV0aCBjcmVkZW50aWFscyByZXR1cm5lZCBieSBhbiB7QGxpbmsgT0F1dGhQcm92aWRlcn0uXG4gKlxuICogQHJlbWFya3NcbiAqIEltcGxlbWVudGF0aW9ucyBzcGVjaWZ5IHRoZSBkZXRhaWxzIGFib3V0IGVhY2ggYXV0aCBwcm92aWRlcidzIGNyZWRlbnRpYWwgcmVxdWlyZW1lbnRzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9BdXRoQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCBJRCB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhlIGNyZWRlbnRpYWwgaWYgaXQgYmVsb25ncyB0byBhbiBPSURDIHByb3ZpZGVyLFxuICAgKiBzdWNoIGFzIGBnb29nbGUuY29tYC5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBpZFRva2VuPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIE9BdXRoIGFjY2VzcyB0b2tlbiBhc3NvY2lhdGVkIHdpdGggdGhlIGNyZWRlbnRpYWwgaWYgaXQgYmVsb25ncyB0byBhblxuICAgKiB7QGxpbmsgT0F1dGhQcm92aWRlcn0sIHN1Y2ggYXMgYGZhY2Vib29rLmNvbWAsIGB0d2l0dGVyLmNvbWAsIGV0Yy5cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBhY2Nlc3NUb2tlbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4gc2VjcmV0IGFzc29jaWF0ZWQgd2l0aCB0aGUgY3JlZGVudGlhbCBpZiBpdCBiZWxvbmdzIHRvIGFuIE9BdXRoIDEuMFxuICAgKiBwcm92aWRlciwgc3VjaCBhcyBgdHdpdHRlci5jb21gLlxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHNlY3JldD86IHN0cmluZztcbiAgXG4gIHByaXZhdGUgbm9uY2U/OiBzdHJpbmc7XG4gIHByaXZhdGUgcGVuZGluZ1Rva2VuOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyBfZnJvbVBhcmFtcyhwYXJhbXM6IE9BdXRoQ3JlZGVudGlhbFBhcmFtcyk6IE9BdXRoQ3JlZGVudGlhbCB7XG4gICAgY29uc3QgY3JlZCA9IG5ldyBPQXV0aENyZWRlbnRpYWwocGFyYW1zLnByb3ZpZGVySWQsIHBhcmFtcy5zaWduSW5NZXRob2QpO1xuXG4gICAgaWYgKHBhcmFtcy5pZFRva2VuIHx8IHBhcmFtcy5hY2Nlc3NUb2tlbikge1xuICAgICAgLy8gT0F1dGggMiBhbmQgZWl0aGVyIElEIHRva2VuIG9yIGFjY2VzcyB0b2tlbi5cbiAgICAgIGlmIChwYXJhbXMuaWRUb2tlbikge1xuICAgICAgICBjcmVkLmlkVG9rZW4gPSBwYXJhbXMuaWRUb2tlbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5hY2Nlc3NUb2tlbikge1xuICAgICAgICBjcmVkLmFjY2Vzc1Rva2VuID0gcGFyYW1zLmFjY2Vzc1Rva2VuO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgbm9uY2UgaWYgYXZhaWxhYmxlIGFuZCBubyBwZW5kaW5nVG9rZW4gaXMgcHJlc2VudC5cbiAgICAgIGlmIChwYXJhbXMubm9uY2UgJiYgIXBhcmFtcy5wZW5kaW5nVG9rZW4pIHtcbiAgICAgICAgY3JlZC5ub25jZSA9IHBhcmFtcy5ub25jZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5wZW5kaW5nVG9rZW4pIHtcbiAgICAgICAgY3JlZC5wZW5kaW5nVG9rZW4gPSBwYXJhbXMucGVuZGluZ1Rva2VuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW1zLm9hdXRoVG9rZW4gJiYgcGFyYW1zLm9hdXRoVG9rZW5TZWNyZXQpIHtcbiAgICAgIC8vIE9BdXRoIDEgYW5kIE9BdXRoIHRva2VuIHdpdGggdG9rZW4gc2VjcmV0XG4gICAgICBjcmVkLmFjY2Vzc1Rva2VuID0gcGFyYW1zLm9hdXRoVG9rZW47XG4gICAgICBjcmVkLnNlY3JldCA9IHBhcmFtcy5vYXV0aFRva2VuU2VjcmV0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfZmFpbChBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlZDtcbiAgfVxuXG4gIC8qKiB7QGluaGVyaXRkb2MgQXV0aENyZWRlbnRpYWwudG9KU09OfSAgKi9cbiAgdG9KU09OKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkVG9rZW46IHRoaXMuaWRUb2tlbixcbiAgICAgIGFjY2Vzc1Rva2VuOiB0aGlzLmFjY2Vzc1Rva2VuLFxuICAgICAgc2VjcmV0OiB0aGlzLnNlY3JldCxcbiAgICAgIG5vbmNlOiB0aGlzLm5vbmNlLFxuICAgICAgcGVuZGluZ1Rva2VuOiB0aGlzLnBlbmRpbmdUb2tlbixcbiAgICAgIHByb3ZpZGVySWQ6IHRoaXMucHJvdmlkZXJJZCxcbiAgICAgIHNpZ25Jbk1ldGhvZDogdGhpcy5zaWduSW5NZXRob2RcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBtZXRob2QgdG8gZGVzZXJpYWxpemUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdCBpbnRvIGFuXG4gICAqIHtAbGluayAgQXV0aENyZWRlbnRpYWx9LlxuICAgKlxuICAgKiBAcGFyYW0ganNvbiAtIElucHV0IGNhbiBiZSBlaXRoZXIgT2JqZWN0IG9yIHRoZSBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0LlxuICAgKiBXaGVuIHN0cmluZyBpcyBwcm92aWRlZCwgSlNPTi5wYXJzZSB3b3VsZCBiZSBjYWxsZWQgZmlyc3QuXG4gICAqXG4gICAqIEByZXR1cm5zIElmIHRoZSBKU09OIGlucHV0IGRvZXMgbm90IHJlcHJlc2VudCBhbiB7QGxpbmsgIEF1dGhDcmVkZW50aWFsfSwgbnVsbCBpcyByZXR1cm5lZC5cbiAgICovXG4gIHN0YXRpYyBmcm9tSlNPTihqc29uOiBzdHJpbmcgfCBvYmplY3QpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICBjb25zdCBvYmogPSB0eXBlb2YganNvbiA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKGpzb24pIDoganNvbjtcbiAgICBjb25zdCB7IHByb3ZpZGVySWQsIHNpZ25Jbk1ldGhvZCwgLi4ucmVzdCB9OiBPQXV0aENyZWRlbnRpYWxQYXJhbXMgPSBvYmo7XG4gICAgaWYgKCFwcm92aWRlcklkIHx8ICFzaWduSW5NZXRob2QpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWQgPSBuZXcgT0F1dGhDcmVkZW50aWFsKHByb3ZpZGVySWQsIHNpZ25Jbk1ldGhvZCk7XG4gICAgY3JlZC5pZFRva2VuID0gcmVzdC5pZFRva2VuIHx8IHVuZGVmaW5lZDtcbiAgICBjcmVkLmFjY2Vzc1Rva2VuID0gcmVzdC5hY2Nlc3NUb2tlbiB8fCB1bmRlZmluZWQ7XG4gICAgY3JlZC5zZWNyZXQgPSByZXN0LnNlY3JldDtcbiAgICBjcmVkLm5vbmNlID0gcmVzdC5ub25jZTtcbiAgICBjcmVkLnBlbmRpbmdUb2tlbiA9IHJlc3QucGVuZGluZ1Rva2VuIHx8IG51bGw7XG4gICAgcmV0dXJuIGNyZWQ7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5idWlsZFJlcXVlc3QoKTtcbiAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCByZXF1ZXN0KTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX2xpbmtUb0lkVG9rZW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGlkVG9rZW46IHN0cmluZ1xuICApOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmJ1aWxkUmVxdWVzdCgpO1xuICAgIHJlcXVlc3QuaWRUb2tlbiA9IGlkVG9rZW47XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9nZXRSZWF1dGhlbnRpY2F0aW9uUmVzb2x2ZXIoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5idWlsZFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0LmF1dG9DcmVhdGUgPSBmYWxzZTtcbiAgICByZXR1cm4gc2lnbkluV2l0aElkcChhdXRoLCByZXF1ZXN0KTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRSZXF1ZXN0KCk6IFNpZ25JbldpdGhJZHBSZXF1ZXN0IHtcbiAgICBjb25zdCByZXF1ZXN0OiBTaWduSW5XaXRoSWRwUmVxdWVzdCA9IHtcbiAgICAgIHJlcXVlc3RVcmk6IElEUF9SRVFVRVNUX1VSSSxcbiAgICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnBlbmRpbmdUb2tlbikge1xuICAgICAgcmVxdWVzdC5wZW5kaW5nVG9rZW4gPSB0aGlzLnBlbmRpbmdUb2tlbjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcG9zdEJvZHk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICAgIGlmICh0aGlzLmlkVG9rZW4pIHtcbiAgICAgICAgcG9zdEJvZHlbJ2lkX3Rva2VuJ10gPSB0aGlzLmlkVG9rZW47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hY2Nlc3NUb2tlbikge1xuICAgICAgICBwb3N0Qm9keVsnYWNjZXNzX3Rva2VuJ10gPSB0aGlzLmFjY2Vzc1Rva2VuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2VjcmV0KSB7XG4gICAgICAgIHBvc3RCb2R5WydvYXV0aF90b2tlbl9zZWNyZXQnXSA9IHRoaXMuc2VjcmV0O1xuICAgICAgfVxuXG4gICAgICBwb3N0Qm9keVsncHJvdmlkZXJJZCddID0gdGhpcy5wcm92aWRlcklkO1xuICAgICAgaWYgKHRoaXMubm9uY2UgJiYgIXRoaXMucGVuZGluZ1Rva2VuKSB7XG4gICAgICAgIHBvc3RCb2R5Wydub25jZSddID0gdGhpcy5ub25jZTtcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5wb3N0Qm9keSA9IHF1ZXJ5c3RyaW5nKHBvc3RCb2R5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEVuZHBvaW50LFxuICBIdHRwTWV0aG9kLFxuICBfYWRkVGlkSWZOZWNlc3NhcnksXG4gIF9tYWtlVGFnZ2VkRXJyb3IsXG4gIF9wZXJmb3JtQXBpUmVxdWVzdCxcbiAgX3BlcmZvcm1TaWduSW5SZXF1ZXN0XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBTZXJ2ZXJFcnJvciwgU2VydmVyRXJyb3JNYXAgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3Qge1xuICBwaG9uZU51bWJlcjogc3RyaW5nO1xuICByZWNhcHRjaGFUb2tlbjogc3RyaW5nO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kUGhvbmVWZXJpZmljYXRpb25Db2RlUmVzcG9uc2Uge1xuICBzZXNzaW9uSW5mbzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZShcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3Rcbik6IFByb21pc2U8U2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8XG4gICAgU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3QsXG4gICAgU2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZVJlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0VORF9WRVJJRklDQVRJT05fQ09ERSxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IHtcbiAgdGVtcG9yYXJ5UHJvb2Y/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xuICBzZXNzaW9uSW5mbz86IHN0cmluZztcbiAgY29kZT86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua1dpdGhQaG9uZU51bWJlclJlcXVlc3RcbiAgZXh0ZW5kcyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlIGV4dGVuZHMgSWRUb2tlblJlc3BvbnNlIHtcbiAgdGVtcG9yYXJ5UHJvb2Y/OiBzdHJpbmc7XG4gIHBob25lTnVtYmVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aFBob25lTnVtYmVyKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8XG4gICAgU2lnbkluV2l0aFBob25lTnVtYmVyUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9QSE9ORV9OVU1CRVIsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaW5rV2l0aFBob25lTnVtYmVyKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBMaW5rV2l0aFBob25lTnVtYmVyUmVxdWVzdFxuKTogUHJvbWlzZTxTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9wZXJmb3JtU2lnbkluUmVxdWVzdDxcbiAgICBMaW5rV2l0aFBob25lTnVtYmVyUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9QSE9ORV9OVU1CRVIsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG4gIGlmIChyZXNwb25zZS50ZW1wb3JhcnlQcm9vZikge1xuICAgIHRocm93IF9tYWtlVGFnZ2VkRXJyb3IoYXV0aCwgQXV0aEVycm9yQ29kZS5ORUVEX0NPTkZJUk1BVElPTiwgcmVzcG9uc2UpO1xuICB9XG4gIHJldHVybiByZXNwb25zZTtcbn1cblxuaW50ZXJmYWNlIFZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmdSZXF1ZXN0XG4gIGV4dGVuZHMgU2lnbkluV2l0aFBob25lTnVtYmVyUmVxdWVzdCB7XG4gIG9wZXJhdGlvbjogJ1JFQVVUSCc7XG59XG5cbmNvbnN0IFZFUklGWV9QSE9ORV9OVU1CRVJfRk9SX0VYSVNUSU5HX0VSUk9SX01BUF86IFBhcnRpYWw8XG4gIFNlcnZlckVycm9yTWFwPFNlcnZlckVycm9yPlxuPiA9IHtcbiAgW1NlcnZlckVycm9yLlVTRVJfTk9UX0ZPVU5EXTogQXV0aEVycm9yQ29kZS5VU0VSX0RFTEVURURcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlQaG9uZU51bWJlckZvckV4aXN0aW5nKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlPiB7XG4gIGNvbnN0IGFwaVJlcXVlc3Q6IFZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmdSZXF1ZXN0ID0ge1xuICAgIC4uLnJlcXVlc3QsXG4gICAgb3BlcmF0aW9uOiAnUkVBVVRIJ1xuICB9O1xuICByZXR1cm4gX3BlcmZvcm1TaWduSW5SZXF1ZXN0PFxuICAgIFZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmdSZXF1ZXN0LFxuICAgIFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlXG4gID4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9JTl9XSVRIX1BIT05FX05VTUJFUixcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgYXBpUmVxdWVzdCksXG4gICAgVkVSSUZZX1BIT05FX05VTUJFUl9GT1JfRVhJU1RJTkdfRVJST1JfTUFQX1xuICApO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFByb3ZpZGVySWQsIFNpZ25Jbk1ldGhvZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuaW1wb3J0IHsgUGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHtcbiAgbGlua1dpdGhQaG9uZU51bWJlcixcbiAgc2lnbkluV2l0aFBob25lTnVtYmVyLFxuICBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0LFxuICB2ZXJpZnlQaG9uZU51bWJlckZvckV4aXN0aW5nXG59IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9zbXMnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vYXV0aF9jcmVkZW50aWFsJztcblxuZXhwb3J0IGludGVyZmFjZSBQaG9uZUF1dGhDcmVkZW50aWFsUGFyYW1ldGVycyB7XG4gIHZlcmlmaWNhdGlvbklkPzogc3RyaW5nO1xuICB2ZXJpZmljYXRpb25Db2RlPzogc3RyaW5nO1xuICBwaG9uZU51bWJlcj86IHN0cmluZztcbiAgdGVtcG9yYXJ5UHJvb2Y/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgY3JlZGVudGlhbHMgcmV0dXJuZWQgYnkge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBQaG9uZUF1dGhDcmVkZW50aWFsIGV4dGVuZHMgQXV0aENyZWRlbnRpYWwge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcGFyYW1zOiBQaG9uZUF1dGhDcmVkZW50aWFsUGFyYW1ldGVycykge1xuICAgIHN1cGVyKFByb3ZpZGVySWQuUEhPTkUsIFNpZ25Jbk1ldGhvZC5QSE9ORSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHN0YXRpYyBfZnJvbVZlcmlmaWNhdGlvbihcbiAgICB2ZXJpZmljYXRpb25JZDogc3RyaW5nLFxuICAgIHZlcmlmaWNhdGlvbkNvZGU6IHN0cmluZ1xuICApOiBQaG9uZUF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gbmV3IFBob25lQXV0aENyZWRlbnRpYWwoeyB2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSB9KTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIF9mcm9tVG9rZW5SZXNwb25zZShcbiAgICBwaG9uZU51bWJlcjogc3RyaW5nLFxuICAgIHRlbXBvcmFyeVByb29mOiBzdHJpbmdcbiAgKTogUGhvbmVBdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIG5ldyBQaG9uZUF1dGhDcmVkZW50aWFsKHsgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0pO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8UGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBzaWduSW5XaXRoUGhvbmVOdW1iZXIoYXV0aCwgdGhpcy5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9saW5rVG9JZFRva2VuKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gbGlua1dpdGhQaG9uZU51bWJlcihhdXRoLCB7XG4gICAgICBpZFRva2VuLFxuICAgICAgLi4udGhpcy5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0UmVhdXRoZW50aWNhdGlvblJlc29sdmVyKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHZlcmlmeVBob25lTnVtYmVyRm9yRXhpc3RpbmcoYXV0aCwgdGhpcy5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9tYWtlVmVyaWZpY2F0aW9uUmVxdWVzdCgpOiBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IHtcbiAgICBjb25zdCB7IHRlbXBvcmFyeVByb29mLCBwaG9uZU51bWJlciwgdmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUgfSA9XG4gICAgICB0aGlzLnBhcmFtcztcbiAgICBpZiAodGVtcG9yYXJ5UHJvb2YgJiYgcGhvbmVOdW1iZXIpIHtcbiAgICAgIHJldHVybiB7IHRlbXBvcmFyeVByb29mLCBwaG9uZU51bWJlciB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzZXNzaW9uSW5mbzogdmVyaWZpY2F0aW9uSWQsXG4gICAgICBjb2RlOiB2ZXJpZmljYXRpb25Db2RlXG4gICAgfTtcbiAgfVxuXG4gIC8qKiB7QGluaGVyaXRkb2MgQXV0aENyZWRlbnRpYWwudG9KU09OfSAqL1xuICB0b0pTT04oKTogb2JqZWN0IHtcbiAgICBjb25zdCBvYmo6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICBwcm92aWRlcklkOiB0aGlzLnByb3ZpZGVySWRcbiAgICB9O1xuICAgIGlmICh0aGlzLnBhcmFtcy5waG9uZU51bWJlcikge1xuICAgICAgb2JqLnBob25lTnVtYmVyID0gdGhpcy5wYXJhbXMucGhvbmVOdW1iZXI7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhcmFtcy50ZW1wb3JhcnlQcm9vZikge1xuICAgICAgb2JqLnRlbXBvcmFyeVByb29mID0gdGhpcy5wYXJhbXMudGVtcG9yYXJ5UHJvb2Y7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhcmFtcy52ZXJpZmljYXRpb25Db2RlKSB7XG4gICAgICBvYmoudmVyaWZpY2F0aW9uQ29kZSA9IHRoaXMucGFyYW1zLnZlcmlmaWNhdGlvbkNvZGU7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhcmFtcy52ZXJpZmljYXRpb25JZCkge1xuICAgICAgb2JqLnZlcmlmaWNhdGlvbklkID0gdGhpcy5wYXJhbXMudmVyaWZpY2F0aW9uSWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKiBHZW5lcmF0ZXMgYSBwaG9uZSBjcmVkZW50aWFsIGJhc2VkIG9uIGEgcGxhaW4gb2JqZWN0IG9yIGEgSlNPTiBzdHJpbmcuICovXG4gIHN0YXRpYyBmcm9tSlNPTihqc29uOiBvYmplY3QgfCBzdHJpbmcpOiBQaG9uZUF1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgaWYgKHR5cGVvZiBqc29uID09PSAnc3RyaW5nJykge1xuICAgICAganNvbiA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgfVxuXG4gICAgY29uc3QgeyB2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSwgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0gPVxuICAgICAganNvbiBhcyB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgIGlmIChcbiAgICAgICF2ZXJpZmljYXRpb25Db2RlICYmXG4gICAgICAhdmVyaWZpY2F0aW9uSWQgJiZcbiAgICAgICFwaG9uZU51bWJlciAmJlxuICAgICAgIXRlbXBvcmFyeVByb29mXG4gICAgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFBob25lQXV0aENyZWRlbnRpYWwoe1xuICAgICAgdmVyaWZpY2F0aW9uSWQsXG4gICAgICB2ZXJpZmljYXRpb25Db2RlLFxuICAgICAgcGhvbmVOdW1iZXIsXG4gICAgICB0ZW1wb3JhcnlQcm9vZlxuICAgIH0pO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgZXh0cmFjdFF1ZXJ5c3RyaW5nLCBxdWVyeXN0cmluZ0RlY29kZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IEFjdGlvbkNvZGVPcGVyYXRpb24gfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuL3V0aWwvYXNzZXJ0JztcblxuLyoqXG4gKiBFbnVtcyBmb3IgZmllbGRzIGluIFVSTCBxdWVyeSBzdHJpbmcuXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgZW51bSBRdWVyeUZpZWxkIHtcbiAgQVBJX0tFWSA9ICdhcGlLZXknLFxuICBDT0RFID0gJ29vYkNvZGUnLFxuICBDT05USU5VRV9VUkwgPSAnY29udGludWVVcmwnLFxuICBMQU5HVUFHRV9DT0RFID0gJ2xhbmd1YWdlQ29kZScsXG4gIE1PREUgPSAnbW9kZScsXG4gIFRFTkFOVF9JRCA9ICd0ZW5hbnRJZCdcbn1cblxuLyoqXG4gKiBNYXBzIHRoZSBtb2RlIHN0cmluZyBpbiBhY3Rpb24gY29kZSBVUkwgdG8gQWN0aW9uIENvZGUgSW5mbyBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIG1vZGVcbiAqL1xuZnVuY3Rpb24gcGFyc2VNb2RlKG1vZGU6IHN0cmluZyB8IG51bGwpOiBBY3Rpb25Db2RlT3BlcmF0aW9uIHwgbnVsbCB7XG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ3JlY292ZXJFbWFpbCc6XG4gICAgICByZXR1cm4gQWN0aW9uQ29kZU9wZXJhdGlvbi5SRUNPVkVSX0VNQUlMO1xuICAgIGNhc2UgJ3Jlc2V0UGFzc3dvcmQnOlxuICAgICAgcmV0dXJuIEFjdGlvbkNvZGVPcGVyYXRpb24uUEFTU1dPUkRfUkVTRVQ7XG4gICAgY2FzZSAnc2lnbkluJzpcbiAgICAgIHJldHVybiBBY3Rpb25Db2RlT3BlcmF0aW9uLkVNQUlMX1NJR05JTjtcbiAgICBjYXNlICd2ZXJpZnlFbWFpbCc6XG4gICAgICByZXR1cm4gQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfRU1BSUw7XG4gICAgY2FzZSAndmVyaWZ5QW5kQ2hhbmdlRW1haWwnOlxuICAgICAgcmV0dXJuIEFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0FORF9DSEFOR0VfRU1BSUw7XG4gICAgY2FzZSAncmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb24nOlxuICAgICAgcmV0dXJuIEFjdGlvbkNvZGVPcGVyYXRpb24uUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT047XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHRvIHBhcnNlIEZETCBsaW5rc1xuICpcbiAqIEBwYXJhbSB1cmxcbiAqL1xuZnVuY3Rpb24gcGFyc2VEZWVwTGluayh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGxpbmsgPSBxdWVyeXN0cmluZ0RlY29kZShleHRyYWN0UXVlcnlzdHJpbmcodXJsKSlbJ2xpbmsnXTtcblxuICAvLyBEb3VibGUgbGluayBjYXNlIChhdXRvbWF0aWMgcmVkaXJlY3QpLlxuICBjb25zdCBkb3VibGVEZWVwTGluayA9IGxpbmtcbiAgICA/IHF1ZXJ5c3RyaW5nRGVjb2RlKGV4dHJhY3RRdWVyeXN0cmluZyhsaW5rKSlbJ2RlZXBfbGlua19pZCddXG4gICAgOiBudWxsO1xuICAvLyBpT1MgY3VzdG9tIHNjaGVtZSBsaW5rcy5cbiAgY29uc3QgaU9TRGVlcExpbmsgPSBxdWVyeXN0cmluZ0RlY29kZShleHRyYWN0UXVlcnlzdHJpbmcodXJsKSlbXG4gICAgJ2RlZXBfbGlua19pZCdcbiAgXTtcbiAgY29uc3QgaU9TRG91YmxlRGVlcExpbmsgPSBpT1NEZWVwTGlua1xuICAgID8gcXVlcnlzdHJpbmdEZWNvZGUoZXh0cmFjdFF1ZXJ5c3RyaW5nKGlPU0RlZXBMaW5rKSlbJ2xpbmsnXVxuICAgIDogbnVsbDtcbiAgcmV0dXJuIGlPU0RvdWJsZURlZXBMaW5rIHx8IGlPU0RlZXBMaW5rIHx8IGRvdWJsZURlZXBMaW5rIHx8IGxpbmsgfHwgdXJsO1xufVxuXG4vKipcbiAqIEEgdXRpbGl0eSBjbGFzcyB0byBwYXJzZSBlbWFpbCBhY3Rpb24gVVJMcyBzdWNoIGFzIHBhc3N3b3JkIHJlc2V0LCBlbWFpbCB2ZXJpZmljYXRpb24sXG4gKiBlbWFpbCBsaW5rIHNpZ24gaW4sIGV0Yy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBBY3Rpb25Db2RlVVJMIHtcbiAgLyoqXG4gICAqIFRoZSBBUEkga2V5IG9mIHRoZSBlbWFpbCBhY3Rpb24gbGluay5cbiAgICovXG4gIHJlYWRvbmx5IGFwaUtleTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGFjdGlvbiBjb2RlIG9mIHRoZSBlbWFpbCBhY3Rpb24gbGluay5cbiAgICovXG4gIHJlYWRvbmx5IGNvZGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjb250aW51ZSBVUkwgb2YgdGhlIGVtYWlsIGFjdGlvbiBsaW5rLiBOdWxsIGlmIG5vdCBwcm92aWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnRpbnVlVXJsOiBzdHJpbmcgfCBudWxsO1xuICAvKipcbiAgICogVGhlIGxhbmd1YWdlIGNvZGUgb2YgdGhlIGVtYWlsIGFjdGlvbiBsaW5rLiBOdWxsIGlmIG5vdCBwcm92aWRlZC5cbiAgICovXG4gIHJlYWRvbmx5IGxhbmd1YWdlQ29kZTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gcGVyZm9ybWVkIGJ5IHRoZSBlbWFpbCBhY3Rpb24gbGluay4gSXQgcmV0dXJucyBmcm9tIG9uZSBvZiB0aGUgdHlwZXMgZnJvbVxuICAgKiB7QGxpbmsgQWN0aW9uQ29kZUluZm99XG4gICAqL1xuICByZWFkb25seSBvcGVyYXRpb246IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSB0ZW5hbnQgSUQgb2YgdGhlIGVtYWlsIGFjdGlvbiBsaW5rLiBOdWxsIGlmIHRoZSBlbWFpbCBhY3Rpb24gaXMgZnJvbSB0aGUgcGFyZW50IHByb2plY3QuXG4gICAqL1xuICByZWFkb25seSB0ZW5hbnRJZDogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogQHBhcmFtIGFjdGlvbkxpbmsgLSBUaGUgbGluayBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIFVSTC5cbiAgICogQHJldHVybnMgVGhlIHtAbGluayBBY3Rpb25Db2RlVVJMfSBvYmplY3QsIG9yIG51bGwgaWYgdGhlIGxpbmsgaXMgaW52YWxpZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhY3Rpb25MaW5rOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzZWFyY2hQYXJhbXMgPSBxdWVyeXN0cmluZ0RlY29kZShleHRyYWN0UXVlcnlzdHJpbmcoYWN0aW9uTGluaykpO1xuICAgIGNvbnN0IGFwaUtleSA9IHNlYXJjaFBhcmFtc1tRdWVyeUZpZWxkLkFQSV9LRVldID8/IG51bGw7XG4gICAgY29uc3QgY29kZSA9IHNlYXJjaFBhcmFtc1tRdWVyeUZpZWxkLkNPREVdID8/IG51bGw7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gcGFyc2VNb2RlKHNlYXJjaFBhcmFtc1tRdWVyeUZpZWxkLk1PREVdID8/IG51bGwpO1xuICAgIC8vIFZhbGlkYXRlIEFQSSBrZXksIGNvZGUgYW5kIG1vZGUuXG4gICAgX2Fzc2VydChhcGlLZXkgJiYgY29kZSAmJiBvcGVyYXRpb24sIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgIHRoaXMub3BlcmF0aW9uID0gb3BlcmF0aW9uO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5jb250aW51ZVVybCA9IHNlYXJjaFBhcmFtc1tRdWVyeUZpZWxkLkNPTlRJTlVFX1VSTF0gPz8gbnVsbDtcbiAgICB0aGlzLmxhbmd1YWdlQ29kZSA9IHNlYXJjaFBhcmFtc1tRdWVyeUZpZWxkLkxBTkdVQUdFX0NPREVdID8/IG51bGw7XG4gICAgdGhpcy50ZW5hbnRJZCA9IHNlYXJjaFBhcmFtc1tRdWVyeUZpZWxkLlRFTkFOVF9JRF0gPz8gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGVtYWlsIGFjdGlvbiBsaW5rIHN0cmluZyBhbmQgcmV0dXJucyBhbiB7QGxpbmsgQWN0aW9uQ29kZVVSTH0gaWYgdGhlIGxpbmsgaXMgdmFsaWQsXG4gICAqIG90aGVyd2lzZSByZXR1cm5zIG51bGwuXG4gICAqXG4gICAqIEBwYXJhbSBsaW5rICAtIFRoZSBlbWFpbCBhY3Rpb24gbGluayBzdHJpbmcuXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVVSTH0gb2JqZWN0LCBvciBudWxsIGlmIHRoZSBsaW5rIGlzIGludmFsaWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN0YXRpYyBwYXJzZUxpbmsobGluazogc3RyaW5nKTogQWN0aW9uQ29kZVVSTCB8IG51bGwge1xuICAgIGNvbnN0IGFjdGlvbkxpbmsgPSBwYXJzZURlZXBMaW5rKGxpbmspO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IEFjdGlvbkNvZGVVUkwoYWN0aW9uTGluayk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIGVtYWlsIGFjdGlvbiBsaW5rIHN0cmluZyBhbmQgcmV0dXJucyBhbiB7QGxpbmsgQWN0aW9uQ29kZVVSTH0gaWZcbiAqIHRoZSBsaW5rIGlzIHZhbGlkLCBvdGhlcndpc2UgcmV0dXJucyBudWxsLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQWN0aW9uQ29kZVVSTChsaW5rOiBzdHJpbmcpOiBBY3Rpb25Db2RlVVJMIHwgbnVsbCB7XG4gIHJldHVybiBBY3Rpb25Db2RlVVJMLnBhcnNlTGluayhsaW5rKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQcm92aWRlcklkLCBTaWduSW5NZXRob2QgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBBY3Rpb25Db2RlVVJMIH0gZnJvbSAnLi4vYWN0aW9uX2NvZGVfdXJsJztcbmltcG9ydCB7IEVtYWlsQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscy9lbWFpbCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcge0BsaW5rIEVtYWlsQXV0aENyZWRlbnRpYWx9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEVtYWlsQXV0aFByb3ZpZGVyIGltcGxlbWVudHMgQXV0aFByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LlBBU1NXT1JELCBldmVuIGZvciBlbWFpbCBsaW5rLlxuICAgKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAncGFzc3dvcmQnID0gUHJvdmlkZXJJZC5QQVNTV09SRDtcbiAgLyoqXG4gICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfUEFTU1dPUkQuXG4gICAqL1xuICBzdGF0aWMgcmVhZG9ubHkgRU1BSUxfUEFTU1dPUkRfU0lHTl9JTl9NRVRIT0Q6ICdwYXNzd29yZCcgPVxuICAgIFNpZ25Jbk1ldGhvZC5FTUFJTF9QQVNTV09SRDtcbiAgLyoqXG4gICAqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfTElOSy5cbiAgICovXG4gIHN0YXRpYyByZWFkb25seSBFTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EOiAnZW1haWxMaW5rJyA9XG4gICAgU2lnbkluTWV0aG9kLkVNQUlMX0xJTks7XG4gIC8qKlxuICAgKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5QQVNTV09SRCwgZXZlbiBmb3IgZW1haWwgbGluay5cbiAgICovXG4gIHJlYWRvbmx5IHByb3ZpZGVySWQgPSBFbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRDtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IHVzaW5nIGFuIGVtYWlsIGFuZCBwYXNzd29yZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IEVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoZW1haWwsIHBhc3N3b3JkKTtcbiAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoLCBhdXRoQ3JlZGVudGlhbCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBlbWFpbCAtIEVtYWlsIGFkZHJlc3MuXG4gICAqIEBwYXJhbSBwYXNzd29yZCAtIFVzZXIgYWNjb3VudCBwYXNzd29yZC5cbiAgICogQHJldHVybnMgVGhlIGF1dGggcHJvdmlkZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBFbWFpbEF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gRW1haWxBdXRoQ3JlZGVudGlhbC5fZnJvbUVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0gdXNpbmcgYW4gZW1haWwgYW5kIGFuIGVtYWlsIGxpbmsgYWZ0ZXIgYSBzaWduIGluIHdpdGhcbiAgICogZW1haWwgbGluayBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgYXV0aENyZWRlbnRpYWwgPSBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsV2l0aExpbmsoYXV0aCwgZW1haWwsIGVtYWlsTGluayk7XG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoYXV0aCwgYXV0aENyZWRlbnRpYWwpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBhd2FpdCBzZW5kU2lnbkluTGlua1RvRW1haWwoYXV0aCwgZW1haWwpO1xuICAgKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdXNlci5cbiAgICogY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBzaWduSW5XaXRoRW1haWxMaW5rKGF1dGgsIGVtYWlsLCBlbWFpbExpbmspO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlIHVzZWQgdG8gdmVyaWZ5IHRoZSBsaW5rLlxuICAgKiBAcGFyYW0gZW1haWwgLSBFbWFpbCBhZGRyZXNzLlxuICAgKiBAcGFyYW0gZW1haWxMaW5rIC0gU2lnbi1pbiBlbWFpbCBsaW5rLlxuICAgKiBAcmV0dXJucyAtIFRoZSBhdXRoIHByb3ZpZGVyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbFdpdGhMaW5rKFxuICAgIGVtYWlsOiBzdHJpbmcsXG4gICAgZW1haWxMaW5rOiBzdHJpbmdcbiAgKTogRW1haWxBdXRoQ3JlZGVudGlhbCB7XG4gICAgY29uc3QgYWN0aW9uQ29kZVVybCA9IEFjdGlvbkNvZGVVUkwucGFyc2VMaW5rKGVtYWlsTGluayk7XG4gICAgX2Fzc2VydChhY3Rpb25Db2RlVXJsLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcblxuICAgIHJldHVybiBFbWFpbEF1dGhDcmVkZW50aWFsLl9mcm9tRW1haWxBbmRDb2RlKFxuICAgICAgZW1haWwsXG4gICAgICBhY3Rpb25Db2RlVXJsLmNvZGUsXG4gICAgICBhY3Rpb25Db2RlVXJsLnRlbmFudElkXG4gICAgKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhQcm92aWRlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbi8qKlxuICogTWFwIG9mIE9BdXRoIEN1c3RvbSBQYXJhbWV0ZXJzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgQ3VzdG9tUGFyYW1ldGVycyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBGZWRlcmF0ZWQgcHJvdmlkZXJzIChPQXV0aCAoaW5jbHVkaW5nIE9JREMpLCBTQU1MKS5cbiAqXG4gKiBUaGlzIGNsYXNzIGlzIG5vdCBtZWFudCB0byBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIGltcGxlbWVudHMgQXV0aFByb3ZpZGVyIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBkZWZhdWx0TGFuZ3VhZ2VDb2RlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIGN1c3RvbVBhcmFtZXRlcnM6IEN1c3RvbVBhcmFtZXRlcnMgPSB7fTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZm9yIGdlbmVyaWMgT0F1dGggcHJvdmlkZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gcHJvdmlkZXJJZCAtIFByb3ZpZGVyIGZvciB3aGljaCBjcmVkZW50aWFscyBzaG91bGQgYmUgZ2VuZXJhdGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcHJvdmlkZXJJZDogc3RyaW5nKSB7fVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGxhbmd1YWdlIGdvZGUuXG4gICAqXG4gICAqIEBwYXJhbSBsYW5ndWFnZUNvZGUgLSBsYW5ndWFnZSBjb2RlXG4gICAqL1xuICBzZXREZWZhdWx0TGFuZ3VhZ2UobGFuZ3VhZ2VDb2RlOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5kZWZhdWx0TGFuZ3VhZ2VDb2RlID0gbGFuZ3VhZ2VDb2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIE9BdXRoIGN1c3RvbSBwYXJhbWV0ZXJzIHRvIHBhc3MgaW4gYW4gT0F1dGggcmVxdWVzdCBmb3IgcG9wdXAgYW5kIHJlZGlyZWN0IHNpZ24taW5cbiAgICogb3BlcmF0aW9ucy5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogRm9yIGEgZGV0YWlsZWQgbGlzdCwgY2hlY2sgdGhlIHJlc2VydmVkIHJlcXVpcmVkIE9BdXRoIDIuMCBwYXJhbWV0ZXJzIHN1Y2ggYXMgYGNsaWVudF9pZGAsXG4gICAqIGByZWRpcmVjdF91cmlgLCBgc2NvcGVgLCBgcmVzcG9uc2VfdHlwZWAsIGFuZCBgc3RhdGVgIGFyZSBub3QgYWxsb3dlZCBhbmQgd2lsbCBiZSBpZ25vcmVkLlxuICAgKlxuICAgKiBAcGFyYW0gY3VzdG9tT0F1dGhQYXJhbWV0ZXJzIC0gVGhlIGN1c3RvbSBPQXV0aCBwYXJhbWV0ZXJzIHRvIHBhc3MgaW4gdGhlIE9BdXRoIHJlcXVlc3QuXG4gICAqL1xuICBzZXRDdXN0b21QYXJhbWV0ZXJzKGN1c3RvbU9BdXRoUGFyYW1ldGVyczogQ3VzdG9tUGFyYW1ldGVycyk6IEF1dGhQcm92aWRlciB7XG4gICAgdGhpcy5jdXN0b21QYXJhbWV0ZXJzID0gY3VzdG9tT0F1dGhQYXJhbWV0ZXJzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBjdXJyZW50IGxpc3Qgb2Yge0BsaW5rIEN1c3RvbVBhcmFtZXRlcnN9LlxuICAgKi9cbiAgZ2V0Q3VzdG9tUGFyYW1ldGVycygpOiBDdXN0b21QYXJhbWV0ZXJzIHtcbiAgICByZXR1cm4gdGhpcy5jdXN0b21QYXJhbWV0ZXJzO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aFByb3ZpZGVyLCBVc2VyQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcblxuaW1wb3J0IHsgT0F1dGhDcmVkZW50aWFsLCBPQXV0aENyZWRlbnRpYWxQYXJhbXMgfSBmcm9tICcuLi9jcmVkZW50aWFscy9vYXV0aCc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBTaWduSW5XaXRoSWRwUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi9pbnRlcm5hbCc7XG5pbXBvcnQgeyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIgfSBmcm9tICcuL2ZlZGVyYXRlZCc7XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgb3B0aW9ucyBmb3IgaW5pdGlhbGl6aW5nIGFuIHtAbGluayBPQXV0aENyZWRlbnRpYWx9LlxuICpcbiAqIEByZW1hcmtzXG4gKiBGb3IgSUQgdG9rZW5zIHdpdGggbm9uY2UgY2xhaW0sIHRoZSByYXcgbm9uY2UgaGFzIHRvIGFsc28gYmUgcHJvdmlkZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE9BdXRoQ3JlZGVudGlhbE9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIE9BdXRoIElEIHRva2VuIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0uXG4gICAqL1xuICBpZFRva2VuPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIE9BdXRoIGFjY2VzcyB0b2tlbiB1c2VkIHRvIGluaXRpYWxpemUgdGhlIHtAbGluayBPQXV0aENyZWRlbnRpYWx9LlxuICAgKi9cbiAgYWNjZXNzVG9rZW4/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcmF3IG5vbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgSUQgdG9rZW4uXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIEl0IGlzIHJlcXVpcmVkIHdoZW4gYW4gSUQgdG9rZW4gd2l0aCBhIG5vbmNlIGZpZWxkIGlzIHByb3ZpZGVkLiBUaGUgU0hBLTI1NiBoYXNoIG9mIHRoZVxuICAgKiByYXcgbm9uY2UgbXVzdCBtYXRjaCB0aGUgbm9uY2UgZmllbGQgaW4gdGhlIElEIHRva2VuLlxuICAgKi9cbiAgcmF3Tm9uY2U/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29tbW9uIGNvZGUgdG8gYWxsIE9BdXRoIHByb3ZpZGVycy4gVGhpcyBpcyBzZXBhcmF0ZSBmcm9tIHRoZVxuICoge0BsaW5rIE9BdXRoUHJvdmlkZXJ9IHNvIHRoYXQgY2hpbGQgcHJvdmlkZXJzIChsaWtlXG4gKiB7QGxpbmsgR29vZ2xlQXV0aFByb3ZpZGVyfSkgZG9uJ3QgaW5oZXJpdCB0aGUgYGNyZWRlbnRpYWxgIGluc3RhbmNlIG1ldGhvZC5cbiAqIEluc3RlYWQsIHRoZXkgcmVseSBvbiBhIHN0YXRpYyBgY3JlZGVudGlhbGAgbWV0aG9kLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZU9BdXRoUHJvdmlkZXJcbiAgZXh0ZW5kcyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXJcbiAgaW1wbGVtZW50cyBBdXRoUHJvdmlkZXJcbntcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIHNjb3Blczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQWRkIGFuIE9BdXRoIHNjb3BlIHRvIHRoZSBjcmVkZW50aWFsLlxuICAgKlxuICAgKiBAcGFyYW0gc2NvcGUgLSBQcm92aWRlciBPQXV0aCBzY29wZSB0byBhZGQuXG4gICAqL1xuICBhZGRTY29wZShzY29wZTogc3RyaW5nKTogQXV0aFByb3ZpZGVyIHtcbiAgICAvLyBJZiBub3QgYWxyZWFkeSBhZGRlZCwgYWRkIHNjb3BlIHRvIGxpc3QuXG4gICAgaWYgKCF0aGlzLnNjb3Blcy5pbmNsdWRlcyhzY29wZSkpIHtcbiAgICAgIHRoaXMuc2NvcGVzLnB1c2goc2NvcGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBsaXN0IG9mIE9BdXRoIHNjb3Blcy5cbiAgICovXG4gIGdldFNjb3BlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnNjb3Blc107XG4gIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlciBmb3IgZ2VuZXJhdGluZyBnZW5lcmljIHtAbGluayBPQXV0aENyZWRlbnRpYWx9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBPQXV0aFByb3ZpZGVyKCdnb29nbGUuY29tJyk7XG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXG4gKiBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xuICogcHJvdmlkZXIuYWRkU2NvcGUoJ2VtYWlsJyk7XG4gKiBhd2FpdCBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIpO1xuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXG4gKlxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XG4gKiBpZiAocmVzdWx0KSB7XG4gKiAgIC8vIFRoaXMgaXMgdGhlIHNpZ25lZC1pbiB1c2VyXG4gKiAgIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBPQXV0aCBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBwcm92aWRlci5cbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBPQXV0aFByb3ZpZGVyKCdnb29nbGUuY29tJyk7XG4gKiBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xuICogcHJvdmlkZXIuYWRkU2NvcGUoJ2VtYWlsJyk7XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xuICpcbiAqIC8vIFRoZSBzaWduZWQtaW4gdXNlciBpbmZvLlxuICogY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBPQXV0aCBBY2Nlc3MgVG9rZW4gZm9yIHRoZSBwcm92aWRlci5cbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBwcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChhdXRoLCByZXN1bHQpO1xuICogY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBPQXV0aFByb3ZpZGVyIGV4dGVuZHMgQmFzZU9BdXRoUHJvdmlkZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEgSlNPTiBzdHJpbmcgb3IgYSBwbGFpbiBvYmplY3QuXG4gICAqIEBwYXJhbSBqc29uIC0gQSBwbGFpbiBvYmplY3Qgb3IgYSBKU09OIHN0cmluZ1xuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tSlNPTihqc29uOiBvYmplY3QgfCBzdHJpbmcpOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIGNvbnN0IG9iaiA9IHR5cGVvZiBqc29uID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoanNvbikgOiBqc29uO1xuICAgIF9hc3NlcnQoXG4gICAgICAncHJvdmlkZXJJZCcgaW4gb2JqICYmICdzaWduSW5NZXRob2QnIGluIG9iaixcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIHJldHVybiBPQXV0aENyZWRlbnRpYWwuX2Zyb21QYXJhbXMob2JqKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIGdlbmVyaWMgT0F1dGggcHJvdmlkZXIncyBhY2Nlc3MgdG9rZW4gb3IgSUQgdG9rZW4uXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFRoZSByYXcgbm9uY2UgaXMgcmVxdWlyZWQgd2hlbiBhbiBJRCB0b2tlbiB3aXRoIGEgbm9uY2UgZmllbGQgaXMgcHJvdmlkZWQuIFRoZSBTSEEtMjU2IGhhc2ggb2ZcbiAgICogdGhlIHJhdyBub25jZSBtdXN0IG1hdGNoIHRoZSBub25jZSBmaWVsZCBpbiB0aGUgSUQgdG9rZW4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gYGdvb2dsZVVzZXJgIGZyb20gdGhlIG9uc3VjY2VzcyBHb29nbGUgU2lnbiBJbiBjYWxsYmFjay5cbiAgICogLy8gSW5pdGlhbGl6ZSBhIGdlbmVyYXRlIE9BdXRoIHByb3ZpZGVyIHdpdGggYSBgZ29vZ2xlLmNvbWAgcHJvdmlkZXJJZC5cbiAgICogY29uc3QgcHJvdmlkZXIgPSBuZXcgT0F1dGhQcm92aWRlcignZ29vZ2xlLmNvbScpO1xuICAgKiBjb25zdCBjcmVkZW50aWFsID0gcHJvdmlkZXIuY3JlZGVudGlhbCh7XG4gICAqICAgaWRUb2tlbjogZ29vZ2xlVXNlci5nZXRBdXRoUmVzcG9uc2UoKS5pZF90b2tlbixcbiAgICogfSk7XG4gICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWRlbnRpYWwpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIEVpdGhlciB0aGUgb3B0aW9ucyBvYmplY3QgY29udGFpbmluZyB0aGUgSUQgdG9rZW4sIGFjY2VzcyB0b2tlbiBhbmQgcmF3IG5vbmNlXG4gICAqIG9yIHRoZSBJRCB0b2tlbiBzdHJpbmcuXG4gICAqL1xuICBjcmVkZW50aWFsKHBhcmFtczogT0F1dGhDcmVkZW50aWFsT3B0aW9ucyk6IE9BdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWRlbnRpYWwoey4uLnBhcmFtcywgbm9uY2U6IHBhcmFtcy5yYXdOb25jZX0pO1xuICB9XG5cbiAgLyoqIEFuIGludGVybmFsIGNyZWRlbnRpYWwgbWV0aG9kIHRoYXQgYWNjZXB0cyBtb3JlIHBlcm1pc3NpdmUgb3B0aW9ucyAqL1xuICBwcml2YXRlIF9jcmVkZW50aWFsKFxuICAgIHBhcmFtczogT21pdDxPQXV0aENyZWRlbnRpYWxQYXJhbXMsICdzaWduSW5NZXRob2QnIHwgJ3Byb3ZpZGVySWQnPlxuICApOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIF9hc3NlcnQocGFyYW1zLmlkVG9rZW4gfHwgcGFyYW1zLmFjY2Vzc1Rva2VuLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICAvLyBGb3IgT0F1dGhDcmVkZW50aWFsLCBzaWduIGluIG1ldGhvZCBpcyBzYW1lIGFzIHByb3ZpZGVySWQuXG4gICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBwcm92aWRlcklkOiB0aGlzLnByb3ZpZGVySWQsXG4gICAgICBzaWduSW5NZXRob2Q6IHRoaXMucHJvdmlkZXJJZFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbVJlc3VsdChcbiAgICB1c2VyQ3JlZGVudGlhbDogVXNlckNyZWRlbnRpYWxcbiAgKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIE9BdXRoUHJvdmlkZXIub2F1dGhDcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIHVzZXJDcmVkZW50aWFsIGFzIFVzZXJDcmVkZW50aWFsSW50ZXJuYWxcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xuICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gT0F1dGhQcm92aWRlci5vYXV0aENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgKGVycm9yLmN1c3RvbURhdGEgfHwge30pIGFzIFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG9hdXRoQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3Qoe1xuICAgIF90b2tlblJlc3BvbnNlOiB0b2tlblJlc3BvbnNlXG4gIH06IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgaWYgKCF0b2tlblJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBvYXV0aElkVG9rZW4sXG4gICAgICBvYXV0aEFjY2Vzc1Rva2VuLFxuICAgICAgb2F1dGhUb2tlblNlY3JldCxcbiAgICAgIHBlbmRpbmdUb2tlbixcbiAgICAgIG5vbmNlLFxuICAgICAgcHJvdmlkZXJJZFxuICAgIH0gPSB0b2tlblJlc3BvbnNlIGFzIFNpZ25JbldpdGhJZHBSZXNwb25zZTtcbiAgICBpZiAoXG4gICAgICAhb2F1dGhBY2Nlc3NUb2tlbiAmJlxuICAgICAgIW9hdXRoVG9rZW5TZWNyZXQgJiZcbiAgICAgICFvYXV0aElkVG9rZW4gJiZcbiAgICAgICFwZW5kaW5nVG9rZW5cbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghcHJvdmlkZXJJZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgT0F1dGhQcm92aWRlcihwcm92aWRlcklkKS5fY3JlZGVudGlhbCh7XG4gICAgICAgIGlkVG9rZW46IG9hdXRoSWRUb2tlbixcbiAgICAgICAgYWNjZXNzVG9rZW46IG9hdXRoQWNjZXNzVG9rZW4sXG4gICAgICAgIG5vbmNlLFxuICAgICAgICBwZW5kaW5nVG9rZW5cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgT0F1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vY3JlZGVudGlhbHMvb2F1dGgnO1xuaW1wb3J0IHsgQmFzZU9BdXRoUHJvdmlkZXIgfSBmcm9tICcuL29hdXRoJztcbmltcG9ydCB7IFByb3ZpZGVySWQsIFNpZ25Jbk1ldGhvZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuLyoqXG4gKiBQcm92aWRlciBmb3IgZ2VuZXJhdGluZyBhbiB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmb3Ige0BsaW5rIFByb3ZpZGVySWR9LkZBQ0VCT09LLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogLy8gU3RhcnQgYSBzaWduIGluIHByb2Nlc3MgZm9yIGFuIHVuYXV0aGVudGljYXRlZCB1c2VyLlxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3VzZXJfYmlydGhkYXknKTtcbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIEZhY2Vib29rIEFjY2VzcyBUb2tlbi5cbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3VzZXJfYmlydGhkYXknKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhQb3B1cChhdXRoLCBwcm92aWRlcik7XG4gKlxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXG4gKiBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XG4gKiAvLyBUaGlzIGdpdmVzIHlvdSBhIEZhY2Vib29rIEFjY2VzcyBUb2tlbi5cbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBGYWNlYm9va0F1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRmFjZWJvb2tBdXRoUHJvdmlkZXIgZXh0ZW5kcyBCYXNlT0F1dGhQcm92aWRlciB7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LkZBQ0VCT09LLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgRkFDRUJPT0tfU0lHTl9JTl9NRVRIT0Q6ICdmYWNlYm9vay5jb20nID1cbiAgICBTaWduSW5NZXRob2QuRkFDRUJPT0s7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5GQUNFQk9PSy4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAnZmFjZWJvb2suY29tJyA9IFByb3ZpZGVySWQuRkFDRUJPT0s7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUHJvdmlkZXJJZC5GQUNFQk9PSyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgZm9yIEZhY2Vib29rLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIC8vIGBldmVudGAgZnJvbSB0aGUgRmFjZWJvb2sgYXV0aC5hdXRoUmVzcG9uc2VDaGFuZ2UgY2FsbGJhY2suXG4gICAqIGNvbnN0IGNyZWRlbnRpYWwgPSBGYWNlYm9va0F1dGhQcm92aWRlci5jcmVkZW50aWFsKGV2ZW50LmF1dGhSZXNwb25zZS5hY2Nlc3NUb2tlbik7XG4gICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhDcmVkZW50aWFsKGNyZWRlbnRpYWwpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gRmFjZWJvb2sgYWNjZXNzIHRva2VuLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWwoYWNjZXNzVG9rZW46IHN0cmluZyk6IE9BdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XG4gICAgICBwcm92aWRlcklkOiBGYWNlYm9va0F1dGhQcm92aWRlci5QUk9WSURFUl9JRCxcbiAgICAgIHNpZ25Jbk1ldGhvZDogRmFjZWJvb2tBdXRoUHJvdmlkZXIuRkFDRUJPT0tfU0lHTl9JTl9NRVRIT0QsXG4gICAgICBhY2Nlc3NUb2tlblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbVJlc3VsdChcbiAgICB1c2VyQ3JlZGVudGlhbDogVXNlckNyZWRlbnRpYWxcbiAgKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgdXNlckNyZWRlbnRpYWwgYXMgVXNlckNyZWRlbnRpYWxJbnRlcm5hbFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcbiAgICogdGhyb3duIGR1cmluZyBhIHNpZ24taW4sIGxpbmssIG9yIHJlYXV0aGVudGljYXRlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbUVycm9yKGVycm9yOiBGaXJlYmFzZUVycm9yKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIEZhY2Vib29rQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgKGVycm9yLmN1c3RvbURhdGEgfHwge30pIGFzIFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHtcbiAgICBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZVxuICB9OiBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSB8fCAhKCdvYXV0aEFjY2Vzc1Rva2VuJyBpbiB0b2tlblJlc3BvbnNlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlblJlc3BvbnNlLm9hdXRoQWNjZXNzVG9rZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gRmFjZWJvb2tBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh0b2tlblJlc3BvbnNlLm9hdXRoQWNjZXNzVG9rZW4pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgU2lnbkluV2l0aElkcFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2lkcCc7XG5pbXBvcnQgeyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IE9BdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzL29hdXRoJztcbmltcG9ydCB7IEJhc2VPQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9vYXV0aCc7XG5pbXBvcnQgeyBQcm92aWRlcklkLCBTaWduSW5NZXRob2QgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYW4gYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZm9yIHtAbGluayBQcm92aWRlcklkfS5HT09HTEUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSByZWRpcmVjdC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEdvb2dsZUF1dGhQcm92aWRlcigpO1xuICogLy8gU3RhcnQgYSBzaWduIGluIHByb2Nlc3MgZm9yIGFuIHVuYXV0aGVudGljYXRlZCB1c2VyLlxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3Byb2ZpbGUnKTtcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdlbWFpbCcpO1xuICogYXdhaXQgc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyKTtcbiAqIC8vIFRoaXMgd2lsbCB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxuICpcbiAqIC8vIEFmdGVyIHJldHVybmluZyBmcm9tIHRoZSByZWRpcmVjdCB3aGVuIHlvdXIgYXBwIGluaXRpYWxpemVzIHlvdSBjYW4gb2J0YWluIHRoZSByZXN1bHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xuICogaWYgKHJlc3VsdCkge1xuICogICAvLyBUaGlzIGlzIHRoZSBzaWduZWQtaW4gdXNlclxuICogICBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XG4gKiAgIC8vIFRoaXMgZ2l2ZXMgeW91IGEgR29vZ2xlIEFjY2VzcyBUb2tlbi5cbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IEdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogICBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHBvcHVwLlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgR29vZ2xlQXV0aFByb3ZpZGVyKCk7XG4gKiBwcm92aWRlci5hZGRTY29wZSgncHJvZmlsZScpO1xuICogcHJvdmlkZXIuYWRkU2NvcGUoJ2VtYWlsJyk7XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xuICpcbiAqIC8vIFRoZSBzaWduZWQtaW4gdXNlciBpbmZvLlxuICogY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBHb29nbGUgQWNjZXNzIFRva2VuLlxuICogY29uc3QgY3JlZGVudGlhbCA9IEdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgR29vZ2xlQXV0aFByb3ZpZGVyIGV4dGVuZHMgQmFzZU9BdXRoUHJvdmlkZXIge1xuICAvKiogQWx3YXlzIHNldCB0byB7QGxpbmsgU2lnbkluTWV0aG9kfS5HT09HTEUuICovXG4gIHN0YXRpYyByZWFkb25seSBHT09HTEVfU0lHTl9JTl9NRVRIT0Q6ICdnb29nbGUuY29tJyA9IFNpZ25Jbk1ldGhvZC5HT09HTEU7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5HT09HTEUuICovXG4gIHN0YXRpYyByZWFkb25seSBQUk9WSURFUl9JRDogJ2dvb2dsZS5jb20nID0gUHJvdmlkZXJJZC5HT09HTEU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoUHJvdmlkZXJJZC5HT09HTEUpO1xuICAgIHRoaXMuYWRkU2NvcGUoJ3Byb2ZpbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmb3IgR29vZ2xlLiBBdCBsZWFzdCBvbmUgb2YgSUQgdG9rZW4gYW5kIGFjY2VzcyB0b2tlbiBpcyByZXF1aXJlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyBcXGBnb29nbGVVc2VyXFxgIGZyb20gdGhlIG9uc3VjY2VzcyBHb29nbGUgU2lnbiBJbiBjYWxsYmFjay5cbiAgICogY29uc3QgY3JlZGVudGlhbCA9IEdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsKGdvb2dsZVVzZXIuZ2V0QXV0aFJlc3BvbnNlKCkuaWRfdG9rZW4pO1xuICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZFRva2VuIC0gR29vZ2xlIElEIHRva2VuLlxuICAgKiBAcGFyYW0gYWNjZXNzVG9rZW4gLSBHb29nbGUgYWNjZXNzIHRva2VuLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWwoXG4gICAgaWRUb2tlbj86IHN0cmluZyB8IG51bGwsXG4gICAgYWNjZXNzVG9rZW4/OiBzdHJpbmcgfCBudWxsXG4gICk6IE9BdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XG4gICAgICBwcm92aWRlcklkOiBHb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQsXG4gICAgICBzaWduSW5NZXRob2Q6IEdvb2dsZUF1dGhQcm92aWRlci5HT09HTEVfU0lHTl9JTl9NRVRIT0QsXG4gICAgICBpZFRva2VuLFxuICAgICAgYWNjZXNzVG9rZW5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQoXG4gICAgdXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsXG4gICk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcbiAgICogdGhyb3duIGR1cmluZyBhIHNpZ24taW4sIGxpbmssIG9yIHJlYXV0aGVudGljYXRlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbUVycm9yKGVycm9yOiBGaXJlYmFzZUVycm9yKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIEdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSBhcyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh7XG4gICAgX3Rva2VuUmVzcG9uc2U6IHRva2VuUmVzcG9uc2VcbiAgfTogVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICBpZiAoIXRva2VuUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgb2F1dGhJZFRva2VuLCBvYXV0aEFjY2Vzc1Rva2VuIH0gPVxuICAgICAgdG9rZW5SZXNwb25zZSBhcyBTaWduSW5XaXRoSWRwUmVzcG9uc2U7XG4gICAgaWYgKCFvYXV0aElkVG9rZW4gJiYgIW9hdXRoQWNjZXNzVG9rZW4pIHtcbiAgICAgIC8vIFRoaXMgY291bGQgYmUgYW4gb2F1dGggMSBjcmVkZW50aWFsIG9yIGEgcGhvbmUgY3JlZGVudGlhbFxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBHb29nbGVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChvYXV0aElkVG9rZW4sIG9hdXRoQWNjZXNzVG9rZW4pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBPQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscy9vYXV0aCc7XG5pbXBvcnQgeyBCYXNlT0F1dGhQcm92aWRlciB9IGZyb20gJy4vb2F1dGgnO1xuaW1wb3J0IHsgUHJvdmlkZXJJZCwgU2lnbkluTWV0aG9kIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGFuIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZvciB7QGxpbmsgUHJvdmlkZXJJZH0uR0lUSFVCLlxuICpcbiAqIEByZW1hcmtzXG4gKiBHaXRIdWIgcmVxdWlyZXMgYW4gT0F1dGggMi4wIHJlZGlyZWN0LCBzbyB5b3UgY2FuIGVpdGhlciBoYW5kbGUgdGhlIHJlZGlyZWN0IGRpcmVjdGx5LCBvciB1c2VcbiAqIHRoZSB7QGxpbmsgc2lnbkluV2l0aFBvcHVwfSBoYW5kbGVyOlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHaXRodWJBdXRoUHJvdmlkZXIoKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdyZXBvJyk7XG4gKiBhd2FpdCBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIpO1xuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXG4gKlxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XG4gKiBpZiAocmVzdWx0KSB7XG4gKiAgIC8vIFRoaXMgaXMgdGhlIHNpZ25lZC1pbiB1c2VyXG4gKiAgIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBHaXRodWIgQWNjZXNzIFRva2VuLlxuICogICBjb25zdCBjcmVkZW50aWFsID0gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBHaXRodWJBdXRoUHJvdmlkZXIoKTtcbiAqIHByb3ZpZGVyLmFkZFNjb3BlKCdyZXBvJyk7XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUG9wdXAoYXV0aCwgcHJvdmlkZXIpO1xuICpcbiAqIC8vIFRoZSBzaWduZWQtaW4gdXNlciBpbmZvLlxuICogY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogLy8gVGhpcyBnaXZlcyB5b3UgYSBHaXRodWIgQWNjZXNzIFRva2VuLlxuICogY29uc3QgY3JlZGVudGlhbCA9IEdpdGh1YkF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRodWJBdXRoUHJvdmlkZXIgZXh0ZW5kcyBCYXNlT0F1dGhQcm92aWRlciB7XG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBTaWduSW5NZXRob2R9LkdJVEhVQi4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IEdJVEhVQl9TSUdOX0lOX01FVEhPRDogJ2dpdGh1Yi5jb20nID0gU2lnbkluTWV0aG9kLkdJVEhVQjtcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LkdJVEhVQi4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAnZ2l0aHViLmNvbScgPSBQcm92aWRlcklkLkdJVEhVQjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQcm92aWRlcklkLkdJVEhVQik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgZm9yIEdpdGh1Yi5cbiAgICpcbiAgICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gR2l0aHViIGFjY2VzcyB0b2tlbi5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsKGFjY2Vzc1Rva2VuOiBzdHJpbmcpOiBPQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBPQXV0aENyZWRlbnRpYWwuX2Zyb21QYXJhbXMoe1xuICAgICAgcHJvdmlkZXJJZDogR2l0aHViQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxuICAgICAgc2lnbkluTWV0aG9kOiBHaXRodWJBdXRoUHJvdmlkZXIuR0lUSFVCX1NJR05fSU5fTUVUSE9ELFxuICAgICAgYWNjZXNzVG9rZW5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQoXG4gICAgdXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsXG4gICk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBHaXRodWJBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xuICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgKGVycm9yLmN1c3RvbURhdGEgfHwge30pIGFzIFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHtcbiAgICBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZVxuICB9OiBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSk6IE9BdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSB8fCAhKCdvYXV0aEFjY2Vzc1Rva2VuJyBpbiB0b2tlblJlc3BvbnNlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlblJlc3BvbnNlLm9hdXRoQWNjZXNzVG9rZW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gR2l0aHViQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodG9rZW5SZXNwb25zZS5vYXV0aEFjY2Vzc1Rva2VuKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgU0FNTCBjcmVkZW50aWFscyByZXR1cm5lZCBieSBhbiB7QGxpbmsgU0FNTEF1dGhQcm92aWRlcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5cbmltcG9ydCB7XG4gIHNpZ25JbldpdGhJZHAsXG4gIFNpZ25JbldpdGhJZHBSZXF1ZXN0XG59IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vYXV0aF9jcmVkZW50aWFsJztcblxuY29uc3QgSURQX1JFUVVFU1RfVVJJID0gJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFNBTUxBdXRoQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIHByb3ZpZGVySWQ6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBlbmRpbmdUb2tlbjogc3RyaW5nXG4gICkge1xuICAgIHN1cGVyKHByb3ZpZGVySWQsIHByb3ZpZGVySWQpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0SWRUb2tlblJlc3BvbnNlKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9saW5rVG9JZFRva2VuKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5idWlsZFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0LmlkVG9rZW4gPSBpZFRva2VuO1xuICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHJlcXVlc3QpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZ2V0UmVhdXRoZW50aWNhdGlvblJlc29sdmVyKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuYnVpbGRSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5hdXRvQ3JlYXRlID0gZmFsc2U7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgcmVxdWVzdCk7XG4gIH1cblxuICAvKioge0Bpbmhlcml0ZG9jIEF1dGhDcmVkZW50aWFsLnRvSlNPTn0gICovXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBzaWduSW5NZXRob2Q6IHRoaXMuc2lnbkluTWV0aG9kLFxuICAgICAgcHJvdmlkZXJJZDogdGhpcy5wcm92aWRlcklkLFxuICAgICAgcGVuZGluZ1Rva2VuOiB0aGlzLnBlbmRpbmdUb2tlblxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU3RhdGljIG1ldGhvZCB0byBkZXNlcmlhbGl6ZSBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYW4gb2JqZWN0IGludG8gYW5cbiAgICoge0BsaW5rICBBdXRoQ3JlZGVudGlhbH0uXG4gICAqXG4gICAqIEBwYXJhbSBqc29uIC0gSW5wdXQgY2FuIGJlIGVpdGhlciBPYmplY3Qgb3IgdGhlIHN0cmluZ2lmaWVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QuXG4gICAqIFdoZW4gc3RyaW5nIGlzIHByb3ZpZGVkLCBKU09OLnBhcnNlIHdvdWxkIGJlIGNhbGxlZCBmaXJzdC5cbiAgICpcbiAgICogQHJldHVybnMgSWYgdGhlIEpTT04gaW5wdXQgZG9lcyBub3QgcmVwcmVzZW50IGFuIHtAbGluayAgQXV0aENyZWRlbnRpYWx9LCBudWxsIGlzIHJldHVybmVkLlxuICAgKi9cbiAgc3RhdGljIGZyb21KU09OKGpzb246IHN0cmluZyB8IG9iamVjdCk6IFNBTUxBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGNvbnN0IG9iaiA9IHR5cGVvZiBqc29uID09PSAnc3RyaW5nJyA/IEpTT04ucGFyc2UoanNvbikgOiBqc29uO1xuICAgIGNvbnN0IHtcbiAgICAgIHByb3ZpZGVySWQsXG4gICAgICBzaWduSW5NZXRob2QsXG4gICAgICBwZW5kaW5nVG9rZW5cbiAgICB9OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0gb2JqO1xuICAgIGlmIChcbiAgICAgICFwcm92aWRlcklkIHx8XG4gICAgICAhc2lnbkluTWV0aG9kIHx8XG4gICAgICAhcGVuZGluZ1Rva2VuIHx8XG4gICAgICBwcm92aWRlcklkICE9PSBzaWduSW5NZXRob2RcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU0FNTEF1dGhDcmVkZW50aWFsKHByb3ZpZGVySWQsIHBlbmRpbmdUb2tlbik7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHN0YXRpYyBtZXRob2QgdG8gYXZvaWQgZXhwb3NpbmcgdGhlIGNvbnN0cnVjdG9yIHRvIGVuZCB1c2Vycy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgX2NyZWF0ZShwcm92aWRlcklkOiBzdHJpbmcsIHBlbmRpbmdUb2tlbjogc3RyaW5nKTogU0FNTEF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gbmV3IFNBTUxBdXRoQ3JlZGVudGlhbChwcm92aWRlcklkLCBwZW5kaW5nVG9rZW4pO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFJlcXVlc3QoKTogU2lnbkluV2l0aElkcFJlcXVlc3Qge1xuICAgIHJldHVybiB7XG4gICAgICByZXF1ZXN0VXJpOiBJRFBfUkVRVUVTVF9VUkksXG4gICAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZSxcbiAgICAgIHBlbmRpbmdUb2tlbjogdGhpcy5wZW5kaW5nVG9rZW5cbiAgICB9O1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IFNpZ25JbldpdGhJZHBSZXNwb25zZSB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAnO1xuaW1wb3J0IHsgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IFNBTUxBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzL3NhbWwnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgRmVkZXJhdGVkQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9mZWRlcmF0ZWQnO1xuXG5jb25zdCBTQU1MX1BST1ZJREVSX1BSRUZJWCA9ICdzYW1sLic7XG5cbi8qKlxuICogQW4ge0BsaW5rIEF1dGhQcm92aWRlcn0gZm9yIFNBTUwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgU0FNTEF1dGhQcm92aWRlciBleHRlbmRzIEZlZGVyYXRlZEF1dGhQcm92aWRlciB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3Rvci4gVGhlIHByb3ZpZGVySWQgbXVzdCBzdGFydCB3aXRoIFwic2FtbC5cIlxuICAgKiBAcGFyYW0gcHJvdmlkZXJJZCAtIFNBTUwgcHJvdmlkZXIgSUQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm92aWRlcklkOiBzdHJpbmcpIHtcbiAgICBfYXNzZXJ0KFxuICAgICAgcHJvdmlkZXJJZC5zdGFydHNXaXRoKFNBTUxfUFJPVklERVJfUFJFRklYKSxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIHN1cGVyKHByb3ZpZGVySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiB7QGxpbmsgQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgVXNlckNyZWRlbnRpYWx9IGFmdGVyIGFcbiAgICogc3VjY2Vzc2Z1bCBTQU1MIGZsb3cgY29tcGxldGVzLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKlxuICAgKiBGb3IgZXhhbXBsZSwgdG8gZ2V0IGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0sIHlvdSBjb3VsZCB3cml0ZSB0aGVcbiAgICogZm9sbG93aW5nIGNvZGU6XG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHNhbWxQcm92aWRlcik7XG4gICAqIGNvbnN0IGNyZWRlbnRpYWwgPSBTQU1MQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KHVzZXJDcmVkZW50aWFsKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQoXG4gICAgdXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsXG4gICk6IEF1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIFNBTUxBdXRoUHJvdmlkZXIuc2FtbENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KFxuICAgICAgdXNlckNyZWRlbnRpYWwgYXMgVXNlckNyZWRlbnRpYWxJbnRlcm5hbFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBleHRyYWN0IHRoZSB1bmRlcmx5aW5nIHtAbGluayBPQXV0aENyZWRlbnRpYWx9IGZyb20gYSB7QGxpbmsgQXV0aEVycm9yfSB3aGljaCB3YXNcbiAgICogdGhyb3duIGR1cmluZyBhIHNpZ24taW4sIGxpbmssIG9yIHJlYXV0aGVudGljYXRlIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbUVycm9yKGVycm9yOiBGaXJlYmFzZUVycm9yKTogQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gU0FNTEF1dGhQcm92aWRlci5zYW1sQ3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICAoZXJyb3IuY3VzdG9tRGF0YSB8fCB7fSkgYXMgVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSBmcm9tIGEgSlNPTiBzdHJpbmcgb3IgYSBwbGFpbiBvYmplY3QuXG4gICAqIEBwYXJhbSBqc29uIC0gQSBwbGFpbiBvYmplY3Qgb3IgYSBKU09OIHN0cmluZ1xuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tSlNPTihqc29uOiBzdHJpbmcgfCBvYmplY3QpOiBBdXRoQ3JlZGVudGlhbCB7XG4gICAgY29uc3QgY3JlZGVudGlhbCA9IFNBTUxBdXRoQ3JlZGVudGlhbC5mcm9tSlNPTihqc29uKTtcbiAgICBfYXNzZXJ0KGNyZWRlbnRpYWwsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuICAgIHJldHVybiBjcmVkZW50aWFsO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgc2FtbENyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KHtcbiAgICBfdG9rZW5SZXNwb25zZTogdG9rZW5SZXNwb25zZVxuICB9OiBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSk6IFNBTUxBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBwZW5kaW5nVG9rZW4sIHByb3ZpZGVySWQgfSA9IHRva2VuUmVzcG9uc2UgYXMgU2lnbkluV2l0aElkcFJlc3BvbnNlO1xuXG4gICAgaWYgKCFwZW5kaW5nVG9rZW4gfHwgIXByb3ZpZGVySWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gU0FNTEF1dGhDcmVkZW50aWFsLl9jcmVhdGUocHJvdmlkZXJJZCwgcGVuZGluZ1Rva2VuKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBUd2l0dGVyIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgU2lnbkluV2l0aElkcFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2lkcCc7XG5pbXBvcnQgeyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IE9BdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzL29hdXRoJztcbmltcG9ydCB7IEJhc2VPQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9vYXV0aCc7XG5pbXBvcnQgeyBQcm92aWRlcklkLCBTaWduSW5NZXRob2QgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYW4ge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZm9yIHtAbGluayBQcm92aWRlcklkfS5UV0lUVEVSLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBUd2l0dGVyQXV0aFByb3ZpZGVyKCk7XG4gKiAvLyBTdGFydCBhIHNpZ24gaW4gcHJvY2VzcyBmb3IgYW4gdW5hdXRoZW50aWNhdGVkIHVzZXIuXG4gKiBhd2FpdCBzaWduSW5XaXRoUmVkaXJlY3QoYXV0aCwgcHJvdmlkZXIpO1xuICogLy8gVGhpcyB3aWxsIHRyaWdnZXIgYSBmdWxsIHBhZ2UgcmVkaXJlY3QgYXdheSBmcm9tIHlvdXIgYXBwXG4gKlxuICogLy8gQWZ0ZXIgcmV0dXJuaW5nIGZyb20gdGhlIHJlZGlyZWN0IHdoZW4geW91ciBhcHAgaW5pdGlhbGl6ZXMgeW91IGNhbiBvYnRhaW4gdGhlIHJlc3VsdFxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0UmVkaXJlY3RSZXN1bHQoYXV0aCk7XG4gKiBpZiAocmVzdWx0KSB7XG4gKiAgIC8vIFRoaXMgaXMgdGhlIHNpZ25lZC1pbiB1c2VyXG4gKiAgIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqICAgLy8gVGhpcyBnaXZlcyB5b3UgYSBUd2l0dGVyIEFjY2VzcyBUb2tlbiBhbmQgU2VjcmV0LlxuICogICBjb25zdCBjcmVkZW50aWFsID0gVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogICBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiAgIGNvbnN0IHNlY3JldCA9IGNyZWRlbnRpYWwuc2VjcmV0O1xuICogfVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgYSBwb3B1cC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IFR3aXR0ZXJBdXRoUHJvdmlkZXIoKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhQb3B1cChhdXRoLCBwcm92aWRlcik7XG4gKlxuICogLy8gVGhlIHNpZ25lZC1pbiB1c2VyIGluZm8uXG4gKiBjb25zdCB1c2VyID0gcmVzdWx0LnVzZXI7XG4gKiAvLyBUaGlzIGdpdmVzIHlvdSBhIFR3aXR0ZXIgQWNjZXNzIFRva2VuIGFuZCBTZWNyZXQuXG4gKiBjb25zdCBjcmVkZW50aWFsID0gVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChyZXN1bHQpO1xuICogY29uc3QgdG9rZW4gPSBjcmVkZW50aWFsLmFjY2Vzc1Rva2VuO1xuICogY29uc3Qgc2VjcmV0ID0gY3JlZGVudGlhbC5zZWNyZXQ7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUd2l0dGVyQXV0aFByb3ZpZGVyIGV4dGVuZHMgQmFzZU9BdXRoUHJvdmlkZXIge1xuICAvKiogQWx3YXlzIHNldCB0byB7QGxpbmsgU2lnbkluTWV0aG9kfS5UV0lUVEVSLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgVFdJVFRFUl9TSUdOX0lOX01FVEhPRDogJ3R3aXR0ZXIuY29tJyA9IFNpZ25Jbk1ldGhvZC5UV0lUVEVSO1xuICAvKiogQWx3YXlzIHNldCB0byB7QGxpbmsgUHJvdmlkZXJJZH0uVFdJVFRFUi4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiAndHdpdHRlci5jb20nID0gUHJvdmlkZXJJZC5UV0lUVEVSO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFByb3ZpZGVySWQuVFdJVFRFUik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgZm9yIFR3aXR0ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbiAtIFR3aXR0ZXIgYWNjZXNzIHRva2VuLlxuICAgKiBAcGFyYW0gc2VjcmV0IC0gVHdpdHRlciBzZWNyZXQuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbCh0b2tlbjogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZyk6IE9BdXRoQ3JlZGVudGlhbCB7XG4gICAgcmV0dXJuIE9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XG4gICAgICBwcm92aWRlcklkOiBUd2l0dGVyQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELFxuICAgICAgc2lnbkluTWV0aG9kOiBUd2l0dGVyQXV0aFByb3ZpZGVyLlRXSVRURVJfU0lHTl9JTl9NRVRIT0QsXG4gICAgICBvYXV0aFRva2VuOiB0b2tlbixcbiAgICAgIG9hdXRoVG9rZW5TZWNyZXQ6IHNlY3JldFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZXh0cmFjdCB0aGUgdW5kZXJseWluZyB7QGxpbmsgT0F1dGhDcmVkZW50aWFsfSBmcm9tIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfS5cbiAgICpcbiAgICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAgICovXG4gIHN0YXRpYyBjcmVkZW50aWFsRnJvbVJlc3VsdChcbiAgICB1c2VyQ3JlZGVudGlhbDogVXNlckNyZWRlbnRpYWxcbiAgKTogT0F1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgcmV0dXJuIFR3aXR0ZXJBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21UYWdnZWRPYmplY3QoXG4gICAgICB1c2VyQ3JlZGVudGlhbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGV4dHJhY3QgdGhlIHVuZGVybHlpbmcge0BsaW5rIE9BdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBBdXRoRXJyb3J9IHdoaWNoIHdhc1xuICAgKiB0aHJvd24gZHVyaW5nIGEgc2lnbi1pbiwgbGluaywgb3IgcmVhdXRoZW50aWNhdGUgb3BlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gdXNlckNyZWRlbnRpYWwgLSBUaGUgdXNlciBjcmVkZW50aWFsLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICByZXR1cm4gVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSBhcyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh7XG4gICAgX3Rva2VuUmVzcG9uc2U6IHRva2VuUmVzcG9uc2VcbiAgfTogVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UpOiBPQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgICBpZiAoIXRva2VuUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IG9hdXRoQWNjZXNzVG9rZW4sIG9hdXRoVG9rZW5TZWNyZXQgfSA9XG4gICAgICB0b2tlblJlc3BvbnNlIGFzIFNpZ25JbldpdGhJZHBSZXNwb25zZTtcbiAgICBpZiAoIW9hdXRoQWNjZXNzVG9rZW4gfHwgIW9hdXRoVG9rZW5TZWNyZXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gVHdpdHRlckF1dGhQcm92aWRlci5jcmVkZW50aWFsKG9hdXRoQWNjZXNzVG9rZW4sIG9hdXRoVG9rZW5TZWNyZXQpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgRW5kcG9pbnQsXG4gIEh0dHBNZXRob2QsXG4gIF9hZGRUaWRJZk5lY2Vzc2FyeSxcbiAgX3BlcmZvcm1TaWduSW5SZXF1ZXN0XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25VcFJlcXVlc3Qge1xuICByZXR1cm5TZWN1cmVUb2tlbj86IGJvb2xlYW47XG4gIGVtYWlsPzogc3RyaW5nO1xuICBwYXNzd29yZD86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnblVwUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduVXAoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFNpZ25VcFJlcXVlc3Rcbik6IFByb21pc2U8U2lnblVwUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtU2lnbkluUmVxdWVzdDxTaWduVXBSZXF1ZXN0LCBTaWduVXBSZXNwb25zZT4oXG4gICAgYXV0aCxcbiAgICBIdHRwTWV0aG9kLlBPU1QsXG4gICAgRW5kcG9pbnQuU0lHTl9VUCxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwsIFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IFVzZXJJbXBsIH0gZnJvbSAnLi91c2VyX2ltcGwnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlLCBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG5pbnRlcmZhY2UgVXNlckNyZWRlbnRpYWxQYXJhbXMge1xuICByZWFkb25seSB1c2VyOiBVc2VySW50ZXJuYWw7XG4gIHJlYWRvbmx5IHByb3ZpZGVySWQ6IFByb3ZpZGVySWQgfCBzdHJpbmcgfCBudWxsO1xuICByZWFkb25seSBfdG9rZW5SZXNwb25zZT86IFBob25lT3JPYXV0aFRva2VuUmVzcG9uc2U7XG4gIHJlYWRvbmx5IG9wZXJhdGlvblR5cGU6IE9wZXJhdGlvblR5cGU7XG59XG5cbmV4cG9ydCBjbGFzcyBVc2VyQ3JlZGVudGlhbEltcGxcbiAgaW1wbGVtZW50cyBVc2VyQ3JlZGVudGlhbEludGVybmFsLCBVc2VyQ3JlZGVudGlhbFBhcmFtc1xue1xuICByZWFkb25seSB1c2VyOiBVc2VySW50ZXJuYWw7XG4gIHJlYWRvbmx5IHByb3ZpZGVySWQ6IFByb3ZpZGVySWQgfCBzdHJpbmcgfCBudWxsO1xuICByZWFkb25seSBfdG9rZW5SZXNwb25zZTogUGhvbmVPck9hdXRoVG9rZW5SZXNwb25zZSB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZTtcblxuICBjb25zdHJ1Y3RvcihwYXJhbXM6IFVzZXJDcmVkZW50aWFsUGFyYW1zKSB7XG4gICAgdGhpcy51c2VyID0gcGFyYW1zLnVzZXI7XG4gICAgdGhpcy5wcm92aWRlcklkID0gcGFyYW1zLnByb3ZpZGVySWQ7XG4gICAgdGhpcy5fdG9rZW5SZXNwb25zZSA9IHBhcmFtcy5fdG9rZW5SZXNwb25zZTtcbiAgICB0aGlzLm9wZXJhdGlvblR5cGUgPSBwYXJhbXMub3BlcmF0aW9uVHlwZTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBfZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZSxcbiAgICBpZFRva2VuUmVzcG9uc2U6IElkVG9rZW5SZXNwb25zZSxcbiAgICBpc0Fub255bW91czogYm9vbGVhbiA9IGZhbHNlXG4gICk6IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbD4ge1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VySW1wbC5fZnJvbUlkVG9rZW5SZXNwb25zZShcbiAgICAgIGF1dGgsXG4gICAgICBpZFRva2VuUmVzcG9uc2UsXG4gICAgICBpc0Fub255bW91c1xuICAgICk7XG4gICAgY29uc3QgcHJvdmlkZXJJZCA9IHByb3ZpZGVySWRGb3JSZXNwb25zZShpZFRva2VuUmVzcG9uc2UpO1xuICAgIGNvbnN0IHVzZXJDcmVkID0gbmV3IFVzZXJDcmVkZW50aWFsSW1wbCh7XG4gICAgICB1c2VyLFxuICAgICAgcHJvdmlkZXJJZCxcbiAgICAgIF90b2tlblJlc3BvbnNlOiBpZFRva2VuUmVzcG9uc2UsXG4gICAgICBvcGVyYXRpb25UeXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIHVzZXJDcmVkO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIF9mb3JPcGVyYXRpb24oXG4gICAgdXNlcjogVXNlckludGVybmFsLFxuICAgIG9wZXJhdGlvblR5cGU6IE9wZXJhdGlvblR5cGUsXG4gICAgcmVzcG9uc2U6IFBob25lT3JPYXV0aFRva2VuUmVzcG9uc2VcbiAgKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEltcGw+IHtcbiAgICBhd2FpdCB1c2VyLl91cGRhdGVUb2tlbnNJZk5lY2Vzc2FyeShyZXNwb25zZSwgLyogcmVsb2FkICovIHRydWUpO1xuICAgIGNvbnN0IHByb3ZpZGVySWQgPSBwcm92aWRlcklkRm9yUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIHJldHVybiBuZXcgVXNlckNyZWRlbnRpYWxJbXBsKHtcbiAgICAgIHVzZXIsXG4gICAgICBwcm92aWRlcklkLFxuICAgICAgX3Rva2VuUmVzcG9uc2U6IHJlc3BvbnNlLFxuICAgICAgb3BlcmF0aW9uVHlwZVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3ZpZGVySWRGb3JSZXNwb25zZShcbiAgcmVzcG9uc2U6IElkVG9rZW5SZXNwb25zZVxuKTogUHJvdmlkZXJJZCB8IHN0cmluZyB8IG51bGwge1xuICBpZiAocmVzcG9uc2UucHJvdmlkZXJJZCkge1xuICAgIHJldHVybiByZXNwb25zZS5wcm92aWRlcklkO1xuICB9XG5cbiAgaWYgKCdwaG9uZU51bWJlcicgaW4gcmVzcG9uc2UpIHtcbiAgICByZXR1cm4gUHJvdmlkZXJJZC5QSE9ORTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGgsIFVzZXJDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IHNpZ25VcCB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9zaWduX3VwJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbXBsIH0gZnJvbSAnLi4vdXNlci91c2VyX2NyZWRlbnRpYWxfaW1wbCc7XG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIGFzIGFuIGFub255bW91cyB1c2VyLlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGFub255bW91cyB1c2VyIHNpZ25lZCBpbiwgdGhhdCB1c2VyIHdpbGwgYmUgcmV0dXJuZWQ7IG90aGVyd2lzZSwgYVxuICogbmV3IGFub255bW91cyB1c2VyIGlkZW50aXR5IHdpbGwgYmUgY3JlYXRlZCBhbmQgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbkFub255bW91c2x5KGF1dGg6IEF1dGgpOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgYXdhaXQgYXV0aEludGVybmFsLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gIGlmIChhdXRoSW50ZXJuYWwuY3VycmVudFVzZXI/LmlzQW5vbnltb3VzKSB7XG4gICAgLy8gSWYgYW4gYW5vbnltb3VzIHVzZXIgaXMgYWxyZWFkeSBzaWduZWQgaW4sIG5vIG5lZWQgdG8gc2lnbiB0aGVtIGluIGFnYWluLlxuICAgIHJldHVybiBuZXcgVXNlckNyZWRlbnRpYWxJbXBsKHtcbiAgICAgIHVzZXI6IGF1dGhJbnRlcm5hbC5jdXJyZW50VXNlciBhcyBVc2VySW50ZXJuYWwsXG4gICAgICBwcm92aWRlcklkOiBudWxsLFxuICAgICAgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZS5TSUdOX0lOXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduVXAoYXV0aEludGVybmFsLCB7XG4gICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWVcbiAgfSk7XG4gIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgVXNlckNyZWRlbnRpYWxJbXBsLl9mcm9tSWRUb2tlblJlc3BvbnNlKFxuICAgIGF1dGhJbnRlcm5hbCxcbiAgICBPcGVyYXRpb25UeXBlLlNJR05fSU4sXG4gICAgcmVzcG9uc2UsXG4gICAgdHJ1ZVxuICApO1xuICBhd2FpdCBhdXRoSW50ZXJuYWwuX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXJDcmVkZW50aWFsLnVzZXIpO1xuICByZXR1cm4gdXNlckNyZWRlbnRpYWw7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTXVsdGlGYWN0b3JFcnJvciBhcyBNdWx0aUZhY3RvckVycm9yUHVibGljIH0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vY29yZS9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBJZFRva2VuTWZhUmVzcG9uc2UgfSBmcm9tICcuLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi9tb2RlbC9lbnVtcyc7XG5cbmV4cG9ydCB0eXBlIE11bHRpRmFjdG9yRXJyb3JEYXRhID0gTXVsdGlGYWN0b3JFcnJvclB1YmxpY1snY3VzdG9tRGF0YSddICYge1xuICBfc2VydmVyUmVzcG9uc2U6IElkVG9rZW5NZmFSZXNwb25zZTtcbn07XG5cbmV4cG9ydCBjbGFzcyBNdWx0aUZhY3RvckVycm9yXG4gIGV4dGVuZHMgRmlyZWJhc2VFcnJvclxuICBpbXBsZW1lbnRzIE11bHRpRmFjdG9yRXJyb3JQdWJsaWNcbntcbiAgcmVhZG9ubHkgY3VzdG9tRGF0YTogTXVsdGlGYWN0b3JFcnJvckRhdGE7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgZXJyb3I6IEZpcmViYXNlRXJyb3IsXG4gICAgcmVhZG9ubHkgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZSxcbiAgICByZWFkb25seSB1c2VyPzogVXNlckludGVybmFsXG4gICkge1xuICAgIHN1cGVyKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE11bHRpRmFjdG9yRXJyb3IucHJvdG90eXBlKTtcbiAgICB0aGlzLmN1c3RvbURhdGEgPSB7XG4gICAgICBhcHBOYW1lOiBhdXRoLm5hbWUsXG4gICAgICB0ZW5hbnRJZDogYXV0aC50ZW5hbnRJZCA/PyB1bmRlZmluZWQsXG4gICAgICBfc2VydmVyUmVzcG9uc2U6IGVycm9yLmN1c3RvbURhdGEhLl9zZXJ2ZXJSZXNwb25zZSBhcyBJZFRva2VuTWZhUmVzcG9uc2UsXG4gICAgICBvcGVyYXRpb25UeXBlLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgX2Zyb21FcnJvckFuZE9wZXJhdGlvbihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgZXJyb3I6IEZpcmViYXNlRXJyb3IsXG4gICAgb3BlcmF0aW9uVHlwZTogT3BlcmF0aW9uVHlwZSxcbiAgICB1c2VyPzogVXNlckludGVybmFsXG4gICk6IE11bHRpRmFjdG9yRXJyb3Ige1xuICAgIHJldHVybiBuZXcgTXVsdGlGYWN0b3JFcnJvcihhdXRoLCBlcnJvciwgb3BlcmF0aW9uVHlwZSwgdXNlcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9wcm9jZXNzQ3JlZGVudGlhbFNhdmluZ01mYUNvbnRleHRJZk5lY2Vzc2FyeShcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICBvcGVyYXRpb25UeXBlOiBPcGVyYXRpb25UeXBlLFxuICBjcmVkZW50aWFsOiBBdXRoQ3JlZGVudGlhbCxcbiAgdXNlcj86IFVzZXJJbnRlcm5hbFxuKTogUHJvbWlzZTxJZFRva2VuUmVzcG9uc2U+IHtcbiAgY29uc3QgaWRUb2tlblByb3ZpZGVyID1cbiAgICBvcGVyYXRpb25UeXBlID09PSBPcGVyYXRpb25UeXBlLlJFQVVUSEVOVElDQVRFXG4gICAgICA/IGNyZWRlbnRpYWwuX2dldFJlYXV0aGVudGljYXRpb25SZXNvbHZlcihhdXRoKVxuICAgICAgOiBjcmVkZW50aWFsLl9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aCk7XG5cbiAgcmV0dXJuIGlkVG9rZW5Qcm92aWRlci5jYXRjaChlcnJvciA9PiB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5NRkFfUkVRVUlSRUR9YCkge1xuICAgICAgdGhyb3cgTXVsdGlGYWN0b3JFcnJvci5fZnJvbUVycm9yQW5kT3BlcmF0aW9uKFxuICAgICAgICBhdXRoLFxuICAgICAgICBlcnJvcixcbiAgICAgICAgb3BlcmF0aW9uVHlwZSxcbiAgICAgICAgdXNlclxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBQcm92aWRlckFzc29jaWF0ZWRPYmplY3Qge1xuICBwcm92aWRlcklkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIFVzZXJJbmZvIHByb3ZpZGVyIGRhdGEgYW5kIGNvbnZlcnRzIGl0IHRvIGEgc2V0IG9mIG5hbWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlckRhdGFBc05hbWVzPFQgZXh0ZW5kcyBQcm92aWRlckFzc29jaWF0ZWRPYmplY3Q+KFxuICBwcm92aWRlckRhdGE6IFRbXVxuKTogU2V0PHN0cmluZz4ge1xuICByZXR1cm4gbmV3IFNldChcbiAgICBwcm92aWRlckRhdGFcbiAgICAgIC5tYXAoKHsgcHJvdmlkZXJJZCB9KSA9PiBwcm92aWRlcklkKVxuICAgICAgLmZpbHRlcihwaWQgPT4gISFwaWQpIGFzIHN0cmluZ1tdXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IGRlbGV0ZUxpbmtlZEFjY291bnRzIH0gZnJvbSAnLi4vLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9hY2NvdW50JztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCwgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBwcm92aWRlckRhdGFBc05hbWVzIH0gZnJvbSAnLi4vdXRpbC9wcm92aWRlcnMnO1xuaW1wb3J0IHsgX2xvZ291dElmSW52YWxpZGF0ZWQgfSBmcm9tICcuL2ludmFsaWRhdGlvbic7XG5pbXBvcnQgeyBfcmVsb2FkV2l0aG91dFNhdmluZyB9IGZyb20gJy4vcmVsb2FkJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW1wbCB9IGZyb20gJy4vdXNlcl9jcmVkZW50aWFsX2ltcGwnO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSwgUHJvdmlkZXJJZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuLyoqXG4gKiBVbmxpbmtzIGEgcHJvdmlkZXIgZnJvbSBhIHVzZXIgYWNjb3VudC5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHByb3ZpZGVySWQgLSBUaGUgcHJvdmlkZXIgdG8gdW5saW5rLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVubGluayh1c2VyOiBVc2VyLCBwcm92aWRlcklkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXI+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgYXdhaXQgX2Fzc2VydExpbmtlZFN0YXR1cyh0cnVlLCB1c2VySW50ZXJuYWwsIHByb3ZpZGVySWQpO1xuICBjb25zdCB7IHByb3ZpZGVyVXNlckluZm8gfSA9IGF3YWl0IGRlbGV0ZUxpbmtlZEFjY291bnRzKHVzZXJJbnRlcm5hbC5hdXRoLCB7XG4gICAgaWRUb2tlbjogYXdhaXQgdXNlckludGVybmFsLmdldElkVG9rZW4oKSxcbiAgICBkZWxldGVQcm92aWRlcjogW3Byb3ZpZGVySWRdXG4gIH0pO1xuXG4gIGNvbnN0IHByb3ZpZGVyc0xlZnQgPSBwcm92aWRlckRhdGFBc05hbWVzKHByb3ZpZGVyVXNlckluZm8gfHwgW10pO1xuXG4gIHVzZXJJbnRlcm5hbC5wcm92aWRlckRhdGEgPSB1c2VySW50ZXJuYWwucHJvdmlkZXJEYXRhLmZpbHRlcihwZCA9PlxuICAgIHByb3ZpZGVyc0xlZnQuaGFzKHBkLnByb3ZpZGVySWQpXG4gICk7XG4gIGlmICghcHJvdmlkZXJzTGVmdC5oYXMoUHJvdmlkZXJJZC5QSE9ORSkpIHtcbiAgICB1c2VySW50ZXJuYWwucGhvbmVOdW1iZXIgPSBudWxsO1xuICB9XG5cbiAgYXdhaXQgdXNlckludGVybmFsLmF1dGguX3BlcnNpc3RVc2VySWZDdXJyZW50KHVzZXJJbnRlcm5hbCk7XG4gIHJldHVybiB1c2VySW50ZXJuYWw7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfbGluayhcbiAgdXNlcjogVXNlckludGVybmFsLFxuICBjcmVkZW50aWFsOiBBdXRoQ3JlZGVudGlhbCxcbiAgYnlwYXNzQXV0aFN0YXRlID0gZmFsc2Vcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbD4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKFxuICAgIHVzZXIsXG4gICAgY3JlZGVudGlhbC5fbGlua1RvSWRUb2tlbih1c2VyLmF1dGgsIGF3YWl0IHVzZXIuZ2V0SWRUb2tlbigpKSxcbiAgICBieXBhc3NBdXRoU3RhdGVcbiAgKTtcbiAgcmV0dXJuIFVzZXJDcmVkZW50aWFsSW1wbC5fZm9yT3BlcmF0aW9uKHVzZXIsIE9wZXJhdGlvblR5cGUuTElOSywgcmVzcG9uc2UpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2Fzc2VydExpbmtlZFN0YXR1cyhcbiAgZXhwZWN0ZWQ6IGJvb2xlYW4sXG4gIHVzZXI6IFVzZXJJbnRlcm5hbCxcbiAgcHJvdmlkZXI6IHN0cmluZ1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IF9yZWxvYWRXaXRob3V0U2F2aW5nKHVzZXIpO1xuICBjb25zdCBwcm92aWRlcklkcyA9IHByb3ZpZGVyRGF0YUFzTmFtZXModXNlci5wcm92aWRlckRhdGEpO1xuXG4gIGNvbnN0IGNvZGUgPVxuICAgIGV4cGVjdGVkID09PSBmYWxzZVxuICAgICAgPyBBdXRoRXJyb3JDb2RlLlBST1ZJREVSX0FMUkVBRFlfTElOS0VEXG4gICAgICA6IEF1dGhFcnJvckNvZGUuTk9fU1VDSF9QUk9WSURFUjtcbiAgX2Fzc2VydChwcm92aWRlcklkcy5oYXMocHJvdmlkZXIpID09PSBleHBlY3RlZCwgdXNlci5hdXRoLCBjb2RlKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfcHJvY2Vzc0NyZWRlbnRpYWxTYXZpbmdNZmFDb250ZXh0SWZOZWNlc3NhcnkgfSBmcm9tICcuLi8uLi9tZmEvbWZhX2Vycm9yJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IEF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0LCBfZmFpbCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9wYXJzZVRva2VuIH0gZnJvbSAnLi9pZF90b2tlbl9yZXN1bHQnO1xuaW1wb3J0IHsgX2xvZ291dElmSW52YWxpZGF0ZWQgfSBmcm9tICcuL2ludmFsaWRhdGlvbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEltcGwgfSBmcm9tICcuL3VzZXJfY3JlZGVudGlhbF9pbXBsJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9yZWF1dGhlbnRpY2F0ZShcbiAgdXNlcjogVXNlckludGVybmFsLFxuICBjcmVkZW50aWFsOiBBdXRoQ3JlZGVudGlhbCxcbiAgYnlwYXNzQXV0aFN0YXRlID0gZmFsc2Vcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbXBsPiB7XG4gIGNvbnN0IHsgYXV0aCB9ID0gdXNlcjtcbiAgY29uc3Qgb3BlcmF0aW9uVHlwZSA9IE9wZXJhdGlvblR5cGUuUkVBVVRIRU5USUNBVEU7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKFxuICAgICAgdXNlcixcbiAgICAgIF9wcm9jZXNzQ3JlZGVudGlhbFNhdmluZ01mYUNvbnRleHRJZk5lY2Vzc2FyeShcbiAgICAgICAgYXV0aCxcbiAgICAgICAgb3BlcmF0aW9uVHlwZSxcbiAgICAgICAgY3JlZGVudGlhbCxcbiAgICAgICAgdXNlclxuICAgICAgKSxcbiAgICAgIGJ5cGFzc0F1dGhTdGF0ZVxuICAgICk7XG4gICAgX2Fzc2VydChyZXNwb25zZS5pZFRva2VuLCBhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICBjb25zdCBwYXJzZWQgPSBfcGFyc2VUb2tlbihyZXNwb25zZS5pZFRva2VuKTtcbiAgICBfYXNzZXJ0KHBhcnNlZCwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG5cbiAgICBjb25zdCB7IHN1YjogbG9jYWxJZCB9ID0gcGFyc2VkO1xuICAgIF9hc3NlcnQodXNlci51aWQgPT09IGxvY2FsSWQsIGF1dGgsIEF1dGhFcnJvckNvZGUuVVNFUl9NSVNNQVRDSCk7XG5cbiAgICByZXR1cm4gVXNlckNyZWRlbnRpYWxJbXBsLl9mb3JPcGVyYXRpb24odXNlciwgb3BlcmF0aW9uVHlwZSwgcmVzcG9uc2UpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gQ29udmVydCB1c2VyIGRlbGV0ZWQgZXJyb3IgaW50byB1c2VyIG1pc21hdGNoXG4gICAgaWYgKGU/LmNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5VU0VSX0RFTEVURUR9YCkge1xuICAgICAgX2ZhaWwoYXV0aCwgQXV0aEVycm9yQ29kZS5VU0VSX01JU01BVENIKTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsLCBBdXRoLCBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgX3Byb2Nlc3NDcmVkZW50aWFsU2F2aW5nTWZhQ29udGV4dElmTmVjZXNzYXJ5IH0gZnJvbSAnLi4vLi4vbWZhL21mYV9lcnJvcic7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBfYXNzZXJ0TGlua2VkU3RhdHVzLCBfbGluayB9IGZyb20gJy4uL3VzZXIvbGlua191bmxpbmsnO1xuaW1wb3J0IHsgX3JlYXV0aGVudGljYXRlIH0gZnJvbSAnLi4vdXNlci9yZWF1dGhlbnRpY2F0ZSc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEltcGwgfSBmcm9tICcuLi91c2VyL3VzZXJfY3JlZGVudGlhbF9pbXBsJztcbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfc2lnbkluV2l0aENyZWRlbnRpYWwoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgY3JlZGVudGlhbDogQXV0aENyZWRlbnRpYWwsXG4gIGJ5cGFzc0F1dGhTdGF0ZSA9IGZhbHNlXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gIGNvbnN0IG9wZXJhdGlvblR5cGUgPSBPcGVyYXRpb25UeXBlLlNJR05fSU47XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX3Byb2Nlc3NDcmVkZW50aWFsU2F2aW5nTWZhQ29udGV4dElmTmVjZXNzYXJ5KFxuICAgIGF1dGgsXG4gICAgb3BlcmF0aW9uVHlwZSxcbiAgICBjcmVkZW50aWFsXG4gICk7XG4gIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgVXNlckNyZWRlbnRpYWxJbXBsLl9mcm9tSWRUb2tlblJlc3BvbnNlKFxuICAgIGF1dGgsXG4gICAgb3BlcmF0aW9uVHlwZSxcbiAgICByZXNwb25zZVxuICApO1xuXG4gIGlmICghYnlwYXNzQXV0aFN0YXRlKSB7XG4gICAgYXdhaXQgYXV0aC5fdXBkYXRlQ3VycmVudFVzZXIodXNlckNyZWRlbnRpYWwudXNlcik7XG4gIH1cbiAgcmV0dXJuIHVzZXJDcmVkZW50aWFsO1xufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91c2x5IHNpZ25zIGluIHdpdGggdGhlIGdpdmVuIGNyZWRlbnRpYWxzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBBbiB7QGxpbmsgQXV0aFByb3ZpZGVyfSBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY3JlZGVudGlhbC5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhdXRoIGNyZWRlbnRpYWwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aENyZWRlbnRpYWwoXG4gIGF1dGg6IEF1dGgsXG4gIGNyZWRlbnRpYWw6IEF1dGhDcmVkZW50aWFsXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gIHJldHVybiBfc2lnbkluV2l0aENyZWRlbnRpYWwoX2Nhc3RBdXRoKGF1dGgpLCBjcmVkZW50aWFsKTtcbn1cblxuLyoqXG4gKiBMaW5rcyB0aGUgdXNlciBhY2NvdW50IHdpdGggdGhlIGdpdmVuIGNyZWRlbnRpYWxzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBBbiB7QGxpbmsgQXV0aFByb3ZpZGVyfSBjYW4gYmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY3JlZGVudGlhbC5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXV0aCBjcmVkZW50aWFsLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxpbmtXaXRoQ3JlZGVudGlhbChcbiAgdXNlcjogVXNlcixcbiAgY3JlZGVudGlhbDogQXV0aENyZWRlbnRpYWxcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcblxuICBhd2FpdCBfYXNzZXJ0TGlua2VkU3RhdHVzKGZhbHNlLCB1c2VySW50ZXJuYWwsIGNyZWRlbnRpYWwucHJvdmlkZXJJZCk7XG5cbiAgcmV0dXJuIF9saW5rKHVzZXJJbnRlcm5hbCwgY3JlZGVudGlhbCk7XG59XG5cbi8qKlxuICogUmUtYXV0aGVudGljYXRlcyBhIHVzZXIgdXNpbmcgYSBmcmVzaCBjcmVkZW50aWFsLlxuICpcbiAqIEByZW1hcmtzXG4gKiBVc2UgYmVmb3JlIG9wZXJhdGlvbnMgc3VjaCBhcyB7QGxpbmsgdXBkYXRlUGFzc3dvcmR9IHRoYXQgcmVxdWlyZSB0b2tlbnMgZnJvbSByZWNlbnQgc2lnbi1pblxuICogYXR0ZW1wdHMuIFRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIHJlY292ZXIgZnJvbSBhIGBDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU5gIGVycm9yLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhdXRoIGNyZWRlbnRpYWwuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbChcbiAgdXNlcjogVXNlcixcbiAgY3JlZGVudGlhbDogQXV0aENyZWRlbnRpYWxcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgcmV0dXJuIF9yZWF1dGhlbnRpY2F0ZShnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsLCBjcmVkZW50aWFsKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBFbmRwb2ludCxcbiAgSHR0cE1ldGhvZCxcbiAgX2FkZFRpZElmTmVjZXNzYXJ5LFxuICBfcGVyZm9ybVNpZ25JblJlcXVlc3Rcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbkluV2l0aEN1c3RvbVRva2VuUmVxdWVzdCB7XG4gIHRva2VuOiBzdHJpbmc7XG4gIHJldHVyblNlY3VyZVRva2VuOiBib29sZWFuO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaWduSW5XaXRoQ3VzdG9tVG9rZW5SZXNwb25zZSBleHRlbmRzIElkVG9rZW5SZXNwb25zZSB7fVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2lnbkluV2l0aEN1c3RvbVRva2VuKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBTaWduSW5XaXRoQ3VzdG9tVG9rZW5SZXF1ZXN0XG4pOiBQcm9taXNlPFNpZ25JbldpdGhDdXN0b21Ub2tlblJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybVNpZ25JblJlcXVlc3Q8XG4gICAgU2lnbkluV2l0aEN1c3RvbVRva2VuUmVxdWVzdCxcbiAgICBTaWduSW5XaXRoQ3VzdG9tVG9rZW5SZXNwb25zZVxuICA+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNJR05fSU5fV0lUSF9DVVNUT01fVE9LRU4sXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aCwgVXNlckNyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBzaWduSW5XaXRoQ3VzdG9tVG9rZW4gYXMgZ2V0SWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2N1c3RvbV90b2tlbic7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEltcGwgfSBmcm9tICcuLi91c2VyL3VzZXJfY3JlZGVudGlhbF9pbXBsJztcbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IE9wZXJhdGlvblR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2lnbnMgaW4gdXNpbmcgYSBjdXN0b20gdG9rZW4uXG4gKlxuICogQHJlbWFya3NcbiAqIEN1c3RvbSB0b2tlbnMgYXJlIHVzZWQgdG8gaW50ZWdyYXRlIEZpcmViYXNlIEF1dGggd2l0aCBleGlzdGluZyBhdXRoIHN5c3RlbXMsIGFuZCBtdXN0XG4gKiBiZSBnZW5lcmF0ZWQgYnkgYW4gYXV0aCBiYWNrZW5kIHVzaW5nIHRoZVxuICoge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL3JlZmVyZW5jZS9hZG1pbi9ub2RlL2FkbWluLmF1dGguQXV0aCNjcmVhdGVjdXN0b210b2tlbiB8IGNyZWF0ZUN1c3RvbVRva2VufVxuICogbWV0aG9kIGluIHRoZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvYXV0aC9hZG1pbiB8IEFkbWluIFNES30gLlxuICpcbiAqIEZhaWxzIHdpdGggYW4gZXJyb3IgaWYgdGhlIHRva2VuIGlzIGludmFsaWQsIGV4cGlyZWQsIG9yIG5vdCBhY2NlcHRlZCBieSB0aGUgRmlyZWJhc2UgQXV0aCBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBjdXN0b21Ub2tlbiAtIFRoZSBjdXN0b20gdG9rZW4gdG8gc2lnbiBpbiB3aXRoLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhDdXN0b21Ub2tlbihcbiAgYXV0aDogQXV0aCxcbiAgY3VzdG9tVG9rZW46IHN0cmluZ1xuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICBjb25zdCBhdXRoSW50ZXJuYWwgPSBfY2FzdEF1dGgoYXV0aCk7XG4gIGNvbnN0IHJlc3BvbnNlOiBJZFRva2VuUmVzcG9uc2UgPSBhd2FpdCBnZXRJZFRva2VuUmVzcG9uc2UoYXV0aEludGVybmFsLCB7XG4gICAgdG9rZW46IGN1c3RvbVRva2VuLFxuICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlXG4gIH0pO1xuICBjb25zdCBjcmVkID0gYXdhaXQgVXNlckNyZWRlbnRpYWxJbXBsLl9mcm9tSWRUb2tlblJlc3BvbnNlKFxuICAgIGF1dGhJbnRlcm5hbCxcbiAgICBPcGVyYXRpb25UeXBlLlNJR05fSU4sXG4gICAgcmVzcG9uc2VcbiAgKTtcbiAgYXdhaXQgYXV0aEludGVybmFsLl91cGRhdGVDdXJyZW50VXNlcihjcmVkLnVzZXIpO1xuICByZXR1cm4gY3JlZDtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGYWN0b3JJZCwgTXVsdGlGYWN0b3JJbmZvIH0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7XG4gIFBob25lTWZhRW5yb2xsbWVudCxcbiAgTWZhRW5yb2xsbWVudFxufSBmcm9tICcuLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L21mYSc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2ZhaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXVsdGlGYWN0b3JJbmZvSW1wbCBpbXBsZW1lbnRzIE11bHRpRmFjdG9ySW5mbyB7XG4gIHJlYWRvbmx5IHVpZDogc3RyaW5nO1xuICByZWFkb25seSBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7XG4gIHJlYWRvbmx5IGVucm9sbG1lbnRUaW1lOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGZhY3RvcklkOiBGYWN0b3JJZCwgcmVzcG9uc2U6IE1mYUVucm9sbG1lbnQpIHtcbiAgICB0aGlzLnVpZCA9IHJlc3BvbnNlLm1mYUVucm9sbG1lbnRJZDtcbiAgICB0aGlzLmVucm9sbG1lbnRUaW1lID0gbmV3IERhdGUocmVzcG9uc2UuZW5yb2xsZWRBdCkudG9VVENTdHJpbmcoKTtcbiAgICB0aGlzLmRpc3BsYXlOYW1lID0gcmVzcG9uc2UuZGlzcGxheU5hbWU7XG4gIH1cblxuICBzdGF0aWMgX2Zyb21TZXJ2ZXJSZXNwb25zZShcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgZW5yb2xsbWVudDogTWZhRW5yb2xsbWVudFxuICApOiBNdWx0aUZhY3RvckluZm9JbXBsIHtcbiAgICBpZiAoJ3Bob25lSW5mbycgaW4gZW5yb2xsbWVudCkge1xuICAgICAgcmV0dXJuIFBob25lTXVsdGlGYWN0b3JJbmZvLl9mcm9tU2VydmVyUmVzcG9uc2UoYXV0aCwgZW5yb2xsbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGhvbmVNdWx0aUZhY3RvckluZm8gZXh0ZW5kcyBNdWx0aUZhY3RvckluZm9JbXBsIHtcbiAgcmVhZG9ubHkgcGhvbmVOdW1iZXI6IHN0cmluZztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBQaG9uZU1mYUVucm9sbG1lbnQpIHtcbiAgICBzdXBlcihGYWN0b3JJZC5QSE9ORSwgcmVzcG9uc2UpO1xuICAgIHRoaXMucGhvbmVOdW1iZXIgPSByZXNwb25zZS5waG9uZUluZm87XG4gIH1cblxuICBzdGF0aWMgX2Zyb21TZXJ2ZXJSZXNwb25zZShcbiAgICBfYXV0aDogQXV0aEludGVybmFsLFxuICAgIGVucm9sbG1lbnQ6IE1mYUVucm9sbG1lbnRcbiAgKTogUGhvbmVNdWx0aUZhY3RvckluZm8ge1xuICAgIHJldHVybiBuZXcgUGhvbmVNdWx0aUZhY3RvckluZm8oZW5yb2xsbWVudCk7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBY3Rpb25Db2RlU2V0dGluZ3MsIEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBHZXRPb2JDb2RlUmVxdWVzdCB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9lbWFpbF9hbmRfcGFzc3dvcmQnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdChcbiAgYXV0aDogQXV0aCxcbiAgcmVxdWVzdDogR2V0T29iQ29kZVJlcXVlc3QsXG4gIGFjdGlvbkNvZGVTZXR0aW5nczogQWN0aW9uQ29kZVNldHRpbmdzXG4pOiB2b2lkIHtcbiAgX2Fzc2VydChcbiAgICBhY3Rpb25Db2RlU2V0dGluZ3MudXJsPy5sZW5ndGggPiAwLFxuICAgIGF1dGgsXG4gICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX0NPTlRJTlVFX1VSSVxuICApO1xuICBfYXNzZXJ0KFxuICAgIHR5cGVvZiBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW4gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW4ubGVuZ3RoID4gMCxcbiAgICBhdXRoLFxuICAgIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOXG4gICk7XG5cbiAgcmVxdWVzdC5jb250aW51ZVVybCA9IGFjdGlvbkNvZGVTZXR0aW5ncy51cmw7XG4gIHJlcXVlc3QuZHluYW1pY0xpbmtEb21haW4gPSBhY3Rpb25Db2RlU2V0dGluZ3MuZHluYW1pY0xpbmtEb21haW47XG4gIHJlcXVlc3QuY2FuSGFuZGxlQ29kZUluQXBwID0gYWN0aW9uQ29kZVNldHRpbmdzLmhhbmRsZUNvZGVJbkFwcDtcblxuICBpZiAoYWN0aW9uQ29kZVNldHRpbmdzLmlPUykge1xuICAgIF9hc3NlcnQoXG4gICAgICBhY3Rpb25Db2RlU2V0dGluZ3MuaU9TLmJ1bmRsZUlkLmxlbmd0aCA+IDAsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5NSVNTSU5HX0lPU19CVU5ETEVfSURcbiAgICApO1xuICAgIHJlcXVlc3QuaU9TQnVuZGxlSWQgPSBhY3Rpb25Db2RlU2V0dGluZ3MuaU9TLmJ1bmRsZUlkO1xuICB9XG5cbiAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncy5hbmRyb2lkKSB7XG4gICAgX2Fzc2VydChcbiAgICAgIGFjdGlvbkNvZGVTZXR0aW5ncy5hbmRyb2lkLnBhY2thZ2VOYW1lLmxlbmd0aCA+IDAsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5NSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FXG4gICAgKTtcbiAgICByZXF1ZXN0LmFuZHJvaWRJbnN0YWxsQXBwID0gYWN0aW9uQ29kZVNldHRpbmdzLmFuZHJvaWQuaW5zdGFsbEFwcDtcbiAgICByZXF1ZXN0LmFuZHJvaWRNaW5pbXVtVmVyc2lvbkNvZGUgPVxuICAgICAgYWN0aW9uQ29kZVNldHRpbmdzLmFuZHJvaWQubWluaW11bVZlcnNpb247XG4gICAgcmVxdWVzdC5hbmRyb2lkUGFja2FnZU5hbWUgPSBhY3Rpb25Db2RlU2V0dGluZ3MuYW5kcm9pZC5wYWNrYWdlTmFtZTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEFjdGlvbkNvZGVJbmZvLFxuICBBY3Rpb25Db2RlT3BlcmF0aW9uLFxuICBBY3Rpb25Db2RlU2V0dGluZ3MsXG4gIEF1dGgsXG4gIFVzZXJDcmVkZW50aWFsXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCAqIGFzIGFjY291bnQgZnJvbSAnLi4vLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9lbWFpbF9hbmRfcGFzc3dvcmQnO1xuaW1wb3J0ICogYXMgYXV0aGVudGljYXRpb24gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQgeyBzaWduVXAgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vc2lnbl91cCc7XG5pbXBvcnQgeyBNdWx0aUZhY3RvckluZm9JbXBsIH0gZnJvbSAnLi4vLi4vbWZhL21mYV9pbmZvJztcbmltcG9ydCB7IEVtYWlsQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2VtYWlsJztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW1wbCB9IGZyb20gJy4uL3VzZXIvdXNlcl9jcmVkZW50aWFsX2ltcGwnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QgfSBmcm9tICcuL2FjdGlvbl9jb2RlX3NldHRpbmdzJztcbmltcG9ydCB7IHNpZ25JbldpdGhDcmVkZW50aWFsIH0gZnJvbSAnLi9jcmVkZW50aWFsJztcbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgT3BlcmF0aW9uVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuLyoqXG4gKiBTZW5kcyBhIHBhc3N3b3JkIHJlc2V0IGVtYWlsIHRvIHRoZSBnaXZlbiBlbWFpbCBhZGRyZXNzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUbyBjb21wbGV0ZSB0aGUgcGFzc3dvcmQgcmVzZXQsIGNhbGwge0BsaW5rIGNvbmZpcm1QYXNzd29yZFJlc2V0fSB3aXRoIHRoZSBjb2RlIHN1cHBsaWVkIGluXG4gKiB0aGUgZW1haWwgc2VudCB0byB0aGUgdXNlciwgYWxvbmcgd2l0aCB0aGUgbmV3IHBhc3N3b3JkIHNwZWNpZmllZCBieSB0aGUgdXNlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xuICogICB1cmw6ICdodHRwczovL3d3dy5leGFtcGxlLmNvbS8/ZW1haWw9dXNlckBleGFtcGxlLmNvbScsXG4gKiAgIGlPUzoge1xuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcbiAqICAgfSxcbiAqICAgYW5kcm9pZDoge1xuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXG4gKiAgICAgaW5zdGFsbEFwcDogdHJ1ZSxcbiAqICAgICBtaW5pbXVtVmVyc2lvbjogJzEyJ1xuICogICB9LFxuICogICBoYW5kbGVDb2RlSW5BcHA6IHRydWVcbiAqIH07XG4gKiBhd2FpdCBzZW5kUGFzc3dvcmRSZXNldEVtYWlsKGF1dGgsICd1c2VyQGV4YW1wbGUuY29tJywgYWN0aW9uQ29kZVNldHRpbmdzKTtcbiAqIC8vIE9idGFpbiBjb2RlIGZyb20gdXNlci5cbiAqIGF3YWl0IGNvbmZpcm1QYXNzd29yZFJlc2V0KCd1c2VyQGV4YW1wbGUuY29tJywgY29kZSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gZW1haWwgLSBUaGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXG4gKiBAcGFyYW0gYWN0aW9uQ29kZVNldHRpbmdzIC0gVGhlIHtAbGluayBBY3Rpb25Db2RlU2V0dGluZ3N9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRQYXNzd29yZFJlc2V0RW1haWwoXG4gIGF1dGg6IEF1dGgsXG4gIGVtYWlsOiBzdHJpbmcsXG4gIGFjdGlvbkNvZGVTZXR0aW5ncz86IEFjdGlvbkNvZGVTZXR0aW5nc1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGF1dGhNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpO1xuICBjb25zdCByZXF1ZXN0OiBhdXRoZW50aWNhdGlvbi5QYXNzd29yZFJlc2V0UmVxdWVzdCA9IHtcbiAgICByZXF1ZXN0VHlwZTogQWN0aW9uQ29kZU9wZXJhdGlvbi5QQVNTV09SRF9SRVNFVCxcbiAgICBlbWFpbFxuICB9O1xuICBpZiAoYWN0aW9uQ29kZVNldHRpbmdzKSB7XG4gICAgX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdChhdXRoTW9kdWxhciwgcmVxdWVzdCwgYWN0aW9uQ29kZVNldHRpbmdzKTtcbiAgfVxuXG4gIGF3YWl0IGF1dGhlbnRpY2F0aW9uLnNlbmRQYXNzd29yZFJlc2V0RW1haWwoYXV0aE1vZHVsYXIsIHJlcXVlc3QpO1xufVxuXG4vKipcbiAqIENvbXBsZXRlcyB0aGUgcGFzc3dvcmQgcmVzZXQgcHJvY2VzcywgZ2l2ZW4gYSBjb25maXJtYXRpb24gY29kZSBhbmQgbmV3IHBhc3N3b3JkLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBvb2JDb2RlIC0gQSBjb25maXJtYXRpb24gY29kZSBzZW50IHRvIHRoZSB1c2VyLlxuICogQHBhcmFtIG5ld1Bhc3N3b3JkIC0gVGhlIG5ldyBwYXNzd29yZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25maXJtUGFzc3dvcmRSZXNldChcbiAgYXV0aDogQXV0aCxcbiAgb29iQ29kZTogc3RyaW5nLFxuICBuZXdQYXNzd29yZDogc3RyaW5nXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgYXdhaXQgYWNjb3VudC5yZXNldFBhc3N3b3JkKGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSwge1xuICAgIG9vYkNvZGUsXG4gICAgbmV3UGFzc3dvcmRcbiAgfSk7XG4gIC8vIERvIG5vdCByZXR1cm4gdGhlIGVtYWlsLlxufVxuXG4vKipcbiAqIEFwcGxpZXMgYSB2ZXJpZmljYXRpb24gY29kZSBzZW50IHRvIHRoZSB1c2VyIGJ5IGVtYWlsIG9yIG90aGVyIG91dC1vZi1iYW5kIG1lY2hhbmlzbS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gb29iQ29kZSAtIEEgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcHBseUFjdGlvbkNvZGUoXG4gIGF1dGg6IEF1dGgsXG4gIG9vYkNvZGU6IHN0cmluZ1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IGFjY291bnQuYXBwbHlBY3Rpb25Db2RlKGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSwgeyBvb2JDb2RlIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIHZlcmlmaWNhdGlvbiBjb2RlIHNlbnQgdG8gdGhlIHVzZXIgYnkgZW1haWwgb3Igb3RoZXIgb3V0LW9mLWJhbmQgbWVjaGFuaXNtLlxuICpcbiAqIEByZXR1cm5zIG1ldGFkYXRhIGFib3V0IHRoZSBjb2RlLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBvb2JDb2RlIC0gQSB2ZXJpZmljYXRpb24gY29kZSBzZW50IHRvIHRoZSB1c2VyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrQWN0aW9uQ29kZShcbiAgYXV0aDogQXV0aCxcbiAgb29iQ29kZTogc3RyaW5nXG4pOiBQcm9taXNlPEFjdGlvbkNvZGVJbmZvPiB7XG4gIGNvbnN0IGF1dGhNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpO1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFjY291bnQucmVzZXRQYXNzd29yZChhdXRoTW9kdWxhciwgeyBvb2JDb2RlIH0pO1xuXG4gIC8vIEVtYWlsIGNvdWxkIGJlIGVtcHR5IG9ubHkgaWYgdGhlIHJlcXVlc3QgdHlwZSBpcyBFTUFJTF9TSUdOSU4gb3JcbiAgLy8gVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwuXG4gIC8vIE5ldyBlbWFpbCBzaG91bGQgbm90IGJlIGVtcHR5IGlmIHRoZSByZXF1ZXN0IHR5cGUgaXNcbiAgLy8gVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwuXG4gIC8vIE11bHRpLWZhY3RvciBpbmZvIGNvdWxkIG5vdCBiZSBlbXB0eSBpZiB0aGUgcmVxdWVzdCB0eXBlIGlzXG4gIC8vIFJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OLlxuICBjb25zdCBvcGVyYXRpb24gPSByZXNwb25zZS5yZXF1ZXN0VHlwZTtcbiAgX2Fzc2VydChvcGVyYXRpb24sIGF1dGhNb2R1bGFyLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICBjYXNlIEFjdGlvbkNvZGVPcGVyYXRpb24uRU1BSUxfU0lHTklOOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBY3Rpb25Db2RlT3BlcmF0aW9uLlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMOlxuICAgICAgX2Fzc2VydChyZXNwb25zZS5uZXdFbWFpbCwgYXV0aE1vZHVsYXIsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBY3Rpb25Db2RlT3BlcmF0aW9uLlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OOlxuICAgICAgX2Fzc2VydChyZXNwb25zZS5tZmFJbmZvLCBhdXRoTW9kdWxhciwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgZGVmYXVsdDpcbiAgICAgIF9hc3NlcnQocmVzcG9uc2UuZW1haWwsIGF1dGhNb2R1bGFyLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgfVxuXG4gIC8vIFRoZSBtdWx0aS1mYWN0b3IgaW5mbyBmb3IgcmV2ZXJ0IHNlY29uZCBmYWN0b3IgYWRkaXRpb25cbiAgbGV0IG11bHRpRmFjdG9ySW5mbzogTXVsdGlGYWN0b3JJbmZvSW1wbCB8IG51bGwgPSBudWxsO1xuICBpZiAocmVzcG9uc2UubWZhSW5mbykge1xuICAgIG11bHRpRmFjdG9ySW5mbyA9IE11bHRpRmFjdG9ySW5mb0ltcGwuX2Zyb21TZXJ2ZXJSZXNwb25zZShcbiAgICAgIF9jYXN0QXV0aChhdXRoTW9kdWxhciksXG4gICAgICByZXNwb25zZS5tZmFJbmZvXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGF0YToge1xuICAgICAgZW1haWw6XG4gICAgICAgIChyZXNwb25zZS5yZXF1ZXN0VHlwZSA9PT0gQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfQU5EX0NIQU5HRV9FTUFJTFxuICAgICAgICAgID8gcmVzcG9uc2UubmV3RW1haWxcbiAgICAgICAgICA6IHJlc3BvbnNlLmVtYWlsKSB8fCBudWxsLFxuICAgICAgcHJldmlvdXNFbWFpbDpcbiAgICAgICAgKHJlc3BvbnNlLnJlcXVlc3RUeXBlID09PSBBY3Rpb25Db2RlT3BlcmF0aW9uLlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXG4gICAgICAgICAgPyByZXNwb25zZS5lbWFpbFxuICAgICAgICAgIDogcmVzcG9uc2UubmV3RW1haWwpIHx8IG51bGwsXG4gICAgICBtdWx0aUZhY3RvckluZm9cbiAgICB9LFxuICAgIG9wZXJhdGlvblxuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBhIHBhc3N3b3JkIHJlc2V0IGNvZGUgc2VudCB0byB0aGUgdXNlciBieSBlbWFpbCBvciBvdGhlciBvdXQtb2YtYmFuZCBtZWNoYW5pc20uXG4gKlxuICogQHJldHVybnMgdGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzIGlmIHZhbGlkLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBjb2RlIC0gQSB2ZXJpZmljYXRpb24gY29kZSBzZW50IHRvIHRoZSB1c2VyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZlcmlmeVBhc3N3b3JkUmVzZXRDb2RlKFxuICBhdXRoOiBBdXRoLFxuICBjb2RlOiBzdHJpbmdcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgY2hlY2tBY3Rpb25Db2RlKGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSwgY29kZSk7XG4gIC8vIEVtYWlsIHNob3VsZCBhbHdheXMgYmUgcHJlc2VudCBzaW5jZSBhIGNvZGUgd2FzIHNlbnQgdG8gaXRcbiAgcmV0dXJuIGRhdGEuZW1haWwhO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdXNlciBhY2NvdW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGVtYWlsIGFkZHJlc3MgYW5kIHBhc3N3b3JkLlxuICpcbiAqIEByZW1hcmtzXG4gKiBPbiBzdWNjZXNzZnVsIGNyZWF0aW9uIG9mIHRoZSB1c2VyIGFjY291bnQsIHRoaXMgdXNlciB3aWxsIGFsc28gYmUgc2lnbmVkIGluIHRvIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogVXNlciBhY2NvdW50IGNyZWF0aW9uIGNhbiBmYWlsIGlmIHRoZSBhY2NvdW50IGFscmVhZHkgZXhpc3RzIG9yIHRoZSBwYXNzd29yZCBpcyBpbnZhbGlkLlxuICpcbiAqIE5vdGU6IFRoZSBlbWFpbCBhZGRyZXNzIGFjdHMgYXMgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHVzZXIgYW5kIGVuYWJsZXMgYW4gZW1haWwtYmFzZWRcbiAqIHBhc3N3b3JkIHJlc2V0LiBUaGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgbmV3IHVzZXIgYWNjb3VudCBhbmQgc2V0IHRoZSBpbml0aWFsIHVzZXIgcGFzc3dvcmQuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIHBhc3N3b3JkIC0gVGhlIHVzZXIncyBjaG9zZW4gcGFzc3dvcmQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKFxuICBhdXRoOiBBdXRoLFxuICBlbWFpbDogc3RyaW5nLFxuICBwYXNzd29yZDogc3RyaW5nXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzaWduVXAoYXV0aEludGVybmFsLCB7XG4gICAgcmV0dXJuU2VjdXJlVG9rZW46IHRydWUsXG4gICAgZW1haWwsXG4gICAgcGFzc3dvcmRcbiAgfSk7XG5cbiAgY29uc3QgdXNlckNyZWRlbnRpYWwgPSBhd2FpdCBVc2VyQ3JlZGVudGlhbEltcGwuX2Zyb21JZFRva2VuUmVzcG9uc2UoXG4gICAgYXV0aEludGVybmFsLFxuICAgIE9wZXJhdGlvblR5cGUuU0lHTl9JTixcbiAgICByZXNwb25zZVxuICApO1xuICBhd2FpdCBhdXRoSW50ZXJuYWwuX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXJDcmVkZW50aWFsLnVzZXIpO1xuXG4gIHJldHVybiB1c2VyQ3JlZGVudGlhbDtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB1c2luZyBhbiBlbWFpbCBhbmQgcGFzc3dvcmQuXG4gKlxuICogQHJlbWFya3NcbiAqIEZhaWxzIHdpdGggYW4gZXJyb3IgaWYgdGhlIGVtYWlsIGFkZHJlc3MgYW5kIHBhc3N3b3JkIGRvIG5vdCBtYXRjaC5cbiAqXG4gKiBOb3RlOiBUaGUgdXNlcidzIHBhc3N3b3JkIGlzIE5PVCB0aGUgcGFzc3dvcmQgdXNlZCB0byBhY2Nlc3MgdGhlIHVzZXIncyBlbWFpbCBhY2NvdW50LiBUaGVcbiAqIGVtYWlsIGFkZHJlc3Mgc2VydmVzIGFzIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB1c2VyLCBhbmQgdGhlIHBhc3N3b3JkIGlzIHVzZWQgdG8gYWNjZXNzXG4gKiB0aGUgdXNlcidzIGFjY291bnQgaW4geW91ciBGaXJlYmFzZSBwcm9qZWN0LiBTZWUgYWxzbzoge0BsaW5rIGNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZH0uXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGVtYWlsIC0gVGhlIHVzZXJzIGVtYWlsIGFkZHJlc3MuXG4gKiBAcGFyYW0gcGFzc3dvcmQgLSBUaGUgdXNlcnMgcGFzc3dvcmQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoXG4gIGF1dGg6IEF1dGgsXG4gIGVtYWlsOiBzdHJpbmcsXG4gIHBhc3N3b3JkOiBzdHJpbmdcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgcmV0dXJuIHNpZ25JbldpdGhDcmVkZW50aWFsKFxuICAgIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKSxcbiAgICBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsKGVtYWlsLCBwYXNzd29yZClcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBBY3Rpb25Db2RlT3BlcmF0aW9uLFxuICBBY3Rpb25Db2RlU2V0dGluZ3MsXG4gIEF1dGgsXG4gIFVzZXJDcmVkZW50aWFsXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCAqIGFzIGFwaSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vZW1haWxfYW5kX3Bhc3N3b3JkJztcbmltcG9ydCB7IEFjdGlvbkNvZGVVUkwgfSBmcm9tICcuLi9hY3Rpb25fY29kZV91cmwnO1xuaW1wb3J0IHsgRW1haWxBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvZW1haWwnO1xuaW1wb3J0IHsgX2dldEN1cnJlbnRVcmwgfSBmcm9tICcuLi91dGlsL2xvY2F0aW9uJztcbmltcG9ydCB7IF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QgfSBmcm9tICcuL2FjdGlvbl9jb2RlX3NldHRpbmdzJztcbmltcG9ydCB7IHNpZ25JbldpdGhDcmVkZW50aWFsIH0gZnJvbSAnLi9jcmVkZW50aWFsJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXG4gKiBTZW5kcyBhIHNpZ24taW4gZW1haWwgbGluayB0byB0aGUgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgZW1haWwuXG4gKlxuICogQHJlbWFya3NcbiAqIFRoZSBzaWduLWluIG9wZXJhdGlvbiBoYXMgdG8gYWx3YXlzIGJlIGNvbXBsZXRlZCBpbiB0aGUgYXBwIHVubGlrZSBvdGhlciBvdXQgb2YgYmFuZCBlbWFpbFxuICogYWN0aW9ucyAocGFzc3dvcmQgcmVzZXQgYW5kIGVtYWlsIHZlcmlmaWNhdGlvbnMpLiBUaGlzIGlzIGJlY2F1c2UsIGF0IHRoZSBlbmQgb2YgdGhlIGZsb3csXG4gKiB0aGUgdXNlciBpcyBleHBlY3RlZCB0byBiZSBzaWduZWQgaW4gYW5kIHRoZWlyIEF1dGggc3RhdGUgcGVyc2lzdGVkIHdpdGhpbiB0aGUgYXBwLlxuICpcbiAqIFRvIGNvbXBsZXRlIHNpZ24gaW4gd2l0aCB0aGUgZW1haWwgbGluaywgY2FsbCB7QGxpbmsgc2lnbkluV2l0aEVtYWlsTGlua30gd2l0aCB0aGUgZW1haWxcbiAqIGFkZHJlc3MgYW5kIHRoZSBlbWFpbCBsaW5rIHN1cHBsaWVkIGluIHRoZSBlbWFpbCBzZW50IHRvIHRoZSB1c2VyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBhY3Rpb25Db2RlU2V0dGluZ3MgPSB7XG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcbiAqICAgaU9TOiB7XG4gKiAgICAgIGJ1bmRsZUlkOiAnY29tLmV4YW1wbGUuaW9zJ1xuICogICB9LFxuICogICBhbmRyb2lkOiB7XG4gKiAgICAgcGFja2FnZU5hbWU6ICdjb20uZXhhbXBsZS5hbmRyb2lkJyxcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXG4gKiAgIH0sXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxuICogfTtcbiAqIGF3YWl0IHNlbmRTaWduSW5MaW5rVG9FbWFpbChhdXRoLCAndXNlckBleGFtcGxlLmNvbScsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gKiAvLyBPYnRhaW4gZW1haWxMaW5rIGZyb20gdGhlIHVzZXIuXG4gKiBpZihpc1NpZ25JbldpdGhFbWFpbExpbmsoYXV0aCwgZW1haWxMaW5rKSkge1xuICogICBhd2FpdCBzaWduSW5XaXRoRW1haWxMaW5rKCd1c2VyQGV4YW1wbGUuY29tJywgJ3VzZXJAZXhhbXBsZS5jb20nLCBlbWFpbExpbmspO1xuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGF1dGhJbnRlcm5hbCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gZW1haWwgLSBUaGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXG4gKiBAcGFyYW0gYWN0aW9uQ29kZVNldHRpbmdzIC0gVGhlIHtAbGluayBBY3Rpb25Db2RlU2V0dGluZ3N9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRTaWduSW5MaW5rVG9FbWFpbChcbiAgYXV0aDogQXV0aCxcbiAgZW1haWw6IHN0cmluZyxcbiAgYWN0aW9uQ29kZVNldHRpbmdzOiBBY3Rpb25Db2RlU2V0dGluZ3Ncbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBhdXRoTW9kdWxhciA9IGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKTtcbiAgY29uc3QgcmVxdWVzdDogYXBpLkVtYWlsU2lnbkluUmVxdWVzdCA9IHtcbiAgICByZXF1ZXN0VHlwZTogQWN0aW9uQ29kZU9wZXJhdGlvbi5FTUFJTF9TSUdOSU4sXG4gICAgZW1haWxcbiAgfTtcbiAgX2Fzc2VydChcbiAgICBhY3Rpb25Db2RlU2V0dGluZ3MuaGFuZGxlQ29kZUluQXBwLFxuICAgIGF1dGhNb2R1bGFyLFxuICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgKTtcbiAgaWYgKGFjdGlvbkNvZGVTZXR0aW5ncykge1xuICAgIF9zZXRBY3Rpb25Db2RlU2V0dGluZ3NPblJlcXVlc3QoYXV0aE1vZHVsYXIsIHJlcXVlc3QsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gIH1cblxuICBhd2FpdCBhcGkuc2VuZFNpZ25JbkxpbmtUb0VtYWlsKGF1dGhNb2R1bGFyLCByZXF1ZXN0KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gaW5jb21pbmcgbGluayBpcyBhIHNpZ24taW4gd2l0aCBlbWFpbCBsaW5rIHN1aXRhYmxlIGZvciB7QGxpbmsgc2lnbkluV2l0aEVtYWlsTGlua30uXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGVtYWlsTGluayAtIFRoZSBsaW5rIHNlbnQgdG8gdGhlIHVzZXIncyBlbWFpbCBhZGRyZXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2lnbkluV2l0aEVtYWlsTGluayhhdXRoOiBBdXRoLCBlbWFpbExpbms6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBhY3Rpb25Db2RlVXJsID0gQWN0aW9uQ29kZVVSTC5wYXJzZUxpbmsoZW1haWxMaW5rKTtcbiAgcmV0dXJuIGFjdGlvbkNvZGVVcmw/Lm9wZXJhdGlvbiA9PT0gQWN0aW9uQ29kZU9wZXJhdGlvbi5FTUFJTF9TSUdOSU47XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgc2lnbnMgaW4gdXNpbmcgYW4gZW1haWwgYW5kIHNpZ24taW4gZW1haWwgbGluay5cbiAqXG4gKiBAcmVtYXJrc1xuICogSWYgbm8gbGluayBpcyBwYXNzZWQsIHRoZSBsaW5rIGlzIGluZmVycmVkIGZyb20gdGhlIGN1cnJlbnQgVVJMLlxuICpcbiAqIEZhaWxzIHdpdGggYW4gZXJyb3IgaWYgdGhlIGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZCBvciBPVFAgaW4gZW1haWwgbGluayBleHBpcmVzLlxuICpcbiAqIE5vdGU6IENvbmZpcm0gdGhlIGxpbmsgaXMgYSBzaWduLWluIGVtYWlsIGxpbmsgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2QgZmlyZWJhc2UuYXV0aC5BdXRoLmlzU2lnbkluV2l0aEVtYWlsTGluay5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgYWN0aW9uQ29kZVNldHRpbmdzID0ge1xuICogICB1cmw6ICdodHRwczovL3d3dy5leGFtcGxlLmNvbS8/ZW1haWw9dXNlckBleGFtcGxlLmNvbScsXG4gKiAgIGlPUzoge1xuICogICAgICBidW5kbGVJZDogJ2NvbS5leGFtcGxlLmlvcydcbiAqICAgfSxcbiAqICAgYW5kcm9pZDoge1xuICogICAgIHBhY2thZ2VOYW1lOiAnY29tLmV4YW1wbGUuYW5kcm9pZCcsXG4gKiAgICAgaW5zdGFsbEFwcDogdHJ1ZSxcbiAqICAgICBtaW5pbXVtVmVyc2lvbjogJzEyJ1xuICogICB9LFxuICogICBoYW5kbGVDb2RlSW5BcHA6IHRydWVcbiAqIH07XG4gKiBhd2FpdCBzZW5kU2lnbkluTGlua1RvRW1haWwoYXV0aCwgJ3VzZXJAZXhhbXBsZS5jb20nLCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xuICogLy8gT2J0YWluIGVtYWlsTGluayBmcm9tIHRoZSB1c2VyLlxuICogaWYoaXNTaWduSW5XaXRoRW1haWxMaW5rKGF1dGgsIGVtYWlsTGluaykpIHtcbiAqICAgYXdhaXQgc2lnbkluV2l0aEVtYWlsTGluaygndXNlckBleGFtcGxlLmNvbScsICd1c2VyQGV4YW1wbGUuY29tJywgZW1haWxMaW5rKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBlbWFpbCAtIFRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqIEBwYXJhbSBlbWFpbExpbmsgLSBUaGUgbGluayBzZW50IHRvIHRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW5XaXRoRW1haWxMaW5rKFxuICBhdXRoOiBBdXRoLFxuICBlbWFpbDogc3RyaW5nLFxuICBlbWFpbExpbms/OiBzdHJpbmdcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3QgYXV0aE1vZHVsYXIgPSBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCk7XG4gIGNvbnN0IGNyZWRlbnRpYWwgPSBFbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsV2l0aExpbmsoXG4gICAgZW1haWwsXG4gICAgZW1haWxMaW5rIHx8IF9nZXRDdXJyZW50VXJsKClcbiAgKTtcbiAgLy8gQ2hlY2sgaWYgdGhlIHRlbmFudCBJRCBpbiB0aGUgZW1haWwgbGluayBtYXRjaGVzIHRoZSB0ZW5hbnQgSUQgb24gQXV0aFxuICAvLyBpbnN0YW5jZS5cbiAgX2Fzc2VydChcbiAgICBjcmVkZW50aWFsLl90ZW5hbnRJZCA9PT0gKGF1dGhNb2R1bGFyLnRlbmFudElkIHx8IG51bGwpLFxuICAgIGF1dGhNb2R1bGFyLFxuICAgIEF1dGhFcnJvckNvZGUuVEVOQU5UX0lEX01JU01BVENIXG4gICk7XG4gIHJldHVybiBzaWduSW5XaXRoQ3JlZGVudGlhbChhdXRoTW9kdWxhciwgY3JlZGVudGlhbCk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgRW5kcG9pbnQsXG4gIEh0dHBNZXRob2QsXG4gIF9hZGRUaWRJZk5lY2Vzc2FyeSxcbiAgX3BlcmZvcm1BcGlSZXF1ZXN0XG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUF1dGhVcmlSZXF1ZXN0IHtcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xuICBjb250aW51ZVVyaTogc3RyaW5nO1xuICB0ZW5hbnRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVBdXRoVXJpUmVzcG9uc2Uge1xuICBzaWduaW5NZXRob2RzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUF1dGhVcmkoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IENyZWF0ZUF1dGhVcmlSZXF1ZXN0XG4pOiBQcm9taXNlPENyZWF0ZUF1dGhVcmlSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PENyZWF0ZUF1dGhVcmlSZXF1ZXN0LCBDcmVhdGVBdXRoVXJpUmVzcG9uc2U+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LkNSRUFURV9BVVRIX1VSSSxcbiAgICBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdClcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBBY3Rpb25Db2RlT3BlcmF0aW9uLFxuICBBY3Rpb25Db2RlU2V0dGluZ3MsXG4gIEF1dGgsXG4gIFVzZXJcbn0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHtcbiAgY3JlYXRlQXV0aFVyaSxcbiAgQ3JlYXRlQXV0aFVyaVJlcXVlc3Rcbn0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2NyZWF0ZV9hdXRoX3VyaSc7XG5pbXBvcnQgKiBhcyBhcGkgZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2VtYWlsX2FuZF9wYXNzd29yZCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IF9nZXRDdXJyZW50VXJsLCBfaXNIdHRwT3JIdHRwcyB9IGZyb20gJy4uL3V0aWwvbG9jYXRpb24nO1xuaW1wb3J0IHsgX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdCB9IGZyb20gJy4vYWN0aW9uX2NvZGVfc2V0dGluZ3MnO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3Qgb2YgcG9zc2libGUgc2lnbiBpbiBtZXRob2RzIGZvciB0aGUgZ2l2ZW4gZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBpcyB1c2VmdWwgdG8gZGlmZmVyZW50aWF0ZSBtZXRob2RzIG9mIHNpZ24taW4gZm9yIHRoZSBzYW1lIHByb3ZpZGVyLCBlZy5cbiAqIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2hpY2ggaGFzIDIgbWV0aG9kcyBvZiBzaWduLWluLFxuICoge0BsaW5rIFNpZ25Jbk1ldGhvZH0uRU1BSUxfUEFTU1dPUkQgYW5kXG4gKiB7QGxpbmsgU2lnbkluTWV0aG9kfS5FTUFJTF9MSU5LLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBlbWFpbCAtIFRoZSB1c2VyJ3MgZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFNpZ25Jbk1ldGhvZHNGb3JFbWFpbChcbiAgYXV0aDogQXV0aCxcbiAgZW1haWw6IHN0cmluZ1xuKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAvLyBjcmVhdGVBdXRoVXJpIHJldHVybnMgYW4gZXJyb3IgaWYgY29udGludWUgVVJJIGlzIG5vdCBodHRwIG9yIGh0dHBzLlxuICAvLyBGb3IgZW52aXJvbm1lbnRzIGxpa2UgQ29yZG92YSwgQ2hyb21lIGV4dGVuc2lvbnMsIG5hdGl2ZSBmcmFtZXdvcmtzLCBmaWxlXG4gIC8vIHN5c3RlbXMsIGV0YywgdXNlIGh0dHA6Ly9sb2NhbGhvc3QgYXMgY29udGludWUgVVJMLlxuICBjb25zdCBjb250aW51ZVVyaSA9IF9pc0h0dHBPckh0dHBzKCkgPyBfZ2V0Q3VycmVudFVybCgpIDogJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuICBjb25zdCByZXF1ZXN0OiBDcmVhdGVBdXRoVXJpUmVxdWVzdCA9IHtcbiAgICBpZGVudGlmaWVyOiBlbWFpbCxcbiAgICBjb250aW51ZVVyaVxuICB9O1xuXG4gIGNvbnN0IHsgc2lnbmluTWV0aG9kcyB9ID0gYXdhaXQgY3JlYXRlQXV0aFVyaShcbiAgICBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCksXG4gICAgcmVxdWVzdFxuICApO1xuXG4gIHJldHVybiBzaWduaW5NZXRob2RzIHx8IFtdO1xufVxuXG4vKipcbiAqIFNlbmRzIGEgdmVyaWZpY2F0aW9uIGVtYWlsIHRvIGEgdXNlci5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIHZlcmlmaWNhdGlvbiBwcm9jZXNzIGlzIGNvbXBsZXRlZCBieSBjYWxsaW5nIHtAbGluayBhcHBseUFjdGlvbkNvZGV9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBhY3Rpb25Db2RlU2V0dGluZ3MgPSB7XG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcbiAqICAgaU9TOiB7XG4gKiAgICAgIGJ1bmRsZUlkOiAnY29tLmV4YW1wbGUuaW9zJ1xuICogICB9LFxuICogICBhbmRyb2lkOiB7XG4gKiAgICAgcGFja2FnZU5hbWU6ICdjb20uZXhhbXBsZS5hbmRyb2lkJyxcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXG4gKiAgIH0sXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxuICogfTtcbiAqIGF3YWl0IHNlbmRFbWFpbFZlcmlmaWNhdGlvbih1c2VyLCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xuICogLy8gT2J0YWluIGNvZGUgZnJvbSB0aGUgdXNlci5cbiAqIGF3YWl0IGFwcGx5QWN0aW9uQ29kZShhdXRoLCBjb2RlKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gYWN0aW9uQ29kZVNldHRpbmdzIC0gVGhlIHtAbGluayBBY3Rpb25Db2RlU2V0dGluZ3N9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRFbWFpbFZlcmlmaWNhdGlvbihcbiAgdXNlcjogVXNlcixcbiAgYWN0aW9uQ29kZVNldHRpbmdzPzogQWN0aW9uQ29kZVNldHRpbmdzIHwgbnVsbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWw7XG4gIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgY29uc3QgcmVxdWVzdDogYXBpLlZlcmlmeUVtYWlsUmVxdWVzdCA9IHtcbiAgICByZXF1ZXN0VHlwZTogQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfRU1BSUwsXG4gICAgaWRUb2tlblxuICB9O1xuICBpZiAoYWN0aW9uQ29kZVNldHRpbmdzKSB7XG4gICAgX3NldEFjdGlvbkNvZGVTZXR0aW5nc09uUmVxdWVzdChcbiAgICAgIHVzZXJJbnRlcm5hbC5hdXRoLFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGFjdGlvbkNvZGVTZXR0aW5nc1xuICAgICk7XG4gIH1cblxuICBjb25zdCB7IGVtYWlsIH0gPSBhd2FpdCBhcGkuc2VuZEVtYWlsVmVyaWZpY2F0aW9uKHVzZXJJbnRlcm5hbC5hdXRoLCByZXF1ZXN0KTtcblxuICBpZiAoZW1haWwgIT09IHVzZXIuZW1haWwpIHtcbiAgICBhd2FpdCB1c2VyLnJlbG9hZCgpO1xuICB9XG59XG5cbi8qKlxuICogU2VuZHMgYSB2ZXJpZmljYXRpb24gZW1haWwgdG8gYSBuZXcgZW1haWwgYWRkcmVzcy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIHVzZXIncyBlbWFpbCB3aWxsIGJlIHVwZGF0ZWQgdG8gdGhlIG5ldyBvbmUgYWZ0ZXIgYmVpbmcgdmVyaWZpZWQuXG4gKlxuICogSWYgeW91IGhhdmUgYSBjdXN0b20gZW1haWwgYWN0aW9uIGhhbmRsZXIsIHlvdSBjYW4gY29tcGxldGUgdGhlIHZlcmlmaWNhdGlvbiBwcm9jZXNzIGJ5IGNhbGxpbmdcbiAqIHtAbGluayBhcHBseUFjdGlvbkNvZGV9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBhY3Rpb25Db2RlU2V0dGluZ3MgPSB7XG4gKiAgIHVybDogJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tLz9lbWFpbD11c2VyQGV4YW1wbGUuY29tJyxcbiAqICAgaU9TOiB7XG4gKiAgICAgIGJ1bmRsZUlkOiAnY29tLmV4YW1wbGUuaW9zJ1xuICogICB9LFxuICogICBhbmRyb2lkOiB7XG4gKiAgICAgcGFja2FnZU5hbWU6ICdjb20uZXhhbXBsZS5hbmRyb2lkJyxcbiAqICAgICBpbnN0YWxsQXBwOiB0cnVlLFxuICogICAgIG1pbmltdW1WZXJzaW9uOiAnMTInXG4gKiAgIH0sXG4gKiAgIGhhbmRsZUNvZGVJbkFwcDogdHJ1ZVxuICogfTtcbiAqIGF3YWl0IHZlcmlmeUJlZm9yZVVwZGF0ZUVtYWlsKHVzZXIsICduZXdlbWFpbEBleGFtcGxlLmNvbScsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gKiAvLyBPYnRhaW4gY29kZSBmcm9tIHRoZSB1c2VyLlxuICogYXdhaXQgYXBwbHlBY3Rpb25Db2RlKGF1dGgsIGNvZGUpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqIEBwYXJhbSBuZXdFbWFpbCAtIFRoZSBuZXcgZW1haWwgYWRkcmVzcyB0byBiZSB2ZXJpZmllZCBiZWZvcmUgdXBkYXRlLlxuICogQHBhcmFtIGFjdGlvbkNvZGVTZXR0aW5ncyAtIFRoZSB7QGxpbmsgQWN0aW9uQ29kZVNldHRpbmdzfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlCZWZvcmVVcGRhdGVFbWFpbChcbiAgdXNlcjogVXNlcixcbiAgbmV3RW1haWw6IHN0cmluZyxcbiAgYWN0aW9uQ29kZVNldHRpbmdzPzogQWN0aW9uQ29kZVNldHRpbmdzIHwgbnVsbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWw7XG4gIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgY29uc3QgcmVxdWVzdDogYXBpLlZlcmlmeUFuZENoYW5nZUVtYWlsUmVxdWVzdCA9IHtcbiAgICByZXF1ZXN0VHlwZTogQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfQU5EX0NIQU5HRV9FTUFJTCxcbiAgICBpZFRva2VuLFxuICAgIG5ld0VtYWlsXG4gIH07XG4gIGlmIChhY3Rpb25Db2RlU2V0dGluZ3MpIHtcbiAgICBfc2V0QWN0aW9uQ29kZVNldHRpbmdzT25SZXF1ZXN0KFxuICAgICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgICByZXF1ZXN0LFxuICAgICAgYWN0aW9uQ29kZVNldHRpbmdzXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHsgZW1haWwgfSA9IGF3YWl0IGFwaS52ZXJpZnlBbmRDaGFuZ2VFbWFpbCh1c2VySW50ZXJuYWwuYXV0aCwgcmVxdWVzdCk7XG5cbiAgaWYgKGVtYWlsICE9PSB1c2VyLmVtYWlsKSB7XG4gICAgLy8gSWYgdGhlIGxvY2FsIGNvcHkgb2YgdGhlIGVtYWlsIG9uIHVzZXIgaXMgb3V0ZGF0ZWQsIHJlbG9hZCB0aGVcbiAgICAvLyB1c2VyLlxuICAgIGF3YWl0IHVzZXIucmVsb2FkKCk7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBFbmRwb2ludCwgSHR0cE1ldGhvZCwgX3BlcmZvcm1BcGlSZXF1ZXN0IH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlUHJvZmlsZVJlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgcGhvdG9Vcmw/OiBzdHJpbmcgfCBudWxsO1xuICByZXR1cm5TZWN1cmVUb2tlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVQcm9maWxlUmVzcG9uc2UgZXh0ZW5kcyBJZFRva2VuUmVzcG9uc2Uge1xuICBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7XG4gIHBob3RvVXJsPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVByb2ZpbGUoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFVwZGF0ZVByb2ZpbGVSZXF1ZXN0XG4pOiBQcm9taXNlPFVwZGF0ZVByb2ZpbGVSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFVwZGF0ZVByb2ZpbGVSZXF1ZXN0LCBVcGRhdGVQcm9maWxlUmVzcG9uc2U+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5QT1NULFxuICAgIEVuZHBvaW50LlNFVF9BQ0NPVU5UX0lORk8sXG4gICAgcmVxdWVzdFxuICApO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQge1xuICB1cGRhdGVFbWFpbFBhc3N3b3JkIGFzIGFwaVVwZGF0ZUVtYWlsUGFzc3dvcmQsXG4gIFVwZGF0ZUVtYWlsUGFzc3dvcmRSZXF1ZXN0XG59IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvZW1haWxfYW5kX3Bhc3N3b3JkJztcbmltcG9ydCB7IHVwZGF0ZVByb2ZpbGUgYXMgYXBpVXBkYXRlUHJvZmlsZSB9IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvcHJvZmlsZSc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IF9sb2dvdXRJZkludmFsaWRhdGVkIH0gZnJvbSAnLi9pbnZhbGlkYXRpb24nO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgUHJvdmlkZXJJZCB9IGZyb20gJy4uLy4uL21vZGVsL2VudW1zJztcblxuLyoqXG4gKiBVcGRhdGVzIGEgdXNlcidzIHByb2ZpbGUgZGF0YS5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHByb2ZpbGUgLSBUaGUgcHJvZmlsZSdzIGBkaXNwbGF5TmFtZWAgYW5kIGBwaG90b1VSTGAgdG8gdXBkYXRlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVByb2ZpbGUoXG4gIHVzZXI6IFVzZXIsXG4gIHtcbiAgICBkaXNwbGF5TmFtZSxcbiAgICBwaG90b1VSTDogcGhvdG9VcmxcbiAgfTogeyBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7IHBob3RvVVJMPzogc3RyaW5nIHwgbnVsbCB9XG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgJiYgcGhvdG9VcmwgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHVzZXJJbnRlcm5hbCA9IGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWw7XG4gIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VySW50ZXJuYWwuZ2V0SWRUb2tlbigpO1xuICBjb25zdCBwcm9maWxlUmVxdWVzdCA9IHtcbiAgICBpZFRva2VuLFxuICAgIGRpc3BsYXlOYW1lLFxuICAgIHBob3RvVXJsLFxuICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlXG4gIH07XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgdXNlckludGVybmFsLFxuICAgIGFwaVVwZGF0ZVByb2ZpbGUodXNlckludGVybmFsLmF1dGgsIHByb2ZpbGVSZXF1ZXN0KVxuICApO1xuXG4gIHVzZXJJbnRlcm5hbC5kaXNwbGF5TmFtZSA9IHJlc3BvbnNlLmRpc3BsYXlOYW1lIHx8IG51bGw7XG4gIHVzZXJJbnRlcm5hbC5waG90b1VSTCA9IHJlc3BvbnNlLnBob3RvVXJsIHx8IG51bGw7XG5cbiAgLy8gVXBkYXRlIHRoZSBwYXNzd29yZCBwcm92aWRlciBhcyB3ZWxsXG4gIGNvbnN0IHBhc3N3b3JkUHJvdmlkZXIgPSB1c2VySW50ZXJuYWwucHJvdmlkZXJEYXRhLmZpbmQoXG4gICAgKHsgcHJvdmlkZXJJZCB9KSA9PiBwcm92aWRlcklkID09PSBQcm92aWRlcklkLlBBU1NXT1JEXG4gICk7XG4gIGlmIChwYXNzd29yZFByb3ZpZGVyKSB7XG4gICAgcGFzc3dvcmRQcm92aWRlci5kaXNwbGF5TmFtZSA9IHVzZXJJbnRlcm5hbC5kaXNwbGF5TmFtZTtcbiAgICBwYXNzd29yZFByb3ZpZGVyLnBob3RvVVJMID0gdXNlckludGVybmFsLnBob3RvVVJMO1xuICB9XG5cbiAgYXdhaXQgdXNlckludGVybmFsLl91cGRhdGVUb2tlbnNJZk5lY2Vzc2FyeShyZXNwb25zZSk7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgdXNlcidzIGVtYWlsIGFkZHJlc3MuXG4gKlxuICogQHJlbWFya3NcbiAqIEFuIGVtYWlsIHdpbGwgYmUgc2VudCB0byB0aGUgb3JpZ2luYWwgZW1haWwgYWRkcmVzcyAoaWYgaXQgd2FzIHNldCkgdGhhdCBhbGxvd3MgdG8gcmV2b2tlIHRoZVxuICogZW1haWwgYWRkcmVzcyBjaGFuZ2UsIGluIG9yZGVyIHRvIHByb3RlY3QgdGhlbSBmcm9tIGFjY291bnQgaGlqYWNraW5nLlxuICpcbiAqIEltcG9ydGFudDogdGhpcyBpcyBhIHNlY3VyaXR5IHNlbnNpdGl2ZSBvcGVyYXRpb24gdGhhdCByZXF1aXJlcyB0aGUgdXNlciB0byBoYXZlIHJlY2VudGx5IHNpZ25lZFxuICogaW4uIElmIHRoaXMgcmVxdWlyZW1lbnQgaXNuJ3QgbWV0LCBhc2sgdGhlIHVzZXIgdG8gYXV0aGVudGljYXRlIGFnYWluIGFuZCB0aGVuIGNhbGxcbiAqIHtAbGluayByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsfS5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIG5ld0VtYWlsIC0gVGhlIG5ldyBlbWFpbCBhZGRyZXNzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUVtYWlsKHVzZXI6IFVzZXIsIG5ld0VtYWlsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIHVwZGF0ZUVtYWlsT3JQYXNzd29yZChcbiAgICBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsLFxuICAgIG5ld0VtYWlsLFxuICAgIG51bGxcbiAgKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSB1c2VyJ3MgcGFzc3dvcmQuXG4gKlxuICogQHJlbWFya3NcbiAqIEltcG9ydGFudDogdGhpcyBpcyBhIHNlY3VyaXR5IHNlbnNpdGl2ZSBvcGVyYXRpb24gdGhhdCByZXF1aXJlcyB0aGUgdXNlciB0byBoYXZlIHJlY2VudGx5IHNpZ25lZFxuICogaW4uIElmIHRoaXMgcmVxdWlyZW1lbnQgaXNuJ3QgbWV0LCBhc2sgdGhlIHVzZXIgdG8gYXV0aGVudGljYXRlIGFnYWluIGFuZCB0aGVuIGNhbGxcbiAqIHtAbGluayByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsfS5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIG5ld1Bhc3N3b3JkIC0gVGhlIG5ldyBwYXNzd29yZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQYXNzd29yZCh1c2VyOiBVc2VyLCBuZXdQYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiB1cGRhdGVFbWFpbE9yUGFzc3dvcmQoXG4gICAgZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbCxcbiAgICBudWxsLFxuICAgIG5ld1Bhc3N3b3JkXG4gICk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUVtYWlsT3JQYXNzd29yZChcbiAgdXNlcjogVXNlckludGVybmFsLFxuICBlbWFpbDogc3RyaW5nIHwgbnVsbCxcbiAgcGFzc3dvcmQ6IHN0cmluZyB8IG51bGxcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB7IGF1dGggfSA9IHVzZXI7XG4gIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgY29uc3QgcmVxdWVzdDogVXBkYXRlRW1haWxQYXNzd29yZFJlcXVlc3QgPSB7XG4gICAgaWRUb2tlbixcbiAgICByZXR1cm5TZWN1cmVUb2tlbjogdHJ1ZVxuICB9O1xuXG4gIGlmIChlbWFpbCkge1xuICAgIHJlcXVlc3QuZW1haWwgPSBlbWFpbDtcbiAgfVxuXG4gIGlmIChwYXNzd29yZCkge1xuICAgIHJlcXVlc3QucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgdXNlcixcbiAgICBhcGlVcGRhdGVFbWFpbFBhc3N3b3JkKGF1dGgsIHJlcXVlc3QpXG4gICk7XG4gIGF3YWl0IHVzZXIuX3VwZGF0ZVRva2Vuc0lmTmVjZXNzYXJ5KHJlc3BvbnNlLCAvKiByZWxvYWQgKi8gdHJ1ZSk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQWRkaXRpb25hbFVzZXJJbmZvLCBVc2VyQ3JlZGVudGlhbCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBJZFRva2VuUmVzcG9uc2UsIElkVG9rZW5SZXNwb25zZUtpbmQgfSBmcm9tICcuLi8uLi9tb2RlbC9pZF90b2tlbic7XG5pbXBvcnQgeyBfcGFyc2VUb2tlbiB9IGZyb20gJy4vaWRfdG9rZW5fcmVzdWx0JztcbmltcG9ydCB7IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IFByb3ZpZGVySWQgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbi8qKlxuICogUGFyc2UgdGhlIGBBZGRpdGlvbmFsVXNlckluZm9gIGZyb20gdGhlIElEIHRva2VuIHJlc3BvbnNlLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9mcm9tSWRUb2tlblJlc3BvbnNlKFxuICBpZFRva2VuUmVzcG9uc2U/OiBJZFRva2VuUmVzcG9uc2Vcbik6IEFkZGl0aW9uYWxVc2VySW5mbyB8IG51bGwge1xuICBpZiAoIWlkVG9rZW5SZXNwb25zZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHsgcHJvdmlkZXJJZCB9ID0gaWRUb2tlblJlc3BvbnNlO1xuICBjb25zdCBwcm9maWxlID0gaWRUb2tlblJlc3BvbnNlLnJhd1VzZXJJbmZvXG4gICAgPyBKU09OLnBhcnNlKGlkVG9rZW5SZXNwb25zZS5yYXdVc2VySW5mbylcbiAgICA6IHt9O1xuICBjb25zdCBpc05ld1VzZXIgPVxuICAgIGlkVG9rZW5SZXNwb25zZS5pc05ld1VzZXIgfHxcbiAgICBpZFRva2VuUmVzcG9uc2Uua2luZCA9PT0gSWRUb2tlblJlc3BvbnNlS2luZC5TaWdudXBOZXdVc2VyO1xuICBpZiAoIXByb3ZpZGVySWQgJiYgaWRUb2tlblJlc3BvbnNlPy5pZFRva2VuKSB7XG4gICAgY29uc3Qgc2lnbkluUHJvdmlkZXIgPSBfcGFyc2VUb2tlbihpZFRva2VuUmVzcG9uc2UuaWRUb2tlbik/LmZpcmViYXNlPy5bXG4gICAgICAnc2lnbl9pbl9wcm92aWRlcidcbiAgICBdO1xuICAgIGlmIChzaWduSW5Qcm92aWRlcikge1xuICAgICAgY29uc3QgZmlsdGVyZWRQcm92aWRlcklkID1cbiAgICAgICAgc2lnbkluUHJvdmlkZXIgIT09IFByb3ZpZGVySWQuQU5PTllNT1VTICYmXG4gICAgICAgIHNpZ25JblByb3ZpZGVyICE9PSBQcm92aWRlcklkLkNVU1RPTVxuICAgICAgICAgID8gKHNpZ25JblByb3ZpZGVyIGFzIFByb3ZpZGVySWQpXG4gICAgICAgICAgOiBudWxsO1xuICAgICAgLy8gVXNlcyBnZW5lcmljIGNsYXNzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGVnYWN5IFNESy5cbiAgICAgIHJldHVybiBuZXcgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyhpc05ld1VzZXIsIGZpbHRlcmVkUHJvdmlkZXJJZCk7XG4gICAgfVxuICB9XG4gIGlmICghcHJvdmlkZXJJZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHN3aXRjaCAocHJvdmlkZXJJZCkge1xuICAgIGNhc2UgUHJvdmlkZXJJZC5GQUNFQk9PSzpcbiAgICAgIHJldHVybiBuZXcgRmFjZWJvb2tBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlKTtcbiAgICBjYXNlIFByb3ZpZGVySWQuR0lUSFVCOlxuICAgICAgcmV0dXJuIG5ldyBHaXRodWJBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlKTtcbiAgICBjYXNlIFByb3ZpZGVySWQuR09PR0xFOlxuICAgICAgcmV0dXJuIG5ldyBHb29nbGVBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm9maWxlKTtcbiAgICBjYXNlIFByb3ZpZGVySWQuVFdJVFRFUjpcbiAgICAgIHJldHVybiBuZXcgVHdpdHRlckFkZGl0aW9uYWxVc2VySW5mbyhcbiAgICAgICAgaXNOZXdVc2VyLFxuICAgICAgICBwcm9maWxlLFxuICAgICAgICBpZFRva2VuUmVzcG9uc2Uuc2NyZWVuTmFtZSB8fCBudWxsXG4gICAgICApO1xuICAgIGNhc2UgUHJvdmlkZXJJZC5DVVNUT006XG4gICAgY2FzZSBQcm92aWRlcklkLkFOT05ZTU9VUzpcbiAgICAgIHJldHVybiBuZXcgR2VuZXJpY0FkZGl0aW9uYWxVc2VySW5mbyhpc05ld1VzZXIsIG51bGwpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbmV3IEdlbmVyaWNBZGRpdGlvbmFsVXNlckluZm8oaXNOZXdVc2VyLCBwcm92aWRlcklkLCBwcm9maWxlKTtcbiAgfVxufVxuXG5jbGFzcyBHZW5lcmljQWRkaXRpb25hbFVzZXJJbmZvIGltcGxlbWVudHMgQWRkaXRpb25hbFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgaXNOZXdVc2VyOiBib29sZWFuLFxuICAgIHJlYWRvbmx5IHByb3ZpZGVySWQ6IFByb3ZpZGVySWQgfCBzdHJpbmcgfCBudWxsLFxuICAgIHJlYWRvbmx5IHByb2ZpbGU6IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge31cbiAgKSB7fVxufVxuXG5jbGFzcyBGZWRlcmF0ZWRBZGRpdGlvbmFsVXNlckluZm9XaXRoVXNlcm5hbWUgZXh0ZW5kcyBHZW5lcmljQWRkaXRpb25hbFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoXG4gICAgaXNOZXdVc2VyOiBib29sZWFuLFxuICAgIHByb3ZpZGVySWQ6IFByb3ZpZGVySWQsXG4gICAgcHJvZmlsZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgcmVhZG9ubHkgdXNlcm5hbWU6IHN0cmluZyB8IG51bGxcbiAgKSB7XG4gICAgc3VwZXIoaXNOZXdVc2VyLCBwcm92aWRlcklkLCBwcm9maWxlKTtcbiAgfVxufVxuXG5jbGFzcyBGYWNlYm9va0FkZGl0aW9uYWxVc2VySW5mbyBleHRlbmRzIEdlbmVyaWNBZGRpdGlvbmFsVXNlckluZm8ge1xuICBjb25zdHJ1Y3Rvcihpc05ld1VzZXI6IGJvb2xlYW4sIHByb2ZpbGU6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB7XG4gICAgc3VwZXIoaXNOZXdVc2VyLCBQcm92aWRlcklkLkZBQ0VCT09LLCBwcm9maWxlKTtcbiAgfVxufVxuXG5jbGFzcyBHaXRodWJBZGRpdGlvbmFsVXNlckluZm8gZXh0ZW5kcyBGZWRlcmF0ZWRBZGRpdGlvbmFsVXNlckluZm9XaXRoVXNlcm5hbWUge1xuICBjb25zdHJ1Y3Rvcihpc05ld1VzZXI6IGJvb2xlYW4sIHByb2ZpbGU6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSB7XG4gICAgc3VwZXIoXG4gICAgICBpc05ld1VzZXIsXG4gICAgICBQcm92aWRlcklkLkdJVEhVQixcbiAgICAgIHByb2ZpbGUsXG4gICAgICB0eXBlb2YgcHJvZmlsZT8ubG9naW4gPT09ICdzdHJpbmcnID8gcHJvZmlsZT8ubG9naW4gOiBudWxsXG4gICAgKTtcbiAgfVxufVxuXG5jbGFzcyBHb29nbGVBZGRpdGlvbmFsVXNlckluZm8gZXh0ZW5kcyBHZW5lcmljQWRkaXRpb25hbFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoaXNOZXdVc2VyOiBib29sZWFuLCBwcm9maWxlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikge1xuICAgIHN1cGVyKGlzTmV3VXNlciwgUHJvdmlkZXJJZC5HT09HTEUsIHByb2ZpbGUpO1xuICB9XG59XG5cbmNsYXNzIFR3aXR0ZXJBZGRpdGlvbmFsVXNlckluZm8gZXh0ZW5kcyBGZWRlcmF0ZWRBZGRpdGlvbmFsVXNlckluZm9XaXRoVXNlcm5hbWUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBpc05ld1VzZXI6IGJvb2xlYW4sXG4gICAgcHJvZmlsZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgc2NyZWVuTmFtZTogc3RyaW5nIHwgbnVsbFxuICApIHtcbiAgICBzdXBlcihpc05ld1VzZXIsIFByb3ZpZGVySWQuVFdJVFRFUiwgcHJvZmlsZSwgc2NyZWVuTmFtZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRyYWN0cyBwcm92aWRlciBzcGVjaWZpYyB7QGxpbmsgQWRkaXRpb25hbFVzZXJJbmZvfSBmb3IgdGhlIGdpdmVuIGNyZWRlbnRpYWwuXG4gKlxuICogQHBhcmFtIHVzZXJDcmVkZW50aWFsIC0gVGhlIHVzZXIgY3JlZGVudGlhbC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGRpdGlvbmFsVXNlckluZm8oXG4gIHVzZXJDcmVkZW50aWFsOiBVc2VyQ3JlZGVudGlhbFxuKTogQWRkaXRpb25hbFVzZXJJbmZvIHwgbnVsbCB7XG4gIGNvbnN0IHsgdXNlciwgX3Rva2VuUmVzcG9uc2UgfSA9IHVzZXJDcmVkZW50aWFsIGFzIFVzZXJDcmVkZW50aWFsSW50ZXJuYWw7XG4gIGlmICh1c2VyLmlzQW5vbnltb3VzICYmICFfdG9rZW5SZXNwb25zZSkge1xuICAgIC8vIEhhbmRsZSB0aGUgc3BlY2lhbCBjYXNlIHdoZXJlIHNpZ25JbkFub255bW91c2x5KCkgZ2V0cyBjYWxsZWQgdHdpY2UuXG4gICAgLy8gTm8gbmV0d29yayBjYWxsIGlzIG1hZGUgc28gdGhlcmUncyBub3RoaW5nIHRvIGFjdHVhbGx5IGZpbGwgdGhpcyBpblxuICAgIHJldHVybiB7XG4gICAgICBwcm92aWRlcklkOiBudWxsLFxuICAgICAgaXNOZXdVc2VyOiBmYWxzZSxcbiAgICAgIHByb2ZpbGU6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9mcm9tSWRUb2tlblJlc3BvbnNlKF90b2tlblJlc3BvbnNlKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQge1xuICBBdXRoLFxuICBOZXh0T3JPYnNlcnZlcixcbiAgUGVyc2lzdGVuY2UsXG4gIFVzZXIsXG4gIENvbXBsZXRlRm4sXG4gIEVycm9yRm4sXG4gIFVuc3Vic2NyaWJlXG59IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCB7XG4gIGRlYnVnRXJyb3JNYXAsXG4gIHByb2RFcnJvck1hcCxcbiAgQVVUSF9FUlJPUl9DT0RFU19NQVBfRE9fTk9UX1VTRV9JTlRFUk5BTExZIGFzIEF1dGhFcnJvckNvZGVzXG59IGZyb20gJy4vZXJyb3JzJztcblxuLy8gTm9uLW9wdGlvbmFsIGF1dGggbWV0aG9kcy5cbi8qKlxuICogQ2hhbmdlcyB0aGUgdHlwZSBvZiBwZXJzaXN0ZW5jZSBvbiB0aGUge0BsaW5rIEF1dGh9IGluc3RhbmNlIGZvciB0aGUgY3VycmVudGx5IHNhdmVkXG4gKiBgQXV0aGAgc2Vzc2lvbiBhbmQgYXBwbGllcyB0aGlzIHR5cGUgb2YgcGVyc2lzdGVuY2UgZm9yIGZ1dHVyZSBzaWduLWluIHJlcXVlc3RzLCBpbmNsdWRpbmdcbiAqIHNpZ24taW4gd2l0aCByZWRpcmVjdCByZXF1ZXN0cy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBtYWtlcyBpdCBlYXN5IGZvciBhIHVzZXIgc2lnbmluZyBpbiB0byBzcGVjaWZ5IHdoZXRoZXIgdGhlaXIgc2Vzc2lvbiBzaG91bGQgYmVcbiAqIHJlbWVtYmVyZWQgb3Igbm90LiBJdCBhbHNvIG1ha2VzIGl0IGVhc2llciB0byBuZXZlciBwZXJzaXN0IHRoZSBgQXV0aGAgc3RhdGUgZm9yIGFwcGxpY2F0aW9uc1xuICogdGhhdCBhcmUgc2hhcmVkIGJ5IG90aGVyIHVzZXJzIG9yIGhhdmUgc2Vuc2l0aXZlIGRhdGEuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHNldFBlcnNpc3RlbmNlKGF1dGgsIGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIHBlcnNpc3RlbmNlIC0gVGhlIHtAbGluayBQZXJzaXN0ZW5jZX0gdG8gdXNlLlxuICogQHJldHVybnMgQSBgUHJvbWlzZWAgdGhhdCByZXNvbHZlcyBvbmNlIHRoZSBwZXJzaXN0ZW5jZSBjaGFuZ2UgaGFzIGNvbXBsZXRlZFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFBlcnNpc3RlbmNlKFxuICBhdXRoOiBBdXRoLFxuICBwZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2Vcbik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLnNldFBlcnNpc3RlbmNlKHBlcnNpc3RlbmNlKTtcbn1cbi8qKlxuICogQWRkcyBhbiBvYnNlcnZlciBmb3IgY2hhbmdlcyB0byB0aGUgc2lnbmVkLWluIHVzZXIncyBJRCB0b2tlbiwgd2hpY2ggaW5jbHVkZXMgc2lnbi1pbixcbiAqIHNpZ24tb3V0LCBhbmQgdG9rZW4gcmVmcmVzaCBldmVudHMuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIG5leHRPck9ic2VydmVyIC0gY2FsbGJhY2sgdHJpZ2dlcmVkIG9uIGNoYW5nZS5cbiAqIEBwYXJhbSBlcnJvciAtIGNhbGxiYWNrIHRyaWdnZXJlZCBvbiBlcnJvci5cbiAqIEBwYXJhbSBjb21wbGV0ZWQgLSBjYWxsYmFjayB0cmlnZ2VyZWQgd2hlbiBvYnNlcnZlciBpcyByZW1vdmVkLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uSWRUb2tlbkNoYW5nZWQoXG4gIGF1dGg6IEF1dGgsXG4gIG5leHRPck9ic2VydmVyOiBOZXh0T3JPYnNlcnZlcjxVc2VyPixcbiAgZXJyb3I/OiBFcnJvckZuLFxuICBjb21wbGV0ZWQ/OiBDb21wbGV0ZUZuXG4pOiBVbnN1YnNjcmliZSB7XG4gIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCkub25JZFRva2VuQ2hhbmdlZChcbiAgICBuZXh0T3JPYnNlcnZlcixcbiAgICBlcnJvcixcbiAgICBjb21wbGV0ZWRcbiAgKTtcbn1cbi8qKlxuICogQWRkcyBhbiBvYnNlcnZlciBmb3IgY2hhbmdlcyB0byB0aGUgdXNlcidzIHNpZ24taW4gc3RhdGUuXG4gKlxuICogQHJlbWFya3NcbiAqIFRvIGtlZXAgdGhlIG9sZCBiZWhhdmlvciwgc2VlIHtAbGluayBvbklkVG9rZW5DaGFuZ2VkfS5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gbmV4dE9yT2JzZXJ2ZXIgLSBjYWxsYmFjayB0cmlnZ2VyZWQgb24gY2hhbmdlLlxuICogQHBhcmFtIGVycm9yIC0gY2FsbGJhY2sgdHJpZ2dlcmVkIG9uIGVycm9yLlxuICogQHBhcmFtIGNvbXBsZXRlZCAtIGNhbGxiYWNrIHRyaWdnZXJlZCB3aGVuIG9ic2VydmVyIGlzIHJlbW92ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gb25BdXRoU3RhdGVDaGFuZ2VkKFxuICBhdXRoOiBBdXRoLFxuICBuZXh0T3JPYnNlcnZlcjogTmV4dE9yT2JzZXJ2ZXI8VXNlcj4sXG4gIGVycm9yPzogRXJyb3JGbixcbiAgY29tcGxldGVkPzogQ29tcGxldGVGblxuKTogVW5zdWJzY3JpYmUge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKGF1dGgpLm9uQXV0aFN0YXRlQ2hhbmdlZChcbiAgICBuZXh0T3JPYnNlcnZlcixcbiAgICBlcnJvcixcbiAgICBjb21wbGV0ZWRcbiAgKTtcbn1cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCBsYW5ndWFnZSB0byB0aGUgZGVmYXVsdCBkZXZpY2UvYnJvd3NlciBwcmVmZXJlbmNlLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZXZpY2VMYW5ndWFnZShhdXRoOiBBdXRoKTogdm9pZCB7XG4gIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKS51c2VEZXZpY2VMYW5ndWFnZSgpO1xufVxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzZXRzIHRoZSBwcm92aWRlZCB1c2VyIGFzIHtAbGluayBBdXRoLmN1cnJlbnRVc2VyfSBvbiB0aGVcbiAqIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogQSBuZXcgaW5zdGFuY2UgY29weSBvZiB0aGUgdXNlciBwcm92aWRlZCB3aWxsIGJlIG1hZGUgYW5kIHNldCBhcyBjdXJyZW50VXNlci5cbiAqXG4gKiBUaGlzIHdpbGwgdHJpZ2dlciB7QGxpbmsgb25BdXRoU3RhdGVDaGFuZ2VkfSBhbmQge0BsaW5rIG9uSWRUb2tlbkNoYW5nZWR9IGxpc3RlbmVyc1xuICogbGlrZSBvdGhlciBzaWduIGluIG1ldGhvZHMuXG4gKlxuICogVGhlIG9wZXJhdGlvbiBmYWlscyB3aXRoIGFuIGVycm9yIGlmIHRoZSB1c2VyIHRvIGJlIHVwZGF0ZWQgYmVsb25ncyB0byBhIGRpZmZlcmVudCBGaXJlYmFzZVxuICogcHJvamVjdC5cbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gdXNlciAtIFRoZSBuZXcge0BsaW5rIFVzZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbnRVc2VyKFxuICBhdXRoOiBBdXRoLFxuICB1c2VyOiBVc2VyIHwgbnVsbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCkudXBkYXRlQ3VycmVudFVzZXIodXNlcik7XG59XG4vKipcbiAqIFNpZ25zIG91dCB0aGUgY3VycmVudCB1c2VyLlxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduT3V0KGF1dGg6IEF1dGgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIGdldE1vZHVsYXJJbnN0YW5jZShhdXRoKS5zaWduT3V0KCk7XG59XG5cbmV4cG9ydCB7IGluaXRpYWxpemVBdXRoIH0gZnJvbSAnLi9hdXRoL2luaXRpYWxpemUnO1xuZXhwb3J0IHsgY29ubmVjdEF1dGhFbXVsYXRvciB9IGZyb20gJy4vYXV0aC9lbXVsYXRvcic7XG5cbi8vIGNyZWRlbnRpYWxzXG5leHBvcnQgeyBBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbHMnO1xuZXhwb3J0IHsgRW1haWxBdXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbHMvZW1haWwnO1xuZXhwb3J0IHsgT0F1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9jcmVkZW50aWFscy9vYXV0aCc7XG5leHBvcnQgeyBQaG9uZUF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi9jcmVkZW50aWFscy9waG9uZSc7XG5cbi8vIHBlcnNpc3RlbmNlXG5leHBvcnQgeyBpbk1lbW9yeVBlcnNpc3RlbmNlIH0gZnJvbSAnLi9wZXJzaXN0ZW5jZS9pbl9tZW1vcnknO1xuXG4vLyBwcm92aWRlcnNcbmV4cG9ydCB7IEVtYWlsQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvZW1haWwnO1xuZXhwb3J0IHsgRmFjZWJvb2tBdXRoUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9mYWNlYm9vayc7XG5leHBvcnQgeyBDdXN0b21QYXJhbWV0ZXJzIH0gZnJvbSAnLi9wcm92aWRlcnMvZmVkZXJhdGVkJztcbmV4cG9ydCB7IEdvb2dsZUF1dGhQcm92aWRlciB9IGZyb20gJy4vcHJvdmlkZXJzL2dvb2dsZSc7XG5leHBvcnQgeyBHaXRodWJBdXRoUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9naXRodWInO1xuZXhwb3J0IHsgT0F1dGhQcm92aWRlciwgT0F1dGhDcmVkZW50aWFsT3B0aW9ucyB9IGZyb20gJy4vcHJvdmlkZXJzL29hdXRoJztcbmV4cG9ydCB7IFNBTUxBdXRoUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy9zYW1sJztcbmV4cG9ydCB7IFR3aXR0ZXJBdXRoUHJvdmlkZXIgfSBmcm9tICcuL3Byb3ZpZGVycy90d2l0dGVyJztcblxuLy8gc3RyYXRlZ2llc1xuZXhwb3J0IHsgc2lnbkluQW5vbnltb3VzbHkgfSBmcm9tICcuL3N0cmF0ZWdpZXMvYW5vbnltb3VzJztcbmV4cG9ydCB7XG4gIHNpZ25JbldpdGhDcmVkZW50aWFsLFxuICBsaW5rV2l0aENyZWRlbnRpYWwsXG4gIHJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWxcbn0gZnJvbSAnLi9zdHJhdGVnaWVzL2NyZWRlbnRpYWwnO1xuZXhwb3J0IHsgc2lnbkluV2l0aEN1c3RvbVRva2VuIH0gZnJvbSAnLi9zdHJhdGVnaWVzL2N1c3RvbV90b2tlbic7XG5leHBvcnQge1xuICBzZW5kUGFzc3dvcmRSZXNldEVtYWlsLFxuICBjb25maXJtUGFzc3dvcmRSZXNldCxcbiAgYXBwbHlBY3Rpb25Db2RlLFxuICBjaGVja0FjdGlvbkNvZGUsXG4gIHZlcmlmeVBhc3N3b3JkUmVzZXRDb2RlLFxuICBjcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQsXG4gIHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkXG59IGZyb20gJy4vc3RyYXRlZ2llcy9lbWFpbF9hbmRfcGFzc3dvcmQnO1xuZXhwb3J0IHtcbiAgc2VuZFNpZ25JbkxpbmtUb0VtYWlsLFxuICBpc1NpZ25JbldpdGhFbWFpbExpbmssXG4gIHNpZ25JbldpdGhFbWFpbExpbmtcbn0gZnJvbSAnLi9zdHJhdGVnaWVzL2VtYWlsX2xpbmsnO1xuZXhwb3J0IHtcbiAgZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwsXG4gIHNlbmRFbWFpbFZlcmlmaWNhdGlvbixcbiAgdmVyaWZ5QmVmb3JlVXBkYXRlRW1haWxcbn0gZnJvbSAnLi9zdHJhdGVnaWVzL2VtYWlsJztcblxuLy8gY29yZVxuZXhwb3J0IHsgQWN0aW9uQ29kZVVSTCwgcGFyc2VBY3Rpb25Db2RlVVJMIH0gZnJvbSAnLi9hY3Rpb25fY29kZV91cmwnO1xuXG4vLyB1c2VyXG5leHBvcnQge1xuICB1cGRhdGVQcm9maWxlLFxuICB1cGRhdGVFbWFpbCxcbiAgdXBkYXRlUGFzc3dvcmRcbn0gZnJvbSAnLi91c2VyL2FjY291bnRfaW5mbyc7XG5leHBvcnQgeyBnZXRJZFRva2VuLCBnZXRJZFRva2VuUmVzdWx0IH0gZnJvbSAnLi91c2VyL2lkX3Rva2VuX3Jlc3VsdCc7XG5leHBvcnQgeyB1bmxpbmsgfSBmcm9tICcuL3VzZXIvbGlua191bmxpbmsnO1xuZXhwb3J0IHsgZ2V0QWRkaXRpb25hbFVzZXJJbmZvIH0gZnJvbSAnLi91c2VyL2FkZGl0aW9uYWxfdXNlcl9pbmZvJztcblxuLy8gTm9uLW9wdGlvbmFsIHVzZXIgbWV0aG9kcy5cbmV4cG9ydCB7IHJlbG9hZCB9IGZyb20gJy4vdXNlci9yZWxvYWQnO1xuLyoqXG4gKiBEZWxldGVzIGFuZCBzaWducyBvdXQgdGhlIHVzZXIuXG4gKlxuICogQHJlbWFya3NcbiAqIEltcG9ydGFudDogdGhpcyBpcyBhIHNlY3VyaXR5LXNlbnNpdGl2ZSBvcGVyYXRpb24gdGhhdCByZXF1aXJlcyB0aGUgdXNlciB0byBoYXZlIHJlY2VudGx5XG4gKiBzaWduZWQgaW4uIElmIHRoaXMgcmVxdWlyZW1lbnQgaXNuJ3QgbWV0LCBhc2sgdGhlIHVzZXIgdG8gYXV0aGVudGljYXRlIGFnYWluIGFuZCB0aGVuIGNhbGxcbiAqIHtAbGluayByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsfS5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVVzZXIodXNlcjogVXNlcik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpLmRlbGV0ZSgpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBNdWx0aUZhY3RvclNlc3Npb24gfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZW51bSBNdWx0aUZhY3RvclNlc3Npb25UeXBlIHtcbiAgRU5ST0xMID0gJ2Vucm9sbCcsXG4gIFNJR05fSU4gPSAnc2lnbmluJ1xufVxuXG5pbnRlcmZhY2UgU2VyaWFsaXplZE11bHRpRmFjdG9yU2Vzc2lvbiB7XG4gIG11bHRpRmFjdG9yU2Vzc2lvbjoge1xuICAgIGlkVG9rZW4/OiBzdHJpbmc7XG4gICAgcGVuZGluZ0NyZWRlbnRpYWw/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0aUZhY3RvclNlc3Npb25JbXBsIGltcGxlbWVudHMgTXVsdGlGYWN0b3JTZXNzaW9uIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSB0eXBlOiBNdWx0aUZhY3RvclNlc3Npb25UeXBlLFxuICAgIHJlYWRvbmx5IGNyZWRlbnRpYWw6IHN0cmluZ1xuICApIHt9XG5cbiAgc3RhdGljIF9mcm9tSWR0b2tlbihpZFRva2VuOiBzdHJpbmcpOiBNdWx0aUZhY3RvclNlc3Npb25JbXBsIHtcbiAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwoTXVsdGlGYWN0b3JTZXNzaW9uVHlwZS5FTlJPTEwsIGlkVG9rZW4pO1xuICB9XG5cbiAgc3RhdGljIF9mcm9tTWZhUGVuZGluZ0NyZWRlbnRpYWwoXG4gICAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHN0cmluZ1xuICApOiBNdWx0aUZhY3RvclNlc3Npb25JbXBsIHtcbiAgICByZXR1cm4gbmV3IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwoXG4gICAgICBNdWx0aUZhY3RvclNlc3Npb25UeXBlLlNJR05fSU4sXG4gICAgICBtZmFQZW5kaW5nQ3JlZGVudGlhbFxuICAgICk7XG4gIH1cblxuICB0b0pTT04oKTogU2VyaWFsaXplZE11bHRpRmFjdG9yU2Vzc2lvbiB7XG4gICAgY29uc3Qga2V5ID1cbiAgICAgIHRoaXMudHlwZSA9PT0gTXVsdGlGYWN0b3JTZXNzaW9uVHlwZS5FTlJPTExcbiAgICAgICAgPyAnaWRUb2tlbidcbiAgICAgICAgOiAncGVuZGluZ0NyZWRlbnRpYWwnO1xuICAgIHJldHVybiB7XG4gICAgICBtdWx0aUZhY3RvclNlc3Npb246IHtcbiAgICAgICAgW2tleV06IHRoaXMuY3JlZGVudGlhbFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZnJvbUpTT04oXG4gICAgb2JqOiBQYXJ0aWFsPFNlcmlhbGl6ZWRNdWx0aUZhY3RvclNlc3Npb24+XG4gICk6IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwgfCBudWxsIHtcbiAgICBpZiAob2JqPy5tdWx0aUZhY3RvclNlc3Npb24pIHtcbiAgICAgIGlmIChvYmoubXVsdGlGYWN0b3JTZXNzaW9uPy5wZW5kaW5nQ3JlZGVudGlhbCkge1xuICAgICAgICByZXR1cm4gTXVsdGlGYWN0b3JTZXNzaW9uSW1wbC5fZnJvbU1mYVBlbmRpbmdDcmVkZW50aWFsKFxuICAgICAgICAgIG9iai5tdWx0aUZhY3RvclNlc3Npb24ucGVuZGluZ0NyZWRlbnRpYWxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqLm11bHRpRmFjdG9yU2Vzc2lvbj8uaWRUb2tlbikge1xuICAgICAgICByZXR1cm4gTXVsdGlGYWN0b3JTZXNzaW9uSW1wbC5fZnJvbUlkdG9rZW4oXG4gICAgICAgICAgb2JqLm11bHRpRmFjdG9yU2Vzc2lvbi5pZFRva2VuXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgQXV0aCxcbiAgTXVsdGlGYWN0b3JSZXNvbHZlcixcbiAgVXNlckNyZWRlbnRpYWwsXG4gIE11bHRpRmFjdG9yRXJyb3Jcbn0gZnJvbSAnLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi4vY29yZS9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbXBsIH0gZnJvbSAnLi4vY29yZS91c2VyL3VzZXJfY3JlZGVudGlhbF9pbXBsJztcbmltcG9ydCB7IF9hc3NlcnQsIF9mYWlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBNdWx0aUZhY3RvckFzc2VydGlvbkltcGwgfSBmcm9tICcuL21mYV9hc3NlcnRpb24nO1xuaW1wb3J0IHsgTXVsdGlGYWN0b3JFcnJvciBhcyBNdWx0aUZhY3RvckVycm9ySW50ZXJuYWwgfSBmcm9tICcuL21mYV9lcnJvcic7XG5pbXBvcnQgeyBNdWx0aUZhY3RvckluZm9JbXBsIH0gZnJvbSAnLi9tZmFfaW5mbyc7XG5pbXBvcnQgeyBNdWx0aUZhY3RvclNlc3Npb25JbXBsIH0gZnJvbSAnLi9tZmFfc2Vzc2lvbic7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBPcGVyYXRpb25UeXBlIH0gZnJvbSAnLi4vbW9kZWwvZW51bXMnO1xuXG5leHBvcnQgY2xhc3MgTXVsdGlGYWN0b3JSZXNvbHZlckltcGwgaW1wbGVtZW50cyBNdWx0aUZhY3RvclJlc29sdmVyIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBzZXNzaW9uOiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLFxuICAgIHJlYWRvbmx5IGhpbnRzOiBNdWx0aUZhY3RvckluZm9JbXBsW10sXG4gICAgcHJpdmF0ZSByZWFkb25seSBzaWduSW5SZXNvbHZlcjogKFxuICAgICAgYXNzZXJ0aW9uOiBNdWx0aUZhY3RvckFzc2VydGlvbkltcGxcbiAgICApID0+IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbD5cbiAgKSB7fVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RhdGljIF9mcm9tRXJyb3IoXG4gICAgYXV0aEV4dGVybjogQXV0aCxcbiAgICBlcnJvcjogTXVsdGlGYWN0b3JFcnJvckludGVybmFsXG4gICk6IE11bHRpRmFjdG9yUmVzb2x2ZXJJbXBsIHtcbiAgICBjb25zdCBhdXRoID0gX2Nhc3RBdXRoKGF1dGhFeHRlcm4pO1xuICAgIGNvbnN0IHNlcnZlclJlc3BvbnNlID0gZXJyb3IuY3VzdG9tRGF0YS5fc2VydmVyUmVzcG9uc2U7XG4gICAgY29uc3QgaGludHMgPSAoc2VydmVyUmVzcG9uc2UubWZhSW5mbyB8fCBbXSkubWFwKGVucm9sbG1lbnQgPT5cbiAgICAgIE11bHRpRmFjdG9ySW5mb0ltcGwuX2Zyb21TZXJ2ZXJSZXNwb25zZShhdXRoLCBlbnJvbGxtZW50KVxuICAgICk7XG5cbiAgICBfYXNzZXJ0KFxuICAgICAgc2VydmVyUmVzcG9uc2UubWZhUGVuZGluZ0NyZWRlbnRpYWwsXG4gICAgICBhdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwuX2Zyb21NZmFQZW5kaW5nQ3JlZGVudGlhbChcbiAgICAgIHNlcnZlclJlc3BvbnNlLm1mYVBlbmRpbmdDcmVkZW50aWFsXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgTXVsdGlGYWN0b3JSZXNvbHZlckltcGwoXG4gICAgICBzZXNzaW9uLFxuICAgICAgaGludHMsXG4gICAgICBhc3luYyAoXG4gICAgICAgIGFzc2VydGlvbjogTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsXG4gICAgICApOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+ID0+IHtcbiAgICAgICAgY29uc3QgbWZhUmVzcG9uc2UgPSBhd2FpdCBhc3NlcnRpb24uX3Byb2Nlc3MoYXV0aCwgc2Vzc2lvbik7XG4gICAgICAgIC8vIENsZWFyIG91dCB0aGUgdW5uZWVkZWQgZmllbGRzIGZyb20gdGhlIG9sZCBsb2dpbiByZXNwb25zZVxuICAgICAgICBkZWxldGUgc2VydmVyUmVzcG9uc2UubWZhSW5mbztcbiAgICAgICAgZGVsZXRlIHNlcnZlclJlc3BvbnNlLm1mYVBlbmRpbmdDcmVkZW50aWFsO1xuXG4gICAgICAgIC8vIFVzZSBpbiB0aGUgbmV3IHRva2VuICYgcmVmcmVzaCB0b2tlbiBpbiB0aGUgb2xkIHJlc3BvbnNlXG4gICAgICAgIGNvbnN0IGlkVG9rZW5SZXNwb25zZSA9IHtcbiAgICAgICAgICAuLi5zZXJ2ZXJSZXNwb25zZSxcbiAgICAgICAgICBpZFRva2VuOiBtZmFSZXNwb25zZS5pZFRva2VuLFxuICAgICAgICAgIHJlZnJlc2hUb2tlbjogbWZhUmVzcG9uc2UucmVmcmVzaFRva2VuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVE9ETzogd2Ugc2hvdWxkIGNvbGxhcHNlIHRoaXMgc3dpdGNoIHN0YXRlbWVudCBpbnRvIFVzZXJDcmVkZW50aWFsSW1wbC5fZm9yT3BlcmF0aW9uIGFuZCBoYXZlIGl0IHN1cHBvcnQgdGhlIFNJR05fSU4gY2FzZVxuICAgICAgICBzd2l0Y2ggKGVycm9yLm9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgICBjYXNlIE9wZXJhdGlvblR5cGUuU0lHTl9JTjpcbiAgICAgICAgICAgIGNvbnN0IHVzZXJDcmVkZW50aWFsID1cbiAgICAgICAgICAgICAgYXdhaXQgVXNlckNyZWRlbnRpYWxJbXBsLl9mcm9tSWRUb2tlblJlc3BvbnNlKFxuICAgICAgICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgICAgICAgZXJyb3Iub3BlcmF0aW9uVHlwZSxcbiAgICAgICAgICAgICAgICBpZFRva2VuUmVzcG9uc2VcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGF3YWl0IGF1dGguX3VwZGF0ZUN1cnJlbnRVc2VyKHVzZXJDcmVkZW50aWFsLnVzZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHVzZXJDcmVkZW50aWFsO1xuICAgICAgICAgIGNhc2UgT3BlcmF0aW9uVHlwZS5SRUFVVEhFTlRJQ0FURTpcbiAgICAgICAgICAgIF9hc3NlcnQoZXJyb3IudXNlciwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgICAgICAgICByZXR1cm4gVXNlckNyZWRlbnRpYWxJbXBsLl9mb3JPcGVyYXRpb24oXG4gICAgICAgICAgICAgIGVycm9yLnVzZXIsXG4gICAgICAgICAgICAgIGVycm9yLm9wZXJhdGlvblR5cGUsXG4gICAgICAgICAgICAgIGlkVG9rZW5SZXNwb25zZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgX2ZhaWwoYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZVNpZ25JbihcbiAgICBhc3NlcnRpb25FeHRlcm46IE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbFxuICApOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsPiB7XG4gICAgY29uc3QgYXNzZXJ0aW9uID0gYXNzZXJ0aW9uRXh0ZXJuIGFzIE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbDtcbiAgICByZXR1cm4gdGhpcy5zaWduSW5SZXNvbHZlcihhc3NlcnRpb24pO1xuICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXMgYSB7QGxpbmsgTXVsdGlGYWN0b3JSZXNvbHZlcn0gc3VpdGFibGUgZm9yIGNvbXBsZXRpb24gb2YgYVxuICogbXVsdGktZmFjdG9yIGZsb3cuXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIGVycm9yIC0gVGhlIHtAbGluayBNdWx0aUZhY3RvckVycm9yfSByYWlzZWQgZHVyaW5nIGEgc2lnbi1pbiwgb3JcbiAqIHJlYXV0aGVudGljYXRpb24gb3BlcmF0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE11bHRpRmFjdG9yUmVzb2x2ZXIoXG4gIGF1dGg6IEF1dGgsXG4gIGVycm9yOiBNdWx0aUZhY3RvckVycm9yXG4pOiBNdWx0aUZhY3RvclJlc29sdmVyIHtcbiAgY29uc3QgYXV0aE1vZHVsYXIgPSBnZXRNb2R1bGFySW5zdGFuY2UoYXV0aCk7XG4gIGNvbnN0IGVycm9ySW50ZXJuYWwgPSBlcnJvciBhcyBNdWx0aUZhY3RvckVycm9ySW50ZXJuYWw7XG4gIF9hc3NlcnQoZXJyb3IuY3VzdG9tRGF0YS5vcGVyYXRpb25UeXBlLCBhdXRoTW9kdWxhciwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUik7XG4gIF9hc3NlcnQoXG4gICAgZXJyb3JJbnRlcm5hbC5jdXN0b21EYXRhLl9zZXJ2ZXJSZXNwb25zZT8ubWZhUGVuZGluZ0NyZWRlbnRpYWwsXG4gICAgYXV0aE1vZHVsYXIsXG4gICAgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICApO1xuXG4gIHJldHVybiBNdWx0aUZhY3RvclJlc29sdmVySW1wbC5fZnJvbUVycm9yKGF1dGhNb2R1bGFyLCBlcnJvckludGVybmFsKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBFbmRwb2ludCwgSHR0cE1ldGhvZCwgX2FkZFRpZElmTmVjZXNzYXJ5LCBfcGVyZm9ybUFwaVJlcXVlc3QgfSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXF1ZXN0IH0gZnJvbSAnLi4vYXV0aGVudGljYXRpb24vc21zJztcbmltcG9ydCB7IEZpbmFsaXplTWZhUmVzcG9uc2UgfSBmcm9tICcuLi9hdXRoZW50aWNhdGlvbi9tZmEnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5cbi8qKlxuICogTUZBIEluZm8gYXMgcmV0dXJuZWQgYnkgdGhlIEFQSVxuICovXG5pbnRlcmZhY2UgQmFzZU1mYUVucm9sbG1lbnQge1xuICBtZmFFbnJvbGxtZW50SWQ6IHN0cmluZztcbiAgZW5yb2xsZWRBdDogbnVtYmVyO1xuICBkaXNwbGF5TmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBNRkEgcHJvdmlkZWQgYnkgU01TIHZlcmlmaWNhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBob25lTWZhRW5yb2xsbWVudCBleHRlbmRzIEJhc2VNZmFFbnJvbGxtZW50IHtcbiAgcGhvbmVJbmZvOiBzdHJpbmc7XG59XG5cbi8qKlxuICogTWZhRW5yb2xsbWVudCBjYW4gYmUgYW55IHN1YnR5cGUgb2YgQmFzZU1mYUVucm9sbG1lbnQsIGN1cnJlbnRseSBvbmx5IFBob25lTWZhRW5yb2xsbWVudCBpcyBzdXBwb3J0ZWRcbiAqL1xuZXhwb3J0IHR5cGUgTWZhRW5yb2xsbWVudCA9IFBob25lTWZhRW5yb2xsbWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBTdGFydFBob25lTWZhRW5yb2xsbWVudFJlcXVlc3Qge1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIHBob25lRW5yb2xsbWVudEluZm86IHtcbiAgICBwaG9uZU51bWJlcjogc3RyaW5nO1xuICAgIHJlY2FwdGNoYVRva2VuOiBzdHJpbmc7XG4gIH07XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXJ0UGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2Uge1xuICBwaG9uZVNlc3Npb25JbmZvOiB7XG4gICAgc2Vzc2lvbkluZm86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0RW5yb2xsUGhvbmVNZmEoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgcmVxdWVzdDogU3RhcnRQaG9uZU1mYUVucm9sbG1lbnRSZXF1ZXN0XG4pOiBQcm9taXNlPFN0YXJ0UGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBTdGFydFBob25lTWZhRW5yb2xsbWVudFJlcXVlc3QsXG4gICAgU3RhcnRQaG9uZU1mYUVucm9sbG1lbnRSZXNwb25zZVxuICA+KGF1dGgsIEh0dHBNZXRob2QuUE9TVCwgRW5kcG9pbnQuU1RBUlRfUEhPTkVfTUZBX0VOUk9MTE1FTlQsIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluYWxpemVQaG9uZU1mYUVucm9sbG1lbnRSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IFNpZ25JbldpdGhQaG9uZU51bWJlclJlcXVlc3Q7XG4gIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbDtcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluYWxpemVQaG9uZU1mYUVucm9sbG1lbnRSZXNwb25zZVxuICBleHRlbmRzIEZpbmFsaXplTWZhUmVzcG9uc2Uge31cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmFsaXplRW5yb2xsUGhvbmVNZmEoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgcmVxdWVzdDogRmluYWxpemVQaG9uZU1mYUVucm9sbG1lbnRSZXF1ZXN0XG4pOiBQcm9taXNlPEZpbmFsaXplUGhvbmVNZmFFbnJvbGxtZW50UmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBGaW5hbGl6ZVBob25lTWZhRW5yb2xsbWVudFJlcXVlc3QsXG4gICAgRmluYWxpemVQaG9uZU1mYUVucm9sbG1lbnRSZXNwb25zZVxuICA+KGF1dGgsIEh0dHBNZXRob2QuUE9TVCwgRW5kcG9pbnQuRklOQUxJWkVfUEhPTkVfTUZBX0VOUk9MTE1FTlQsIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2l0aGRyYXdNZmFSZXF1ZXN0IHtcbiAgaWRUb2tlbjogc3RyaW5nO1xuICBtZmFFbnJvbGxtZW50SWQ6IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2l0aGRyYXdNZmFSZXNwb25zZSBleHRlbmRzIEZpbmFsaXplTWZhUmVzcG9uc2Uge31cblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhkcmF3TWZhKFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIHJlcXVlc3Q6IFdpdGhkcmF3TWZhUmVxdWVzdFxuKTogUHJvbWlzZTxXaXRoZHJhd01mYVJlc3BvbnNlPiB7XG4gIHJldHVybiBfcGVyZm9ybUFwaVJlcXVlc3Q8V2l0aGRyYXdNZmFSZXF1ZXN0LCBXaXRoZHJhd01mYVJlc3BvbnNlPihcbiAgICBhdXRoLFxuICAgIEh0dHBNZXRob2QuUE9TVCxcbiAgICBFbmRwb2ludC5XSVRIRFJBV19NRkEsXG4gICAgX2FkZFRpZElmTmVjZXNzYXJ5KGF1dGgsIHJlcXVlc3QpXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7XG4gIE11bHRpRmFjdG9yQXNzZXJ0aW9uLFxuICBNdWx0aUZhY3RvckluZm8sXG4gIE11bHRpRmFjdG9yU2Vzc2lvbixcbiAgTXVsdGlGYWN0b3JVc2VyLFxuICBVc2VyXG59IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IHdpdGhkcmF3TWZhIH0gZnJvbSAnLi4vYXBpL2FjY291bnRfbWFuYWdlbWVudC9tZmEnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9sb2dvdXRJZkludmFsaWRhdGVkIH0gZnJvbSAnLi4vY29yZS91c2VyL2ludmFsaWRhdGlvbic7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IE11bHRpRmFjdG9yQXNzZXJ0aW9uSW1wbCB9IGZyb20gJy4vbWZhX2Fzc2VydGlvbic7XG5pbXBvcnQgeyBNdWx0aUZhY3RvckluZm9JbXBsIH0gZnJvbSAnLi9tZmFfaW5mbyc7XG5pbXBvcnQgeyBNdWx0aUZhY3RvclNlc3Npb25JbXBsIH0gZnJvbSAnLi9tZmFfc2Vzc2lvbic7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBNdWx0aUZhY3RvclVzZXJJbXBsIGltcGxlbWVudHMgTXVsdGlGYWN0b3JVc2VyIHtcbiAgZW5yb2xsZWRGYWN0b3JzOiBNdWx0aUZhY3RvckluZm9bXSA9IFtdO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IocmVhZG9ubHkgdXNlcjogVXNlckludGVybmFsKSB7XG4gICAgdXNlci5fb25SZWxvYWQodXNlckluZm8gPT4ge1xuICAgICAgaWYgKHVzZXJJbmZvLm1mYUluZm8pIHtcbiAgICAgICAgdGhpcy5lbnJvbGxlZEZhY3RvcnMgPSB1c2VySW5mby5tZmFJbmZvLm1hcChlbnJvbGxtZW50ID0+XG4gICAgICAgICAgTXVsdGlGYWN0b3JJbmZvSW1wbC5fZnJvbVNlcnZlclJlc3BvbnNlKHVzZXIuYXV0aCwgZW5yb2xsbWVudClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBfZnJvbVVzZXIodXNlcjogVXNlckludGVybmFsKTogTXVsdGlGYWN0b3JVc2VySW1wbCB7XG4gICAgcmV0dXJuIG5ldyBNdWx0aUZhY3RvclVzZXJJbXBsKHVzZXIpO1xuICB9XG5cbiAgYXN5bmMgZ2V0U2Vzc2lvbigpOiBQcm9taXNlPE11bHRpRmFjdG9yU2Vzc2lvbj4ge1xuICAgIHJldHVybiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLl9mcm9tSWR0b2tlbihhd2FpdCB0aGlzLnVzZXIuZ2V0SWRUb2tlbigpKTtcbiAgfVxuXG4gIGFzeW5jIGVucm9sbChcbiAgICBhc3NlcnRpb25FeHRlcm46IE11bHRpRmFjdG9yQXNzZXJ0aW9uLFxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBhc3NlcnRpb24gPSBhc3NlcnRpb25FeHRlcm4gYXMgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsO1xuICAgIGNvbnN0IHNlc3Npb24gPSAoYXdhaXQgdGhpcy5nZXRTZXNzaW9uKCkpIGFzIE11bHRpRmFjdG9yU2Vzc2lvbkltcGw7XG4gICAgY29uc3QgZmluYWxpemVNZmFSZXNwb25zZSA9IGF3YWl0IF9sb2dvdXRJZkludmFsaWRhdGVkKFxuICAgICAgdGhpcy51c2VyLFxuICAgICAgYXNzZXJ0aW9uLl9wcm9jZXNzKHRoaXMudXNlci5hdXRoLCBzZXNzaW9uLCBkaXNwbGF5TmFtZSlcbiAgICApO1xuICAgIC8vIE5ldyB0b2tlbnMgd2lsbCBiZSBpc3N1ZWQgYWZ0ZXIgZW5yb2xsbWVudCBvZiB0aGUgbmV3IHNlY29uZCBmYWN0b3JzLlxuICAgIC8vIFRoZXkgbmVlZCB0byBiZSB1cGRhdGVkIG9uIHRoZSB1c2VyLlxuICAgIGF3YWl0IHRoaXMudXNlci5fdXBkYXRlVG9rZW5zSWZOZWNlc3NhcnkoZmluYWxpemVNZmFSZXNwb25zZSk7XG4gICAgLy8gVGhlIHVzZXIgbmVlZHMgdG8gYmUgcmVsb2FkZWQgdG8gZ2V0IHRoZSBuZXcgbXVsdGktZmFjdG9yIGluZm9ybWF0aW9uXG4gICAgLy8gZnJvbSBzZXJ2ZXIuIFVTRVJfUkVMT0FERUQgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQgYW5kIGBlbnJvbGxlZEZhY3RvcnNgXG4gICAgLy8gd2lsbCBiZSB1cGRhdGVkLlxuICAgIHJldHVybiB0aGlzLnVzZXIucmVsb2FkKCk7XG4gIH1cblxuICBhc3luYyB1bmVucm9sbChpbmZvT3JVaWQ6IE11bHRpRmFjdG9ySW5mbyB8IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG1mYUVucm9sbG1lbnRJZCA9XG4gICAgICB0eXBlb2YgaW5mb09yVWlkID09PSAnc3RyaW5nJyA/IGluZm9PclVpZCA6IGluZm9PclVpZC51aWQ7XG4gICAgY29uc3QgaWRUb2tlbiA9IGF3YWl0IHRoaXMudXNlci5nZXRJZFRva2VuKCk7XG4gICAgY29uc3QgaWRUb2tlblJlc3BvbnNlID0gYXdhaXQgX2xvZ291dElmSW52YWxpZGF0ZWQoXG4gICAgICB0aGlzLnVzZXIsXG4gICAgICB3aXRoZHJhd01mYSh0aGlzLnVzZXIuYXV0aCwge1xuICAgICAgICBpZFRva2VuLFxuICAgICAgICBtZmFFbnJvbGxtZW50SWRcbiAgICAgIH0pXG4gICAgKTtcbiAgICAvLyBSZW1vdmUgdGhlIHNlY29uZCBmYWN0b3IgZnJvbSB0aGUgdXNlcidzIGxpc3QuXG4gICAgdGhpcy5lbnJvbGxlZEZhY3RvcnMgPSB0aGlzLmVucm9sbGVkRmFjdG9ycy5maWx0ZXIoXG4gICAgICAoeyB1aWQgfSkgPT4gdWlkICE9PSBtZmFFbnJvbGxtZW50SWRcbiAgICApO1xuICAgIC8vIERlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBiYWNrZW5kIGRlY2lkZWQgdG8gcmV2b2tlIHRoZSB1c2VyJ3Mgc2Vzc2lvbixcbiAgICAvLyB0aGUgdG9rZW5SZXNwb25zZSBtYXkgYmUgZW1wdHkuIElmIHRoZSB0b2tlbnMgd2VyZSBub3QgdXBkYXRlZCAoYW5kIHRoZXlcbiAgICAvLyBhcmUgbm93IGludmFsaWQpLCByZWxvYWRpbmcgdGhlIHVzZXIgd2lsbCBkaXNjb3ZlciB0aGlzIGFuZCBpbnZhbGlkYXRlXG4gICAgLy8gdGhlIHVzZXIncyBzdGF0ZSBhY2NvcmRpbmdseS5cbiAgICBhd2FpdCB0aGlzLnVzZXIuX3VwZGF0ZVRva2Vuc0lmTmVjZXNzYXJ5KGlkVG9rZW5SZXNwb25zZSk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMudXNlci5yZWxvYWQoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5jb2RlICE9PSBgYXV0aC8ke0F1dGhFcnJvckNvZGUuVE9LRU5fRVhQSVJFRH1gKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG11bHRpRmFjdG9yVXNlckNhY2hlID0gbmV3IFdlYWtNYXA8VXNlciwgTXVsdGlGYWN0b3JVc2VyPigpO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgTXVsdGlGYWN0b3JVc2VyfSBjb3JyZXNwb25kaW5nIHRvIHRoZSB1c2VyLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIGlzIHVzZWQgdG8gYWNjZXNzIGFsbCBtdWx0aS1mYWN0b3IgcHJvcGVydGllcyBhbmQgb3BlcmF0aW9ucyByZWxhdGVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlGYWN0b3IodXNlcjogVXNlcik6IE11bHRpRmFjdG9yVXNlciB7XG4gIGNvbnN0IHVzZXJNb2R1bGFyID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpO1xuICBpZiAoIW11bHRpRmFjdG9yVXNlckNhY2hlLmhhcyh1c2VyTW9kdWxhcikpIHtcbiAgICBtdWx0aUZhY3RvclVzZXJDYWNoZS5zZXQoXG4gICAgICB1c2VyTW9kdWxhcixcbiAgICAgIE11bHRpRmFjdG9yVXNlckltcGwuX2Zyb21Vc2VyKHVzZXJNb2R1bGFyIGFzIFVzZXJJbnRlcm5hbClcbiAgICApO1xuICB9XG4gIHJldHVybiBtdWx0aUZhY3RvclVzZXJDYWNoZS5nZXQodXNlck1vZHVsYXIpITtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgUGVyc2lzdGVuY2UgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZW51bSBQZXJzaXN0ZW5jZVR5cGUge1xuICBTRVNTSU9OID0gJ1NFU1NJT04nLFxuICBMT0NBTCA9ICdMT0NBTCcsXG4gIE5PTkUgPSAnTk9ORSdcbn1cblxuZXhwb3J0IHR5cGUgUGVyc2lzdGVkQmxvYiA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEluc3RhbnRpYXRvcjxUPiB7XG4gIChibG9iOiBQZXJzaXN0ZWRCbG9iKTogVDtcbn1cblxuZXhwb3J0IHR5cGUgUGVyc2lzdGVuY2VWYWx1ZSA9IFBlcnNpc3RlZEJsb2IgfCBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCBTVE9SQUdFX0FWQUlMQUJMRV9LRVkgPSAnX19zYWsnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JhZ2VFdmVudExpc3RlbmVyIHtcbiAgKHZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlIHwgbnVsbCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGVyc2lzdGVuY2VJbnRlcm5hbCBleHRlbmRzIFBlcnNpc3RlbmNlIHtcbiAgdHlwZTogUGVyc2lzdGVuY2VUeXBlO1xuICBfaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPjtcbiAgX3NldChrZXk6IHN0cmluZywgdmFsdWU6IFBlcnNpc3RlbmNlVmFsdWUpOiBQcm9taXNlPHZvaWQ+O1xuICBfZ2V0PFQgZXh0ZW5kcyBQZXJzaXN0ZW5jZVZhbHVlPihrZXk6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+O1xuICBfcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgX2FkZExpc3RlbmVyKGtleTogc3RyaW5nLCBsaXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkO1xuICBfcmVtb3ZlTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQ7XG4gIC8vIFNob3VsZCB0aGlzIHBlcnNpc3RlbmNlIGFsbG93IG1pZ3JhdGlvbiB1cCB0aGUgY2hvc2VuIGhpZXJhcmNoeT9cbiAgX3Nob3VsZEFsbG93TWlncmF0aW9uPzogYm9vbGVhbjtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBQZXJzaXN0ZW5jZVZhbHVlLFxuICBTVE9SQUdFX0FWQUlMQUJMRV9LRVksXG4gIFBlcnNpc3RlbmNlVHlwZVxufSBmcm9tICcuLi8uLi9jb3JlL3BlcnNpc3RlbmNlJztcblxuLy8gVGhlcmUgYXJlIHR3byBkaWZmZXJlbnQgYnJvd3NlciBwZXJzaXN0ZW5jZSB0eXBlczogbG9jYWwgYW5kIHNlc3Npb24uXG4vLyBCb3RoIGhhdmUgdGhlIHNhbWUgaW1wbGVtZW50YXRpb24gYnV0IHVzZSBhIGRpZmZlcmVudCB1bmRlcmx5aW5nIHN0b3JhZ2Vcbi8vIG9iamVjdC5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJyb3dzZXJQZXJzaXN0ZW5jZUNsYXNzIHtcbiAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBzdG9yYWdlUmV0cmlldmVyOiAoKSA9PiBTdG9yYWdlLFxuICAgIHJlYWRvbmx5IHR5cGU6IFBlcnNpc3RlbmNlVHlwZVxuICApIHt9XG5cbiAgX2lzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIXRoaXMuc3RvcmFnZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKFNUT1JBR0VfQVZBSUxBQkxFX0tFWSwgJzEnKTtcbiAgICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKFNUT1JBR0VfQVZBSUxBQkxFX0tFWSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgX3NldChrZXk6IHN0cmluZywgdmFsdWU6IFBlcnNpc3RlbmNlVmFsdWUpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgX2dldDxUIGV4dGVuZHMgUGVyc2lzdGVuY2VWYWx1ZT4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gICAgY29uc3QganNvbiA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShqc29uID8gSlNPTi5wYXJzZShqc29uKSA6IG51bGwpO1xuICB9XG5cbiAgX3JlbW92ZShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBzdG9yYWdlKCk6IFN0b3JhZ2Uge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VSZXRyaWV2ZXIoKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBlcnNpc3RlbmNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgZ2V0VUEgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQge1xuICBfaXNTYWZhcmksXG4gIF9pc0lPUyxcbiAgX2lzSWZyYW1lLFxuICBfaXNNb2JpbGVCcm93c2VyLFxuICBfaXNJRTEwXG59IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9icm93c2VyJztcbmltcG9ydCB7XG4gIFBlcnNpc3RlbmNlSW50ZXJuYWwgYXMgSW50ZXJuYWxQZXJzaXN0ZW5jZSxcbiAgUGVyc2lzdGVuY2VUeXBlLFxuICBQZXJzaXN0ZW5jZVZhbHVlLFxuICBTdG9yYWdlRXZlbnRMaXN0ZW5lclxufSBmcm9tICcuLi8uLi9jb3JlL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7IEJyb3dzZXJQZXJzaXN0ZW5jZUNsYXNzIH0gZnJvbSAnLi9icm93c2VyJztcblxuZnVuY3Rpb24gX2lmcmFtZUNhbm5vdFN5bmNXZWJTdG9yYWdlKCk6IGJvb2xlYW4ge1xuICBjb25zdCB1YSA9IGdldFVBKCk7XG4gIHJldHVybiBfaXNTYWZhcmkodWEpIHx8IF9pc0lPUyh1YSk7XG59XG5cbi8vIFRoZSBwb2xsaW5nIHBlcmlvZCBpbiBjYXNlIGV2ZW50cyBhcmUgbm90IHN1cHBvcnRlZFxuZXhwb3J0IGNvbnN0IF9QT0xMSU5HX0lOVEVSVkFMX01TID0gMTAwMDtcblxuLy8gVGhlIElFIDEwIGxvY2FsU3RvcmFnZSBjcm9zcyB0YWIgc3luY2hyb25pemF0aW9uIGRlbGF5IGluIG1pbGxpc2Vjb25kc1xuY29uc3QgSUUxMF9MT0NBTF9TVE9SQUdFX1NZTkNfREVMQVkgPSAxMDtcblxuY2xhc3MgQnJvd3NlckxvY2FsUGVyc2lzdGVuY2VcbiAgZXh0ZW5kcyBCcm93c2VyUGVyc2lzdGVuY2VDbGFzc1xuICBpbXBsZW1lbnRzIEludGVybmFsUGVyc2lzdGVuY2VcbntcbiAgc3RhdGljIHR5cGU6ICdMT0NBTCcgPSAnTE9DQUwnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCgpID0+IHdpbmRvdy5sb2NhbFN0b3JhZ2UsIFBlcnNpc3RlbmNlVHlwZS5MT0NBTCk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRvbmx5IGJvdW5kRXZlbnRIYW5kbGVyID0gKGV2ZW50OiBTdG9yYWdlRXZlbnQsIHBvbGw/OiBib29sZWFuKTogdm9pZCA9PiB0aGlzLm9uU3RvcmFnZUV2ZW50KGV2ZW50LCBwb2xsKTtcbiAgcHJpdmF0ZSByZWFkb25seSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIFNldDxTdG9yYWdlRXZlbnRMaXN0ZW5lcj4+ID0ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxDYWNoZTogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVsbD4gPSB7fTtcbiAgLy8gc2V0VGltZW91dCByZXR1cm4gdmFsdWUgaXMgcGxhdGZvcm0gc3BlY2lmaWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgcHJpdmF0ZSBwb2xsVGltZXI6IGFueSB8IG51bGwgPSBudWxsO1xuXG4gIC8vIFNhZmFyaSBvciBpT1MgYnJvd3NlciBhbmQgZW1iZWRkZWQgaW4gYW4gaWZyYW1lLlxuICBwcml2YXRlIHJlYWRvbmx5IHNhZmFyaUxvY2FsU3RvcmFnZU5vdFN5bmNlZCA9XG4gICAgX2lmcmFtZUNhbm5vdFN5bmNXZWJTdG9yYWdlKCkgJiYgX2lzSWZyYW1lKCk7XG4gIC8vIFdoZXRoZXIgdG8gdXNlIHBvbGxpbmcgaW5zdGVhZCBvZiBkZXBlbmRpbmcgb24gd2luZG93IGV2ZW50c1xuICBwcml2YXRlIHJlYWRvbmx5IGZhbGxiYWNrVG9Qb2xsaW5nID0gX2lzTW9iaWxlQnJvd3NlcigpO1xuICByZWFkb25seSBfc2hvdWxkQWxsb3dNaWdyYXRpb24gPSB0cnVlO1xuXG4gIHByaXZhdGUgZm9yQWxsQ2hhbmdlZEtleXMoXG4gICAgY2I6IChrZXk6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZyB8IG51bGwsIG5ld1ZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiB2b2lkXG4gICk6IHZvaWQge1xuICAgIC8vIENoZWNrIGFsbCBrZXlzIHdpdGggbGlzdGVuZXJzIG9uIHRoZW0uXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpKSB7XG4gICAgICAvLyBHZXQgdmFsdWUgZnJvbSBsb2NhbFN0b3JhZ2UuXG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMubG9jYWxDYWNoZVtrZXldO1xuICAgICAgLy8gSWYgbG9jYWwgbWFwIHZhbHVlIGRvZXMgbm90IG1hdGNoLCB0cmlnZ2VyIGxpc3RlbmVyIHdpdGggc3RvcmFnZSBldmVudC5cbiAgICAgIC8vIERpZmZlcmVudGlhdGUgdGhpcyBzaW11bGF0ZWQgZXZlbnQgZnJvbSB0aGUgcmVhbCBzdG9yYWdlIGV2ZW50LlxuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICBjYihrZXksIG9sZFZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvblN0b3JhZ2VFdmVudChldmVudDogU3RvcmFnZUV2ZW50LCBwb2xsID0gZmFsc2UpOiB2b2lkIHtcbiAgICAvLyBLZXkgd291bGQgYmUgbnVsbCBpbiBzb21lIHNpdHVhdGlvbnMsIGxpa2Ugd2hlbiBsb2NhbFN0b3JhZ2UgaXMgY2xlYXJlZFxuICAgIGlmICghZXZlbnQua2V5KSB7XG4gICAgICB0aGlzLmZvckFsbENoYW5nZWRLZXlzKFxuICAgICAgICAoa2V5OiBzdHJpbmcsIF9vbGRWYWx1ZTogc3RyaW5nIHwgbnVsbCwgbmV3VmFsdWU6IHN0cmluZyB8IG51bGwpID0+IHtcbiAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XG5cbiAgICAvLyBDaGVjayB0aGUgbWVjaGFuaXNtIGhvdyB0aGlzIGV2ZW50IHdhcyBkZXRlY3RlZC5cbiAgICAvLyBUaGUgZmlyc3QgZXZlbnQgd2lsbCBkaWN0YXRlIHRoZSBtZWNoYW5pc20gdG8gYmUgdXNlZC5cbiAgICBpZiAocG9sbCkge1xuICAgICAgLy8gRW52aXJvbm1lbnQgZGV0ZWN0cyBzdG9yYWdlIGNoYW5nZXMgdmlhIHBvbGxpbmcuXG4gICAgICAvLyBSZW1vdmUgc3RvcmFnZSBldmVudCBsaXN0ZW5lciB0byBwcmV2ZW50IHBvc3NpYmxlIGV2ZW50IGR1cGxpY2F0aW9uLlxuICAgICAgdGhpcy5kZXRhY2hMaXN0ZW5lcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbnZpcm9ubWVudCBkZXRlY3RzIHN0b3JhZ2UgY2hhbmdlcyB2aWEgc3RvcmFnZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIC8vIFJlbW92ZSBwb2xsaW5nIGxpc3RlbmVyIHRvIHByZXZlbnQgcG9zc2libGUgZXZlbnQgZHVwbGljYXRpb24uXG4gICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgfVxuXG4gICAgLy8gU2FmYXJpIGVtYmVkZGVkIGlmcmFtZS4gU3RvcmFnZSBldmVudCB3aWxsIHRyaWdnZXIgd2l0aCB0aGUgZGVsdGFcbiAgICAvLyBjaGFuZ2VzIGJ1dCBubyBjaGFuZ2VzIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgaWZyYW1lIGxvY2FsU3RvcmFnZS5cbiAgICBpZiAodGhpcy5zYWZhcmlMb2NhbFN0b3JhZ2VOb3RTeW5jZWQpIHtcbiAgICAgIC8vIEdldCBjdXJyZW50IGlmcmFtZSBwYWdlIHZhbHVlLlxuICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgLy8gVmFsdWUgbm90IHN5bmNocm9uaXplZCwgc3luY2hyb25pemUgbWFudWFsbHkuXG4gICAgICBpZiAoZXZlbnQubmV3VmFsdWUgIT09IHN0b3JlZFZhbHVlKSB7XG4gICAgICAgIGlmIChldmVudC5uZXdWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFZhbHVlIGNoYW5nZWQgZnJvbSBjdXJyZW50IHZhbHVlLlxuICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKGtleSwgZXZlbnQubmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEN1cnJlbnQgdmFsdWUgZGVsZXRlZC5cbiAgICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubG9jYWxDYWNoZVtrZXldID09PSBldmVudC5uZXdWYWx1ZSAmJiAhcG9sbCkge1xuICAgICAgICAvLyBBbHJlYWR5IGRldGVjdGVkIGFuZCBwcm9jZXNzZWQsIGRvIG5vdCB0cmlnZ2VyIGxpc3RlbmVycyBhZ2Fpbi5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHRyaWdnZXJMaXN0ZW5lcnMgPSAoKTogdm9pZCA9PiB7XG4gICAgICAvLyBLZWVwIGxvY2FsIG1hcCB1cCB0byBkYXRlIGluIGNhc2Ugc3RvcmFnZSBldmVudCBpcyB0cmlnZ2VyZWQgYmVmb3JlXG4gICAgICAvLyBwb2xsLlxuICAgICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgaWYgKCFwb2xsICYmIHRoaXMubG9jYWxDYWNoZVtrZXldID09PSBzdG9yZWRWYWx1ZSkge1xuICAgICAgICAvLyBSZWFsIHN0b3JhZ2UgZXZlbnQgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBkZXRlY3RlZCwgZG8gbm90aGluZy5cbiAgICAgICAgLy8gVGhpcyBzZWVtcyB0byB0cmlnZ2VyIGluIHNvbWUgSUUgYnJvd3NlcnMgZm9yIHNvbWUgcmVhc29uLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhrZXksIHN0b3JlZFZhbHVlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RvcmVkVmFsdWUgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIGlmIChcbiAgICAgIF9pc0lFMTAoKSAmJlxuICAgICAgc3RvcmVkVmFsdWUgIT09IGV2ZW50Lm5ld1ZhbHVlICYmXG4gICAgICBldmVudC5uZXdWYWx1ZSAhPT0gZXZlbnQub2xkVmFsdWVcbiAgICApIHtcbiAgICAgIC8vIElFIDEwIGhhcyB0aGlzIHdlaXJkIGJ1ZyB3aGVyZSBhIHN0b3JhZ2UgZXZlbnQgd291bGQgdHJpZ2dlciB3aXRoIHRoZVxuICAgICAgLy8gY29ycmVjdCBrZXksIG9sZFZhbHVlIGFuZCBuZXdWYWx1ZSBidXQgbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSBkb2VzXG4gICAgICAvLyBub3QgeWllbGQgdGhlIHVwZGF0ZWQgdmFsdWUgdW50aWwgYSBmZXcgbWlsbGlzZWNvbmRzLiBUaGlzIGVuc3VyZXNcbiAgICAgIC8vIHRoaXMgcmVjb3ZlcnMgZnJvbSB0aGF0IHNpdHVhdGlvbi5cbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlckxpc3RlbmVycywgSUUxMF9MT0NBTF9TVE9SQUdFX1NZTkNfREVMQVkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmlnZ2VyTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBub3RpZnlMaXN0ZW5lcnMoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1trZXldO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgQXJyYXkuZnJvbShsaXN0ZW5lcnMpKSB7XG4gICAgICAgIGxpc3RlbmVyKHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFBvbGxpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5zdG9wUG9sbGluZygpO1xuXG4gICAgdGhpcy5wb2xsVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmZvckFsbENoYW5nZWRLZXlzKFxuICAgICAgICAoa2V5OiBzdHJpbmcsIG9sZFZhbHVlOiBzdHJpbmcgfCBudWxsLCBuZXdWYWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgICAgICAgIHRoaXMub25TdG9yYWdlRXZlbnQoXG4gICAgICAgICAgICBuZXcgU3RvcmFnZUV2ZW50KCdzdG9yYWdlJywge1xuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIG9sZFZhbHVlLFxuICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAvKiBwb2xsICovIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0sIF9QT0xMSU5HX0lOVEVSVkFMX01TKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RvcFBvbGxpbmcoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMucG9sbFRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucG9sbFRpbWVyKTtcbiAgICAgIHRoaXMucG9sbFRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaExpc3RlbmVyKCk6IHZvaWQge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy5ib3VuZEV2ZW50SGFuZGxlcik7XG4gIH1cblxuICBwcml2YXRlIGRldGFjaExpc3RlbmVyKCk6IHZvaWQge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzdG9yYWdlJywgdGhpcy5ib3VuZEV2ZW50SGFuZGxlcik7XG4gIH1cblxuICBfYWRkTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmxpc3RlbmVycykubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBXaGV0aGVyIGJyb3dzZXIgY2FuIGRldGVjdCBzdG9yYWdlIGV2ZW50IHdoZW4gaXQgaGFkIGFscmVhZHkgYmVlbiBwdXNoZWQgdG8gdGhlIGJhY2tncm91bmQuXG4gICAgICAvLyBUaGlzIG1heSBoYXBwZW4gaW4gc29tZSBtb2JpbGUgYnJvd3NlcnMuIEEgbG9jYWxTdG9yYWdlIGNoYW5nZSBpbiB0aGUgZm9yZWdyb3VuZCB3aW5kb3dcbiAgICAgIC8vIHdpbGwgbm90IGJlIGRldGVjdGVkIGluIHRoZSBiYWNrZ3JvdW5kIHdpbmRvdyB2aWEgdGhlIHN0b3JhZ2UgZXZlbnQuXG4gICAgICAvLyBUaGlzIHdhcyBkZXRlY3RlZCBpbiBpT1MgNy54IG1vYmlsZSBicm93c2Vyc1xuICAgICAgaWYgKHRoaXMuZmFsbGJhY2tUb1BvbGxpbmcpIHtcbiAgICAgICAgdGhpcy5zdGFydFBvbGxpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXR0YWNoTGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1trZXldID0gbmV3IFNldCgpO1xuICAgICAgLy8gUG9wdWxhdGUgdGhlIGNhY2hlIHRvIGF2b2lkIHNwdXJpb3VzbHkgdHJpZ2dlcmluZyBvbiBmaXJzdCBwb2xsLlxuICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVyc1trZXldLmFkZChsaXN0ZW5lcik7XG4gIH1cblxuICBfcmVtb3ZlTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1trZXldLmRlbGV0ZShsaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldLnNpemUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZGV0YWNoTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgbG9jYWwgY2FjaGUgb24gYmFzZSBvcGVyYXRpb25zOlxuXG4gIGFzeW5jIF9zZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgc3VwZXIuX3NldChrZXksIHZhbHVlKTtcbiAgICB0aGlzLmxvY2FsQ2FjaGVba2V5XSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuXG4gIGFzeW5jIF9nZXQ8VCBleHRlbmRzIFBlcnNpc3RlbmNlVmFsdWU+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgc3VwZXIuX2dldDxUPihrZXkpO1xuICAgIHRoaXMubG9jYWxDYWNoZVtrZXldID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGFzeW5jIF9yZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBzdXBlci5fcmVtb3ZlKGtleSk7XG4gICAgZGVsZXRlIHRoaXMubG9jYWxDYWNoZVtrZXldO1xuICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlfSBvZiB0eXBlIGBMT0NBTGAgdXNpbmcgYGxvY2FsU3RvcmFnZWBcbiAqIGZvciB0aGUgdW5kZXJseWluZyBzdG9yYWdlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlOiBQZXJzaXN0ZW5jZSA9IEJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBlcnNpc3RlbmNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHtcbiAgUGVyc2lzdGVuY2VJbnRlcm5hbCBhcyBJbnRlcm5hbFBlcnNpc3RlbmNlLFxuICBQZXJzaXN0ZW5jZVR5cGUsXG4gIFN0b3JhZ2VFdmVudExpc3RlbmVyXG59IGZyb20gJy4uLy4uL2NvcmUvcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHsgQnJvd3NlclBlcnNpc3RlbmNlQ2xhc3MgfSBmcm9tICcuL2Jyb3dzZXInO1xuXG5jbGFzcyBCcm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlXG4gIGV4dGVuZHMgQnJvd3NlclBlcnNpc3RlbmNlQ2xhc3NcbiAgaW1wbGVtZW50cyBJbnRlcm5hbFBlcnNpc3RlbmNlXG57XG4gIHN0YXRpYyB0eXBlOiAnU0VTU0lPTicgPSAnU0VTU0lPTic7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKCkgPT4gd2luZG93LnNlc3Npb25TdG9yYWdlLCBQZXJzaXN0ZW5jZVR5cGUuU0VTU0lPTik7XG4gIH1cblxuICBfYWRkTGlzdGVuZXIoX2tleTogc3RyaW5nLCBfbGlzdGVuZXI6IFN0b3JhZ2VFdmVudExpc3RlbmVyKTogdm9pZCB7XG4gICAgLy8gTGlzdGVuZXJzIGFyZSBub3Qgc3VwcG9ydGVkIGZvciBzZXNzaW9uIHN0b3JhZ2Ugc2luY2UgaXQgY2Fubm90IGJlIHNoYXJlZCBhY3Jvc3Mgd2luZG93c1xuICAgIHJldHVybjtcbiAgfVxuXG4gIF9yZW1vdmVMaXN0ZW5lcihfa2V5OiBzdHJpbmcsIF9saXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICAvLyBMaXN0ZW5lcnMgYXJlIG5vdCBzdXBwb3J0ZWQgZm9yIHNlc3Npb24gc3RvcmFnZSBzaW5jZSBpdCBjYW5ub3QgYmUgc2hhcmVkIGFjcm9zcyB3aW5kb3dzXG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFBlcnNpc3RlbmNlfSBvZiBgU0VTU0lPTmAgdXNpbmcgYHNlc3Npb25TdG9yYWdlYFxuICogZm9yIHRoZSB1bmRlcmx5aW5nIHN0b3JhZ2UuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2UgPSBCcm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKiBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIHRzbGliIGhhcyBhIHBvbHlmaWxsIGZvciBQcm9taXNlLmFsbFNldHRsZWQgKi9cbmludGVyZmFjZSBQcm9taXNlRnVsZmlsbGVkUmVzdWx0PFQ+IHtcbiAgZnVsZmlsbGVkOiB0cnVlO1xuICB2YWx1ZTogVDtcbn1cblxuaW50ZXJmYWNlIFByb21pc2VSZWplY3RlZFJlc3VsdCB7XG4gIGZ1bGZpbGxlZDogZmFsc2U7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHJlYXNvbjogYW55O1xufVxuXG5leHBvcnQgdHlwZSBQcm9taXNlU2V0dGxlZFJlc3VsdDxUPiA9XG4gIHwgUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxUPlxuICB8IFByb21pc2VSZWplY3RlZFJlc3VsdDtcblxuLyoqXG4gKiBTaGltIGZvciBQcm9taXNlLmFsbFNldHRsZWQsIG5vdGUgdGhlIHNsaWdodGx5IGRpZmZlcmVudCBmb3JtYXQgb2YgYGZ1bGZpbGxlZGAgdnMgYHN0YXR1c2AuXG4gKlxuICogQHBhcmFtIHByb21pc2VzIC0gQXJyYXkgb2YgcHJvbWlzZXMgdG8gd2FpdCBvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9hbGxTZXR0bGVkPFQ+KFxuICBwcm9taXNlczogQXJyYXk8UHJvbWlzZTxUPj5cbik6IFByb21pc2U8QXJyYXk8UHJvbWlzZVNldHRsZWRSZXN1bHQ8VD4+PiB7XG4gIHJldHVybiBQcm9taXNlLmFsbChcbiAgICBwcm9taXNlcy5tYXAoYXN5bmMgcHJvbWlzZSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHByb21pc2U7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZnVsZmlsbGVkOiB0cnVlLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0gYXMgUHJvbWlzZUZ1bGZpbGxlZFJlc3VsdDxUPjtcbiAgICAgIH0gY2F0Y2ggKHJlYXNvbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZ1bGZpbGxlZDogZmFsc2UsXG4gICAgICAgICAgcmVhc29uXG4gICAgICAgIH0gYXMgUHJvbWlzZVJlamVjdGVkUmVzdWx0O1xuICAgICAgfVxuICAgIH0pXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgUmVjZWl2ZXJIYW5kbGVyLFxuICBfRXZlbnRUeXBlLFxuICBfUmVjZWl2ZXJSZXNwb25zZSxcbiAgU2VuZGVyTWVzc2FnZUV2ZW50LFxuICBfU3RhdHVzLFxuICBfU2VuZGVyUmVxdWVzdFxufSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IF9hbGxTZXR0bGVkIH0gZnJvbSAnLi9wcm9taXNlJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgY2xhc3MgZm9yIHJlY2VpdmluZyBtZXNzYWdlcy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWNlaXZlciB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IHJlY2VpdmVyczogUmVjZWl2ZXJbXSA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IGJvdW5kRXZlbnRIYW5kbGVyOiBFdmVudExpc3RlbmVyO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlcnNNYXA6IHtcbiAgICAvLyBUeXBlc2NyaXB0IGRvZXNuJ3QgaGF2ZSBleGlzdGVudGlhbCB0eXBlcyA6KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgW2V2ZW50VHlwZTogc3RyaW5nXTogU2V0PFJlY2VpdmVySGFuZGxlcjxhbnksIGFueT4+O1xuICB9ID0ge307XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBldmVudFRhcmdldDogRXZlbnRUYXJnZXQpIHtcbiAgICB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyID0gdGhpcy5oYW5kbGVFdmVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbiBhbiBpbnN0YW5jZSBvZiBhIFJlY2VpdmVyIGZvciBhIGdpdmVuIGV2ZW50IHRhcmdldCwgaWYgbm9uZSBleGlzdHMgaXQgd2lsbCBiZSBjcmVhdGVkLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRUYXJnZXQgLSBBbiBldmVudCB0YXJnZXQgKHN1Y2ggYXMgd2luZG93IG9yIHNlbGYpIHRocm91Z2ggd2hpY2ggdGhlIHVuZGVybHlpbmdcbiAgICogbWVzc2FnZXMgd2lsbCBiZSByZWNlaXZlZC5cbiAgICovXG4gIHN0YXRpYyBfZ2V0SW5zdGFuY2UoZXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0KTogUmVjZWl2ZXIge1xuICAgIC8vIFRoZSByZXN1bHRzIGFyZSBzdG9yZWQgaW4gYW4gYXJyYXkgc2luY2Ugb2JqZWN0cyBjYW4ndCBiZSBrZXlzIGZvciBvdGhlclxuICAgIC8vIG9iamVjdHMuIEluIGFkZGl0aW9uLCBzZXR0aW5nIGEgdW5pcXVlIHByb3BlcnR5IG9uIGFuIGV2ZW50IHRhcmdldCBhcyBhXG4gICAgLy8gaGFzaCBtYXAga2V5IG1heSBub3QgYmUgYWxsb3dlZCBkdWUgdG8gQ09SUyByZXN0cmljdGlvbnMuXG4gICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMucmVjZWl2ZXJzLmZpbmQocmVjZWl2ZXIgPT5cbiAgICAgIHJlY2VpdmVyLmlzTGlzdGVuaW5ndG8oZXZlbnRUYXJnZXQpXG4gICAgKTtcbiAgICBpZiAoZXhpc3RpbmdJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nSW5zdGFuY2U7XG4gICAgfVxuICAgIGNvbnN0IG5ld0luc3RhbmNlID0gbmV3IFJlY2VpdmVyKGV2ZW50VGFyZ2V0KTtcbiAgICB0aGlzLnJlY2VpdmVycy5wdXNoKG5ld0luc3RhbmNlKTtcbiAgICByZXR1cm4gbmV3SW5zdGFuY2U7XG4gIH1cblxuICBwcml2YXRlIGlzTGlzdGVuaW5ndG8oZXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRUYXJnZXQgPT09IGV2ZW50VGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZhbnMgb3V0IGEgTWVzc2FnZUV2ZW50IHRvIHRoZSBhcHByb3ByaWF0ZSBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIFNlbmRzIGFuIHtAbGluayBTdGF0dXMuQUNLfSB1cG9uIHJlY2VpcHQgYW5kIGEge0BsaW5rIFN0YXR1cy5ET05FfSBvbmNlIGFsbCBoYW5kbGVycyBoYXZlXG4gICAqIGZpbmlzaGVkIHByb2Nlc3NpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCAtIFRoZSBNZXNzYWdlRXZlbnQuXG4gICAqXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZUV2ZW50PFxuICAgIFQgZXh0ZW5kcyBfUmVjZWl2ZXJSZXNwb25zZSxcbiAgICBTIGV4dGVuZHMgX1NlbmRlclJlcXVlc3RcbiAgPihldmVudDogRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBtZXNzYWdlRXZlbnQgPSBldmVudCBhcyBNZXNzYWdlRXZlbnQ8U2VuZGVyTWVzc2FnZUV2ZW50PFM+PjtcbiAgICBjb25zdCB7IGV2ZW50SWQsIGV2ZW50VHlwZSwgZGF0YSB9ID0gbWVzc2FnZUV2ZW50LmRhdGE7XG5cbiAgICBjb25zdCBoYW5kbGVyczogU2V0PFJlY2VpdmVySGFuZGxlcjxULCBTPj4gfCB1bmRlZmluZWQgPSB0aGlzLmhhbmRsZXJzTWFwW1xuICAgICAgZXZlbnRUeXBlXG4gICAgXTtcbiAgICBpZiAoIWhhbmRsZXJzPy5zaXplKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWVzc2FnZUV2ZW50LnBvcnRzWzBdLnBvc3RNZXNzYWdlKHtcbiAgICAgIHN0YXR1czogX1N0YXR1cy5BQ0ssXG4gICAgICBldmVudElkLFxuICAgICAgZXZlbnRUeXBlXG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm9taXNlcyA9IEFycmF5LmZyb20oaGFuZGxlcnMpLm1hcChhc3luYyBoYW5kbGVyID0+XG4gICAgICBoYW5kbGVyKG1lc3NhZ2VFdmVudC5vcmlnaW4sIGRhdGEpXG4gICAgKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IF9hbGxTZXR0bGVkKHByb21pc2VzKTtcbiAgICBtZXNzYWdlRXZlbnQucG9ydHNbMF0ucG9zdE1lc3NhZ2Uoe1xuICAgICAgc3RhdHVzOiBfU3RhdHVzLkRPTkUsXG4gICAgICBldmVudElkLFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgcmVzcG9uc2VcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgYW4gZXZlbnQgaGFuZGxlciBmb3IgYSBwYXJ0aWN1bGFyIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnRUeXBlIC0gRXZlbnQgbmFtZSB0byBzdWJzY3JpYmUgdG8uXG4gICAqIEBwYXJhbSBldmVudEhhbmRsZXIgLSBUaGUgZXZlbnQgaGFuZGxlciB3aGljaCBzaG91bGQgcmVjZWl2ZSB0aGUgZXZlbnRzLlxuICAgKlxuICAgKi9cbiAgX3N1YnNjcmliZTxUIGV4dGVuZHMgX1JlY2VpdmVyUmVzcG9uc2UsIFMgZXh0ZW5kcyBfU2VuZGVyUmVxdWVzdD4oXG4gICAgZXZlbnRUeXBlOiBfRXZlbnRUeXBlLFxuICAgIGV2ZW50SGFuZGxlcjogUmVjZWl2ZXJIYW5kbGVyPFQsIFM+XG4gICk6IHZvaWQge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmhhbmRsZXJzTWFwKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuYm91bmRFdmVudEhhbmRsZXIpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0gPSBuZXcgU2V0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdLmFkZChldmVudEhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGFuIGV2ZW50IGhhbmRsZXIgZnJvbSBhIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudFR5cGUgLSBFdmVudCBuYW1lIHRvIHVuc3Vic2NyaWJlIGZyb20uXG4gICAqIEBwYXJhbSBldmVudEhhbmRsZXIgLSBPcHRpbm9hbCBldmVudCBoYW5kbGVyLCBpZiBub25lIHByb3ZpZGVkLCB1bnN1YnNjcmliZSBhbGwgaGFuZGxlcnMgb24gdGhpcyBldmVudC5cbiAgICpcbiAgICovXG4gIF91bnN1YnNjcmliZTxUIGV4dGVuZHMgX1JlY2VpdmVyUmVzcG9uc2UsIFMgZXh0ZW5kcyBfU2VuZGVyUmVxdWVzdD4oXG4gICAgZXZlbnRUeXBlOiBfRXZlbnRUeXBlLFxuICAgIGV2ZW50SGFuZGxlcj86IFJlY2VpdmVySGFuZGxlcjxULCBTPlxuICApOiB2b2lkIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdICYmIGV2ZW50SGFuZGxlcikge1xuICAgICAgdGhpcy5oYW5kbGVyc01hcFtldmVudFR5cGVdLmRlbGV0ZShldmVudEhhbmRsZXIpO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50SGFuZGxlciB8fCB0aGlzLmhhbmRsZXJzTWFwW2V2ZW50VHlwZV0uc2l6ZSA9PT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnNNYXBbZXZlbnRUeXBlXTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5oYW5kbGVyc01hcCkubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmV2ZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmJvdW5kRXZlbnRIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gX2dlbmVyYXRlRXZlbnRJZChwcmVmaXggPSAnJywgZGlnaXRzID0gMTApOiBzdHJpbmcge1xuICBsZXQgcmFuZG9tID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlnaXRzOyBpKyspIHtcbiAgICByYW5kb20gKz0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICB9XG4gIHJldHVybiBwcmVmaXggKyByYW5kb207XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgX2dlbmVyYXRlRXZlbnRJZCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9ldmVudF9pZCc7XG5pbXBvcnQge1xuICBfU2VuZGVyUmVxdWVzdCxcbiAgX0V2ZW50VHlwZSxcbiAgUmVjZWl2ZXJNZXNzYWdlRXZlbnQsXG4gIF9NZXNzYWdlRXJyb3IsXG4gIFNlbmRlck1lc3NhZ2VFdmVudCxcbiAgX1N0YXR1cyxcbiAgX1JlY2VpdmVyTWVzc2FnZVJlc3BvbnNlLFxuICBfUmVjZWl2ZXJSZXNwb25zZSxcbiAgX1RpbWVvdXREdXJhdGlvblxufSBmcm9tICcuL2luZGV4JztcblxuaW50ZXJmYWNlIE1lc3NhZ2VIYW5kbGVyIHtcbiAgbWVzc2FnZUNoYW5uZWw6IE1lc3NhZ2VDaGFubmVsO1xuICBvbk1lc3NhZ2U6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3Q7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBzZW5kaW5nIG1lc3NhZ2VzIGFuZCB3YWl0aW5nIGZvciBhIGNvbXBsZXRpb24gcmVzcG9uc2UuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgU2VuZGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVycyA9IG5ldyBTZXQ8TWVzc2FnZUhhbmRsZXI+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0YXJnZXQ6IFNlcnZpY2VXb3JrZXIpIHt9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIHRoZSBoYW5kbGVyIGFuZCByZW1vdmUgaXQgZnJvbSBvdXIgdHJhY2tpbmcgU2V0LlxuICAgKlxuICAgKiBAcGFyYW0gaGFuZGxlciAtIFRoZSBoYW5kbGVyIHRvIHVuc3Vic2NyaWJlLlxuICAgKi9cbiAgcHJpdmF0ZSByZW1vdmVNZXNzYWdlSGFuZGxlcihoYW5kbGVyOiBNZXNzYWdlSGFuZGxlcik6IHZvaWQge1xuICAgIGlmIChoYW5kbGVyLm1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICBoYW5kbGVyLm1lc3NhZ2VDaGFubmVsLnBvcnQxLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdtZXNzYWdlJyxcbiAgICAgICAgaGFuZGxlci5vbk1lc3NhZ2VcbiAgICAgICk7XG4gICAgICBoYW5kbGVyLm1lc3NhZ2VDaGFubmVsLnBvcnQxLmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuaGFuZGxlcnMuZGVsZXRlKGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBSZWNlaXZlciBsb2NhdGVkIGF0IHtAbGluayB0YXJnZXR9LlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBXZSdsbCBmaXJzdCB3YWl0IGEgYml0IGZvciBhbiBBQ0sgLCBpZiB3ZSBnZXQgb25lIHdlIHdpbGwgd2FpdCBzaWduaWZpY2FudGx5IGxvbmdlciB1bnRpbCB0aGVcbiAgICogcmVjZWl2ZXIgaGFzIGhhZCBhIGNoYW5jZSB0byBmdWxseSBwcm9jZXNzIHRoZSBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50VHlwZSAtIFR5cGUgb2YgZXZlbnQgdG8gc2VuZC5cbiAgICogQHBhcmFtIGRhdGEgLSBUaGUgcGF5bG9hZCBvZiB0aGUgZXZlbnQuXG4gICAqIEBwYXJhbSB0aW1lb3V0IC0gVGltZW91dCBmb3Igd2FpdGluZyBvbiBhbiBBQ0sgZnJvbSB0aGUgcmVjZWl2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHNldHRsZWQgcHJvbWlzZXMgZnJvbSBhbGwgdGhlIGhhbmRsZXJzIHRoYXQgd2VyZSBsaXN0ZW5pbmcgb24gdGhlIHJlY2VpdmVyLlxuICAgKi9cbiAgYXN5bmMgX3NlbmQ8VCBleHRlbmRzIF9SZWNlaXZlclJlc3BvbnNlLCBTIGV4dGVuZHMgX1NlbmRlclJlcXVlc3Q+KFxuICAgIGV2ZW50VHlwZTogX0V2ZW50VHlwZSxcbiAgICBkYXRhOiBTLFxuICAgIHRpbWVvdXQgPSBfVGltZW91dER1cmF0aW9uLkFDS1xuICApOiBQcm9taXNlPF9SZWNlaXZlck1lc3NhZ2VSZXNwb25zZTxUPj4ge1xuICAgIGNvbnN0IG1lc3NhZ2VDaGFubmVsID1cbiAgICAgIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgTWVzc2FnZUNoYW5uZWwoKSA6IG51bGw7XG4gICAgaWYgKCFtZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKF9NZXNzYWdlRXJyb3IuQ09OTkVDVElPTl9VTkFWQUlMQUJMRSk7XG4gICAgfVxuICAgIC8vIE5vZGUgdGltZXJzIGFuZCBicm93c2VyIHRpbWVycyByZXR1cm4gZnVuZGFtZW50YWxseSBkaWZmZXJlbnQgdHlwZXMuXG4gICAgLy8gV2UgZG9uJ3QgYWN0dWFsbHkgY2FyZSB3aGF0IHRoZSB2YWx1ZSBpcyBidXQgVFMgd29uJ3QgYWNjZXB0IHVua25vd24gYW5kXG4gICAgLy8gd2UgY2FuJ3QgY2FzdCBwcm9wZXJseSBpbiBib3RoIGVudmlyb25tZW50cy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGxldCBjb21wbGV0aW9uVGltZXI6IGFueTtcbiAgICBsZXQgaGFuZGxlcjogTWVzc2FnZUhhbmRsZXI7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPF9SZWNlaXZlck1lc3NhZ2VSZXNwb25zZTxUPj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9IF9nZW5lcmF0ZUV2ZW50SWQoJycsIDIwKTtcbiAgICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQxLnN0YXJ0KCk7XG4gICAgICBjb25zdCBhY2tUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKF9NZXNzYWdlRXJyb3IuVU5TVVBQT1JURURfRVZFTlQpKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgaGFuZGxlciA9IHtcbiAgICAgICAgbWVzc2FnZUNoYW5uZWwsXG4gICAgICAgIG9uTWVzc2FnZShldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlRXZlbnQgPSBldmVudCBhcyBNZXNzYWdlRXZlbnQ8UmVjZWl2ZXJNZXNzYWdlRXZlbnQ8VD4+O1xuICAgICAgICAgIGlmIChtZXNzYWdlRXZlbnQuZGF0YS5ldmVudElkICE9PSBldmVudElkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAobWVzc2FnZUV2ZW50LmRhdGEuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIF9TdGF0dXMuQUNLOlxuICAgICAgICAgICAgICAvLyBUaGUgcmVjZWl2ZXIgc2hvdWxkIEFDSyBmaXJzdC5cbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFja1RpbWVyKTtcbiAgICAgICAgICAgICAgY29tcGxldGlvblRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihfTWVzc2FnZUVycm9yLlRJTUVPVVQpKTtcbiAgICAgICAgICAgICAgfSwgX1RpbWVvdXREdXJhdGlvbi5DT01QTEVUSU9OKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIF9TdGF0dXMuRE9ORTpcbiAgICAgICAgICAgICAgLy8gT25jZSB0aGUgcmVjZWl2ZXIncyBoYW5kbGVycyBhcmUgZmluaXNoZWQgd2Ugd2lsbCBnZXQgdGhlIHJlc3VsdHMuXG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChjb21wbGV0aW9uVGltZXIpO1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VFdmVudC5kYXRhLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYWNrVGltZXIpO1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY29tcGxldGlvblRpbWVyKTtcbiAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihfTWVzc2FnZUVycm9yLklOVkFMSURfUkVTUE9OU0UpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5oYW5kbGVycy5hZGQoaGFuZGxlcik7XG4gICAgICBtZXNzYWdlQ2hhbm5lbC5wb3J0MS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlci5vbk1lc3NhZ2UpO1xuICAgICAgdGhpcy50YXJnZXQucG9zdE1lc3NhZ2UoXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgZXZlbnRJZCxcbiAgICAgICAgICBkYXRhXG4gICAgICAgIH0gYXMgU2VuZGVyTWVzc2FnZUV2ZW50PFM+LFxuICAgICAgICBbbWVzc2FnZUNoYW5uZWwucG9ydDJdXG4gICAgICApO1xuICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVNZXNzYWdlSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFJlY2FwdGNoYSB9IGZyb20gJy4vcmVjYXB0Y2hhL3JlY2FwdGNoYSc7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB3aW5kb3cgdHlwZSB0aGF0IG1lbGRzIHRoZSBub3JtYWwgd2luZG93IHR5cGUgcGx1cyB0aGVcbiAqIHZhcmlvdXMgYml0cyB3ZSBuZWVkLiBUaGUgdGhyZWUgZGlmZmVyZW50IGJsb2NrcyB0aGF0IGFyZSAmJ2QgdG9nZXRoZXJcbiAqIGNhbnQgYmUgZGVmaW5lZCBpbiB0aGUgc2FtZSBibG9jayB0b2dldGhlci5cbiAqL1xuZXhwb3J0IHR5cGUgQXV0aFdpbmRvdyA9IHtcbiAgLy8gU3RhbmRhcmQgd2luZG93IHR5cGVzXG4gIFtUIGluIGtleW9mIFdpbmRvd106IFdpbmRvd1tUXTtcbn0gJiB7XG4gIC8vIEFueSBrbm93biAvIG5hbWVkIHByb3BlcnRpZXMgd2Ugd2FudCB0byBhZGRcbiAgZ3JlY2FwdGNoYT86IFJlY2FwdGNoYTtcbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgX19fanNsPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgZ2FwaT86IHR5cGVvZiBnYXBpO1xufSAmIHtcbiAgLy8gQSBmaW5hbCBjYXRjaC1hbGwgZm9yIGNhbGxiYWNrcyAod2hpY2ggd2lsbCBoYXZlIHJhbmRvbSBuYW1lcykgdGhhdFxuICAvLyB3ZSB3aWxsIHN0aWNrIG9uIHRoZSB3aW5kb3cuXG4gIFtjYWxsYmFjazogc3RyaW5nXTogKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdm9pZDtcbn07XG5cbi8qKlxuICogTGF6eSBhY2Nlc3NvciBmb3Igd2luZG93LCBzaW5jZSB0aGUgY29tcGF0IGxheWVyIHdvbid0IHRyZWUgc2hha2UgdGhpcyBvdXQsXG4gKiB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBub3QgdG8gbWVzcyB3aXRoIHdpbmRvdyB1bmxlc3Mgd2UgaGF2ZSB0b1xuICovXG5leHBvcnQgZnVuY3Rpb24gX3dpbmRvdygpOiBBdXRoV2luZG93IHtcbiAgcmV0dXJuICh3aW5kb3cgYXMgdW5rbm93bikgYXMgQXV0aFdpbmRvdztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9zZXRXaW5kb3dMb2NhdGlvbih1cmw6IHN0cmluZyk6IHZvaWQge1xuICBfd2luZG93KCkubG9jYXRpb24uaHJlZiA9IHVybDtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgX3dpbmRvdyB9IGZyb20gJy4uL2F1dGhfd2luZG93JztcblxuZXhwb3J0IGZ1bmN0aW9uIF9pc1dvcmtlcigpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgX3dpbmRvdygpWydXb3JrZXJHbG9iYWxTY29wZSddICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBfd2luZG93KClbJ2ltcG9ydFNjcmlwdHMnXSA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2dldEFjdGl2ZVNlcnZpY2VXb3JrZXIoKTogUHJvbWlzZTxTZXJ2aWNlV29ya2VyIHwgbnVsbD4ge1xuICBpZiAoIW5hdmlnYXRvcj8uc2VydmljZVdvcmtlcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgcmVnaXN0cmF0aW9uID0gYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHk7XG4gICAgcmV0dXJuIHJlZ2lzdHJhdGlvbi5hY3RpdmU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0U2VydmljZVdvcmtlckNvbnRyb2xsZXIoKTogU2VydmljZVdvcmtlciB8IG51bGwge1xuICByZXR1cm4gbmF2aWdhdG9yPy5zZXJ2aWNlV29ya2VyPy5jb250cm9sbGVyIHx8IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0V29ya2VyR2xvYmFsU2NvcGUoKTogU2VydmljZVdvcmtlciB8IG51bGwge1xuICByZXR1cm4gX2lzV29ya2VyKCkgPyAoKHNlbGYgYXMgdW5rbm93bikgYXMgU2VydmljZVdvcmtlcikgOiBudWxsO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBlcnNpc3RlbmNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7XG4gIFBlcnNpc3RlZEJsb2IsXG4gIFBlcnNpc3RlbmNlSW50ZXJuYWwgYXMgSW50ZXJuYWxQZXJzaXN0ZW5jZSxcbiAgUGVyc2lzdGVuY2VUeXBlLFxuICBQZXJzaXN0ZW5jZVZhbHVlLFxuICBTdG9yYWdlRXZlbnRMaXN0ZW5lcixcbiAgU1RPUkFHRV9BVkFJTEFCTEVfS0VZXG59IGZyb20gJy4uLy4uL2NvcmUvcGVyc2lzdGVuY2UvJztcbmltcG9ydCB7XG4gIF9FdmVudFR5cGUsXG4gIF9QaW5nUmVzcG9uc2UsXG4gIEtleUNoYW5nZWRSZXNwb25zZSxcbiAgS2V5Q2hhbmdlZFJlcXVlc3QsXG4gIFBpbmdSZXF1ZXN0LFxuICBfVGltZW91dER1cmF0aW9uXG59IGZyb20gJy4uL21lc3NhZ2VjaGFubmVsL2luZGV4JztcbmltcG9ydCB7IFJlY2VpdmVyIH0gZnJvbSAnLi4vbWVzc2FnZWNoYW5uZWwvcmVjZWl2ZXInO1xuaW1wb3J0IHsgU2VuZGVyIH0gZnJvbSAnLi4vbWVzc2FnZWNoYW5uZWwvc2VuZGVyJztcbmltcG9ydCB7XG4gIF9pc1dvcmtlcixcbiAgX2dldEFjdGl2ZVNlcnZpY2VXb3JrZXIsXG4gIF9nZXRTZXJ2aWNlV29ya2VyQ29udHJvbGxlcixcbiAgX2dldFdvcmtlckdsb2JhbFNjb3BlXG59IGZyb20gJy4uL3V0aWwvd29ya2VyJztcblxuZXhwb3J0IGNvbnN0IERCX05BTUUgPSAnZmlyZWJhc2VMb2NhbFN0b3JhZ2VEYic7XG5jb25zdCBEQl9WRVJTSU9OID0gMTtcbmNvbnN0IERCX09CSkVDVFNUT1JFX05BTUUgPSAnZmlyZWJhc2VMb2NhbFN0b3JhZ2UnO1xuY29uc3QgREJfREFUQV9LRVlQQVRIID0gJ2ZiYXNlX2tleSc7XG5cbmludGVyZmFjZSBEQk9iamVjdCB7XG4gIFtEQl9EQVRBX0tFWVBBVEhdOiBzdHJpbmc7XG4gIHZhbHVlOiBQZXJzaXN0ZWRCbG9iO1xufVxuXG4vKipcbiAqIFByb21pc2Ugd3JhcHBlciBmb3IgSURCUmVxdWVzdFxuICpcbiAqIFVuZm9ydHVuYXRlbHkgd2UgY2FuJ3QgY2xlYW5seSBleHRlbmQgUHJvbWlzZTxUPiBzaW5jZSBwcm9taXNlcyBhcmUgbm90IGNhbGxhYmxlIGluIEVTNlxuICpcbiAqL1xuY2xhc3MgREJQcm9taXNlPFQ+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByZXF1ZXN0OiBJREJSZXF1ZXN0KSB7fVxuXG4gIHRvUHJvbWlzZSgpOiBQcm9taXNlPFQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUodGhpcy5yZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgcmVqZWN0KHRoaXMucmVxdWVzdC5lcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RTdG9yZShkYjogSURCRGF0YWJhc2UsIGlzUmVhZFdyaXRlOiBib29sZWFuKTogSURCT2JqZWN0U3RvcmUge1xuICByZXR1cm4gZGJcbiAgICAudHJhbnNhY3Rpb24oW0RCX09CSkVDVFNUT1JFX05BTUVdLCBpc1JlYWRXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5JylcbiAgICAub2JqZWN0U3RvcmUoREJfT0JKRUNUU1RPUkVfTkFNRSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfY2xlYXJEYXRhYmFzZShkYjogSURCRGF0YWJhc2UpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3Qgb2JqZWN0U3RvcmUgPSBnZXRPYmplY3RTdG9yZShkYiwgdHJ1ZSk7XG4gIHJldHVybiBuZXcgREJQcm9taXNlPHZvaWQ+KG9iamVjdFN0b3JlLmNsZWFyKCkpLnRvUHJvbWlzZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2RlbGV0ZURhdGFiYXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX05BTUUpO1xuICByZXR1cm4gbmV3IERCUHJvbWlzZTx2b2lkPihyZXF1ZXN0KS50b1Byb21pc2UoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9vcGVuRGF0YWJhc2UoKTogUHJvbWlzZTxJREJEYXRhYmFzZT4ge1xuICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oREJfTkFNRSwgREJfVkVSU0lPTik7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcbiAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICB9KTtcblxuICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGRiID0gcmVxdWVzdC5yZXN1bHQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKERCX09CSkVDVFNUT1JFX05BTUUsIHsga2V5UGF0aDogREJfREFUQV9LRVlQQVRIIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYjogSURCRGF0YWJhc2UgPSByZXF1ZXN0LnJlc3VsdDtcbiAgICAgIC8vIFN0cmFuZ2UgYnVnIHRoYXQgb2NjdXJzIGluIEZpcmVmb3ggd2hlbiBtdWx0aXBsZSB0YWJzIGFyZSBvcGVuZWQgYXQgdGhlXG4gICAgICAvLyBzYW1lIHRpbWUuIFRoZSBvbmx5IHdheSB0byByZWNvdmVyIHNlZW1zIHRvIGJlIGRlbGV0aW5nIHRoZSBkYXRhYmFzZVxuICAgICAgLy8gYW5kIHJlLWluaXRpYWxpemluZyBpdC5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzYzNFxuXG4gICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoREJfT0JKRUNUU1RPUkVfTkFNRSkpIHtcbiAgICAgICAgLy8gTmVlZCB0byBjbG9zZSB0aGUgZGF0YWJhc2Ugb3IgZWxzZSB5b3UgZ2V0IGEgYGJsb2NrZWRgIGV2ZW50XG4gICAgICAgIGRiLmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IF9kZWxldGVEYXRhYmFzZSgpO1xuICAgICAgICByZXNvbHZlKGF3YWl0IF9vcGVuRGF0YWJhc2UoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKGRiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfcHV0T2JqZWN0KFxuICBkYjogSURCRGF0YWJhc2UsXG4gIGtleTogc3RyaW5nLFxuICB2YWx1ZTogUGVyc2lzdGVuY2VWYWx1ZSB8IHN0cmluZ1xuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHJlcXVlc3QgPSBnZXRPYmplY3RTdG9yZShkYiwgdHJ1ZSkucHV0KHtcbiAgICBbREJfREFUQV9LRVlQQVRIXToga2V5LFxuICAgIHZhbHVlXG4gIH0pO1xuICByZXR1cm4gbmV3IERCUHJvbWlzZTx2b2lkPihyZXF1ZXN0KS50b1Byb21pc2UoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0T2JqZWN0KFxuICBkYjogSURCRGF0YWJhc2UsXG4gIGtleTogc3RyaW5nXG4pOiBQcm9taXNlPFBlcnNpc3RlZEJsb2IgfCBudWxsPiB7XG4gIGNvbnN0IHJlcXVlc3QgPSBnZXRPYmplY3RTdG9yZShkYiwgZmFsc2UpLmdldChrZXkpO1xuICBjb25zdCBkYXRhID0gYXdhaXQgbmV3IERCUHJvbWlzZTxEQk9iamVjdCB8IHVuZGVmaW5lZD4ocmVxdWVzdCkudG9Qcm9taXNlKCk7XG4gIHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgPyBudWxsIDogZGF0YS52YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kZWxldGVPYmplY3QoZGI6IElEQkRhdGFiYXNlLCBrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCByZXF1ZXN0ID0gZ2V0T2JqZWN0U3RvcmUoZGIsIHRydWUpLmRlbGV0ZShrZXkpO1xuICByZXR1cm4gbmV3IERCUHJvbWlzZTx2b2lkPihyZXF1ZXN0KS50b1Byb21pc2UoKTtcbn1cblxuZXhwb3J0IGNvbnN0IF9QT0xMSU5HX0lOVEVSVkFMX01TID0gODAwO1xuZXhwb3J0IGNvbnN0IF9UUkFOU0FDVElPTl9SRVRSWV9DT1VOVCA9IDM7XG5cbmNsYXNzIEluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2UgaW1wbGVtZW50cyBJbnRlcm5hbFBlcnNpc3RlbmNlIHtcbiAgc3RhdGljIHR5cGU6ICdMT0NBTCcgPSAnTE9DQUwnO1xuXG4gIHR5cGUgPSBQZXJzaXN0ZW5jZVR5cGUuTE9DQUw7XG4gIGRiPzogSURCRGF0YWJhc2U7XG4gIHJlYWRvbmx5IF9zaG91bGRBbGxvd01pZ3JhdGlvbiA9IHRydWU7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIFNldDxTdG9yYWdlRXZlbnRMaXN0ZW5lcj4+ID0ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9jYWxDYWNoZTogUmVjb3JkPHN0cmluZywgUGVyc2lzdGVuY2VWYWx1ZSB8IG51bGw+ID0ge307XG4gIC8vIHNldFRpbWVvdXQgcmV0dXJuIHZhbHVlIGlzIHBsYXRmb3JtIHNwZWNpZmljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHByaXZhdGUgcG9sbFRpbWVyOiBhbnkgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBwZW5kaW5nV3JpdGVzID0gMDtcblxuICBwcml2YXRlIHJlY2VpdmVyOiBSZWNlaXZlciB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHNlbmRlcjogU2VuZGVyIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgc2VydmljZVdvcmtlclJlY2VpdmVyQXZhaWxhYmxlID0gZmFsc2U7XG4gIHByaXZhdGUgYWN0aXZlU2VydmljZVdvcmtlcjogU2VydmljZVdvcmtlciB8IG51bGwgPSBudWxsO1xuICAvLyBWaXNpYmxlIGZvciB0ZXN0aW5nIG9ubHlcbiAgcmVhZG9ubHkgX3dvcmtlckluaXRpYWxpemF0aW9uUHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBGaXJlICYgZm9yZ2V0IHRoZSBzZXJ2aWNlIHdvcmtlciByZWdpc3RyYXRpb24gYXMgaXQgbWF5IG5ldmVyIHJlc29sdmVcbiAgICB0aGlzLl93b3JrZXJJbml0aWFsaXphdGlvblByb21pc2UgPVxuICAgICAgdGhpcy5pbml0aWFsaXplU2VydmljZVdvcmtlck1lc3NhZ2luZygpLnRoZW4oXG4gICAgICAgICgpID0+IHt9LFxuICAgICAgICAoKSA9PiB7fVxuICAgICAgKTtcbiAgfVxuXG4gIGFzeW5jIF9vcGVuRGIoKTogUHJvbWlzZTxJREJEYXRhYmFzZT4ge1xuICAgIGlmICh0aGlzLmRiKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYjtcbiAgICB9XG4gICAgdGhpcy5kYiA9IGF3YWl0IF9vcGVuRGF0YWJhc2UoKTtcbiAgICByZXR1cm4gdGhpcy5kYjtcbiAgfVxuXG4gIGFzeW5jIF93aXRoUmV0cmllczxUPihvcDogKGRiOiBJREJEYXRhYmFzZSkgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAgIGxldCBudW1BdHRlbXB0cyA9IDA7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLl9vcGVuRGIoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG9wKGRiKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKG51bUF0dGVtcHRzKysgPiBfVFJBTlNBQ1RJT05fUkVUUllfQ09VTlQpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRiKSB7XG4gICAgICAgICAgdGhpcy5kYi5jbG9zZSgpO1xuICAgICAgICAgIHRoaXMuZGIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgYWRkaW5nIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5kZXhlZERCIGV2ZW50cyBkbyBub3QgcHJvcGFnYXRlIGZyb20gdGhlIG1haW4gd2luZG93IHRvIHRoZSB3b3JrZXIgY29udGV4dC4gIFdlIHJlbHkgb24gYVxuICAgKiBwb3N0TWVzc2FnZSBpbnRlcmZhY2UgdG8gc2VuZCB0aGVzZSBldmVudHMgdG8gdGhlIHdvcmtlciBvdXJzZWx2ZXMuXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVTZXJ2aWNlV29ya2VyTWVzc2FnaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBfaXNXb3JrZXIoKSA/IHRoaXMuaW5pdGlhbGl6ZVJlY2VpdmVyKCkgOiB0aGlzLmluaXRpYWxpemVTZW5kZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcyB0aGUgd29ya2VyIHdlIHNob3VsZCBsaXN0ZW4gdG8gZXZlbnRzIGZyb20gdGhlIG1haW4gd2luZG93LlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUmVjZWl2ZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5yZWNlaXZlciA9IFJlY2VpdmVyLl9nZXRJbnN0YW5jZShfZ2V0V29ya2VyR2xvYmFsU2NvcGUoKSEpO1xuICAgIC8vIFJlZnJlc2ggZnJvbSBwZXJzaXN0ZW5jZSBpZiB3ZSByZWNlaXZlIGEgS2V5Q2hhbmdlZCBtZXNzYWdlLlxuICAgIHRoaXMucmVjZWl2ZXIuX3N1YnNjcmliZShcbiAgICAgIF9FdmVudFR5cGUuS0VZX0NIQU5HRUQsXG4gICAgICBhc3luYyAoX29yaWdpbjogc3RyaW5nLCBkYXRhOiBLZXlDaGFuZ2VkUmVxdWVzdCkgPT4ge1xuICAgICAgICBjb25zdCBrZXlzID0gYXdhaXQgdGhpcy5fcG9sbCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleVByb2Nlc3NlZDoga2V5cy5pbmNsdWRlcyhkYXRhLmtleSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIC8vIExldCB0aGUgc2VuZGVyIGtub3cgdGhhdCB3ZSBhcmUgbGlzdGVuaW5nIHNvIHRoZXkgZ2l2ZSB1cyBtb3JlIHRpbWVvdXQuXG4gICAgdGhpcy5yZWNlaXZlci5fc3Vic2NyaWJlKFxuICAgICAgX0V2ZW50VHlwZS5QSU5HLFxuICAgICAgYXN5bmMgKF9vcmlnaW46IHN0cmluZywgX2RhdGE6IFBpbmdSZXF1ZXN0KSA9PiB7XG4gICAgICAgIHJldHVybiBbX0V2ZW50VHlwZS5LRVlfQ0hBTkdFRF07XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcyB0aGUgbWFpbiB3aW5kb3csIHdlIHNob3VsZCBsZXQgdGhlIHdvcmtlciBrbm93IHdoZW4ga2V5cyBjaGFuZ2UgKHNldCBhbmQgcmVtb3ZlKS5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2aWNlV29ya2VyQ29udGFpbmVyL3JlYWR5IHwgU2VydmljZVdvcmtlckNvbnRhaW5lci5yZWFkeX1cbiAgICogbWF5IG5vdCByZXNvbHZlLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplU2VuZGVyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGFuIGFjdGl2ZSBzZXJ2aWNlIHdvcmtlci5cbiAgICB0aGlzLmFjdGl2ZVNlcnZpY2VXb3JrZXIgPSBhd2FpdCBfZ2V0QWN0aXZlU2VydmljZVdvcmtlcigpO1xuICAgIGlmICghdGhpcy5hY3RpdmVTZXJ2aWNlV29ya2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VuZGVyID0gbmV3IFNlbmRlcih0aGlzLmFjdGl2ZVNlcnZpY2VXb3JrZXIpO1xuICAgIC8vIFBpbmcgdGhlIHNlcnZpY2Ugd29ya2VyIHRvIGNoZWNrIHdoYXQgZXZlbnRzIHRoZXkgY2FuIGhhbmRsZS5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5zZW5kZXIuX3NlbmQ8X1BpbmdSZXNwb25zZSwgUGluZ1JlcXVlc3Q+KFxuICAgICAgX0V2ZW50VHlwZS5QSU5HLFxuICAgICAge30sXG4gICAgICBfVGltZW91dER1cmF0aW9uLkxPTkdfQUNLXG4gICAgKTtcbiAgICBpZiAoIXJlc3VsdHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgcmVzdWx0c1swXT8uZnVsZmlsbGVkICYmXG4gICAgICByZXN1bHRzWzBdPy52YWx1ZS5pbmNsdWRlcyhfRXZlbnRUeXBlLktFWV9DSEFOR0VEKVxuICAgICkge1xuICAgICAgdGhpcy5zZXJ2aWNlV29ya2VyUmVjZWl2ZXJBdmFpbGFibGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMZXQgdGhlIHdvcmtlciBrbm93IGFib3V0IGEgY2hhbmdlZCBrZXksIHRoZSBleGFjdCBrZXkgZG9lc24ndCB0ZWNobmljYWxseSBtYXR0ZXIgc2luY2UgdGhlXG4gICAqIHdvcmtlciB3aWxsIGp1c3QgdHJpZ2dlciBhIGZ1bGwgc3luYyBhbnl3YXkuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIEZvciBub3csIHdlIG9ubHkgc3VwcG9ydCBvbmUgc2VydmljZSB3b3JrZXIgcGVyIHBhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSBrZXkgLSBTdG9yYWdlIGtleSB3aGljaCBjaGFuZ2VkLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBub3RpZnlTZXJ2aWNlV29ya2VyKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuc2VuZGVyIHx8XG4gICAgICAhdGhpcy5hY3RpdmVTZXJ2aWNlV29ya2VyIHx8XG4gICAgICBfZ2V0U2VydmljZVdvcmtlckNvbnRyb2xsZXIoKSAhPT0gdGhpcy5hY3RpdmVTZXJ2aWNlV29ya2VyXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnNlbmRlci5fc2VuZDxLZXlDaGFuZ2VkUmVzcG9uc2UsIEtleUNoYW5nZWRSZXF1ZXN0PihcbiAgICAgICAgX0V2ZW50VHlwZS5LRVlfQ0hBTkdFRCxcbiAgICAgICAgeyBrZXkgfSxcbiAgICAgICAgLy8gVXNlIGxvbmcgdGltZW91dCBpZiByZWNlaXZlciBoYXMgcHJldmlvdXNseSByZXNwb25kZWQgdG8gYSBwaW5nIGZyb20gdXMuXG4gICAgICAgIHRoaXMuc2VydmljZVdvcmtlclJlY2VpdmVyQXZhaWxhYmxlXG4gICAgICAgICAgPyBfVGltZW91dER1cmF0aW9uLkxPTkdfQUNLXG4gICAgICAgICAgOiBfVGltZW91dER1cmF0aW9uLkFDS1xuICAgICAgKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIFRoaXMgaXMgYSBiZXN0IGVmZm9ydCBhcHByb2FjaC4gSWdub3JlIGVycm9ycy5cbiAgICB9XG4gIH1cblxuICBhc3luYyBfaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghaW5kZXhlZERCKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRiID0gYXdhaXQgX29wZW5EYXRhYmFzZSgpO1xuICAgICAgYXdhaXQgX3B1dE9iamVjdChkYiwgU1RPUkFHRV9BVkFJTEFCTEVfS0VZLCAnMScpO1xuICAgICAgYXdhaXQgX2RlbGV0ZU9iamVjdChkYiwgU1RPUkFHRV9BVkFJTEFCTEVfS0VZKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge31cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF93aXRoUGVuZGluZ1dyaXRlKHdyaXRlOiAoKSA9PiBQcm9taXNlPHZvaWQ+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5wZW5kaW5nV3JpdGVzKys7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHdyaXRlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucGVuZGluZ1dyaXRlcy0tO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF9zZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX3dpdGhQZW5kaW5nV3JpdGUoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5fd2l0aFJldHJpZXMoKGRiOiBJREJEYXRhYmFzZSkgPT4gX3B1dE9iamVjdChkYiwga2V5LCB2YWx1ZSkpO1xuICAgICAgdGhpcy5sb2NhbENhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzLm5vdGlmeVNlcnZpY2VXb3JrZXIoa2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIF9nZXQ8VCBleHRlbmRzIFBlcnNpc3RlbmNlVmFsdWU+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuICAgIGNvbnN0IG9iaiA9IChhd2FpdCB0aGlzLl93aXRoUmV0cmllcygoZGI6IElEQkRhdGFiYXNlKSA9PlxuICAgICAgZ2V0T2JqZWN0KGRiLCBrZXkpXG4gICAgKSkgYXMgVDtcbiAgICB0aGlzLmxvY2FsQ2FjaGVba2V5XSA9IG9iajtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgYXN5bmMgX3JlbW92ZShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl93aXRoUGVuZGluZ1dyaXRlKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuX3dpdGhSZXRyaWVzKChkYjogSURCRGF0YWJhc2UpID0+IF9kZWxldGVPYmplY3QoZGIsIGtleSkpO1xuICAgICAgZGVsZXRlIHRoaXMubG9jYWxDYWNoZVtrZXldO1xuICAgICAgcmV0dXJuIHRoaXMubm90aWZ5U2VydmljZVdvcmtlcihrZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfcG9sbCgpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgLy8gVE9ETzogY2hlY2sgaWYgd2UgbmVlZCB0byBmYWxsYmFjayBpZiBnZXRBbGwgaXMgbm90IHN1cHBvcnRlZFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX3dpdGhSZXRyaWVzKChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgIGNvbnN0IGdldEFsbFJlcXVlc3QgPSBnZXRPYmplY3RTdG9yZShkYiwgZmFsc2UpLmdldEFsbCgpO1xuICAgICAgcmV0dXJuIG5ldyBEQlByb21pc2U8REJPYmplY3RbXSB8IG51bGw+KGdldEFsbFJlcXVlc3QpLnRvUHJvbWlzZSgpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBoYXZlIHBlbmRpbmcgd3JpdGVzIGluIHByb2dyZXNzIGFib3J0LCB3ZSdsbCBnZXQgcGlja2VkIHVwIG9uIHRoZSBuZXh0IHBvbGxcbiAgICBpZiAodGhpcy5wZW5kaW5nV3JpdGVzICE9PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIGNvbnN0IGtleXNJblJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IHsgZmJhc2Vfa2V5OiBrZXksIHZhbHVlIH0gb2YgcmVzdWx0KSB7XG4gICAgICBrZXlzSW5SZXN1bHQuYWRkKGtleSk7XG4gICAgICBpZiAoSlNPTi5zdHJpbmdpZnkodGhpcy5sb2NhbENhY2hlW2tleV0pICE9PSBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoa2V5LCB2YWx1ZSBhcyBQZXJzaXN0ZW5jZVZhbHVlKTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgbG9jYWxLZXkgb2YgT2JqZWN0LmtleXModGhpcy5sb2NhbENhY2hlKSkge1xuICAgICAgaWYgKHRoaXMubG9jYWxDYWNoZVtsb2NhbEtleV0gJiYgIWtleXNJblJlc3VsdC5oYXMobG9jYWxLZXkpKSB7XG4gICAgICAgIC8vIERlbGV0ZWRcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMobG9jYWxLZXksIG51bGwpO1xuICAgICAgICBrZXlzLnB1c2gobG9jYWxLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIHByaXZhdGUgbm90aWZ5TGlzdGVuZXJzKFxuICAgIGtleTogc3RyaW5nLFxuICAgIG5ld1ZhbHVlOiBQZXJzaXN0ZW5jZVZhbHVlIHwgbnVsbFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmxvY2FsQ2FjaGVba2V5XSA9IG5ld1ZhbHVlO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2tleV07XG4gICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBBcnJheS5mcm9tKGxpc3RlbmVycykpIHtcbiAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRQb2xsaW5nKCk6IHZvaWQge1xuICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcblxuICAgIHRoaXMucG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoXG4gICAgICBhc3luYyAoKSA9PiB0aGlzLl9wb2xsKCksXG4gICAgICBfUE9MTElOR19JTlRFUlZBTF9NU1xuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHN0b3BQb2xsaW5nKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBvbGxUaW1lcikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnBvbGxUaW1lcik7XG4gICAgICB0aGlzLnBvbGxUaW1lciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgX2FkZExpc3RlbmVyKGtleTogc3RyaW5nLCBsaXN0ZW5lcjogU3RvcmFnZUV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5saXN0ZW5lcnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zdGFydFBvbGxpbmcoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1trZXldID0gbmV3IFNldCgpO1xuICAgICAgLy8gUG9wdWxhdGUgdGhlIGNhY2hlIHRvIGF2b2lkIHNwdXJpb3VzbHkgdHJpZ2dlcmluZyBvbiBmaXJzdCBwb2xsLlxuICAgICAgdm9pZCB0aGlzLl9nZXQoa2V5KTsgLy8gVGhpcyBjYW4gaGFwcGVuIGluIHRoZSBiYWNrZ3JvdW5kIGFzeW5jIGFuZCB3ZSBjYW4gcmV0dXJuIGltbWVkaWF0ZWx5LlxuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVyc1trZXldLmFkZChsaXN0ZW5lcik7XG4gIH1cblxuICBfcmVtb3ZlTGlzdGVuZXIoa2V5OiBzdHJpbmcsIGxpc3RlbmVyOiBTdG9yYWdlRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1trZXldLmRlbGV0ZShsaXN0ZW5lcik7XG5cbiAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldLnNpemUgPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubGlzdGVuZXJzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgUGVyc2lzdGVuY2V9IG9mIHR5cGUgYExPQ0FMYCB1c2luZyBgaW5kZXhlZERCYFxuICogZm9yIHRoZSB1bmRlcmx5aW5nIHN0b3JhZ2UuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZTogUGVyc2lzdGVuY2UgPSBJbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IF9wZXJmb3JtQXBpUmVxdWVzdCwgRW5kcG9pbnQsIEh0dHBNZXRob2QsIF9hZGRUaWRJZk5lY2Vzc2FyeSB9IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgSWRUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgTWZhRW5yb2xsbWVudCB9IGZyb20gJy4uL2FjY291bnRfbWFuYWdlbWVudC9tZmEnO1xuaW1wb3J0IHsgU2lnbkluV2l0aElkcFJlc3BvbnNlIH0gZnJvbSAnLi9pZHAnO1xuaW1wb3J0IHtcbiAgU2lnbkluV2l0aFBob25lTnVtYmVyUmVxdWVzdCxcbiAgU2lnbkluV2l0aFBob25lTnVtYmVyUmVzcG9uc2Vcbn0gZnJvbSAnLi9zbXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmFsaXplTWZhUmVzcG9uc2Uge1xuICBpZFRva2VuOiBzdHJpbmc7XG4gIHJlZnJlc2hUb2tlbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElkVG9rZW5NZmFSZXNwb25zZSBleHRlbmRzIElkVG9rZW5SZXNwb25zZSB7XG4gIG1mYVBlbmRpbmdDcmVkZW50aWFsPzogc3RyaW5nO1xuICBtZmFJbmZvPzogTWZhRW5yb2xsbWVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXJ0UGhvbmVNZmFTaWduSW5SZXF1ZXN0IHtcbiAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHN0cmluZztcbiAgbWZhRW5yb2xsbWVudElkOiBzdHJpbmc7XG4gIHBob25lU2lnbkluSW5mbzoge1xuICAgIHJlY2FwdGNoYVRva2VuOiBzdHJpbmc7XG4gIH07XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXJ0UGhvbmVNZmFTaWduSW5SZXNwb25zZSB7XG4gIHBob25lUmVzcG9uc2VJbmZvOiB7XG4gICAgc2Vzc2lvbkluZm86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0U2lnbkluUGhvbmVNZmEoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IFN0YXJ0UGhvbmVNZmFTaWduSW5SZXF1ZXN0XG4pOiBQcm9taXNlPFN0YXJ0UGhvbmVNZmFTaWduSW5SZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PFxuICAgIFN0YXJ0UGhvbmVNZmFTaWduSW5SZXF1ZXN0LFxuICAgIFN0YXJ0UGhvbmVNZmFTaWduSW5SZXNwb25zZVxuICA+KGF1dGgsIEh0dHBNZXRob2QuUE9TVCwgRW5kcG9pbnQuU1RBUlRfUEhPTkVfTUZBX1NJR05fSU4sIF9hZGRUaWRJZk5lY2Vzc2FyeShhdXRoLCByZXF1ZXN0KSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmluYWxpemVQaG9uZU1mYVNpZ25JblJlcXVlc3Qge1xuICBtZmFQZW5kaW5nQ3JlZGVudGlhbDogc3RyaW5nO1xuICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IFNpZ25JbldpdGhQaG9uZU51bWJlclJlcXVlc3Q7XG4gIHRlbmFudElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmFsaXplUGhvbmVNZmFTaWduSW5SZXNwb25zZSBleHRlbmRzIEZpbmFsaXplTWZhUmVzcG9uc2Uge31cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmFsaXplU2lnbkluUGhvbmVNZmEoXG4gIGF1dGg6IEF1dGgsXG4gIHJlcXVlc3Q6IEZpbmFsaXplUGhvbmVNZmFTaWduSW5SZXF1ZXN0LFxuKTogUHJvbWlzZTxGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVzcG9uc2U+IHtcbiAgcmV0dXJuIF9wZXJmb3JtQXBpUmVxdWVzdDxcbiAgICBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVxdWVzdCxcbiAgICBGaW5hbGl6ZVBob25lTWZhU2lnbkluUmVzcG9uc2VcbiAgPihhdXRoLCBIdHRwTWV0aG9kLlBPU1QsIEVuZHBvaW50LkZJTkFMSVpFX1BIT05FX01GQV9TSUdOX0lOLCBfYWRkVGlkSWZOZWNlc3NhcnkoYXV0aCwgcmVxdWVzdCkpO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdHlwZSBQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlID1cbiAgfCBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZVxuICB8IFNpZ25JbldpdGhJZHBSZXNwb25zZVxuICB8IElkVG9rZW5SZXNwb25zZTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBFbmRwb2ludCwgSHR0cE1ldGhvZCwgX3BlcmZvcm1BcGlSZXF1ZXN0IH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmludGVyZmFjZSBHZXRSZWNhcHRjaGFQYXJhbVJlc3BvbnNlIHtcbiAgcmVjYXB0Y2hhU2l0ZUtleT86IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJlY2FwdGNoYVBhcmFtcyhhdXRoOiBBdXRoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgcmV0dXJuIChcbiAgICAoXG4gICAgICBhd2FpdCBfcGVyZm9ybUFwaVJlcXVlc3Q8dm9pZCwgR2V0UmVjYXB0Y2hhUGFyYW1SZXNwb25zZT4oXG4gICAgICAgIGF1dGgsXG4gICAgICAgIEh0dHBNZXRob2QuR0VULFxuICAgICAgICBFbmRwb2ludC5HRVRfUkVDQVBUQ0hBX1BBUkFNXG4gICAgICApXG4gICAgKS5yZWNhcHRjaGFTaXRlS2V5IHx8ICcnXG4gICk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9jcmVhdGVFcnJvciB9IGZyb20gJy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuXG5mdW5jdGlvbiBnZXRTY3JpcHRQYXJlbnRFbGVtZW50KCk6IEhUTUxEb2N1bWVudCB8IEhUTUxIZWFkRWxlbWVudCB7XG4gIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpPy5bMF0gPz8gZG9jdW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfbG9hZEpTKHVybDogc3RyaW5nKTogUHJvbWlzZTxFdmVudD4ge1xuICAvLyBUT0RPOiBjb25zaWRlciBhZGRpbmcgdGltZW91dCBzdXBwb3J0ICYgY2FuY2VsbGF0aW9uXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHVybCk7XG4gICAgZWwub25sb2FkID0gcmVzb2x2ZTtcbiAgICBlbC5vbmVycm9yID0gZSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IF9jcmVhdGVFcnJvcihBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICAgIGVycm9yLmN1c3RvbURhdGEgPSBlIGFzIHVua25vd24gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH07XG4gICAgZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIGVsLmNoYXJzZXQgPSAnVVRGLTgnO1xuICAgIGdldFNjcmlwdFBhcmVudEVsZW1lbnQoKS5hcHBlbmRDaGlsZChlbCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2dlbmVyYXRlQ2FsbGJhY2tOYW1lKHByZWZpeDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBfXyR7cHJlZml4fSR7TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMCl9YDtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBSZWNhcHRjaGFQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IFJlY2FwdGNoYSB9IGZyb20gJy4vcmVjYXB0Y2hhJztcblxuZXhwb3J0IGNvbnN0IF9TT0xWRV9USU1FX01TID0gNTAwO1xuZXhwb3J0IGNvbnN0IF9FWFBJUkFUSU9OX1RJTUVfTVMgPSA2MF8wMDA7XG5leHBvcnQgY29uc3QgX1dJREdFVF9JRF9TVEFSVCA9IDFfMDAwXzAwMF8wMDBfMDAwO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdpZGdldCB7XG4gIGdldFJlc3BvbnNlOiAoKSA9PiBzdHJpbmcgfCBudWxsO1xuICBkZWxldGU6ICgpID0+IHZvaWQ7XG4gIGV4ZWN1dGU6ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBNb2NrUmVDYXB0Y2hhIGltcGxlbWVudHMgUmVjYXB0Y2hhIHtcbiAgcHJpdmF0ZSBjb3VudGVyID0gX1dJREdFVF9JRF9TVEFSVDtcbiAgX3dpZGdldHMgPSBuZXcgTWFwPG51bWJlciwgV2lkZ2V0PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXV0aDogQXV0aEludGVybmFsKSB7fVxuXG4gIHJlbmRlcihcbiAgICBjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50LFxuICAgIHBhcmFtZXRlcnM/OiBSZWNhcHRjaGFQYXJhbWV0ZXJzXG4gICk6IG51bWJlciB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmNvdW50ZXI7XG4gICAgdGhpcy5fd2lkZ2V0cy5zZXQoXG4gICAgICBpZCxcbiAgICAgIG5ldyBNb2NrV2lkZ2V0KGNvbnRhaW5lciwgdGhpcy5hdXRoLm5hbWUsIHBhcmFtZXRlcnMgfHwge30pXG4gICAgKTtcbiAgICB0aGlzLmNvdW50ZXIrKztcbiAgICByZXR1cm4gaWQ7XG4gIH1cblxuICByZXNldChvcHRXaWRnZXRJZD86IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGlkID0gb3B0V2lkZ2V0SWQgfHwgX1dJREdFVF9JRF9TVEFSVDtcbiAgICB2b2lkIHRoaXMuX3dpZGdldHMuZ2V0KGlkKT8uZGVsZXRlKCk7XG4gICAgdGhpcy5fd2lkZ2V0cy5kZWxldGUoaWQpO1xuICB9XG5cbiAgZ2V0UmVzcG9uc2Uob3B0V2lkZ2V0SWQ/OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlkID0gb3B0V2lkZ2V0SWQgfHwgX1dJREdFVF9JRF9TVEFSVDtcbiAgICByZXR1cm4gdGhpcy5fd2lkZ2V0cy5nZXQoaWQpPy5nZXRSZXNwb25zZSgpIHx8ICcnO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZShvcHRXaWRnZXRJZD86IG51bWJlciB8IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgaWQ6IG51bWJlciA9IChvcHRXaWRnZXRJZCBhcyBudW1iZXIpIHx8IF9XSURHRVRfSURfU1RBUlQ7XG4gICAgdm9pZCB0aGlzLl93aWRnZXRzLmdldChpZCk/LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1vY2tXaWRnZXQge1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgaXNWaXNpYmxlOiBib29sZWFuO1xuICBwcml2YXRlIHRpbWVySWQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGRlbGV0ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSByZXNwb25zZVRva2VuOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWFkb25seSBjbGlja0hhbmRsZXIgPSAoKTogdm9pZCA9PiB7XG4gICAgdGhpcy5leGVjdXRlKCk7XG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY29udGFpbmVyT3JJZDogc3RyaW5nIHwgSFRNTEVsZW1lbnQsXG4gICAgYXBwTmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyYW1zOiBSZWNhcHRjaGFQYXJhbWV0ZXJzXG4gICkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9XG4gICAgICB0eXBlb2YgY29udGFpbmVyT3JJZCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJPcklkKVxuICAgICAgICA6IGNvbnRhaW5lck9ySWQ7XG4gICAgX2Fzc2VydChjb250YWluZXIsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IsIHsgYXBwTmFtZSB9KTtcblxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuaXNWaXNpYmxlID0gdGhpcy5wYXJhbXMuc2l6ZSAhPT0gJ2ludmlzaWJsZSc7XG4gICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICB0aGlzLmV4ZWN1dGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgZ2V0UmVzcG9uc2UoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgdGhpcy5jaGVja0lmRGVsZXRlZCgpO1xuICAgIHJldHVybiB0aGlzLnJlc3BvbnNlVG9rZW47XG4gIH1cblxuICBkZWxldGUoKTogdm9pZCB7XG4gICAgdGhpcy5jaGVja0lmRGVsZXRlZCgpO1xuICAgIHRoaXMuZGVsZXRlZCA9IHRydWU7XG4gICAgaWYgKHRoaXMudGltZXJJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgICB0aGlzLnRpbWVySWQgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tIYW5kbGVyKTtcbiAgfVxuXG4gIGV4ZWN1dGUoKTogdm9pZCB7XG4gICAgdGhpcy5jaGVja0lmRGVsZXRlZCgpO1xuICAgIGlmICh0aGlzLnRpbWVySWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJlc3BvbnNlVG9rZW4gPSBnZW5lcmF0ZVJhbmRvbUFscGhhTnVtZXJpY1N0cmluZyg1MCk7XG4gICAgICBjb25zdCB7IGNhbGxiYWNrLCAnZXhwaXJlZC1jYWxsYmFjayc6IGV4cGlyZWRDYWxsYmFjayB9ID0gdGhpcy5wYXJhbXM7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYWxsYmFjayh0aGlzLnJlc3BvbnNlVG9rZW4pO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudGltZXJJZCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVzcG9uc2VUb2tlbiA9IG51bGw7XG4gICAgICAgIGlmIChleHBpcmVkQ2FsbGJhY2spIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXhwaXJlZENhbGxiYWNrKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSkge1xuICAgICAgICAgIHRoaXMuZXhlY3V0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBfRVhQSVJBVElPTl9USU1FX01TKTtcbiAgICB9LCBfU09MVkVfVElNRV9NUyk7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrSWZEZWxldGVkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRlbGV0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncmVDQVBUQ0hBIG1vY2sgd2FzIGFscmVhZHkgZGVsZXRlZCEnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21BbHBoYU51bWVyaWNTdHJpbmcobGVuOiBudW1iZXIpOiBzdHJpbmcge1xuICBjb25zdCBjaGFycyA9IFtdO1xuICBjb25zdCBhbGxvd2VkQ2hhcnMgPVxuICAgICcxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjaGFycy5wdXNoKFxuICAgICAgYWxsb3dlZENoYXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxvd2VkQ2hhcnMubGVuZ3RoKSlcbiAgICApO1xuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBxdWVyeXN0cmluZyB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQsIF9jcmVhdGVFcnJvciB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgRGVsYXkgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZGVsYXknO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBfd2luZG93IH0gZnJvbSAnLi4vYXV0aF93aW5kb3cnO1xuaW1wb3J0ICogYXMganNIZWxwZXJzIGZyb20gJy4uL2xvYWRfanMnO1xuaW1wb3J0IHsgUmVjYXB0Y2hhIH0gZnJvbSAnLi9yZWNhcHRjaGEnO1xuaW1wb3J0IHsgTW9ja1JlQ2FwdGNoYSB9IGZyb20gJy4vcmVjYXB0Y2hhX21vY2snO1xuXG4vLyBSZUNhcHRjaGEgd2lsbCBsb2FkIHVzaW5nIHRoZSBzYW1lIGNhbGxiYWNrLCBzbyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gbmVlZHNcbi8vIHRvIGJlIGtlcHQgYXJvdW5kXG5leHBvcnQgY29uc3QgX0pTTE9BRF9DQUxMQkFDSyA9IGpzSGVscGVycy5fZ2VuZXJhdGVDYWxsYmFja05hbWUoJ3JjYicpO1xuY29uc3QgTkVUV09SS19USU1FT1VUX0RFTEFZID0gbmV3IERlbGF5KDMwMDAwLCA2MDAwMCk7XG5jb25zdCBSRUNBUFRDSEFfQkFTRSA9ICdodHRwczovL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkuanM/JztcblxuLyoqXG4gKiBXZSBuZWVkIHRvIG1hcmsgdGhpcyBpbnRlcmZhY2UgYXMgaW50ZXJuYWwgZXhwbGljaXRseSB0byBleGNsdWRlIGl0IGluIHRoZSBwdWJsaWMgdHlwaW5ncywgYmVjYXVzZVxuICogaXQgcmVmZXJlbmNlcyBBdXRoSW50ZXJuYWwgd2hpY2ggaGFzIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSB3aXRoIFVzZXJJbnRlcm5hbC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZUNhcHRjaGFMb2FkZXIge1xuICBsb2FkKGF1dGg6IEF1dGhJbnRlcm5hbCwgaGw/OiBzdHJpbmcpOiBQcm9taXNlPFJlY2FwdGNoYT47XG4gIGNsZWFyZWRPbmVJbnN0YW5jZSgpOiB2b2lkO1xufVxuXG4vKipcbiAqIExvYWRlciBmb3IgdGhlIEdSZUNhcHRjaGEgbGlicmFyeS4gVGhlcmUgc2hvdWxkIG9ubHkgZXZlciBiZSBvbmUgb2YgdGhpcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlQ2FwdGNoYUxvYWRlckltcGwgaW1wbGVtZW50cyBSZUNhcHRjaGFMb2FkZXIge1xuICBwcml2YXRlIGhvc3RMYW5ndWFnZSA9ICcnO1xuICBwcml2YXRlIGNvdW50ZXIgPSAwO1xuICBwcml2YXRlIHJlYWRvbmx5IGxpYnJhcnlTZXBhcmF0ZWx5TG9hZGVkID0gISFfd2luZG93KCkuZ3JlY2FwdGNoYTtcblxuICBsb2FkKGF1dGg6IEF1dGhJbnRlcm5hbCwgaGwgPSAnJyk6IFByb21pc2U8UmVjYXB0Y2hhPiB7XG4gICAgX2Fzc2VydChpc0hvc3RMYW5ndWFnZVZhbGlkKGhsKSwgYXV0aCwgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUik7XG5cbiAgICBpZiAodGhpcy5zaG91bGRSZXNvbHZlSW1tZWRpYXRlbHkoaGwpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKF93aW5kb3coKS5ncmVjYXB0Y2hhISk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxSZWNhcHRjaGE+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IG5ldHdvcmtUaW1lb3V0ID0gX3dpbmRvdygpLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRCkpO1xuICAgICAgfSwgTkVUV09SS19USU1FT1VUX0RFTEFZLmdldCgpKTtcblxuICAgICAgX3dpbmRvdygpW19KU0xPQURfQ0FMTEJBQ0tdID0gKCkgPT4ge1xuICAgICAgICBfd2luZG93KCkuY2xlYXJUaW1lb3V0KG5ldHdvcmtUaW1lb3V0KTtcbiAgICAgICAgZGVsZXRlIF93aW5kb3coKVtfSlNMT0FEX0NBTExCQUNLXTtcblxuICAgICAgICBjb25zdCByZWNhcHRjaGEgPSBfd2luZG93KCkuZ3JlY2FwdGNoYTtcblxuICAgICAgICBpZiAoIXJlY2FwdGNoYSkge1xuICAgICAgICAgIHJlamVjdChfY3JlYXRlRXJyb3IoYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUikpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdyYXAgdGhlIGdyZXB0Y2hhIHJlbmRlciBmdW5jdGlvbiBzbyB0aGF0IHdlIGtub3cgaWYgdGhlIGRldmVsb3BlciBoYXNcbiAgICAgICAgLy8gY2FsbGVkIGl0IHNlcGFyYXRlbHlcbiAgICAgICAgY29uc3QgcmVuZGVyID0gcmVjYXB0Y2hhLnJlbmRlcjtcbiAgICAgICAgcmVjYXB0Y2hhLnJlbmRlciA9IChjb250YWluZXIsIHBhcmFtcykgPT4ge1xuICAgICAgICAgIGNvbnN0IHdpZGdldElkID0gcmVuZGVyKGNvbnRhaW5lciwgcGFyYW1zKTtcbiAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICByZXR1cm4gd2lkZ2V0SWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5ob3N0TGFuZ3VhZ2UgPSBobDtcbiAgICAgICAgcmVzb2x2ZShyZWNhcHRjaGEpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgdXJsID0gYCR7UkVDQVBUQ0hBX0JBU0V9PyR7cXVlcnlzdHJpbmcoe1xuICAgICAgICBvbmxvYWQ6IF9KU0xPQURfQ0FMTEJBQ0ssXG4gICAgICAgIHJlbmRlcjogJ2V4cGxpY2l0JyxcbiAgICAgICAgaGxcbiAgICAgIH0pfWA7XG5cbiAgICAgIGpzSGVscGVycy5fbG9hZEpTKHVybCkuY2F0Y2goKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQobmV0d29ya1RpbWVvdXQpO1xuICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJlZE9uZUluc3RhbmNlKCk6IHZvaWQge1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRSZXNvbHZlSW1tZWRpYXRlbHkoaGw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vIFdlIGNhbiByZXNvbHZlIGltbWVkaWF0ZWx5IGlmOlxuICAgIC8vICAgXHUyMDIyIGdyZWNhcHRjaGEgaXMgYWxyZWFkeSBkZWZpbmVkIEFORCAoXG4gICAgLy8gICAgIDEuIHRoZSByZXF1ZXN0ZWQgbGFuZ3VhZ2UgY29kZXMgYXJlIHRoZSBzYW1lIE9SXG4gICAgLy8gICAgIDIuIHRoZXJlIGV4aXN0cyBhbHJlYWR5IGEgUmVDYXB0Y2hhIG9uIHRoZSBwYWdlXG4gICAgLy8gICAgIDMuIHRoZSBsaWJyYXJ5IHdhcyBhbHJlYWR5IGxvYWRlZCBieSB0aGUgYXBwXG4gICAgLy8gSW4gY2FzZXMgKDIpIGFuZCAoMyksIHdlIF9jYW4ndF8gcmVsb2FkIGFzIGl0IHdvdWxkIGJyZWFrIHRoZSByZWNhcHRjaGFzXG4gICAgLy8gdGhhdCBhcmUgYWxyZWFkeSBpbiB0aGUgcGFnZVxuICAgIHJldHVybiAoXG4gICAgICAhIV93aW5kb3coKS5ncmVjYXB0Y2hhICYmXG4gICAgICAoaGwgPT09IHRoaXMuaG9zdExhbmd1YWdlIHx8XG4gICAgICAgIHRoaXMuY291bnRlciA+IDAgfHxcbiAgICAgICAgdGhpcy5saWJyYXJ5U2VwYXJhdGVseUxvYWRlZClcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSG9zdExhbmd1YWdlVmFsaWQoaGw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gaGwubGVuZ3RoIDw9IDYgJiYgL15cXHMqW2EtekEtWjAtOVxcLV0qXFxzKiQvLnRlc3QoaGwpO1xufVxuXG5leHBvcnQgY2xhc3MgTW9ja1JlQ2FwdGNoYUxvYWRlckltcGwgaW1wbGVtZW50cyBSZUNhcHRjaGFMb2FkZXIge1xuICBhc3luYyBsb2FkKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8UmVjYXB0Y2hhPiB7XG4gICAgcmV0dXJuIG5ldyBNb2NrUmVDYXB0Y2hhKGF1dGgpO1xuICB9XG5cbiAgY2xlYXJlZE9uZUluc3RhbmNlKCk6IHZvaWQge31cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoLCBSZWNhcHRjaGFQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IGdldFJlY2FwdGNoYVBhcmFtcyB9IGZyb20gJy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9yZWNhcHRjaGEnO1xuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi4vLi4vY29yZS9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgX2lzSHR0cE9ySHR0cHMgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvbG9jYXRpb24nO1xuaW1wb3J0IHsgQXBwbGljYXRpb25WZXJpZmllckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXBwbGljYXRpb25fdmVyaWZpZXInO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBfd2luZG93IH0gZnJvbSAnLi4vYXV0aF93aW5kb3cnO1xuaW1wb3J0IHsgX2lzV29ya2VyIH0gZnJvbSAnLi4vdXRpbC93b3JrZXInO1xuaW1wb3J0IHsgUmVjYXB0Y2hhIH0gZnJvbSAnLi9yZWNhcHRjaGEnO1xuaW1wb3J0IHtcbiAgTW9ja1JlQ2FwdGNoYUxvYWRlckltcGwsXG4gIFJlQ2FwdGNoYUxvYWRlcixcbiAgUmVDYXB0Y2hhTG9hZGVySW1wbFxufSBmcm9tICcuL3JlY2FwdGNoYV9sb2FkZXInO1xuXG5leHBvcnQgY29uc3QgUkVDQVBUQ0hBX1ZFUklGSUVSX1RZUEUgPSAncmVjYXB0Y2hhJztcblxuY29uc3QgREVGQVVMVF9QQVJBTVM6IFJlY2FwdGNoYVBhcmFtZXRlcnMgPSB7XG4gIHRoZW1lOiAnbGlnaHQnLFxuICB0eXBlOiAnaW1hZ2UnXG59O1xuXG50eXBlIFRva2VuQ2FsbGJhY2sgPSAodG9rZW46IHN0cmluZykgPT4gdm9pZDtcblxuLyoqXG4gKiBBbiB7QGxpbmsgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvIHwgcmVDQVBUQ0hBfS1iYXNlZCBhcHBsaWNhdGlvbiB2ZXJpZmllci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWNhcHRjaGFWZXJpZmllciBpbXBsZW1lbnRzIEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbCB7XG4gIC8qKlxuICAgKiBUaGUgYXBwbGljYXRpb24gdmVyaWZpZXIgdHlwZS5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogRm9yIGEgcmVDQVBUQ0hBIHZlcmlmaWVyLCB0aGlzIGlzICdyZWNhcHRjaGEnLlxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZSA9IFJFQ0FQVENIQV9WRVJJRklFUl9UWVBFO1xuICBwcml2YXRlIGRlc3Ryb3llZCA9IGZhbHNlO1xuICBwcml2YXRlIHdpZGdldElkOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHJlYWRvbmx5IGlzSW52aXNpYmxlOiBib29sZWFuO1xuICBwcml2YXRlIHJlYWRvbmx5IHRva2VuQ2hhbmdlTGlzdGVuZXJzID0gbmV3IFNldDxUb2tlbkNhbGxiYWNrPigpO1xuICBwcml2YXRlIHJlbmRlclByb21pc2U6IFByb21pc2U8bnVtYmVyPiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbDtcblxuICAvKiogQGludGVybmFsICovXG4gIHJlYWRvbmx5IF9yZWNhcHRjaGFMb2FkZXI6IFJlQ2FwdGNoYUxvYWRlcjtcbiAgcHJpdmF0ZSByZWNhcHRjaGE6IFJlY2FwdGNoYSB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyT3JJZCAtIFRoZSByZUNBUFRDSEEgY29udGFpbmVyIHBhcmFtZXRlci5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICogVGhpcyBoYXMgZGlmZmVyZW50IG1lYW5pbmcgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHJlQ0FQVENIQSBpcyBoaWRkZW4gb3IgdmlzaWJsZS4gRm9yIGFcbiAgICogdmlzaWJsZSByZUNBUFRDSEEgdGhlIGNvbnRhaW5lciBtdXN0IGJlIGVtcHR5LiBJZiBhIHN0cmluZyBpcyB1c2VkLCBpdCBoYXMgdG8gY29ycmVzcG9uZCB0b1xuICAgKiBhbiBlbGVtZW50IElELiBUaGUgY29ycmVzcG9uZGluZyBlbGVtZW50IG11c3QgYWxzbyBtdXN0IGJlIGluIHRoZSBET00gYXQgdGhlIHRpbWUgb2ZcbiAgICogaW5pdGlhbGl6YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gVGhlIG9wdGlvbmFsIHJlQ0FQVENIQSBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcmVtYXJrc1xuICAgKiBDaGVjayB0aGUgcmVDQVBUQ0hBIGRvY3MgZm9yIGEgY29tcHJlaGVuc2l2ZSBsaXN0LiBBbGwgcGFyYW1ldGVycyBhcmUgYWNjZXB0ZWQgZXhjZXB0IGZvclxuICAgKiB0aGUgc2l0ZWtleS4gRmlyZWJhc2UgQXV0aCBiYWNrZW5kIHByb3Zpc2lvbnMgYSByZUNBUFRDSEEgZm9yIGVhY2ggcHJvamVjdCBhbmQgd2lsbFxuICAgKiBjb25maWd1cmUgdGhpcyB1cG9uIHJlbmRlcmluZy4gRm9yIGFuIGludmlzaWJsZSByZUNBUFRDSEEsIGEgc2l6ZSBrZXkgbXVzdCBoYXZlIHRoZSB2YWx1ZVxuICAgKiAnaW52aXNpYmxlJy5cbiAgICpcbiAgICogQHBhcmFtIGF1dGhFeHRlcm4gLSBUaGUgY29ycmVzcG9uZGluZyBGaXJlYmFzZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gICAqXG4gICAqIEByZW1hcmtzXG4gICAqIElmIG5vbmUgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IEZpcmViYXNlIHtAbGluayBBdXRofSBpbnN0YW5jZSBpcyB1c2VkLiBBIEZpcmViYXNlIHtAbGluayBBdXRofSBpbnN0YW5jZVxuICAgKiBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gQVBJIGtleSwgb3RoZXJ3aXNlIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29udGFpbmVyT3JJZDogSFRNTEVsZW1lbnQgfCBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJhbWV0ZXJzOiBSZWNhcHRjaGFQYXJhbWV0ZXJzID0ge1xuICAgICAgLi4uREVGQVVMVF9QQVJBTVNcbiAgICB9LFxuICAgIGF1dGhFeHRlcm46IEF1dGhcbiAgKSB7XG4gICAgdGhpcy5hdXRoID0gX2Nhc3RBdXRoKGF1dGhFeHRlcm4pO1xuICAgIHRoaXMuaXNJbnZpc2libGUgPSB0aGlzLnBhcmFtZXRlcnMuc2l6ZSA9PT0gJ2ludmlzaWJsZSc7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXG4gICAgKTtcbiAgICBjb25zdCBjb250YWluZXIgPVxuICAgICAgdHlwZW9mIGNvbnRhaW5lck9ySWQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVyT3JJZClcbiAgICAgICAgOiBjb250YWluZXJPcklkO1xuICAgIF9hc3NlcnQoY29udGFpbmVyLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5wYXJhbWV0ZXJzLmNhbGxiYWNrID0gdGhpcy5tYWtlVG9rZW5DYWxsYmFjayh0aGlzLnBhcmFtZXRlcnMuY2FsbGJhY2spO1xuXG4gICAgdGhpcy5fcmVjYXB0Y2hhTG9hZGVyID0gdGhpcy5hdXRoLnNldHRpbmdzLmFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ1xuICAgICAgPyBuZXcgTW9ja1JlQ2FwdGNoYUxvYWRlckltcGwoKVxuICAgICAgOiBuZXcgUmVDYXB0Y2hhTG9hZGVySW1wbCgpO1xuXG4gICAgdGhpcy52YWxpZGF0ZVN0YXJ0aW5nU3RhdGUoKTtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IGlmIHNkayB2ZXJzaW9uIGlzIG5lZWRlZFxuICB9XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciB0aGUgdXNlciB0byBzb2x2ZSB0aGUgcmVDQVBUQ0hBIGFuZCByZXNvbHZlcyB3aXRoIHRoZSByZUNBUFRDSEEgdG9rZW4uXG4gICAqXG4gICAqIEByZXR1cm5zIEEgUHJvbWlzZSBmb3IgdGhlIHJlQ0FQVENIQSB0b2tlbi5cbiAgICovXG4gIGFzeW5jIHZlcmlmeSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgY29uc3QgaWQgPSBhd2FpdCB0aGlzLnJlbmRlcigpO1xuICAgIGNvbnN0IHJlY2FwdGNoYSA9IHRoaXMuZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gcmVjYXB0Y2hhLmdldFJlc3BvbnNlKGlkKTtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPihyZXNvbHZlID0+IHtcbiAgICAgIGNvbnN0IHRva2VuQ2hhbmdlID0gKHRva2VuOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgIHJldHVybjsgLy8gSWdub3JlIHRva2VuIGV4cGlyYXRpb25zLlxuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9rZW5DaGFuZ2VMaXN0ZW5lcnMuZGVsZXRlKHRva2VuQ2hhbmdlKTtcbiAgICAgICAgcmVzb2x2ZSh0b2tlbik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLnRva2VuQ2hhbmdlTGlzdGVuZXJzLmFkZCh0b2tlbkNoYW5nZSk7XG4gICAgICBpZiAodGhpcy5pc0ludmlzaWJsZSkge1xuICAgICAgICByZWNhcHRjaGEuZXhlY3V0ZShpZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgcmVDQVBUQ0hBIHdpZGdldCBvbiB0aGUgcGFnZS5cbiAgICpcbiAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVDQVBUQ0hBIHdpZGdldCBJRC5cbiAgICovXG4gIHJlbmRlcigpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmFzc2VydE5vdERlc3Ryb3llZCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIFRoaXMgbWV0aG9kIHJldHVybnMgYSBwcm9taXNlLiBTaW5jZSBpdCdzIG5vdCBhc3luYyAod2Ugd2FudCB0byByZXR1cm4gdGhlXG4gICAgICAvLyBfc2FtZV8gcHJvbWlzZSBpZiByZW5kZXJpbmcgaXMgc3RpbGwgb2NjdXJyaW5nKSwgdGhlIEFQSSBzdXJmYWNlIHNob3VsZFxuICAgICAgLy8gcmVqZWN0IHdpdGggdGhlIGVycm9yIHJhdGhlciB0aGFuIGp1c3QgdGhyb3dcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJQcm9taXNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9taXNlO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyUHJvbWlzZSA9IHRoaXMubWFrZVJlbmRlclByb21pc2UoKS5jYXRjaChlID0+IHtcbiAgICAgIHRoaXMucmVuZGVyUHJvbWlzZSA9IG51bGw7XG4gICAgICB0aHJvdyBlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyUHJvbWlzZTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgX3Jlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgaWYgKHRoaXMud2lkZ2V0SWQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKS5yZXNldCh0aGlzLndpZGdldElkKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSByZUNBUFRDSEEgd2lkZ2V0IGZyb20gdGhlIHBhZ2UgYW5kIGRlc3Ryb3lzIHRoZSBpbnN0YW5jZS5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuX3JlY2FwdGNoYUxvYWRlci5jbGVhcmVkT25lSW5zdGFuY2UoKTtcbiAgICBpZiAoIXRoaXMuaXNJbnZpc2libGUpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNoaWxkTm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlU3RhcnRpbmdTdGF0ZSgpOiB2b2lkIHtcbiAgICBfYXNzZXJ0KCF0aGlzLnBhcmFtZXRlcnMuc2l0ZWtleSwgdGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SKTtcbiAgICBfYXNzZXJ0KFxuICAgICAgdGhpcy5pc0ludmlzaWJsZSB8fCAhdGhpcy5jb250YWluZXIuaGFzQ2hpbGROb2RlcygpLFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5BUkdVTUVOVF9FUlJPUlxuICAgICk7XG4gICAgX2Fzc2VydChcbiAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgbWFrZVRva2VuQ2FsbGJhY2soXG4gICAgZXhpc3Rpbmc6IFRva2VuQ2FsbGJhY2sgfCBzdHJpbmcgfCB1bmRlZmluZWRcbiAgKTogVG9rZW5DYWxsYmFjayB7XG4gICAgcmV0dXJuIHRva2VuID0+IHtcbiAgICAgIHRoaXMudG9rZW5DaGFuZ2VMaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcih0b2tlbikpO1xuICAgICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBleGlzdGluZyh0b2tlbik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgZ2xvYmFsRnVuYyA9IF93aW5kb3coKVtleGlzdGluZ107XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsRnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdsb2JhbEZ1bmModG9rZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXNzZXJ0Tm90RGVzdHJveWVkKCk6IHZvaWQge1xuICAgIF9hc3NlcnQoIXRoaXMuZGVzdHJveWVkLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVuZGVyUHJvbWlzZSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xuICAgIGlmICghdGhpcy53aWRnZXRJZCkge1xuICAgICAgbGV0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuICAgICAgaWYgKCF0aGlzLmlzSW52aXNpYmxlKSB7XG4gICAgICAgIGNvbnN0IGd1YXJhbnRlZWRFbXB0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ3VhcmFudGVlZEVtcHR5KTtcbiAgICAgICAgY29udGFpbmVyID0gZ3VhcmFudGVlZEVtcHR5O1xuICAgICAgfVxuXG4gICAgICB0aGlzLndpZGdldElkID0gdGhpcy5nZXRBc3NlcnRlZFJlY2FwdGNoYSgpLnJlbmRlcihcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICB0aGlzLnBhcmFtZXRlcnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMud2lkZ2V0SWQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgX2Fzc2VydChcbiAgICAgIF9pc0h0dHBPckh0dHBzKCkgJiYgIV9pc1dvcmtlcigpLFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUlxuICAgICk7XG5cbiAgICBhd2FpdCBkb21SZWFkeSgpO1xuICAgIHRoaXMucmVjYXB0Y2hhID0gYXdhaXQgdGhpcy5fcmVjYXB0Y2hhTG9hZGVyLmxvYWQoXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICB0aGlzLmF1dGgubGFuZ3VhZ2VDb2RlIHx8IHVuZGVmaW5lZFxuICAgICk7XG5cbiAgICBjb25zdCBzaXRlS2V5ID0gYXdhaXQgZ2V0UmVjYXB0Y2hhUGFyYW1zKHRoaXMuYXV0aCk7XG4gICAgX2Fzc2VydChzaXRlS2V5LCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHRoaXMucGFyYW1ldGVycy5zaXRla2V5ID0gc2l0ZUtleTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QXNzZXJ0ZWRSZWNhcHRjaGEoKTogUmVjYXB0Y2hhIHtcbiAgICBfYXNzZXJ0KHRoaXMucmVjYXB0Y2hhLCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHJldHVybiB0aGlzLnJlY2FwdGNoYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkb21SZWFkeSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgbGV0IHJlc29sdmVyOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4ge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRG9jdW1lbnQgbm90IHJlYWR5LCB3YWl0IGZvciBsb2FkIGJlZm9yZSByZXNvbHZpbmcuXG4gICAgLy8gU2F2ZSByZXNvbHZlciwgc28gd2UgY2FuIHJlbW92ZSBsaXN0ZW5lciBpbiBjYXNlIGl0IHdhcyBleHRlcm5hbGx5XG4gICAgLy8gY2FuY2VsbGVkLlxuICAgIHJlc29sdmVyID0gKCkgPT4gcmVzb2x2ZSgpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZXIpO1xuICB9KS5jYXRjaChlID0+IHtcbiAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHRocm93IGU7XG4gIH0pO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEFwcGxpY2F0aW9uVmVyaWZpZXIsXG4gIEF1dGgsXG4gIENvbmZpcm1hdGlvblJlc3VsdCxcbiAgUGhvbmVJbmZvT3B0aW9ucyxcbiAgVXNlcixcbiAgVXNlckNyZWRlbnRpYWxcbn0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgc3RhcnRFbnJvbGxQaG9uZU1mYSB9IGZyb20gJy4uLy4uL2FwaS9hY2NvdW50X21hbmFnZW1lbnQvbWZhJztcbmltcG9ydCB7IHN0YXJ0U2lnbkluUGhvbmVNZmEgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IHNlbmRQaG9uZVZlcmlmaWNhdGlvbkNvZGUgfSBmcm9tICcuLi8uLi9hcGkvYXV0aGVudGljYXRpb24vc21zJztcbmltcG9ydCB7IEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2FwcGxpY2F0aW9uX3ZlcmlmaWVyJztcbmltcG9ydCB7IFBob25lQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9jb3JlL2NyZWRlbnRpYWxzL3Bob25lJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0TGlua2VkU3RhdHVzLCBfbGluayB9IGZyb20gJy4uLy4uL2NvcmUvdXNlci9saW5rX3VubGluayc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7XG4gIGxpbmtXaXRoQ3JlZGVudGlhbCxcbiAgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbCxcbiAgc2lnbkluV2l0aENyZWRlbnRpYWxcbn0gZnJvbSAnLi4vLi4vY29yZS9zdHJhdGVnaWVzL2NyZWRlbnRpYWwnO1xuaW1wb3J0IHtcbiAgTXVsdGlGYWN0b3JTZXNzaW9uSW1wbCxcbiAgTXVsdGlGYWN0b3JTZXNzaW9uVHlwZVxufSBmcm9tICcuLi8uLi9tZmEvbWZhX3Nlc3Npb24nO1xuaW1wb3J0IHsgVXNlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBSRUNBUFRDSEFfVkVSSUZJRVJfVFlQRSB9IGZyb20gJy4uL3JlY2FwdGNoYS9yZWNhcHRjaGFfdmVyaWZpZXInO1xuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi4vLi4vY29yZS9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBQcm92aWRlcklkIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG5pbnRlcmZhY2UgT25Db25maXJtYXRpb25DYWxsYmFjayB7XG4gIChjcmVkZW50aWFsOiBQaG9uZUF1dGhDcmVkZW50aWFsKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD47XG59XG5cbmNsYXNzIENvbmZpcm1hdGlvblJlc3VsdEltcGwgaW1wbGVtZW50cyBDb25maXJtYXRpb25SZXN1bHQge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSB2ZXJpZmljYXRpb25JZDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb25Db25maXJtYXRpb246IE9uQ29uZmlybWF0aW9uQ2FsbGJhY2tcbiAgKSB7fVxuXG4gIGNvbmZpcm0odmVyaWZpY2F0aW9uQ29kZTogc3RyaW5nKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICAgIGNvbnN0IGF1dGhDcmVkZW50aWFsID0gUGhvbmVBdXRoQ3JlZGVudGlhbC5fZnJvbVZlcmlmaWNhdGlvbihcbiAgICAgIHRoaXMudmVyaWZpY2F0aW9uSWQsXG4gICAgICB2ZXJpZmljYXRpb25Db2RlXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5vbkNvbmZpcm1hdGlvbihhdXRoQ3JlZGVudGlhbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBzaWducyBpbiB1c2luZyBhIHBob25lIG51bWJlci5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhpcyBtZXRob2Qgc2VuZHMgYSBjb2RlIHZpYSBTTVMgdG8gdGhlIGdpdmVuXG4gKiBwaG9uZSBudW1iZXIsIGFuZCByZXR1cm5zIGEge0BsaW5rIENvbmZpcm1hdGlvblJlc3VsdH0uIEFmdGVyIHRoZSB1c2VyXG4gKiBwcm92aWRlcyB0aGUgY29kZSBzZW50IHRvIHRoZWlyIHBob25lLCBjYWxsIHtAbGluayBDb25maXJtYXRpb25SZXN1bHQuY29uZmlybX1cbiAqIHdpdGggdGhlIGNvZGUgdG8gc2lnbiB0aGUgdXNlciBpbi5cbiAqXG4gKiBGb3IgYWJ1c2UgcHJldmVudGlvbiwgdGhpcyBtZXRob2QgYWxzbyByZXF1aXJlcyBhIHtAbGluayBBcHBsaWNhdGlvblZlcmlmaWVyfS5cbiAqIFRoaXMgU0RLIGluY2x1ZGVzIGEgcmVDQVBUQ0hBLWJhc2VkIGltcGxlbWVudGF0aW9uLCB7QGxpbmsgUmVjYXB0Y2hhVmVyaWZpZXJ9LlxuICogVGhpcyBmdW5jdGlvbiBjYW4gd29yayBvbiBvdGhlciBwbGF0Zm9ybXMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGVcbiAqIHtAbGluayBSZWNhcHRjaGFWZXJpZmllcn0gKGxpa2UgUmVhY3QgTmF0aXZlKSwgYnV0IHlvdSBuZWVkIHRvIHVzZSBhXG4gKiB0aGlyZC1wYXJ0eSB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0gaW1wbGVtZW50YXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vICdyZWNhcHRjaGEtY29udGFpbmVyJyBpcyB0aGUgSUQgb2YgYW4gZWxlbWVudCBpbiB0aGUgRE9NLlxuICogY29uc3QgYXBwbGljYXRpb25WZXJpZmllciA9IG5ldyBmaXJlYmFzZS5hdXRoLlJlY2FwdGNoYVZlcmlmaWVyKCdyZWNhcHRjaGEtY29udGFpbmVyJyk7XG4gKiBjb25zdCBjb25maXJtYXRpb25SZXN1bHQgPSBhd2FpdCBzaWduSW5XaXRoUGhvbmVOdW1iZXIoYXV0aCwgcGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xuICogLy8gT2J0YWluIGEgdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICogY29uc3QgY3JlZGVudGlhbCA9IGF3YWl0IGNvbmZpcm1hdGlvblJlc3VsdC5jb25maXJtKHZlcmlmaWNhdGlvbkNvZGUpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGF1dGggLSBUaGUge0BsaW5rIEF1dGh9IGluc3RhbmNlLlxuICogQHBhcmFtIHBob25lTnVtYmVyIC0gVGhlIHVzZXIncyBwaG9uZSBudW1iZXIgaW4gRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXG4gKiBAcGFyYW0gYXBwVmVyaWZpZXIgLSBUaGUge0BsaW5rIEFwcGxpY2F0aW9uVmVyaWZpZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhQaG9uZU51bWJlcihcbiAgYXV0aDogQXV0aCxcbiAgcGhvbmVOdW1iZXI6IHN0cmluZyxcbiAgYXBwVmVyaWZpZXI6IEFwcGxpY2F0aW9uVmVyaWZpZXJcbik6IFByb21pc2U8Q29uZmlybWF0aW9uUmVzdWx0PiB7XG4gIGNvbnN0IGF1dGhJbnRlcm5hbCA9IF9jYXN0QXV0aChhdXRoKTtcbiAgY29uc3QgdmVyaWZpY2F0aW9uSWQgPSBhd2FpdCBfdmVyaWZ5UGhvbmVOdW1iZXIoXG4gICAgYXV0aEludGVybmFsLFxuICAgIHBob25lTnVtYmVyLFxuICAgIGdldE1vZHVsYXJJbnN0YW5jZShhcHBWZXJpZmllciBhcyBBcHBsaWNhdGlvblZlcmlmaWVySW50ZXJuYWwpXG4gICk7XG4gIHJldHVybiBuZXcgQ29uZmlybWF0aW9uUmVzdWx0SW1wbCh2ZXJpZmljYXRpb25JZCwgY3JlZCA9PlxuICAgIHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGhJbnRlcm5hbCwgY3JlZClcbiAgKTtcbn1cblxuLyoqXG4gKiBMaW5rcyB0aGUgdXNlciBhY2NvdW50IHdpdGggdGhlIGdpdmVuIHBob25lIG51bWJlci5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHBob25lTnVtYmVyIC0gVGhlIHVzZXIncyBwaG9uZSBudW1iZXIgaW4gRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXG4gKiBAcGFyYW0gYXBwVmVyaWZpZXIgLSBUaGUge0BsaW5rIEFwcGxpY2F0aW9uVmVyaWZpZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxpbmtXaXRoUGhvbmVOdW1iZXIoXG4gIHVzZXI6IFVzZXIsXG4gIHBob25lTnVtYmVyOiBzdHJpbmcsXG4gIGFwcFZlcmlmaWVyOiBBcHBsaWNhdGlvblZlcmlmaWVyXG4pOiBQcm9taXNlPENvbmZpcm1hdGlvblJlc3VsdD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBhd2FpdCBfYXNzZXJ0TGlua2VkU3RhdHVzKGZhbHNlLCB1c2VySW50ZXJuYWwsIFByb3ZpZGVySWQuUEhPTkUpO1xuICBjb25zdCB2ZXJpZmljYXRpb25JZCA9IGF3YWl0IF92ZXJpZnlQaG9uZU51bWJlcihcbiAgICB1c2VySW50ZXJuYWwuYXV0aCxcbiAgICBwaG9uZU51bWJlcixcbiAgICBnZXRNb2R1bGFySW5zdGFuY2UoYXBwVmVyaWZpZXIgYXMgQXBwbGljYXRpb25WZXJpZmllckludGVybmFsKVxuICApO1xuICByZXR1cm4gbmV3IENvbmZpcm1hdGlvblJlc3VsdEltcGwodmVyaWZpY2F0aW9uSWQsIGNyZWQgPT5cbiAgICBsaW5rV2l0aENyZWRlbnRpYWwodXNlckludGVybmFsLCBjcmVkKVxuICApO1xufVxuXG4vKipcbiAqIFJlLWF1dGhlbnRpY2F0ZXMgYSB1c2VyIHVzaW5nIGEgZnJlc2ggcGhvbmUgY3JlZGVudGlhbC5cbiAqXG4gKiBAcmVtYXJrcyBVc2UgYmVmb3JlIG9wZXJhdGlvbnMgc3VjaCBhcyB7QGxpbmsgdXBkYXRlUGFzc3dvcmR9IHRoYXQgcmVxdWlyZSB0b2tlbnMgZnJvbSByZWNlbnQgc2lnbi1pbiBhdHRlbXB0cy5cbiAqXG4gKiBAcGFyYW0gdXNlciAtIFRoZSB1c2VyLlxuICogQHBhcmFtIHBob25lTnVtYmVyIC0gVGhlIHVzZXIncyBwaG9uZSBudW1iZXIgaW4gRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXG4gKiBAcGFyYW0gYXBwVmVyaWZpZXIgLSBUaGUge0BsaW5rIEFwcGxpY2F0aW9uVmVyaWZpZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYXV0aGVudGljYXRlV2l0aFBob25lTnVtYmVyKFxuICB1c2VyOiBVc2VyLFxuICBwaG9uZU51bWJlcjogc3RyaW5nLFxuICBhcHBWZXJpZmllcjogQXBwbGljYXRpb25WZXJpZmllclxuKTogUHJvbWlzZTxDb25maXJtYXRpb25SZXN1bHQ+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgY29uc3QgdmVyaWZpY2F0aW9uSWQgPSBhd2FpdCBfdmVyaWZ5UGhvbmVOdW1iZXIoXG4gICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgcGhvbmVOdW1iZXIsXG4gICAgZ2V0TW9kdWxhckluc3RhbmNlKGFwcFZlcmlmaWVyIGFzIEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbClcbiAgKTtcbiAgcmV0dXJuIG5ldyBDb25maXJtYXRpb25SZXN1bHRJbXBsKHZlcmlmaWNhdGlvbklkLCBjcmVkID0+XG4gICAgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbCh1c2VySW50ZXJuYWwsIGNyZWQpXG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZlcmlmaWNhdGlvbiBJRCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIFNNUyBjb2RlIHRoYXQgaXMgc2VudC5cbiAqXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfdmVyaWZ5UGhvbmVOdW1iZXIoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgb3B0aW9uczogUGhvbmVJbmZvT3B0aW9ucyB8IHN0cmluZyxcbiAgdmVyaWZpZXI6IEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcmVjYXB0Y2hhVG9rZW4gPSBhd2FpdCB2ZXJpZmllci52ZXJpZnkoKTtcblxuICB0cnkge1xuICAgIF9hc3NlcnQoXG4gICAgICB0eXBlb2YgcmVjYXB0Y2hhVG9rZW4gPT09ICdzdHJpbmcnLFxuICAgICAgYXV0aCxcbiAgICAgIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1JcbiAgICApO1xuICAgIF9hc3NlcnQoXG4gICAgICB2ZXJpZmllci50eXBlID09PSBSRUNBUFRDSEFfVkVSSUZJRVJfVFlQRSxcbiAgICAgIGF1dGgsXG4gICAgICBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SXG4gICAgKTtcblxuICAgIGxldCBwaG9uZUluZm9PcHRpb25zOiBQaG9uZUluZm9PcHRpb25zO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgcGhvbmVJbmZvT3B0aW9ucyA9IHtcbiAgICAgICAgcGhvbmVOdW1iZXI6IG9wdGlvbnNcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBob25lSW5mb09wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGlmICgnc2Vzc2lvbicgaW4gcGhvbmVJbmZvT3B0aW9ucykge1xuICAgICAgY29uc3Qgc2Vzc2lvbiA9IHBob25lSW5mb09wdGlvbnMuc2Vzc2lvbiBhcyBNdWx0aUZhY3RvclNlc3Npb25JbXBsO1xuXG4gICAgICBpZiAoJ3Bob25lTnVtYmVyJyBpbiBwaG9uZUluZm9PcHRpb25zKSB7XG4gICAgICAgIF9hc3NlcnQoXG4gICAgICAgICAgc2Vzc2lvbi50eXBlID09PSBNdWx0aUZhY3RvclNlc3Npb25UeXBlLkVOUk9MTCxcbiAgICAgICAgICBhdXRoLFxuICAgICAgICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdGFydEVucm9sbFBob25lTWZhKGF1dGgsIHtcbiAgICAgICAgICBpZFRva2VuOiBzZXNzaW9uLmNyZWRlbnRpYWwsXG4gICAgICAgICAgcGhvbmVFbnJvbGxtZW50SW5mbzoge1xuICAgICAgICAgICAgcGhvbmVOdW1iZXI6IHBob25lSW5mb09wdGlvbnMucGhvbmVOdW1iZXIsXG4gICAgICAgICAgICByZWNhcHRjaGFUb2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5waG9uZVNlc3Npb25JbmZvLnNlc3Npb25JbmZvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2Fzc2VydChcbiAgICAgICAgICBzZXNzaW9uLnR5cGUgPT09IE11bHRpRmFjdG9yU2Vzc2lvblR5cGUuU0lHTl9JTixcbiAgICAgICAgICBhdXRoLFxuICAgICAgICAgIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1JcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbWZhRW5yb2xsbWVudElkID1cbiAgICAgICAgICBwaG9uZUluZm9PcHRpb25zLm11bHRpRmFjdG9ySGludD8udWlkIHx8XG4gICAgICAgICAgcGhvbmVJbmZvT3B0aW9ucy5tdWx0aUZhY3RvclVpZDtcbiAgICAgICAgX2Fzc2VydChtZmFFbnJvbGxtZW50SWQsIGF1dGgsIEF1dGhFcnJvckNvZGUuTUlTU0lOR19NRkFfSU5GTyk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3RhcnRTaWduSW5QaG9uZU1mYShhdXRoLCB7XG4gICAgICAgICAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHNlc3Npb24uY3JlZGVudGlhbCxcbiAgICAgICAgICBtZmFFbnJvbGxtZW50SWQsXG4gICAgICAgICAgcGhvbmVTaWduSW5JbmZvOiB7XG4gICAgICAgICAgICByZWNhcHRjaGFUb2tlblxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5waG9uZVJlc3BvbnNlSW5mby5zZXNzaW9uSW5mbztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBzZXNzaW9uSW5mbyB9ID0gYXdhaXQgc2VuZFBob25lVmVyaWZpY2F0aW9uQ29kZShhdXRoLCB7XG4gICAgICAgIHBob25lTnVtYmVyOiBwaG9uZUluZm9PcHRpb25zLnBob25lTnVtYmVyLFxuICAgICAgICByZWNhcHRjaGFUb2tlblxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2Vzc2lvbkluZm87XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHZlcmlmaWVyLl9yZXNldCgpO1xuICB9XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgdXNlcidzIHBob25lIG51bWJlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiAvLyAncmVjYXB0Y2hhLWNvbnRhaW5lcicgaXMgdGhlIElEIG9mIGFuIGVsZW1lbnQgaW4gdGhlIERPTS5cbiAqIGNvbnN0IGFwcGxpY2F0aW9uVmVyaWZpZXIgPSBuZXcgUmVjYXB0Y2hhVmVyaWZpZXIoJ3JlY2FwdGNoYS1jb250YWluZXInKTtcbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IFBob25lQXV0aFByb3ZpZGVyKGF1dGgpO1xuICogY29uc3QgdmVyaWZpY2F0aW9uSWQgPSBhd2FpdCBwcm92aWRlci52ZXJpZnlQaG9uZU51bWJlcignKzE2NTA1NTUwMTAxJywgYXBwbGljYXRpb25WZXJpZmllcik7XG4gKiAvLyBPYnRhaW4gdGhlIHZlcmlmaWNhdGlvbkNvZGUgZnJvbSB0aGUgdXNlci5cbiAqIGNvbnN0IHBob25lQ3JlZGVudGlhbCA9IFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xuICogYXdhaXQgdXBkYXRlUGhvbmVOdW1iZXIodXNlciwgcGhvbmVDcmVkZW50aWFsKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIEEgY3JlZGVudGlhbCBhdXRoZW50aWNhdGluZyB0aGUgbmV3IHBob25lIG51bWJlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVQaG9uZU51bWJlcihcbiAgdXNlcjogVXNlcixcbiAgY3JlZGVudGlhbDogUGhvbmVBdXRoQ3JlZGVudGlhbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IF9saW5rKGdldE1vZHVsYXJJbnN0YW5jZSh1c2VyKSBhcyBVc2VySW50ZXJuYWwsIGNyZWRlbnRpYWwpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEF1dGgsXG4gIFBob25lSW5mb09wdGlvbnMsXG4gIEFwcGxpY2F0aW9uVmVyaWZpZXIsXG4gIFVzZXJDcmVkZW50aWFsXG59IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmltcG9ydCB7IFNpZ25JbldpdGhQaG9uZU51bWJlclJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL3Ntcyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvblZlcmlmaWVySW50ZXJuYWwgYXMgQXBwbGljYXRpb25WZXJpZmllckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXBwbGljYXRpb25fdmVyaWZpZXInO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIGFzIEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCBhcyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBQaG9uZUF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vY29yZS9jcmVkZW50aWFscy9waG9uZSc7XG5pbXBvcnQgeyBfdmVyaWZ5UGhvbmVOdW1iZXIgfSBmcm9tICcuLi9zdHJhdGVnaWVzL3Bob25lJztcbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uLy4uL2NvcmUvYXV0aC9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IEZpcmViYXNlRXJyb3IsIGdldE1vZHVsYXJJbnN0YW5jZSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbW9kZWwvaWRfdG9rZW4nO1xuaW1wb3J0IHsgUHJvdmlkZXJJZCwgU2lnbkluTWV0aG9kIH0gZnJvbSAnLi4vLi4vbW9kZWwvZW51bXMnO1xuXG4vKipcbiAqIFByb3ZpZGVyIGZvciBnZW5lcmF0aW5nIGFuIHtAbGluayBQaG9uZUF1dGhDcmVkZW50aWFsfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gJ3JlY2FwdGNoYS1jb250YWluZXInIGlzIHRoZSBJRCBvZiBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gKiBjb25zdCBhcHBsaWNhdGlvblZlcmlmaWVyID0gbmV3IFJlY2FwdGNoYVZlcmlmaWVyKCdyZWNhcHRjaGEtY29udGFpbmVyJyk7XG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBQaG9uZUF1dGhQcm92aWRlcihhdXRoKTtcbiAqIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gYXdhaXQgcHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXIoJysxNjUwNTU1MDEwMScsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xuICogLy8gT2J0YWluIHRoZSB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXG4gKiBjb25zdCBwaG9uZUNyZWRlbnRpYWwgPSBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsKHZlcmlmaWNhdGlvbklkLCB2ZXJpZmljYXRpb25Db2RlKTtcbiAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgc2lnbkluV2l0aENyZWRlbnRpYWwoYXV0aCwgcGhvbmVDcmVkZW50aWFsKTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFBob25lQXV0aFByb3ZpZGVyIHtcbiAgLyoqIEFsd2F5cyBzZXQgdG8ge0BsaW5rIFByb3ZpZGVySWR9LlBIT05FLiAqL1xuICBzdGF0aWMgcmVhZG9ubHkgUFJPVklERVJfSUQ6ICdwaG9uZScgPSBQcm92aWRlcklkLlBIT05FO1xuICAvKiogQWx3YXlzIHNldCB0byB7QGxpbmsgU2lnbkluTWV0aG9kfS5QSE9ORS4gKi9cbiAgc3RhdGljIHJlYWRvbmx5IFBIT05FX1NJR05fSU5fTUVUSE9EOiAncGhvbmUnID0gU2lnbkluTWV0aG9kLlBIT05FO1xuXG4gIC8qKiBBbHdheXMgc2V0IHRvIHtAbGluayBQcm92aWRlcklkfS5QSE9ORS4gKi9cbiAgcmVhZG9ubHkgcHJvdmlkZXJJZCA9IFBob25lQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEO1xuICBwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbDtcblxuICAvKipcbiAgICogQHBhcmFtIGF1dGggLSBUaGUgRmlyZWJhc2Uge0BsaW5rIEF1dGh9IGluc3RhbmNlIGluIHdoaWNoIHNpZ24taW5zIHNob3VsZCBvY2N1ci5cbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGF1dGg6IEF1dGgpIHtcbiAgICB0aGlzLmF1dGggPSBfY2FzdEF1dGgoYXV0aCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogU3RhcnRzIGEgcGhvbmUgbnVtYmVyIGF1dGhlbnRpY2F0aW9uIGZsb3cgYnkgc2VuZGluZyBhIHZlcmlmaWNhdGlvbiBjb2RlIHRvIHRoZSBnaXZlbiBwaG9uZVxuICAgKiBudW1iZXIuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogY29uc3QgcHJvdmlkZXIgPSBuZXcgUGhvbmVBdXRoUHJvdmlkZXIoYXV0aCk7XG4gICAqIGNvbnN0IHZlcmlmaWNhdGlvbklkID0gYXdhaXQgcHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXIocGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xuICAgKiAvLyBPYnRhaW4gdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICAgKiBjb25zdCBhdXRoQ3JlZGVudGlhbCA9IFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIHZlcmlmaWNhdGlvbkNvZGUpO1xuICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGF3YWl0IHNpZ25JbldpdGhDcmVkZW50aWFsKGF1dGgsIGF1dGhDcmVkZW50aWFsKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIEFuIGFsdGVybmF0aXZlIGZsb3cgaXMgcHJvdmlkZWQgdXNpbmcgdGhlIGBzaWduSW5XaXRoUGhvbmVOdW1iZXJgIG1ldGhvZC5cbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBjb25maXJtYXRpb25SZXN1bHQgPSBzaWduSW5XaXRoUGhvbmVOdW1iZXIoYXV0aCwgcGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpO1xuICAgKiAvLyBPYnRhaW4gdmVyaWZpY2F0aW9uQ29kZSBmcm9tIHRoZSB1c2VyLlxuICAgKiBjb25zdCB1c2VyQ3JlZGVudGlhbCA9IGNvbmZpcm1hdGlvblJlc3VsdC5jb25maXJtKHZlcmlmaWNhdGlvbkNvZGUpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHBob25lSW5mb09wdGlvbnMgLSBUaGUgdXNlcidzIHtAbGluayBQaG9uZUluZm9PcHRpb25zfS4gVGhlIHBob25lIG51bWJlciBzaG91bGQgYmUgaW5cbiAgICogRS4xNjQgZm9ybWF0IChlLmcuICsxNjUwNTU1MDEwMSkuXG4gICAqIEBwYXJhbSBhcHBsaWNhdGlvblZlcmlmaWVyIC0gRm9yIGFidXNlIHByZXZlbnRpb24sIHRoaXMgbWV0aG9kIGFsc28gcmVxdWlyZXMgYVxuICAgKiB7QGxpbmsgQXBwbGljYXRpb25WZXJpZmllcn0uIFRoaXMgU0RLIGluY2x1ZGVzIGEgcmVDQVBUQ0hBLWJhc2VkIGltcGxlbWVudGF0aW9uLFxuICAgKiB7QGxpbmsgUmVjYXB0Y2hhVmVyaWZpZXJ9LlxuICAgKlxuICAgKiBAcmV0dXJucyBBIFByb21pc2UgZm9yIGEgdmVyaWZpY2F0aW9uIElEIHRoYXQgY2FuIGJlIHBhc3NlZCB0b1xuICAgKiB7QGxpbmsgUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbH0gdG8gaWRlbnRpZnkgdGhpcyBmbG93Li5cbiAgICovXG4gIHZlcmlmeVBob25lTnVtYmVyKFxuICAgIHBob25lT3B0aW9uczogUGhvbmVJbmZvT3B0aW9ucyB8IHN0cmluZyxcbiAgICBhcHBsaWNhdGlvblZlcmlmaWVyOiBBcHBsaWNhdGlvblZlcmlmaWVyXG4gICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIF92ZXJpZnlQaG9uZU51bWJlcihcbiAgICAgIHRoaXMuYXV0aCxcbiAgICAgIHBob25lT3B0aW9ucyxcbiAgICAgIGdldE1vZHVsYXJJbnN0YW5jZShhcHBsaWNhdGlvblZlcmlmaWVyIGFzIEFwcGxpY2F0aW9uVmVyaWZpZXJJbnRlcm5hbClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwsIGdpdmVuIHRoZSB2ZXJpZmljYXRpb24gSUQgZnJvbVxuICAgKiB7QGxpbmsgUGhvbmVBdXRoUHJvdmlkZXIudmVyaWZ5UGhvbmVOdW1iZXJ9IGFuZCB0aGUgY29kZSB0aGF0IHdhcyBzZW50IHRvIHRoZSB1c2VyJ3NcbiAgICogbW9iaWxlIGRldmljZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCBwcm92aWRlciA9IG5ldyBQaG9uZUF1dGhQcm92aWRlcihhdXRoKTtcbiAgICogY29uc3QgdmVyaWZpY2F0aW9uSWQgPSBwcm92aWRlci52ZXJpZnlQaG9uZU51bWJlcihwaG9uZU51bWJlciwgYXBwbGljYXRpb25WZXJpZmllcik7XG4gICAqIC8vIE9idGFpbiB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXG4gICAqIGNvbnN0IGF1dGhDcmVkZW50aWFsID0gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSk7XG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gc2lnbkluV2l0aENyZWRlbnRpYWwoYXV0aCwgYXV0aENyZWRlbnRpYWwpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogQW4gYWx0ZXJuYXRpdmUgZmxvdyBpcyBwcm92aWRlZCB1c2luZyB0aGUgYHNpZ25JbldpdGhQaG9uZU51bWJlcmAgbWV0aG9kLlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGNvbmZpcm1hdGlvblJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhQaG9uZU51bWJlcihhdXRoLCBwaG9uZU51bWJlciwgYXBwbGljYXRpb25WZXJpZmllcik7XG4gICAqIC8vIE9idGFpbiB2ZXJpZmljYXRpb25Db2RlIGZyb20gdGhlIHVzZXIuXG4gICAqIGNvbnN0IHVzZXJDcmVkZW50aWFsID0gYXdhaXQgY29uZmlybWF0aW9uUmVzdWx0LmNvbmZpcm0odmVyaWZpY2F0aW9uQ29kZSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdmVyaWZpY2F0aW9uSWQgLSBUaGUgdmVyaWZpY2F0aW9uIElEIHJldHVybmVkIGZyb20ge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLnZlcmlmeVBob25lTnVtYmVyfS5cbiAgICogQHBhcmFtIHZlcmlmaWNhdGlvbkNvZGUgLSBUaGUgdmVyaWZpY2F0aW9uIGNvZGUgc2VudCB0byB0aGUgdXNlcidzIG1vYmlsZSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSBhdXRoIHByb3ZpZGVyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbChcbiAgICB2ZXJpZmljYXRpb25JZDogc3RyaW5nLFxuICAgIHZlcmlmaWNhdGlvbkNvZGU6IHN0cmluZ1xuICApOiBQaG9uZUF1dGhDcmVkZW50aWFsIHtcbiAgICByZXR1cm4gUGhvbmVBdXRoQ3JlZGVudGlhbC5fZnJvbVZlcmlmaWNhdGlvbihcbiAgICAgIHZlcmlmaWNhdGlvbklkLFxuICAgICAgdmVyaWZpY2F0aW9uQ29kZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGFuIHtAbGluayBBdXRoQ3JlZGVudGlhbH0gZnJvbSBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0uXG4gICAqIEBwYXJhbSB1c2VyQ3JlZGVudGlhbCAtIFRoZSB1c2VyIGNyZWRlbnRpYWwuXG4gICAqL1xuICBzdGF0aWMgY3JlZGVudGlhbEZyb21SZXN1bHQoXG4gICAgdXNlckNyZWRlbnRpYWw6IFVzZXJDcmVkZW50aWFsXG4gICk6IEF1dGhDcmVkZW50aWFsIHwgbnVsbCB7XG4gICAgY29uc3QgY3JlZGVudGlhbCA9IHVzZXJDcmVkZW50aWFsIGFzIFVzZXJDcmVkZW50aWFsSW50ZXJuYWw7XG4gICAgcmV0dXJuIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tVGFnZ2VkT2JqZWN0KGNyZWRlbnRpYWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4ge0BsaW5rIEF1dGhDcmVkZW50aWFsfSB3aGVuIHBhc3NlZCBhbiBlcnJvci5cbiAgICpcbiAgICogQHJlbWFya3NcbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd29ya3MgZm9yIGVycm9ycyBsaWtlXG4gICAqIGBhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWxzYC4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gICAqIHJlY292ZXJpbmcgd2hlbiBhdHRlbXB0aW5nIHRvIHNldCBhIHVzZXIncyBwaG9uZSBudW1iZXIgYnV0IHRoZSBudW1iZXJcbiAgICogaW4gcXVlc3Rpb24gaXMgYWxyZWFkeSB0aWVkIHRvIGFub3RoZXIgYWNjb3VudC4gRm9yIGV4YW1wbGUsIHRoZSBmb2xsb3dpbmdcbiAgICogY29kZSB0cmllcyB0byB1cGRhdGUgdGhlIGN1cnJlbnQgdXNlcidzIHBob25lIG51bWJlciwgYW5kIGlmIHRoYXRcbiAgICogZmFpbHMsIGxpbmtzIHRoZSB1c2VyIHdpdGggdGhlIGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoYXQgbnVtYmVyOlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBjb25zdCBwcm92aWRlciA9IG5ldyBQaG9uZUF1dGhQcm92aWRlcihhdXRoKTtcbiAgICogY29uc3QgdmVyaWZpY2F0aW9uSWQgPSBhd2FpdCBwcm92aWRlci52ZXJpZnlQaG9uZU51bWJlcihudW1iZXIsIHZlcmlmaWVyKTtcbiAgICogdHJ5IHtcbiAgICogICBjb25zdCBjb2RlID0gJyc7IC8vIFByb21wdCB0aGUgdXNlciBmb3IgdGhlIHZlcmlmaWNhdGlvbiBjb2RlXG4gICAqICAgYXdhaXQgdXBkYXRlUGhvbmVOdW1iZXIoXG4gICAqICAgICAgIGF1dGguY3VycmVudFVzZXIsXG4gICAqICAgICAgIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwodmVyaWZpY2F0aW9uSWQsIGNvZGUpKTtcbiAgICogfSBjYXRjaCAoZSkge1xuICAgKiAgIGlmIChlLmNvZGUgPT09ICdhdXRoL2FjY291bnQtZXhpc3RzLXdpdGgtZGlmZmVyZW50LWNyZWRlbnRpYWwnKSB7XG4gICAqICAgICBjb25zdCBjcmVkID0gUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbEZyb21FcnJvcihlKTtcbiAgICogICAgIGF3YWl0IGxpbmtXaXRoQ3JlZGVudGlhbChhdXRoLmN1cnJlbnRVc2VyLCBjcmVkKTtcbiAgICogICB9XG4gICAqIH1cbiAgICpcbiAgICogLy8gQXQgdGhpcyBwb2ludCwgYXV0aC5jdXJyZW50VXNlci5waG9uZU51bWJlciA9PT0gbnVtYmVyLlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGVycm9yIC0gVGhlIGVycm9yIHRvIGdlbmVyYXRlIGEgY3JlZGVudGlhbCBmcm9tLlxuICAgKi9cbiAgc3RhdGljIGNyZWRlbnRpYWxGcm9tRXJyb3IoZXJyb3I6IEZpcmViYXNlRXJyb3IpOiBBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIHJldHVybiBQaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdChcbiAgICAgIChlcnJvci5jdXN0b21EYXRhIHx8IHt9KSBhcyBUYWdnZWRXaXRoVG9rZW5SZXNwb25zZVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVkZW50aWFsRnJvbVRhZ2dlZE9iamVjdCh7XG4gICAgX3Rva2VuUmVzcG9uc2U6IHRva2VuUmVzcG9uc2VcbiAgfTogVGFnZ2VkV2l0aFRva2VuUmVzcG9uc2UpOiBBdXRoQ3JlZGVudGlhbCB8IG51bGwge1xuICAgIGlmICghdG9rZW5SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgcGhvbmVOdW1iZXIsIHRlbXBvcmFyeVByb29mIH0gPVxuICAgICAgdG9rZW5SZXNwb25zZSBhcyBTaWduSW5XaXRoUGhvbmVOdW1iZXJSZXNwb25zZTtcbiAgICBpZiAocGhvbmVOdW1iZXIgJiYgdGVtcG9yYXJ5UHJvb2YpIHtcbiAgICAgIHJldHVybiBQaG9uZUF1dGhDcmVkZW50aWFsLl9mcm9tVG9rZW5SZXNwb25zZShcbiAgICAgICAgcGhvbmVOdW1iZXIsXG4gICAgICAgIHRlbXBvcmFyeVByb29mXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFBvcHVwUmVkaXJlY3RSZXNvbHZlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvcG9wdXBfcmVkaXJlY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi9hc3NlcnQnO1xuaW1wb3J0IHsgX2dldEluc3RhbmNlIH0gZnJvbSAnLi9pbnN0YW50aWF0b3InO1xuXG4vKipcbiAqIENob29zZXMgYSBwb3B1cC9yZWRpcmVjdCByZXNvbHZlciB0byB1c2UuIFRoaXMgcHJlZmVycyB0aGUgb3ZlcnJpZGUgKHdoaWNoXG4gKiBpcyBkaXJlY3RseSBwYXNzZWQgaW4pLCBhbmQgZmFsbHMgYmFjayB0byB0aGUgcHJvcGVydHkgc2V0IG9uIHRoZSBhdXRoXG4gKiBvYmplY3QuIElmIG5laXRoZXIgYXJlIGF2YWlsYWJsZSwgdGhpcyBmdW5jdGlvbiBlcnJvcnMgdy8gYW4gYXJndW1lbnQgZXJyb3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfd2l0aERlZmF1bHRSZXNvbHZlcihcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICByZXNvbHZlck92ZXJyaWRlOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgfCB1bmRlZmluZWRcbik6IFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsIHtcbiAgaWYgKHJlc29sdmVyT3ZlcnJpZGUpIHtcbiAgICByZXR1cm4gX2dldEluc3RhbmNlKHJlc29sdmVyT3ZlcnJpZGUpO1xuICB9XG5cbiAgX2Fzc2VydChhdXRoLl9wb3B1cFJlZGlyZWN0UmVzb2x2ZXIsIGF1dGgsIEF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IpO1xuXG4gIHJldHVybiBhdXRoLl9wb3B1cFJlZGlyZWN0UmVzb2x2ZXI7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgc2lnbkluV2l0aElkcCxcbiAgU2lnbkluV2l0aElkcFJlcXVlc3Rcbn0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL2lkcCc7XG5pbXBvcnQgeyBQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vYXBpL2F1dGhlbnRpY2F0aW9uL21mYSc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IElkVG9rZW5SZXNwb25zZSB9IGZyb20gJy4uLy4uL21vZGVsL2lkX3Rva2VuJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCwgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9jcmVkZW50aWFscyc7XG5pbXBvcnQgeyBfbGluayBhcyBfbGlua1VzZXIgfSBmcm9tICcuLi91c2VyL2xpbmtfdW5saW5rJztcbmltcG9ydCB7IF9yZWF1dGhlbnRpY2F0ZSB9IGZyb20gJy4uL3VzZXIvcmVhdXRoZW50aWNhdGUnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9zaWduSW5XaXRoQ3JlZGVudGlhbCB9IGZyb20gJy4vY3JlZGVudGlhbCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IFByb3ZpZGVySWQgfSBmcm9tICcuLi8uLi9tb2RlbC9lbnVtcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWRwVGFza1BhcmFtcyB7XG4gIGF1dGg6IEF1dGhJbnRlcm5hbDtcbiAgcmVxdWVzdFVyaTogc3RyaW5nO1xuICBzZXNzaW9uSWQ/OiBzdHJpbmc7XG4gIHRlbmFudElkPzogc3RyaW5nO1xuICBwb3N0Qm9keT86IHN0cmluZztcbiAgcGVuZGluZ1Rva2VuPzogc3RyaW5nO1xuICB1c2VyPzogVXNlckludGVybmFsO1xuICBieXBhc3NBdXRoU3RhdGU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBJZHBUYXNrID0gKFxuICBwYXJhbXM6IElkcFRhc2tQYXJhbXNcbikgPT4gUHJvbWlzZTxVc2VyQ3JlZGVudGlhbEludGVybmFsPjtcblxuY2xhc3MgSWRwQ3JlZGVudGlhbCBleHRlbmRzIEF1dGhDcmVkZW50aWFsIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcGFyYW1zOiBJZHBUYXNrUGFyYW1zKSB7XG4gICAgc3VwZXIoUHJvdmlkZXJJZC5DVVNUT00sIFByb3ZpZGVySWQuQ1VTVE9NKTtcbiAgfVxuXG4gIF9nZXRJZFRva2VuUmVzcG9uc2UoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxQaG9uZU9yT2F1dGhUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgdGhpcy5fYnVpbGRJZHBSZXF1ZXN0KCkpO1xuICB9XG5cbiAgX2xpbmtUb0lkVG9rZW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIGlkVG9rZW46IHN0cmluZ1xuICApOiBQcm9taXNlPElkVG9rZW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBzaWduSW5XaXRoSWRwKGF1dGgsIHRoaXMuX2J1aWxkSWRwUmVxdWVzdChpZFRva2VuKSk7XG4gIH1cblxuICBfZ2V0UmVhdXRoZW50aWNhdGlvblJlc29sdmVyKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8SWRUb2tlblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHNpZ25JbldpdGhJZHAoYXV0aCwgdGhpcy5fYnVpbGRJZHBSZXF1ZXN0KCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYnVpbGRJZHBSZXF1ZXN0KGlkVG9rZW4/OiBzdHJpbmcpOiBTaWduSW5XaXRoSWRwUmVxdWVzdCB7XG4gICAgY29uc3QgcmVxdWVzdDogU2lnbkluV2l0aElkcFJlcXVlc3QgPSB7XG4gICAgICByZXF1ZXN0VXJpOiB0aGlzLnBhcmFtcy5yZXF1ZXN0VXJpLFxuICAgICAgc2Vzc2lvbklkOiB0aGlzLnBhcmFtcy5zZXNzaW9uSWQsXG4gICAgICBwb3N0Qm9keTogdGhpcy5wYXJhbXMucG9zdEJvZHksXG4gICAgICB0ZW5hbnRJZDogdGhpcy5wYXJhbXMudGVuYW50SWQsXG4gICAgICBwZW5kaW5nVG9rZW46IHRoaXMucGFyYW1zLnBlbmRpbmdUb2tlbixcbiAgICAgIHJldHVyblNlY3VyZVRva2VuOiB0cnVlLFxuICAgICAgcmV0dXJuSWRwQ3JlZGVudGlhbDogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoaWRUb2tlbikge1xuICAgICAgcmVxdWVzdC5pZFRva2VuID0gaWRUb2tlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX3NpZ25JbihcbiAgcGFyYW1zOiBJZHBUYXNrUGFyYW1zXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+IHtcbiAgcmV0dXJuIF9zaWduSW5XaXRoQ3JlZGVudGlhbChcbiAgICBwYXJhbXMuYXV0aCxcbiAgICBuZXcgSWRwQ3JlZGVudGlhbChwYXJhbXMpLFxuICAgIHBhcmFtcy5ieXBhc3NBdXRoU3RhdGVcbiAgKSBhcyBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3JlYXV0aChcbiAgcGFyYW1zOiBJZHBUYXNrUGFyYW1zXG4pOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWw+IHtcbiAgY29uc3QgeyBhdXRoLCB1c2VyIH0gPSBwYXJhbXM7XG4gIF9hc3NlcnQodXNlciwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIHJldHVybiBfcmVhdXRoZW50aWNhdGUoXG4gICAgdXNlcixcbiAgICBuZXcgSWRwQ3JlZGVudGlhbChwYXJhbXMpLFxuICAgIHBhcmFtcy5ieXBhc3NBdXRoU3RhdGVcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9saW5rKFxuICBwYXJhbXM6IElkcFRhc2tQYXJhbXNcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbD4ge1xuICBjb25zdCB7IGF1dGgsIHVzZXIgfSA9IHBhcmFtcztcbiAgX2Fzc2VydCh1c2VyLCBhdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgcmV0dXJuIF9saW5rVXNlcih1c2VyLCBuZXcgSWRwQ3JlZGVudGlhbChwYXJhbXMpLCBwYXJhbXMuYnlwYXNzQXV0aFN0YXRlKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5pbXBvcnQge1xuICBBdXRoRXZlbnQsXG4gIEF1dGhFdmVudENvbnN1bWVyLFxuICBBdXRoRXZlbnRUeXBlLFxuICBFdmVudE1hbmFnZXIsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsXG59IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCwgVXNlckNyZWRlbnRpYWxJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBkZWJ1Z0Fzc2VydCwgX2ZhaWwgfSBmcm9tICcuLi91dGlsL2Fzc2VydCc7XG5pbXBvcnQge1xuICBfbGluayxcbiAgX3JlYXV0aCxcbiAgX3NpZ25JbixcbiAgSWRwVGFzayxcbiAgSWRwVGFza1BhcmFtc1xufSBmcm9tICcuLi9zdHJhdGVnaWVzL2lkcCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcblxuaW50ZXJmYWNlIFBlbmRpbmdQcm9taXNlIHtcbiAgcmVzb2x2ZTogKGNyZWQ6IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfCBudWxsKSA9PiB2b2lkO1xuICByZWplY3Q6IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG59XG5cbi8qKlxuICogUG9wdXAgZXZlbnQgbWFuYWdlci4gSGFuZGxlcyB0aGUgcG9wdXAncyBlbnRpcmUgbGlmZWN5Y2xlOyBsaXN0ZW5zIHRvIGF1dGhcbiAqIGV2ZW50c1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uXG4gIGltcGxlbWVudHMgQXV0aEV2ZW50Q29uc3VtZXIge1xuICBwcml2YXRlIHBlbmRpbmdQcm9taXNlOiBQZW5kaW5nUHJvbWlzZSB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyIHwgbnVsbCA9IG51bGw7XG4gIHJlYWRvbmx5IGZpbHRlcjogQXV0aEV2ZW50VHlwZVtdO1xuXG4gIGFic3RyYWN0IGV2ZW50SWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBmaWx0ZXI6IEF1dGhFdmVudFR5cGUgfCBBdXRoRXZlbnRUeXBlW10sXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHJlc29sdmVyOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCxcbiAgICBwcm90ZWN0ZWQgdXNlcj86IFVzZXJJbnRlcm5hbCxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgYnlwYXNzQXV0aFN0YXRlID0gZmFsc2VcbiAgKSB7XG4gICAgdGhpcy5maWx0ZXIgPSBBcnJheS5pc0FycmF5KGZpbHRlcikgPyBmaWx0ZXIgOiBbZmlsdGVyXTtcbiAgfVxuXG4gIGFic3RyYWN0IG9uRXhlY3V0aW9uKCk6IFByb21pc2U8dm9pZD47XG5cbiAgZXhlY3V0ZSgpOiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfCBudWxsPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfCBudWxsPihcbiAgICAgIGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5wZW5kaW5nUHJvbWlzZSA9IHsgcmVzb2x2ZSwgcmVqZWN0IH07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IGF3YWl0IHRoaXMucmVzb2x2ZXIuX2luaXRpYWxpemUodGhpcy5hdXRoKTtcbiAgICAgICAgICBhd2FpdCB0aGlzLm9uRXhlY3V0aW9uKCk7XG4gICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIucmVnaXN0ZXJDb25zdW1lcih0aGlzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIG9uQXV0aEV2ZW50KGV2ZW50OiBBdXRoRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IHVybFJlc3BvbnNlLCBzZXNzaW9uSWQsIHBvc3RCb2R5LCB0ZW5hbnRJZCwgZXJyb3IsIHR5cGUgfSA9IGV2ZW50O1xuICAgIGlmIChlcnJvcikge1xuICAgICAgdGhpcy5yZWplY3QoZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmFtczogSWRwVGFza1BhcmFtcyA9IHtcbiAgICAgIGF1dGg6IHRoaXMuYXV0aCxcbiAgICAgIHJlcXVlc3RVcmk6IHVybFJlc3BvbnNlISxcbiAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkISxcbiAgICAgIHRlbmFudElkOiB0ZW5hbnRJZCB8fCB1bmRlZmluZWQsXG4gICAgICBwb3N0Qm9keTogcG9zdEJvZHkgfHwgdW5kZWZpbmVkLFxuICAgICAgdXNlcjogdGhpcy51c2VyLFxuICAgICAgYnlwYXNzQXV0aFN0YXRlOiB0aGlzLmJ5cGFzc0F1dGhTdGF0ZVxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5yZXNvbHZlKGF3YWl0IHRoaXMuZ2V0SWRwVGFzayh0eXBlKShwYXJhbXMpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLnJlamVjdChlKTtcbiAgICB9XG4gIH1cblxuICBvbkVycm9yKGVycm9yOiBGaXJlYmFzZUVycm9yKTogdm9pZCB7XG4gICAgdGhpcy5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJZHBUYXNrKHR5cGU6IEF1dGhFdmVudFR5cGUpOiBJZHBUYXNrIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5TSUdOX0lOX1ZJQV9QT1BVUDpcbiAgICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5TSUdOX0lOX1ZJQV9SRURJUkVDVDpcbiAgICAgICAgcmV0dXJuIF9zaWduSW47XG4gICAgICBjYXNlIEF1dGhFdmVudFR5cGUuTElOS19WSUFfUE9QVVA6XG4gICAgICBjYXNlIEF1dGhFdmVudFR5cGUuTElOS19WSUFfUkVESVJFQ1Q6XG4gICAgICAgIHJldHVybiBfbGluaztcbiAgICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5SRUFVVEhfVklBX1BPUFVQOlxuICAgICAgY2FzZSBBdXRoRXZlbnRUeXBlLlJFQVVUSF9WSUFfUkVESVJFQ1Q6XG4gICAgICAgIHJldHVybiBfcmVhdXRoO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgX2ZhaWwodGhpcy5hdXRoLCBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVzb2x2ZShjcmVkOiBVc2VyQ3JlZGVudGlhbEludGVybmFsIHwgbnVsbCk6IHZvaWQge1xuICAgIGRlYnVnQXNzZXJ0KHRoaXMucGVuZGluZ1Byb21pc2UsICdQZW5kaW5nIHByb21pc2Ugd2FzIG5ldmVyIHNldCcpO1xuICAgIHRoaXMucGVuZGluZ1Byb21pc2UucmVzb2x2ZShjcmVkKTtcbiAgICB0aGlzLnVucmVnaXN0ZXJBbmRDbGVhblVwKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVqZWN0KGVycm9yOiBFcnJvcik6IHZvaWQge1xuICAgIGRlYnVnQXNzZXJ0KHRoaXMucGVuZGluZ1Byb21pc2UsICdQZW5kaW5nIHByb21pc2Ugd2FzIG5ldmVyIHNldCcpO1xuICAgIHRoaXMucGVuZGluZ1Byb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB0aGlzLnVucmVnaXN0ZXJBbmRDbGVhblVwKCk7XG4gIH1cblxuICBwcml2YXRlIHVucmVnaXN0ZXJBbmRDbGVhblVwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmV2ZW50TWFuYWdlcikge1xuICAgICAgdGhpcy5ldmVudE1hbmFnZXIudW5yZWdpc3RlckNvbnN1bWVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ1Byb21pc2UgPSBudWxsO1xuICAgIHRoaXMuY2xlYW5VcCgpO1xuICB9XG5cbiAgYWJzdHJhY3QgY2xlYW5VcCgpOiB2b2lkO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEF1dGgsXG4gIEF1dGhQcm92aWRlcixcbiAgUG9wdXBSZWRpcmVjdFJlc29sdmVyLFxuICBVc2VyLFxuICBVc2VyQ3JlZGVudGlhbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBfY2FzdEF1dGggfSBmcm9tICcuLi8uLi9jb3JlL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0LCBkZWJ1Z0Fzc2VydCwgX2NyZWF0ZUVycm9yLCBfYXNzZXJ0SW5zdGFuY2VPZiB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9hc3NlcnQnO1xuaW1wb3J0IHsgRGVsYXkgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZGVsYXknO1xuaW1wb3J0IHsgX2dlbmVyYXRlRXZlbnRJZCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9ldmVudF9pZCc7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7XG4gIEF1dGhFdmVudFR5cGUsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsXG59IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgX3dpdGhEZWZhdWx0UmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvcmVzb2x2ZXInO1xuaW1wb3J0IHsgQXV0aFBvcHVwIH0gZnJvbSAnLi4vdXRpbC9wb3B1cCc7XG5pbXBvcnQgeyBBYnN0cmFjdFBvcHVwUmVkaXJlY3RPcGVyYXRpb24gfSBmcm9tICcuLi8uLi9jb3JlL3N0cmF0ZWdpZXMvYWJzdHJhY3RfcG9wdXBfcmVkaXJlY3Rfb3BlcmF0aW9uJztcbmltcG9ydCB7IEZlZGVyYXRlZEF1dGhQcm92aWRlciB9IGZyb20gJy4uLy4uL2NvcmUvcHJvdmlkZXJzL2ZlZGVyYXRlZCc7XG5pbXBvcnQgeyBnZXRNb2R1bGFySW5zdGFuY2UgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbi8qXG4gKiBUaGUgZXZlbnQgdGltZW91dCBpcyB0aGUgc2FtZSBvbiBtb2JpbGUgYW5kIGRlc2t0b3AsIG5vIG5lZWQgZm9yIERlbGF5LlxuICovXG5leHBvcnQgY29uc3QgZW51bSBfVGltZW91dCB7XG4gIEFVVEhfRVZFTlQgPSAyMDAwXG59XG5leHBvcnQgY29uc3QgX1BPTExfV0lORE9XX0NMT1NFX1RJTUVPVVQgPSBuZXcgRGVsYXkoMjAwMCwgMTAwMDApO1xuXG4vKipcbiAqIEF1dGhlbnRpY2F0ZXMgYSBGaXJlYmFzZSBjbGllbnQgdXNpbmcgYSBwb3B1cC1iYXNlZCBPQXV0aCBhdXRoZW50aWNhdGlvbiBmbG93LlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiBzdWNjZWVkcywgcmV0dXJucyB0aGUgc2lnbmVkIGluIHVzZXIgYWxvbmcgd2l0aCB0aGUgcHJvdmlkZXIncyBjcmVkZW50aWFsLiBJZiBzaWduIGluIHdhc1xuICogdW5zdWNjZXNzZnVsLCByZXR1cm5zIGFuIGVycm9yIG9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVycm9yLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAqXG4gKiAvLyBUaGUgc2lnbmVkLWluIHVzZXIgaW5mby5cbiAqIGNvbnN0IHVzZXIgPSByZXN1bHQudXNlcjtcbiAqIC8vIFRoaXMgZ2l2ZXMgeW91IGEgRmFjZWJvb2sgQWNjZXNzIFRva2VuLlxuICogY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XG4gKiBjb25zdCB0b2tlbiA9IGNyZWRlbnRpYWwuYWNjZXNzVG9rZW47XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXV0aCAtIFRoZSB7QGxpbmsgQXV0aH0gaW5zdGFuY2UuXG4gKiBAcGFyYW0gcHJvdmlkZXIgLSBUaGUgcHJvdmlkZXIgdG8gYXV0aGVudGljYXRlLiBUaGUgcHJvdmlkZXIgaGFzIHRvIGJlIGFuIHtAbGluayBPQXV0aFByb3ZpZGVyfS5cbiAqIE5vbi1PQXV0aCBwcm92aWRlcnMgbGlrZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gKiBAcGFyYW0gcmVzb2x2ZXIgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSwgb3B0aW9uYWxcbiAqIGlmIGFscmVhZHkgc3VwcGxpZWQgdG8ge0BsaW5rIGluaXRpYWxpemVBdXRofSBvciBwcm92aWRlZCBieSB7QGxpbmsgZ2V0QXV0aH0uXG4gKlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbldpdGhQb3B1cChcbiAgYXV0aDogQXV0aCxcbiAgcHJvdmlkZXI6IEF1dGhQcm92aWRlcixcbiAgcmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBfYXNzZXJ0SW5zdGFuY2VPZihhdXRoLCBwcm92aWRlciwgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKTtcbiAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKGF1dGhJbnRlcm5hbCwgcmVzb2x2ZXIpO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgUG9wdXBPcGVyYXRpb24oXG4gICAgYXV0aEludGVybmFsLFxuICAgIEF1dGhFdmVudFR5cGUuU0lHTl9JTl9WSUFfUE9QVVAsXG4gICAgcHJvdmlkZXIsXG4gICAgcmVzb2x2ZXJJbnRlcm5hbFxuICApO1xuICByZXR1cm4gYWN0aW9uLmV4ZWN1dGVOb3ROdWxsKCk7XG59XG5cbi8qKlxuICogUmVhdXRoZW50aWNhdGVzIHRoZSBjdXJyZW50IHVzZXIgd2l0aCB0aGUgc3BlY2lmaWVkIHtAbGluayBPQXV0aFByb3ZpZGVyfSB1c2luZyBhIHBvcC11cCBiYXNlZFxuICogT0F1dGggZmxvdy5cbiAqXG4gKiBAcmVtYXJrc1xuICogSWYgdGhlIHJlYXV0aGVudGljYXRpb24gaXMgc3VjY2Vzc2Z1bCwgdGhlIHJldHVybmVkIHJlc3VsdCB3aWxsIGNvbnRhaW4gdGhlIHVzZXIgYW5kIHRoZVxuICogcHJvdmlkZXIncyBjcmVkZW50aWFsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aFBvcHVwKGF1dGgsIHByb3ZpZGVyKTtcbiAqIC8vIFJlYXV0aGVudGljYXRlIHVzaW5nIGEgcG9wdXAuXG4gKiBhd2FpdCByZWF1dGhlbnRpY2F0ZVdpdGhQb3B1cChyZXN1bHQudXNlciwgcHJvdmlkZXIpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWF1dGhlbnRpY2F0ZVdpdGhQb3B1cChcbiAgdXNlcjogVXNlcixcbiAgcHJvdmlkZXI6IEF1dGhQcm92aWRlcixcbiAgcmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWw+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xuICBjb25zdCByZXNvbHZlckludGVybmFsID0gX3dpdGhEZWZhdWx0UmVzb2x2ZXIodXNlckludGVybmFsLmF1dGgsIHJlc29sdmVyKTtcbiAgY29uc3QgYWN0aW9uID0gbmV3IFBvcHVwT3BlcmF0aW9uKFxuICAgIHVzZXJJbnRlcm5hbC5hdXRoLFxuICAgIEF1dGhFdmVudFR5cGUuUkVBVVRIX1ZJQV9QT1BVUCxcbiAgICBwcm92aWRlcixcbiAgICByZXNvbHZlckludGVybmFsLFxuICAgIHVzZXJJbnRlcm5hbFxuICApO1xuICByZXR1cm4gYWN0aW9uLmV4ZWN1dGVOb3ROdWxsKCk7XG59XG5cbi8qKlxuICogTGlua3MgdGhlIGF1dGhlbnRpY2F0ZWQgcHJvdmlkZXIgdG8gdGhlIHVzZXIgYWNjb3VudCB1c2luZyBhIHBvcC11cCBiYXNlZCBPQXV0aCBmbG93LlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiB0aGUgbGlua2luZyBpcyBzdWNjZXNzZnVsLCB0aGUgcmV0dXJuZWQgcmVzdWx0IHdpbGwgY29udGFpbiB0aGUgdXNlciBhbmQgdGhlIHByb3ZpZGVyJ3MgY3JlZGVudGlhbC5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIFNpZ24gaW4gdXNpbmcgc29tZSBvdGhlciBwcm92aWRlci5cbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGF1dGgsIGVtYWlsLCBwYXNzd29yZCk7XG4gKiAvLyBMaW5rIHVzaW5nIGEgcG9wdXAuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogYXdhaXQgbGlua1dpdGhQb3B1cChyZXN1bHQudXNlciwgcHJvdmlkZXIpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsaW5rV2l0aFBvcHVwKFxuICB1c2VyOiBVc2VyLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICBjb25zdCB1c2VySW50ZXJuYWwgPSBnZXRNb2R1bGFySW5zdGFuY2UodXNlcikgYXMgVXNlckludGVybmFsO1xuICBfYXNzZXJ0SW5zdGFuY2VPZih1c2VySW50ZXJuYWwuYXV0aCwgcHJvdmlkZXIsIEZlZGVyYXRlZEF1dGhQcm92aWRlcik7XG4gIGNvbnN0IHJlc29sdmVySW50ZXJuYWwgPSBfd2l0aERlZmF1bHRSZXNvbHZlcih1c2VySW50ZXJuYWwuYXV0aCwgcmVzb2x2ZXIpO1xuXG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBQb3B1cE9wZXJhdGlvbihcbiAgICB1c2VySW50ZXJuYWwuYXV0aCxcbiAgICBBdXRoRXZlbnRUeXBlLkxJTktfVklBX1BPUFVQLFxuICAgIHByb3ZpZGVyLFxuICAgIHJlc29sdmVySW50ZXJuYWwsXG4gICAgdXNlckludGVybmFsXG4gICk7XG4gIHJldHVybiBhY3Rpb24uZXhlY3V0ZU5vdE51bGwoKTtcbn1cblxuLyoqXG4gKiBQb3B1cCBldmVudCBtYW5hZ2VyLiBIYW5kbGVzIHRoZSBwb3B1cCdzIGVudGlyZSBsaWZlY3ljbGU7IGxpc3RlbnMgdG8gYXV0aFxuICogZXZlbnRzXG4gKlxuICovXG5jbGFzcyBQb3B1cE9wZXJhdGlvbiBleHRlbmRzIEFic3RyYWN0UG9wdXBSZWRpcmVjdE9wZXJhdGlvbiB7XG4gIC8vIE9ubHkgb25lIHBvcHVwIGlzIGV2ZXIgc2hvd24gYXQgb25jZS4gVGhlIGxpZmVjeWNsZSBvZiB0aGUgY3VycmVudCBwb3B1cFxuICAvLyBjYW4gYmUgbWFuYWdlZCAvIGNhbmNlbGxlZCBieSB0aGUgY29uc3RydWN0b3IuXG4gIHByaXZhdGUgc3RhdGljIGN1cnJlbnRQb3B1cEFjdGlvbjogUG9wdXBPcGVyYXRpb24gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBhdXRoV2luZG93OiBBdXRoUG9wdXAgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBwb2xsSWQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBmaWx0ZXI6IEF1dGhFdmVudFR5cGUsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICAgIHJlc29sdmVyOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCxcbiAgICB1c2VyPzogVXNlckludGVybmFsXG4gICkge1xuICAgIHN1cGVyKGF1dGgsIGZpbHRlciwgcmVzb2x2ZXIsIHVzZXIpO1xuICAgIGlmIChQb3B1cE9wZXJhdGlvbi5jdXJyZW50UG9wdXBBY3Rpb24pIHtcbiAgICAgIFBvcHVwT3BlcmF0aW9uLmN1cnJlbnRQb3B1cEFjdGlvbi5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICBQb3B1cE9wZXJhdGlvbi5jdXJyZW50UG9wdXBBY3Rpb24gPSB0aGlzO1xuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZU5vdE51bGwoKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZSgpO1xuICAgIF9hc3NlcnQocmVzdWx0LCB0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuSU5URVJOQUxfRVJST1IpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBhc3luYyBvbkV4ZWN1dGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBkZWJ1Z0Fzc2VydChcbiAgICAgIHRoaXMuZmlsdGVyLmxlbmd0aCA9PT0gMSxcbiAgICAgICdQb3B1cCBvcGVyYXRpb25zIG9ubHkgaGFuZGxlIG9uZSBldmVudCdcbiAgICApO1xuICAgIGNvbnN0IGV2ZW50SWQgPSBfZ2VuZXJhdGVFdmVudElkKCk7XG4gICAgdGhpcy5hdXRoV2luZG93ID0gYXdhaXQgdGhpcy5yZXNvbHZlci5fb3BlblBvcHVwKFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgdGhpcy5wcm92aWRlcixcbiAgICAgIHRoaXMuZmlsdGVyWzBdLCAvLyBUaGVyZSdzIGFsd2F5cyBvbmUsIHNlZSBjb25zdHJ1Y3RvclxuICAgICAgZXZlbnRJZFxuICAgICk7XG4gICAgdGhpcy5hdXRoV2luZG93LmFzc29jaWF0ZWRFdmVudCA9IGV2ZW50SWQ7XG5cbiAgICAvLyBDaGVjayBmb3Igd2ViIHN0b3JhZ2Ugc3VwcG9ydCBhbmQgb3JpZ2luIHZhbGlkYXRpb24gX2FmdGVyXyB0aGUgcG9wdXAgaXNcbiAgICAvLyBsb2FkZWQuIFRoZXNlIG9wZXJhdGlvbnMgYXJlIHNsb3cgKH4xIHNlY29uZCBvciBzbykgUmF0aGVyIHRoYW5cbiAgICAvLyB3YWl0aW5nIG9uIHRoZW0gYmVmb3JlIG9wZW5pbmcgdGhlIHdpbmRvdywgb3B0aW1pc3RpY2FsbHkgb3BlbiB0aGUgcG9wdXBcbiAgICAvLyBhbmQgY2hlY2sgZm9yIHN0b3JhZ2Ugc3VwcG9ydCBhdCB0aGUgc2FtZSB0aW1lLiBJZiBzdG9yYWdlIHN1cHBvcnQgaXNcbiAgICAvLyBub3QgYXZhaWxhYmxlLCB0aGlzIHdpbGwgY2F1c2UgdGhlIHdob2xlIHRoaW5nIHRvIHJlamVjdCBwcm9wZXJseS4gSXRcbiAgICAvLyB3aWxsIGFsc28gY2xvc2UgdGhlIHBvcHVwLCBidXQgc2luY2UgdGhlIHByb21pc2UgaGFzIGFscmVhZHkgcmVqZWN0ZWQsXG4gICAgLy8gdGhlIHBvcHVwIGNsb3NlZCBieSB1c2VyIHBvbGwgd2lsbCByZWplY3QgaW50byB0aGUgdm9pZC5cbiAgICB0aGlzLnJlc29sdmVyLl9vcmlnaW5WYWxpZGF0aW9uKHRoaXMuYXV0aCkuY2F0Y2goZSA9PiB7XG4gICAgICB0aGlzLnJlamVjdChlKTtcbiAgICB9KTtcblxuICAgIHRoaXMucmVzb2x2ZXIuX2lzSWZyYW1lV2ViU3RvcmFnZVN1cHBvcnRlZCh0aGlzLmF1dGgsIGlzU3VwcG9ydGVkID0+IHtcbiAgICAgIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5yZWplY3QoXG4gICAgICAgICAgX2NyZWF0ZUVycm9yKHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5XRUJfU1RPUkFHRV9VTlNVUFBPUlRFRClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEhhbmRsZSB1c2VyIGNsb3N1cmUuIE5vdGljZSB0aGlzIGRvZXMgKm5vdCogdXNlIGF3YWl0XG4gICAgdGhpcy5wb2xsVXNlckNhbmNlbGxhdGlvbigpO1xuICB9XG5cbiAgZ2V0IGV2ZW50SWQoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aFdpbmRvdz8uYXNzb2NpYXRlZEV2ZW50IHx8IG51bGw7XG4gIH1cblxuICBjYW5jZWwoKTogdm9pZCB7XG4gICAgdGhpcy5yZWplY3QoX2NyZWF0ZUVycm9yKHRoaXMuYXV0aCwgQXV0aEVycm9yQ29kZS5FWFBJUkVEX1BPUFVQX1JFUVVFU1QpKTtcbiAgfVxuXG4gIGNsZWFuVXAoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYXV0aFdpbmRvdykge1xuICAgICAgdGhpcy5hdXRoV2luZG93LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucG9sbElkKSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMucG9sbElkKTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dGhXaW5kb3cgPSBudWxsO1xuICAgIHRoaXMucG9sbElkID0gbnVsbDtcbiAgICBQb3B1cE9wZXJhdGlvbi5jdXJyZW50UG9wdXBBY3Rpb24gPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBwb2xsVXNlckNhbmNlbGxhdGlvbigpOiB2b2lkIHtcbiAgICBjb25zdCBwb2xsID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKHRoaXMuYXV0aFdpbmRvdz8ud2luZG93Py5jbG9zZWQpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlcmUgaXMgc3VmZmljaWVudCB0aW1lIGZvciB3aGF0ZXZlciBhY3Rpb24gdG9cbiAgICAgICAgLy8gY29tcGxldGUuIFRoZSB3aW5kb3cgY291bGQgaGF2ZSBjbG9zZWQgYnV0IHRoZSBzaWduIGluIG5ldHdvcmtcbiAgICAgICAgLy8gY2FsbCBjb3VsZCBzdGlsbCBiZSBpbiBmbGlnaHQuXG4gICAgICAgIHRoaXMucG9sbElkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMucG9sbElkID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnJlamVjdChcbiAgICAgICAgICAgIF9jcmVhdGVFcnJvcih0aGlzLmF1dGgsIEF1dGhFcnJvckNvZGUuUE9QVVBfQ0xPU0VEX0JZX1VTRVIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSwgX1RpbWVvdXQuQVVUSF9FVkVOVCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb2xsSWQgPSB3aW5kb3cuc2V0VGltZW91dChwb2xsLCBfUE9MTF9XSU5ET1dfQ0xPU0VfVElNRU9VVC5nZXQoKSk7XG4gICAgfTtcblxuICAgIHBvbGwoKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHtcbiAgQXV0aEV2ZW50LFxuICBBdXRoRXZlbnRUeXBlLFxuICBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbFxufSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBVc2VyQ3JlZGVudGlhbEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvdXNlcic7XG5pbXBvcnQgeyBQZXJzaXN0ZW5jZUludGVybmFsIH0gZnJvbSAnLi4vcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHsgX3BlcnNpc3RlbmNlS2V5TmFtZSB9IGZyb20gJy4uL3BlcnNpc3RlbmNlL3BlcnNpc3RlbmNlX3VzZXJfbWFuYWdlcic7XG5pbXBvcnQgeyBfZ2V0SW5zdGFuY2UgfSBmcm9tICcuLi91dGlsL2luc3RhbnRpYXRvcic7XG5pbXBvcnQgeyBBYnN0cmFjdFBvcHVwUmVkaXJlY3RPcGVyYXRpb24gfSBmcm9tICcuL2Fic3RyYWN0X3BvcHVwX3JlZGlyZWN0X29wZXJhdGlvbic7XG5cbmNvbnN0IFBFTkRJTkdfUkVESVJFQ1RfS0VZID0gJ3BlbmRpbmdSZWRpcmVjdCc7XG5cbi8vIFdlIG9ubHkgZ2V0IG9uZSByZWRpcmVjdCBvdXRjb21lIGZvciBhbnkgb25lIGF1dGgsIHNvIGp1c3Qgc3RvcmUgaXRcbi8vIGluIGhlcmUuXG5jb25zdCByZWRpcmVjdE91dGNvbWVNYXA6IE1hcDxcbiAgc3RyaW5nLFxuICAoKSA9PiBQcm9taXNlPFVzZXJDcmVkZW50aWFsSW50ZXJuYWwgfCBudWxsPlxuPiA9IG5ldyBNYXAoKTtcblxuZXhwb3J0IGNsYXNzIFJlZGlyZWN0QWN0aW9uIGV4dGVuZHMgQWJzdHJhY3RQb3B1cFJlZGlyZWN0T3BlcmF0aW9uIHtcbiAgZXZlbnRJZCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIHJlc29sdmVyOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCxcbiAgICBieXBhc3NBdXRoU3RhdGUgPSBmYWxzZVxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIGF1dGgsXG4gICAgICBbXG4gICAgICAgIEF1dGhFdmVudFR5cGUuU0lHTl9JTl9WSUFfUkVESVJFQ1QsXG4gICAgICAgIEF1dGhFdmVudFR5cGUuTElOS19WSUFfUkVESVJFQ1QsXG4gICAgICAgIEF1dGhFdmVudFR5cGUuUkVBVVRIX1ZJQV9SRURJUkVDVCxcbiAgICAgICAgQXV0aEV2ZW50VHlwZS5VTktOT1dOXG4gICAgICBdLFxuICAgICAgcmVzb2x2ZXIsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBieXBhc3NBdXRoU3RhdGVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBleGVjdXRlIGZ1bmN0aW9uOyBpZiB3ZSBhbHJlYWR5IGhhdmUgYSByZWRpcmVjdCByZXN1bHQsIHRoZW5cbiAgICoganVzdCByZXR1cm4gaXQuXG4gICAqL1xuICBhc3luYyBleGVjdXRlKCk6IFByb21pc2U8VXNlckNyZWRlbnRpYWxJbnRlcm5hbCB8IG51bGw+IHtcbiAgICBsZXQgcmVhZHlPdXRjb21lID0gcmVkaXJlY3RPdXRjb21lTWFwLmdldCh0aGlzLmF1dGguX2tleSgpKTtcbiAgICBpZiAoIXJlYWR5T3V0Y29tZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaGFzUGVuZGluZ1JlZGlyZWN0ID0gYXdhaXQgX2dldEFuZENsZWFyUGVuZGluZ1JlZGlyZWN0U3RhdHVzKFxuICAgICAgICAgIHRoaXMucmVzb2x2ZXIsXG4gICAgICAgICAgdGhpcy5hdXRoXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGhhc1BlbmRpbmdSZWRpcmVjdCA/IGF3YWl0IHN1cGVyLmV4ZWN1dGUoKSA6IG51bGw7XG4gICAgICAgIHJlYWR5T3V0Y29tZSA9ICgpID0+IFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWFkeU91dGNvbWUgPSAoKSA9PiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgIH1cblxuICAgICAgcmVkaXJlY3RPdXRjb21lTWFwLnNldCh0aGlzLmF1dGguX2tleSgpLCByZWFkeU91dGNvbWUpO1xuICAgIH1cblxuICAgIC8vIElmIHdlJ3JlIG5vdCBieXBhc3NpbmcgYXV0aCBzdGF0ZSwgdGhlIHJlYWR5IG91dGNvbWUgc2hvdWxkIGJlIHNldCB0b1xuICAgIC8vIG51bGwuXG4gICAgaWYgKCF0aGlzLmJ5cGFzc0F1dGhTdGF0ZSkge1xuICAgICAgcmVkaXJlY3RPdXRjb21lTWFwLnNldCh0aGlzLmF1dGguX2tleSgpLCAoKSA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkeU91dGNvbWUoKTtcbiAgfVxuXG4gIGFzeW5jIG9uQXV0aEV2ZW50KGV2ZW50OiBBdXRoRXZlbnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gQXV0aEV2ZW50VHlwZS5TSUdOX0lOX1ZJQV9SRURJUkVDVCkge1xuICAgICAgcmV0dXJuIHN1cGVyLm9uQXV0aEV2ZW50KGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09IEF1dGhFdmVudFR5cGUuVU5LTk9XTikge1xuICAgICAgLy8gVGhpcyBpcyBhIHNlbnRpbmVsIHZhbHVlIGluZGljYXRpbmcgdGhlcmUncyBubyBwZW5kaW5nIHJlZGlyZWN0XG4gICAgICB0aGlzLnJlc29sdmUobnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmV2ZW50SWQpIHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmF1dGguX3JlZGlyZWN0VXNlckZvcklkKGV2ZW50LmV2ZW50SWQpO1xuICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcbiAgICAgICAgcmV0dXJuIHN1cGVyLm9uQXV0aEV2ZW50KGV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZShudWxsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBvbkV4ZWN1dGlvbigpOiBQcm9taXNlPHZvaWQ+IHt9XG5cbiAgY2xlYW5VcCgpOiB2b2lkIHt9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfZ2V0QW5kQ2xlYXJQZW5kaW5nUmVkaXJlY3RTdGF0dXMoXG4gIHJlc29sdmVyOiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCxcbiAgYXV0aDogQXV0aEludGVybmFsXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3Qga2V5ID0gcGVuZGluZ1JlZGlyZWN0S2V5KGF1dGgpO1xuICBjb25zdCBwZXJzaXN0ZW5jZSA9IHJlc29sdmVyUGVyc2lzdGVuY2UocmVzb2x2ZXIpO1xuICBpZiAoIShhd2FpdCBwZXJzaXN0ZW5jZS5faXNBdmFpbGFibGUoKSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgaGFzUGVuZGluZ1JlZGlyZWN0ID1cbiAgICAoYXdhaXQgcGVyc2lzdGVuY2UuX2dldChrZXkpKSA9PT0gJ3RydWUnO1xuICBhd2FpdCBwZXJzaXN0ZW5jZS5fcmVtb3ZlKGtleSk7XG4gIHJldHVybiBoYXNQZW5kaW5nUmVkaXJlY3Q7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfc2V0UGVuZGluZ1JlZGlyZWN0U3RhdHVzKFxuICByZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwsXG4gIGF1dGg6IEF1dGhJbnRlcm5hbFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHJldHVybiByZXNvbHZlclBlcnNpc3RlbmNlKHJlc29sdmVyKS5fc2V0KHBlbmRpbmdSZWRpcmVjdEtleShhdXRoKSwgJ3RydWUnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jbGVhclJlZGlyZWN0T3V0Y29tZXMoKTogdm9pZCB7XG4gIHJlZGlyZWN0T3V0Y29tZU1hcC5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlclBlcnNpc3RlbmNlKFxuICByZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWxcbik6IFBlcnNpc3RlbmNlSW50ZXJuYWwge1xuICByZXR1cm4gX2dldEluc3RhbmNlKHJlc29sdmVyLl9yZWRpcmVjdFBlcnNpc3RlbmNlKTtcbn1cblxuZnVuY3Rpb24gcGVuZGluZ1JlZGlyZWN0S2V5KGF1dGg6IEF1dGhJbnRlcm5hbCk6IHN0cmluZyB7XG4gIHJldHVybiBfcGVyc2lzdGVuY2VLZXlOYW1lKFxuICAgIFBFTkRJTkdfUkVESVJFQ1RfS0VZLFxuICAgIGF1dGguY29uZmlnLmFwaUtleSxcbiAgICBhdXRoLm5hbWVcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBBdXRoLFxuICBBdXRoUHJvdmlkZXIsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlcixcbiAgVXNlcixcbiAgVXNlckNyZWRlbnRpYWxcbn0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcblxuaW1wb3J0IHsgX2Nhc3RBdXRoIH0gZnJvbSAnLi4vLi4vY29yZS9hdXRoL2F1dGhfaW1wbCc7XG5pbXBvcnQgeyBfYXNzZXJ0TGlua2VkU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS91c2VyL2xpbmtfdW5saW5rJztcbmltcG9ydCB7IF9hc3NlcnRJbnN0YW5jZU9mIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBfZ2VuZXJhdGVFdmVudElkIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2V2ZW50X2lkJztcbmltcG9ydCB7IEF1dGhFdmVudFR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBVc2VySW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC91c2VyJztcbmltcG9ydCB7IF93aXRoRGVmYXVsdFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL3Jlc29sdmVyJztcbmltcG9ydCB7XG4gIFJlZGlyZWN0QWN0aW9uLFxuICBfc2V0UGVuZGluZ1JlZGlyZWN0U3RhdHVzXG59IGZyb20gJy4uLy4uL2NvcmUvc3RyYXRlZ2llcy9yZWRpcmVjdCc7XG5pbXBvcnQgeyBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9jb3JlL3Byb3ZpZGVycy9mZWRlcmF0ZWQnO1xuaW1wb3J0IHsgZ2V0TW9kdWxhckluc3RhbmNlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKipcbiAqIEF1dGhlbnRpY2F0ZXMgYSBGaXJlYmFzZSBjbGllbnQgdXNpbmcgYSBmdWxsLXBhZ2UgcmVkaXJlY3QgZmxvdy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVG8gaGFuZGxlIHRoZSByZXN1bHRzIGFuZCBlcnJvcnMgZm9yIHRoaXMgb3BlcmF0aW9uLCByZWZlciB0byB7QGxpbmsgZ2V0UmVkaXJlY3RSZXN1bHR9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogLy8gWW91IGNhbiBhZGQgYWRkaXRpb25hbCBzY29wZXMgdG8gdGhlIHByb3ZpZGVyOlxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3VzZXJfYmlydGhkYXknKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIEZhY2Vib29rIEFjY2VzcyBUb2tlbi5cbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIC8vIEFzIHRoaXMgQVBJIGNhbiBiZSB1c2VkIGZvciBzaWduLWluLCBsaW5raW5nIGFuZCByZWF1dGhlbnRpY2F0aW9uLFxuICogLy8gY2hlY2sgdGhlIG9wZXJhdGlvblR5cGUgdG8gZGV0ZXJtaW5lIHdoYXQgdHJpZ2dlcmVkIHRoaXMgcmVkaXJlY3RcbiAqIC8vIG9wZXJhdGlvbi5cbiAqIGNvbnN0IG9wZXJhdGlvblR5cGUgPSByZXN1bHQub3BlcmF0aW9uVHlwZTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduSW5XaXRoUmVkaXJlY3QoXG4gIGF1dGg6IEF1dGgsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPG5ldmVyPiB7XG4gIHJldHVybiBfc2lnbkluV2l0aFJlZGlyZWN0KGF1dGgsIHByb3ZpZGVyLCByZXNvbHZlcikgYXMgUHJvbWlzZTxuZXZlcj47XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfc2lnbkluV2l0aFJlZGlyZWN0KFxuICBhdXRoOiBBdXRoLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTx2b2lkIHwgbmV2ZXI+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBfYXNzZXJ0SW5zdGFuY2VPZihhdXRoLCBwcm92aWRlciwgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKTtcbiAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKGF1dGhJbnRlcm5hbCwgcmVzb2x2ZXIpO1xuICBhd2FpdCBfc2V0UGVuZGluZ1JlZGlyZWN0U3RhdHVzKHJlc29sdmVySW50ZXJuYWwsIGF1dGhJbnRlcm5hbCk7XG5cbiAgcmV0dXJuIHJlc29sdmVySW50ZXJuYWwuX29wZW5SZWRpcmVjdChcbiAgICBhdXRoSW50ZXJuYWwsXG4gICAgcHJvdmlkZXIsXG4gICAgQXV0aEV2ZW50VHlwZS5TSUdOX0lOX1ZJQV9SRURJUkVDVFxuICApO1xufVxuXG4vKipcbiAqIFJlYXV0aGVudGljYXRlcyB0aGUgY3VycmVudCB1c2VyIHdpdGggdGhlIHNwZWNpZmllZCB7QGxpbmsgT0F1dGhQcm92aWRlcn0gdXNpbmcgYSBmdWxsLXBhZ2UgcmVkaXJlY3QgZmxvdy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBhIHJlZGlyZWN0LlxuICogY29uc3QgcHJvdmlkZXIgPSBuZXcgRmFjZWJvb2tBdXRoUHJvdmlkZXIoKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIC8vIExpbmsgdXNpbmcgYSByZWRpcmVjdC5cbiAqIGF3YWl0IGxpbmtXaXRoUmVkaXJlY3QocmVzdWx0LnVzZXIsIHByb3ZpZGVyKTtcbiAqIC8vIFRoaXMgd2lsbCBhZ2FpbiB0cmlnZ2VyIGEgZnVsbCBwYWdlIHJlZGlyZWN0IGF3YXkgZnJvbSB5b3VyIGFwcFxuICpcbiAqIC8vIEFmdGVyIHJldHVybmluZyBmcm9tIHRoZSByZWRpcmVjdCB3aGVuIHlvdXIgYXBwIGluaXRpYWxpemVzIHlvdSBjYW4gb2J0YWluIHRoZSByZXN1bHRcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFJlZGlyZWN0UmVzdWx0KGF1dGgpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHVzZXIgLSBUaGUgdXNlci5cbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byBhdXRoZW50aWNhdGUuIFRoZSBwcm92aWRlciBoYXMgdG8gYmUgYW4ge0BsaW5rIE9BdXRoUHJvdmlkZXJ9LlxuICogTm9uLU9BdXRoIHByb3ZpZGVycyBsaWtlIHtAbGluayBFbWFpbEF1dGhQcm92aWRlcn0gd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdChcbiAgdXNlcjogVXNlcixcbiAgcHJvdmlkZXI6IEF1dGhQcm92aWRlcixcbiAgcmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbik6IFByb21pc2U8bmV2ZXI+IHtcbiAgcmV0dXJuIF9yZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdChcbiAgICB1c2VyLFxuICAgIHByb3ZpZGVyLFxuICAgIHJlc29sdmVyXG4gICkgYXMgUHJvbWlzZTxuZXZlcj47XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3JlYXV0aGVudGljYXRlV2l0aFJlZGlyZWN0KFxuICB1c2VyOiBVc2VyLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTx2b2lkIHwgbmV2ZXI+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xuICAvLyBBbGxvdyB0aGUgcmVzb2x2ZXIgdG8gZXJyb3IgYmVmb3JlIHBlcnNpc3RpbmcgdGhlIHJlZGlyZWN0IHVzZXJcbiAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKHVzZXJJbnRlcm5hbC5hdXRoLCByZXNvbHZlcik7XG4gIGF3YWl0IF9zZXRQZW5kaW5nUmVkaXJlY3RTdGF0dXMocmVzb2x2ZXJJbnRlcm5hbCwgdXNlckludGVybmFsLmF1dGgpO1xuXG4gIGNvbnN0IGV2ZW50SWQgPSBhd2FpdCBwcmVwYXJlVXNlckZvclJlZGlyZWN0KHVzZXJJbnRlcm5hbCk7XG4gIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QoXG4gICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgcHJvdmlkZXIsXG4gICAgQXV0aEV2ZW50VHlwZS5SRUFVVEhfVklBX1JFRElSRUNULFxuICAgIGV2ZW50SWRcbiAgKTtcbn1cblxuLyoqXG4gKiBMaW5rcyB0aGUge0BsaW5rIE9BdXRoUHJvdmlkZXJ9IHRvIHRoZSB1c2VyIGFjY291bnQgdXNpbmcgYSBmdWxsLXBhZ2UgcmVkaXJlY3QgZmxvdy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gU2lnbiBpbiB1c2luZyBzb21lIG90aGVyIHByb3ZpZGVyLlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoYXV0aCwgZW1haWwsIHBhc3N3b3JkKTtcbiAqIC8vIExpbmsgdXNpbmcgYSByZWRpcmVjdC5cbiAqIGNvbnN0IHByb3ZpZGVyID0gbmV3IEZhY2Vib29rQXV0aFByb3ZpZGVyKCk7XG4gKiBhd2FpdCBsaW5rV2l0aFJlZGlyZWN0KHJlc3VsdC51c2VyLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB1c2VyIC0gVGhlIHVzZXIuXG4gKiBAcGFyYW0gcHJvdmlkZXIgLSBUaGUgcHJvdmlkZXIgdG8gYXV0aGVudGljYXRlLiBUaGUgcHJvdmlkZXIgaGFzIHRvIGJlIGFuIHtAbGluayBPQXV0aFByb3ZpZGVyfS5cbiAqIE5vbi1PQXV0aCBwcm92aWRlcnMgbGlrZSB7QGxpbmsgRW1haWxBdXRoUHJvdmlkZXJ9IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gKiBAcGFyYW0gcmVzb2x2ZXIgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSwgb3B0aW9uYWxcbiAqIGlmIGFscmVhZHkgc3VwcGxpZWQgdG8ge0BsaW5rIGluaXRpYWxpemVBdXRofSBvciBwcm92aWRlZCBieSB7QGxpbmsgZ2V0QXV0aH0uXG4gKlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmtXaXRoUmVkaXJlY3QoXG4gIHVzZXI6IFVzZXIsXG4gIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gIHJlc29sdmVyPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyXG4pOiBQcm9taXNlPG5ldmVyPiB7XG4gIHJldHVybiBfbGlua1dpdGhSZWRpcmVjdCh1c2VyLCBwcm92aWRlciwgcmVzb2x2ZXIpIGFzIFByb21pc2U8bmV2ZXI+O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9saW5rV2l0aFJlZGlyZWN0KFxuICB1c2VyOiBVc2VyLFxuICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICByZXNvbHZlcj86IFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuKTogUHJvbWlzZTx2b2lkIHwgbmV2ZXI+IHtcbiAgY29uc3QgdXNlckludGVybmFsID0gZ2V0TW9kdWxhckluc3RhbmNlKHVzZXIpIGFzIFVzZXJJbnRlcm5hbDtcbiAgX2Fzc2VydEluc3RhbmNlT2YodXNlckludGVybmFsLmF1dGgsIHByb3ZpZGVyLCBGZWRlcmF0ZWRBdXRoUHJvdmlkZXIpO1xuICAvLyBBbGxvdyB0aGUgcmVzb2x2ZXIgdG8gZXJyb3IgYmVmb3JlIHBlcnNpc3RpbmcgdGhlIHJlZGlyZWN0IHVzZXJcbiAgY29uc3QgcmVzb2x2ZXJJbnRlcm5hbCA9IF93aXRoRGVmYXVsdFJlc29sdmVyKHVzZXJJbnRlcm5hbC5hdXRoLCByZXNvbHZlcik7XG4gIGF3YWl0IF9hc3NlcnRMaW5rZWRTdGF0dXMoZmFsc2UsIHVzZXJJbnRlcm5hbCwgcHJvdmlkZXIucHJvdmlkZXJJZCk7XG4gIGF3YWl0IF9zZXRQZW5kaW5nUmVkaXJlY3RTdGF0dXMocmVzb2x2ZXJJbnRlcm5hbCwgdXNlckludGVybmFsLmF1dGgpO1xuXG4gIGNvbnN0IGV2ZW50SWQgPSBhd2FpdCBwcmVwYXJlVXNlckZvclJlZGlyZWN0KHVzZXJJbnRlcm5hbCk7XG4gIHJldHVybiByZXNvbHZlckludGVybmFsLl9vcGVuUmVkaXJlY3QoXG4gICAgdXNlckludGVybmFsLmF1dGgsXG4gICAgcHJvdmlkZXIsXG4gICAgQXV0aEV2ZW50VHlwZS5MSU5LX1ZJQV9SRURJUkVDVCxcbiAgICBldmVudElkXG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHtAbGluayBVc2VyQ3JlZGVudGlhbH0gZnJvbSB0aGUgcmVkaXJlY3QtYmFzZWQgc2lnbi1pbiBmbG93LlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiBzaWduLWluIHN1Y2NlZWRlZCwgcmV0dXJucyB0aGUgc2lnbmVkIGluIHVzZXIuIElmIHNpZ24taW4gd2FzIHVuc3VjY2Vzc2Z1bCwgZmFpbHMgd2l0aCBhblxuICogZXJyb3IuIElmIG5vIHJlZGlyZWN0IG9wZXJhdGlvbiB3YXMgY2FsbGVkLCByZXR1cm5zIGEge0BsaW5rIFVzZXJDcmVkZW50aWFsfVxuICogd2l0aCBhIG51bGwgYHVzZXJgLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBTaWduIGluIHVzaW5nIGEgcmVkaXJlY3QuXG4gKiBjb25zdCBwcm92aWRlciA9IG5ldyBGYWNlYm9va0F1dGhQcm92aWRlcigpO1xuICogLy8gWW91IGNhbiBhZGQgYWRkaXRpb25hbCBzY29wZXMgdG8gdGhlIHByb3ZpZGVyOlxuICogcHJvdmlkZXIuYWRkU2NvcGUoJ3VzZXJfYmlydGhkYXknKTtcbiAqIC8vIFN0YXJ0IGEgc2lnbiBpbiBwcm9jZXNzIGZvciBhbiB1bmF1dGhlbnRpY2F0ZWQgdXNlci5cbiAqIGF3YWl0IHNpZ25JbldpdGhSZWRpcmVjdChhdXRoLCBwcm92aWRlcik7XG4gKiAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhIGZ1bGwgcGFnZSByZWRpcmVjdCBhd2F5IGZyb20geW91ciBhcHBcbiAqXG4gKiAvLyBBZnRlciByZXR1cm5pbmcgZnJvbSB0aGUgcmVkaXJlY3Qgd2hlbiB5b3VyIGFwcCBpbml0aWFsaXplcyB5b3UgY2FuIG9idGFpbiB0aGUgcmVzdWx0XG4gKiBjb25zdCByZXN1bHQgPSBhd2FpdCBnZXRSZWRpcmVjdFJlc3VsdChhdXRoKTtcbiAqIGlmIChyZXN1bHQpIHtcbiAqICAgLy8gVGhpcyBpcyB0aGUgc2lnbmVkLWluIHVzZXJcbiAqICAgY29uc3QgdXNlciA9IHJlc3VsdC51c2VyO1xuICogICAvLyBUaGlzIGdpdmVzIHlvdSBhIEZhY2Vib29rIEFjY2VzcyBUb2tlbi5cbiAqICAgY29uc3QgY3JlZGVudGlhbCA9IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KGF1dGgsIHJlc3VsdCk7XG4gKiAgIGNvbnN0IHRva2VuID0gY3JlZGVudGlhbC5hY2Nlc3NUb2tlbjtcbiAqIH1cbiAqIC8vIEFzIHRoaXMgQVBJIGNhbiBiZSB1c2VkIGZvciBzaWduLWluLCBsaW5raW5nIGFuZCByZWF1dGhlbnRpY2F0aW9uLFxuICogLy8gY2hlY2sgdGhlIG9wZXJhdGlvblR5cGUgdG8gZGV0ZXJtaW5lIHdoYXQgdHJpZ2dlcmVkIHRoaXMgcmVkaXJlY3RcbiAqIC8vIG9wZXJhdGlvbi5cbiAqIGNvbnN0IG9wZXJhdGlvblR5cGUgPSByZXN1bHQub3BlcmF0aW9uVHlwZTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdXRoIC0gVGhlIHtAbGluayBBdXRofSBpbnN0YW5jZS5cbiAqIEBwYXJhbSByZXNvbHZlciAtIEFuIGluc3RhbmNlIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9LCBvcHRpb25hbFxuICogaWYgYWxyZWFkeSBzdXBwbGllZCB0byB7QGxpbmsgaW5pdGlhbGl6ZUF1dGh9IG9yIHByb3ZpZGVkIGJ5IHtAbGluayBnZXRBdXRofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSZWRpcmVjdFJlc3VsdChcbiAgYXV0aDogQXV0aCxcbiAgcmVzb2x2ZXI/OiBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbik6IFByb21pc2U8VXNlckNyZWRlbnRpYWwgfCBudWxsPiB7XG4gIGF3YWl0IF9jYXN0QXV0aChhdXRoKS5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICByZXR1cm4gX2dldFJlZGlyZWN0UmVzdWx0KGF1dGgsIHJlc29sdmVyLCBmYWxzZSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfZ2V0UmVkaXJlY3RSZXN1bHQoXG4gIGF1dGg6IEF1dGgsXG4gIHJlc29sdmVyRXh0ZXJuPzogUG9wdXBSZWRpcmVjdFJlc29sdmVyLFxuICBieXBhc3NBdXRoU3RhdGUgPSBmYWxzZVxuKTogUHJvbWlzZTxVc2VyQ3JlZGVudGlhbCB8IG51bGw+IHtcbiAgY29uc3QgYXV0aEludGVybmFsID0gX2Nhc3RBdXRoKGF1dGgpO1xuICBjb25zdCByZXNvbHZlciA9IF93aXRoRGVmYXVsdFJlc29sdmVyKGF1dGhJbnRlcm5hbCwgcmVzb2x2ZXJFeHRlcm4pO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgUmVkaXJlY3RBY3Rpb24oYXV0aEludGVybmFsLCByZXNvbHZlciwgYnlwYXNzQXV0aFN0YXRlKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWN0aW9uLmV4ZWN1dGUoKTtcblxuICBpZiAocmVzdWx0ICYmICFieXBhc3NBdXRoU3RhdGUpIHtcbiAgICBkZWxldGUgcmVzdWx0LnVzZXIuX3JlZGlyZWN0RXZlbnRJZDtcbiAgICBhd2FpdCBhdXRoSW50ZXJuYWwuX3BlcnNpc3RVc2VySWZDdXJyZW50KHJlc3VsdC51c2VyIGFzIFVzZXJJbnRlcm5hbCk7XG4gICAgYXdhaXQgYXV0aEludGVybmFsLl9zZXRSZWRpcmVjdFVzZXIobnVsbCwgcmVzb2x2ZXJFeHRlcm4pO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJlcGFyZVVzZXJGb3JSZWRpcmVjdCh1c2VyOiBVc2VySW50ZXJuYWwpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBldmVudElkID0gX2dlbmVyYXRlRXZlbnRJZChgJHt1c2VyLnVpZH06OjpgKTtcbiAgdXNlci5fcmVkaXJlY3RFdmVudElkID0gZXZlbnRJZDtcbiAgYXdhaXQgdXNlci5hdXRoLl9zZXRSZWRpcmVjdFVzZXIodXNlcik7XG4gIGF3YWl0IHVzZXIuYXV0aC5fcGVyc2lzdFVzZXJJZkN1cnJlbnQodXNlcik7XG4gIHJldHVybiBldmVudElkO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIEF1dGhFdmVudCxcbiAgQXV0aEV2ZW50Q29uc3VtZXIsXG4gIEF1dGhFdmVudFR5cGUsXG4gIEV2ZW50TWFuYWdlclxufSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgX2NyZWF0ZUVycm9yIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnQnO1xuXG4vLyBUaGUgYW1vdW50IG9mIHRpbWUgdG8gc3RvcmUgdGhlIFVJRHMgb2Ygc2VlbiBldmVudHM7IHRoaXMgaXNcbi8vIHNldCB0byAxMCBtaW4gYnkgZGVmYXVsdFxuY29uc3QgRVZFTlRfRFVQTElDQVRJT05fQ0FDSEVfRFVSQVRJT05fTVMgPSAxMCAqIDYwICogMTAwMDtcblxuZXhwb3J0IGNsYXNzIEF1dGhFdmVudE1hbmFnZXIgaW1wbGVtZW50cyBFdmVudE1hbmFnZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlZEV2ZW50VWlkczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uc3VtZXJzOiBTZXQ8QXV0aEV2ZW50Q29uc3VtZXI+ID0gbmV3IFNldCgpO1xuICBwcm90ZWN0ZWQgcXVldWVkUmVkaXJlY3RFdmVudDogQXV0aEV2ZW50IHwgbnVsbCA9IG51bGw7XG4gIHByb3RlY3RlZCBoYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QgPSBmYWxzZTtcbiAgcHJpdmF0ZSBsYXN0UHJvY2Vzc2VkRXZlbnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGF1dGg6IEF1dGhJbnRlcm5hbCkge31cblxuICByZWdpc3RlckNvbnN1bWVyKGF1dGhFdmVudENvbnN1bWVyOiBBdXRoRXZlbnRDb25zdW1lcik6IHZvaWQge1xuICAgIHRoaXMuY29uc3VtZXJzLmFkZChhdXRoRXZlbnRDb25zdW1lcik7XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgJiZcbiAgICAgIHRoaXMuaXNFdmVudEZvckNvbnN1bWVyKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCwgYXV0aEV2ZW50Q29uc3VtZXIpXG4gICAgKSB7XG4gICAgICB0aGlzLnNlbmRUb0NvbnN1bWVyKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCwgYXV0aEV2ZW50Q29uc3VtZXIpO1xuICAgICAgdGhpcy5zYXZlRXZlbnRUb0NhY2hlKHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCk7XG4gICAgICB0aGlzLnF1ZXVlZFJlZGlyZWN0RXZlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHVucmVnaXN0ZXJDb25zdW1lcihhdXRoRXZlbnRDb25zdW1lcjogQXV0aEV2ZW50Q29uc3VtZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnN1bWVycy5kZWxldGUoYXV0aEV2ZW50Q29uc3VtZXIpO1xuICB9XG5cbiAgb25FdmVudChldmVudDogQXV0aEV2ZW50KTogYm9vbGVhbiB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGV2ZW50IGhhcyBhbHJlYWR5IGJlZW4gaGFuZGxlZFxuICAgIGlmICh0aGlzLmhhc0V2ZW50QmVlbkhhbmRsZWQoZXZlbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IGhhbmRsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnN1bWVycy5mb3JFYWNoKGNvbnN1bWVyID0+IHtcbiAgICAgIGlmICh0aGlzLmlzRXZlbnRGb3JDb25zdW1lcihldmVudCwgY29uc3VtZXIpKSB7XG4gICAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbmRUb0NvbnN1bWVyKGV2ZW50LCBjb25zdW1lcik7XG4gICAgICAgIHRoaXMuc2F2ZUV2ZW50VG9DYWNoZShldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5oYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QgfHwgIWlzUmVkaXJlY3RFdmVudChldmVudCkpIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgc2VlbiBhIHJlZGlyZWN0IGJlZm9yZSwgb3IgdGhpcyBpcyBhIHBvcHVwIGV2ZW50LFxuICAgICAgLy8gYmFpbCBub3dcbiAgICAgIHJldHVybiBoYW5kbGVkO1xuICAgIH1cblxuICAgIHRoaXMuaGFzSGFuZGxlZFBvdGVudGlhbFJlZGlyZWN0ID0gdHJ1ZTtcblxuICAgIC8vIElmIHRoZSByZWRpcmVjdCB3YXNuJ3QgaGFuZGxlZCwgaGFuZyBvbiB0byBpdFxuICAgIGlmICghaGFuZGxlZCkge1xuICAgICAgdGhpcy5xdWV1ZWRSZWRpcmVjdEV2ZW50ID0gZXZlbnQ7XG4gICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlZDtcbiAgfVxuXG4gIHByaXZhdGUgc2VuZFRvQ29uc3VtZXIoZXZlbnQ6IEF1dGhFdmVudCwgY29uc3VtZXI6IEF1dGhFdmVudENvbnN1bWVyKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50LmVycm9yICYmICFpc051bGxSZWRpcmVjdEV2ZW50KGV2ZW50KSkge1xuICAgICAgY29uc3QgY29kZSA9XG4gICAgICAgIChldmVudC5lcnJvci5jb2RlPy5zcGxpdCgnYXV0aC8nKVsxXSBhcyBBdXRoRXJyb3JDb2RlKSB8fFxuICAgICAgICBBdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SO1xuICAgICAgY29uc3VtZXIub25FcnJvcihfY3JlYXRlRXJyb3IodGhpcy5hdXRoLCBjb2RlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN1bWVyLm9uQXV0aEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzRXZlbnRGb3JDb25zdW1lcihcbiAgICBldmVudDogQXV0aEV2ZW50LFxuICAgIGNvbnN1bWVyOiBBdXRoRXZlbnRDb25zdW1lclxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBldmVudElkTWF0Y2hlcyA9XG4gICAgICBjb25zdW1lci5ldmVudElkID09PSBudWxsIHx8XG4gICAgICAoISFldmVudC5ldmVudElkICYmIGV2ZW50LmV2ZW50SWQgPT09IGNvbnN1bWVyLmV2ZW50SWQpO1xuICAgIHJldHVybiBjb25zdW1lci5maWx0ZXIuaW5jbHVkZXMoZXZlbnQudHlwZSkgJiYgZXZlbnRJZE1hdGNoZXM7XG4gIH1cblxuICBwcml2YXRlIGhhc0V2ZW50QmVlbkhhbmRsZWQoZXZlbnQ6IEF1dGhFdmVudCk6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIERhdGUubm93KCkgLSB0aGlzLmxhc3RQcm9jZXNzZWRFdmVudFRpbWUgPj1cbiAgICAgIEVWRU5UX0RVUExJQ0FUSU9OX0NBQ0hFX0RVUkFUSU9OX01TXG4gICAgKSB7XG4gICAgICB0aGlzLmNhY2hlZEV2ZW50VWlkcy5jbGVhcigpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNhY2hlZEV2ZW50VWlkcy5oYXMoZXZlbnRVaWQoZXZlbnQpKTtcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZUV2ZW50VG9DYWNoZShldmVudDogQXV0aEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZWRFdmVudFVpZHMuYWRkKGV2ZW50VWlkKGV2ZW50KSk7XG4gICAgdGhpcy5sYXN0UHJvY2Vzc2VkRXZlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudFVpZChlOiBBdXRoRXZlbnQpOiBzdHJpbmcge1xuICByZXR1cm4gW2UudHlwZSwgZS5ldmVudElkLCBlLnNlc3Npb25JZCwgZS50ZW5hbnRJZF0uZmlsdGVyKHYgPT4gdikuam9pbignLScpO1xufVxuXG5mdW5jdGlvbiBpc051bGxSZWRpcmVjdEV2ZW50KHsgdHlwZSwgZXJyb3IgfTogQXV0aEV2ZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgdHlwZSA9PT0gQXV0aEV2ZW50VHlwZS5VTktOT1dOICYmXG4gICAgZXJyb3I/LmNvZGUgPT09IGBhdXRoLyR7QXV0aEVycm9yQ29kZS5OT19BVVRIX0VWRU5UfWBcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNSZWRpcmVjdEV2ZW50KGV2ZW50OiBBdXRoRXZlbnQpOiBib29sZWFuIHtcbiAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgY2FzZSBBdXRoRXZlbnRUeXBlLlNJR05fSU5fVklBX1JFRElSRUNUOlxuICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5MSU5LX1ZJQV9SRURJUkVDVDpcbiAgICBjYXNlIEF1dGhFdmVudFR5cGUuUkVBVVRIX1ZJQV9SRURJUkVDVDpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgQXV0aEV2ZW50VHlwZS5VTktOT1dOOlxuICAgICAgcmV0dXJuIGlzTnVsbFJlZGlyZWN0RXZlbnQoZXZlbnQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfcGVyZm9ybUFwaVJlcXVlc3QsIEVuZHBvaW50LCBIdHRwTWV0aG9kIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0UHJvamVjdENvbmZpZ1JlcXVlc3Qge1xuICBhbmRyb2lkUGFja2FnZU5hbWU/OiBzdHJpbmc7XG4gIGlvc0J1bmRsZUlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFByb2plY3RDb25maWdSZXNwb25zZSB7XG4gIGF1dGhvcml6ZWREb21haW5zOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9nZXRQcm9qZWN0Q29uZmlnKFxuICBhdXRoOiBBdXRoLFxuICByZXF1ZXN0OiBHZXRQcm9qZWN0Q29uZmlnUmVxdWVzdCA9IHt9XG4pOiBQcm9taXNlPEdldFByb2plY3RDb25maWdSZXNwb25zZT4ge1xuICByZXR1cm4gX3BlcmZvcm1BcGlSZXF1ZXN0PEdldFByb2plY3RDb25maWdSZXF1ZXN0LCBHZXRQcm9qZWN0Q29uZmlnUmVzcG9uc2U+KFxuICAgIGF1dGgsXG4gICAgSHR0cE1ldGhvZC5HRVQsXG4gICAgRW5kcG9pbnQuR0VUX1BST0pFQ1RfQ09ORklHLFxuICAgIHJlcXVlc3RcbiAgKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBfZ2V0UHJvamVjdENvbmZpZyB9IGZyb20gJy4uLy4uL2FwaS9wcm9qZWN0X2NvbmZpZy9nZXRfcHJvamVjdF9jb25maWcnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7IF9mYWlsIH0gZnJvbSAnLi9hc3NlcnQnO1xuaW1wb3J0IHsgX2dldEN1cnJlbnRVcmwgfSBmcm9tICcuL2xvY2F0aW9uJztcblxuY29uc3QgSVBfQUREUkVTU19SRUdFWCA9IC9eXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30kLztcbmNvbnN0IEhUVFBfUkVHRVggPSAvXmh0dHBzPy87XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfdmFsaWRhdGVPcmlnaW4oYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTx2b2lkPiB7XG4gIC8vIFNraXAgb3JpZ2luIHZhbGlkYXRpb24gaWYgd2UgYXJlIGluIGFuIGVtdWxhdGVkIGVudmlyb25tZW50XG4gIGlmIChhdXRoLmNvbmZpZy5lbXVsYXRvcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgYXV0aG9yaXplZERvbWFpbnMgfSA9IGF3YWl0IF9nZXRQcm9qZWN0Q29uZmlnKGF1dGgpO1xuXG4gIGZvciAoY29uc3QgZG9tYWluIG9mIGF1dGhvcml6ZWREb21haW5zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChtYXRjaERvbWFpbihkb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlcmUncyBhIFVSTCBlcnJvcjsganVzdCBjb250aW51ZSBzZWFyY2hpbmdcbiAgICB9XG4gIH1cblxuICAvLyBJbiB0aGUgb2xkIFNESywgdGhpcyBlcnJvciBhbHNvIHByb3ZpZGVzIGhlbHBmdWwgbWVzc2FnZXMuXG4gIF9mYWlsKGF1dGgsIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9PUklHSU4pO1xufVxuXG5mdW5jdGlvbiBtYXRjaERvbWFpbihleHBlY3RlZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGN1cnJlbnRVcmwgPSBfZ2V0Q3VycmVudFVybCgpO1xuICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSB9ID0gbmV3IFVSTChjdXJyZW50VXJsKTtcbiAgaWYgKGV4cGVjdGVkLnN0YXJ0c1dpdGgoJ2Nocm9tZS1leHRlbnNpb246Ly8nKSkge1xuICAgIGNvbnN0IGNlVXJsID0gbmV3IFVSTChleHBlY3RlZCk7XG5cbiAgICBpZiAoY2VVcmwuaG9zdG5hbWUgPT09ICcnICYmIGhvc3RuYW1lID09PSAnJykge1xuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHdlJ3JlIG5vdCBwYXJzaW5nIGNocm9tZSBVUkxzIHByb3Blcmx5XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwcm90b2NvbCA9PT0gJ2Nocm9tZS1leHRlbnNpb246JyAmJlxuICAgICAgICBleHBlY3RlZC5yZXBsYWNlKCdjaHJvbWUtZXh0ZW5zaW9uOi8vJywgJycpID09PVxuICAgICAgICAgIGN1cnJlbnRVcmwucmVwbGFjZSgnY2hyb21lLWV4dGVuc2lvbjovLycsICcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvdG9jb2wgPT09ICdjaHJvbWUtZXh0ZW5zaW9uOicgJiYgY2VVcmwuaG9zdG5hbWUgPT09IGhvc3RuYW1lO1xuICB9XG5cbiAgaWYgKCFIVFRQX1JFR0VYLnRlc3QocHJvdG9jb2wpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKElQX0FERFJFU1NfUkVHRVgudGVzdChleHBlY3RlZCkpIHtcbiAgICAvLyBUaGUgZG9tYWluIGhhcyB0byBiZSBleGFjdGx5IGVxdWFsIHRvIHRoZSBwYXR0ZXJuLCBhcyBhbiBJUCBkb21haW4gd2lsbFxuICAgIC8vIG9ubHkgY29udGFpbiB0aGUgSVAsIG5vIGV4dHJhIGNoYXJhY3Rlci5cbiAgICByZXR1cm4gaG9zdG5hbWUgPT09IGV4cGVjdGVkO1xuICB9XG5cbiAgLy8gRG90cyBpbiBwYXR0ZXJuIHNob3VsZCBiZSBlc2NhcGVkLlxuICBjb25zdCBlc2NhcGVkRG9tYWluUGF0dGVybiA9IGV4cGVjdGVkLnJlcGxhY2UoL1xcLi9nLCAnXFxcXC4nKTtcbiAgLy8gTm9uIGlwIGFkZHJlc3MgZG9tYWlucy5cbiAgLy8gZG9tYWluLmNvbSA9ICouZG9tYWluLmNvbSBPUiBkb21haW4uY29tXG4gIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChcbiAgICAnXiguK1xcXFwuJyArIGVzY2FwZWREb21haW5QYXR0ZXJuICsgJ3wnICsgZXNjYXBlZERvbWFpblBhdHRlcm4gKyAnKSQnLFxuICAgICdpJ1xuICApO1xuICByZXR1cm4gcmUudGVzdChob3N0bmFtZSk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycyc7XG5pbXBvcnQgeyBfY3JlYXRlRXJyb3IgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IERlbGF5IH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2RlbGF5JztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL2F1dGgnO1xuaW1wb3J0IHsgX3dpbmRvdyB9IGZyb20gJy4uL2F1dGhfd2luZG93JztcbmltcG9ydCAqIGFzIGpzIGZyb20gJy4uL2xvYWRfanMnO1xuXG5jb25zdCBORVRXT1JLX1RJTUVPVVQgPSBuZXcgRGVsYXkoMzAwMDAsIDYwMDAwKTtcblxuLyoqXG4gKiBSZXNldCB1bmxhb2RlZCBHQXBpIG1vZHVsZXMuIElmIGdhcGkubG9hZCBmYWlscyBkdWUgdG8gYSBuZXR3b3JrIGVycm9yLFxuICogaXQgd2lsbCBzdG9wIHdvcmtpbmcgYWZ0ZXIgYSByZXRyaWFsLiBUaGlzIGlzIGEgaGFjayB0byBmaXggdGhpcyBpc3N1ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRVbmxvYWRlZEdhcGlNb2R1bGVzKCk6IHZvaWQge1xuICAvLyBDbGVhciBsYXN0IGZhaWxlZCBnYXBpLmxvYWQgc3RhdGUgdG8gZm9yY2UgbmV4dCBnYXBpLmxvYWQgdG8gZmlyc3RcbiAgLy8gbG9hZCB0aGUgZmFpbGVkIGdhcGkuaWZyYW1lcyBtb2R1bGUuXG4gIC8vIEdldCBnYXBpeC5iZWFjb24gY29udGV4dC5cbiAgY29uc3QgYmVhY29uID0gX3dpbmRvdygpLl9fX2pzbDtcbiAgLy8gR2V0IGN1cnJlbnQgaGludC5cbiAgaWYgKGJlYWNvbj8uSCkge1xuICAgIC8vIEdldCBnYXBpIGhpbnQuXG4gICAgZm9yIChjb25zdCBoaW50IG9mIE9iamVjdC5rZXlzKGJlYWNvbi5IKSkge1xuICAgICAgLy8gUmVxdWVzdGVkIG1vZHVsZXMuXG4gICAgICBiZWFjb24uSFtoaW50XS5yID0gYmVhY29uLkhbaGludF0uciB8fCBbXTtcbiAgICAgIC8vIExvYWRlZCBtb2R1bGVzLlxuICAgICAgYmVhY29uLkhbaGludF0uTCA9IGJlYWNvbi5IW2hpbnRdLkwgfHwgW107XG4gICAgICAvLyBTZXQgcmVxdWVzdGVkIG1vZHVsZXMgdG8gYSBjb3B5IG9mIHRoZSBsb2FkZWQgbW9kdWxlcy5cbiAgICAgIGJlYWNvbi5IW2hpbnRdLnIgPSBbLi4uYmVhY29uLkhbaGludF0uTF07XG4gICAgICAvLyBDbGVhciBwZW5kaW5nIGNhbGxiYWNrcy5cbiAgICAgIGlmIChiZWFjb24uQ1ApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZWFjb24uQ1AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAvLyBSZW1vdmUgYWxsIGZhaWxlZCBwZW5kaW5nIGNhbGxiYWNrcy5cbiAgICAgICAgICBiZWFjb24uQ1BbaV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRHYXBpKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8Z2FwaS5pZnJhbWVzLkNvbnRleHQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPGdhcGkuaWZyYW1lcy5Db250ZXh0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gRnVuY3Rpb24gdG8gcnVuIHdoZW4gZ2FwaS5sb2FkIGlzIHJlYWR5LlxuICAgIGZ1bmN0aW9uIGxvYWRHYXBpSWZyYW1lKCk6IHZvaWQge1xuICAgICAgLy8gVGhlIGRldmVsb3BlciBtYXkgaGF2ZSB0cmllZCB0byBwcmV2aW91c2x5IHJ1biBnYXBpLmxvYWQgYW5kIGZhaWxlZC5cbiAgICAgIC8vIFJ1biB0aGlzIHRvIGZpeCB0aGF0LlxuICAgICAgcmVzZXRVbmxvYWRlZEdhcGlNb2R1bGVzKCk7XG4gICAgICBnYXBpLmxvYWQoJ2dhcGkuaWZyYW1lcycsIHtcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGdhcGkuaWZyYW1lcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB9LFxuICAgICAgICBvbnRpbWVvdXQ6ICgpID0+IHtcbiAgICAgICAgICAvLyBUaGUgYWJvdmUgcmVzZXQgbWF5IGJlIHN1ZmZpY2llbnQsIGJ1dCBoYXZpbmcgdGhpcyByZXNldCBhZnRlclxuICAgICAgICAgIC8vIGZhaWx1cmUgZW5zdXJlcyB0aGF0IGlmIHRoZSBkZXZlbG9wZXIgY2FsbHMgZ2FwaS5sb2FkIGFmdGVyIHRoZVxuICAgICAgICAgIC8vIGNvbm5lY3Rpb24gaXMgcmUtZXN0YWJsaXNoZWQgYW5kIGJlZm9yZSBhbm90aGVyIGF0dGVtcHQgdG8gZW1iZWRcbiAgICAgICAgICAvLyB0aGUgaWZyYW1lLCBpdCB3b3VsZCB3b3JrIGFuZCB3b3VsZCBub3QgYmUgYnJva2VuIGJlY2F1c2Ugb2Ygb3VyXG4gICAgICAgICAgLy8gZmFpbGVkIGF0dGVtcHQuXG4gICAgICAgICAgLy8gVGltZW91dCB3aGVuIGdhcGkuaWZyYW1lcy5JZnJhbWUgbm90IGxvYWRlZC5cbiAgICAgICAgICByZXNldFVubG9hZGVkR2FwaU1vZHVsZXMoKTtcbiAgICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuTkVUV09SS19SRVFVRVNUX0ZBSUxFRCkpO1xuICAgICAgICB9LFxuICAgICAgICB0aW1lb3V0OiBORVRXT1JLX1RJTUVPVVQuZ2V0KClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChfd2luZG93KCkuZ2FwaT8uaWZyYW1lcz8uSWZyYW1lKSB7XG4gICAgICAvLyBJZiBnYXBpLmlmcmFtZXMuSWZyYW1lIGF2YWlsYWJsZSwgcmVzb2x2ZS5cbiAgICAgIHJlc29sdmUoZ2FwaS5pZnJhbWVzLmdldENvbnRleHQoKSk7XG4gICAgfSBlbHNlIGlmICghIV93aW5kb3coKS5nYXBpPy5sb2FkKSB7XG4gICAgICAvLyBHYXBpIGxvYWRlciByZWFkeSwgbG9hZCBnYXBpLmlmcmFtZXMuXG4gICAgICBsb2FkR2FwaUlmcmFtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSBuZXcgaWZyYW1lIGNhbGxiYWNrIHdoZW4gdGhpcyBpcyBjYWxsZWQgc28gYXMgbm90IHRvIG92ZXJ3cml0ZVxuICAgICAgLy8gYW55IHByZXZpb3VzIGRlZmluZWQgY2FsbGJhY2suIFRoaXMgaGFwcGVucyBpZiB0aGlzIG1ldGhvZCBpcyBjYWxsZWRcbiAgICAgIC8vIG11bHRpcGxlIHRpbWVzIGluIHBhcmFsbGVsIGFuZCBjb3VsZCByZXN1bHQgaW4gdGhlIGxhdGVyIGNhbGxiYWNrXG4gICAgICAvLyBvdmVyd3JpdGluZyB0aGUgcHJldmlvdXMgb25lLiBUaGlzIHdvdWxkIGVuZCB1cCB3aXRoIGEgaWZyYW1lXG4gICAgICAvLyB0aW1lb3V0LlxuICAgICAgY29uc3QgY2JOYW1lID0ganMuX2dlbmVyYXRlQ2FsbGJhY2tOYW1lKCdpZnJhbWVmY2InKTtcbiAgICAgIC8vIEdBcGkgbG9hZGVyIG5vdCBhdmFpbGFibGUsIGR5bmFtaWNhbGx5IGxvYWQgcGxhdGZvcm0uanMuXG4gICAgICBfd2luZG93KClbY2JOYW1lXSA9ICgpID0+IHtcbiAgICAgICAgLy8gR0FwaSBsb2FkZXIgc2hvdWxkIGJlIHJlYWR5LlxuICAgICAgICBpZiAoISFnYXBpLmxvYWQpIHtcbiAgICAgICAgICBsb2FkR2FwaUlmcmFtZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEdhcGkgbG9hZGVyIGZhaWxlZCwgdGhyb3cgZXJyb3IuXG4gICAgICAgICAgcmVqZWN0KF9jcmVhdGVFcnJvcihhdXRoLCBBdXRoRXJyb3JDb2RlLk5FVFdPUktfUkVRVUVTVF9GQUlMRUQpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIC8vIExvYWQgR0FwaSBsb2FkZXIuXG4gICAgICByZXR1cm4ganMuX2xvYWRKUyhgaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvYXBpLmpzP29ubG9hZD0ke2NiTmFtZX1gKS5jYXRjaChlID0+IHJlamVjdChlKSk7XG4gICAgfVxuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgLy8gUmVzZXQgY2FjaGVkIHByb21pc2UgdG8gYWxsb3cgZm9yIHJldHJpYWwuXG4gICAgY2FjaGVkR0FwaUxvYWRlciA9IG51bGw7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pO1xufVxuXG5sZXQgY2FjaGVkR0FwaUxvYWRlcjogUHJvbWlzZTxnYXBpLmlmcmFtZXMuQ29udGV4dD4gfCBudWxsID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBfbG9hZEdhcGkoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxnYXBpLmlmcmFtZXMuQ29udGV4dD4ge1xuICBjYWNoZWRHQXBpTG9hZGVyID0gY2FjaGVkR0FwaUxvYWRlciB8fCBsb2FkR2FwaShhdXRoKTtcbiAgcmV0dXJuIGNhY2hlZEdBcGlMb2FkZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcmVzZXRMb2FkZXIoKTogdm9pZCB7XG4gIGNhY2hlZEdBcGlMb2FkZXIgPSBudWxsO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTREtfVkVSU0lPTiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgcXVlcnlzdHJpbmcgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBEZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJuYWwnO1xuXG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCwgX2NyZWF0ZUVycm9yIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBEZWxheSB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9kZWxheSc7XG5pbXBvcnQgeyBfZW11bGF0b3JVcmwgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvZW11bGF0b3InO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBfd2luZG93IH0gZnJvbSAnLi4vYXV0aF93aW5kb3cnO1xuaW1wb3J0ICogYXMgZ2FwaUxvYWRlciBmcm9tICcuL2dhcGknO1xuXG5jb25zdCBQSU5HX1RJTUVPVVQgPSBuZXcgRGVsYXkoNTAwMCwgMTUwMDApO1xuY29uc3QgSUZSQU1FX1BBVEggPSAnX18vYXV0aC9pZnJhbWUnO1xuY29uc3QgRU1VTEFURURfSUZSQU1FX1BBVEggPSAnZW11bGF0b3IvYXV0aC9pZnJhbWUnO1xuXG5jb25zdCBJRlJBTUVfQVRUUklCVVRFUyA9IHtcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICctMTAwcHgnLFxuICAgIHdpZHRoOiAnMXB4JyxcbiAgICBoZWlnaHQ6ICcxcHgnXG4gIH0sXG4gICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgdGFiaW5kZXg6ICctMSdcbn07XG5cbi8vIE1hcCBmcm9tIGFwaUhvc3QgdG8gZW5kcG9pbnQgSUQgZm9yIHBhc3NpbmcgaW50byBpZnJhbWUuIEluIGN1cnJlbnQgU0RLLCBhcGlIb3N0IGNhbiBiZSBzZXQgdG9cbi8vIGFueXRoaW5nIChub3QgZnJvbSBhIGxpc3Qgb2YgZW5kcG9pbnRzIHdpdGggSURzIGFzIGluIGxlZ2FjeSksIHNvIHRoaXMgaXMgdGhlIGNsb3Nlc3Qgd2UgY2FuIGdldC5cbmNvbnN0IEVJRF9GUk9NX0FQSUhPU1QgPSBuZXcgTWFwKFtcbiAgW0RlZmF1bHRDb25maWcuQVBJX0hPU1QsICdwJ10sIC8vIHByb2R1Y3Rpb25cbiAgWydzdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tJywgJ3MnXSwgLy8gc3RhZ2luZ1xuICBbJ3Rlc3QtaWRlbnRpdHl0b29sa2l0LnNhbmRib3guZ29vZ2xlYXBpcy5jb20nLCAndCddIC8vIHRlc3Rcbl0pO1xuXG5mdW5jdGlvbiBnZXRJZnJhbWVVcmwoYXV0aDogQXV0aEludGVybmFsKTogc3RyaW5nIHtcbiAgY29uc3QgY29uZmlnID0gYXV0aC5jb25maWc7XG4gIF9hc3NlcnQoY29uZmlnLmF1dGhEb21haW4sIGF1dGgsIEF1dGhFcnJvckNvZGUuTUlTU0lOR19BVVRIX0RPTUFJTik7XG4gIGNvbnN0IHVybCA9IGNvbmZpZy5lbXVsYXRvclxuICAgID8gX2VtdWxhdG9yVXJsKGNvbmZpZywgRU1VTEFURURfSUZSQU1FX1BBVEgpXG4gICAgOiBgaHR0cHM6Ly8ke2F1dGguY29uZmlnLmF1dGhEb21haW59LyR7SUZSQU1FX1BBVEh9YDtcblxuICBjb25zdCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgYXBpS2V5OiBjb25maWcuYXBpS2V5LFxuICAgIGFwcE5hbWU6IGF1dGgubmFtZSxcbiAgICB2OiBTREtfVkVSU0lPTlxuICB9O1xuICBjb25zdCBlaWQgPSBFSURfRlJPTV9BUElIT1NULmdldChhdXRoLmNvbmZpZy5hcGlIb3N0KTtcbiAgaWYgKGVpZCkge1xuICAgIHBhcmFtcy5laWQgPSBlaWQ7XG4gIH1cbiAgY29uc3QgZnJhbWV3b3JrcyA9IGF1dGguX2dldEZyYW1ld29ya3MoKTtcbiAgaWYgKGZyYW1ld29ya3MubGVuZ3RoKSB7XG4gICAgcGFyYW1zLmZ3ID0gZnJhbWV3b3Jrcy5qb2luKCcsJyk7XG4gIH1cbiAgcmV0dXJuIGAke3VybH0/JHtxdWVyeXN0cmluZyhwYXJhbXMpLnNsaWNlKDEpfWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfb3BlbklmcmFtZShcbiAgYXV0aDogQXV0aEludGVybmFsXG4pOiBQcm9taXNlPGdhcGkuaWZyYW1lcy5JZnJhbWU+IHtcbiAgY29uc3QgY29udGV4dCA9IGF3YWl0IGdhcGlMb2FkZXIuX2xvYWRHYXBpKGF1dGgpO1xuICBjb25zdCBnYXBpID0gX3dpbmRvdygpLmdhcGk7XG4gIF9hc3NlcnQoZ2FwaSwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gIHJldHVybiBjb250ZXh0Lm9wZW4oXG4gICAge1xuICAgICAgd2hlcmU6IGRvY3VtZW50LmJvZHksXG4gICAgICB1cmw6IGdldElmcmFtZVVybChhdXRoKSxcbiAgICAgIG1lc3NhZ2VIYW5kbGVyc0ZpbHRlcjogZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUixcbiAgICAgIGF0dHJpYnV0ZXM6IElGUkFNRV9BVFRSSUJVVEVTLFxuICAgICAgZG9udGNsZWFyOiB0cnVlXG4gICAgfSxcbiAgICAoaWZyYW1lOiBnYXBpLmlmcmFtZXMuSWZyYW1lKSA9PlxuICAgICAgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBhd2FpdCBpZnJhbWUucmVzdHlsZSh7XG4gICAgICAgICAgLy8gUHJldmVudCBpZnJhbWUgZnJvbSBjbG9zaW5nIG9uIG1vdXNlIG91dC5cbiAgICAgICAgICBzZXRIaWRlT25MZWF2ZTogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbmV0d29ya0Vycm9yID0gX2NyZWF0ZUVycm9yKFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgQXV0aEVycm9yQ29kZS5ORVRXT1JLX1JFUVVFU1RfRkFJTEVEXG4gICAgICAgICk7XG4gICAgICAgIC8vIENvbmZpcm0gaWZyYW1lIGlzIGNvcnJlY3RseSBsb2FkZWQuXG4gICAgICAgIC8vIFRvIGZhbGxiYWNrIG9uIGZhaWx1cmUsIHNldCBhIHRpbWVvdXQuXG4gICAgICAgIGNvbnN0IG5ldHdvcmtFcnJvclRpbWVyID0gX3dpbmRvdygpLnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHJlamVjdChuZXR3b3JrRXJyb3IpO1xuICAgICAgICB9LCBQSU5HX1RJTUVPVVQuZ2V0KCkpO1xuICAgICAgICAvLyBDbGVhciB0aW1lciBhbmQgcmVzb2x2ZSBwZW5kaW5nIGlmcmFtZSByZWFkeSBwcm9taXNlLlxuICAgICAgICBmdW5jdGlvbiBjbGVhclRpbWVyQW5kUmVzb2x2ZSgpOiB2b2lkIHtcbiAgICAgICAgICBfd2luZG93KCkuY2xlYXJUaW1lb3V0KG5ldHdvcmtFcnJvclRpbWVyKTtcbiAgICAgICAgICByZXNvbHZlKGlmcmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhpcyByZXR1cm5zIGFuIElUaGVuYWJsZS4gSG93ZXZlciB0aGUgcmVqZWN0IHBhcnQgZG9lcyBub3QgY2FsbFxuICAgICAgICAvLyB3aGVuIHRoZSBpZnJhbWUgaXMgbm90IGxvYWRlZC5cbiAgICAgICAgaWZyYW1lLnBpbmcoY2xlYXJUaW1lckFuZFJlc29sdmUpLnRoZW4oY2xlYXJUaW1lckFuZFJlc29sdmUsICgpID0+IHtcbiAgICAgICAgICByZWplY3QobmV0d29ya0Vycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICApO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBnZXRVQSB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzJztcbmltcG9ydCB7IF9hc3NlcnQgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7XG4gIF9pc0Nocm9tZUlPUyxcbiAgX2lzRmlyZWZveCxcbiAgX2lzSU9TU3RhbmRhbG9uZVxufSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcblxuY29uc3QgQkFTRV9QT1BVUF9PUFRJT05TID0ge1xuICBsb2NhdGlvbjogJ3llcycsXG4gIHJlc2l6YWJsZTogJ3llcycsXG4gIHN0YXR1c2JhcjogJ3llcycsXG4gIHRvb2xiYXI6ICdubydcbn07XG5cbmNvbnN0IERFRkFVTFRfV0lEVEggPSA1MDA7XG5jb25zdCBERUZBVUxUX0hFSUdIVCA9IDYwMDtcbmNvbnN0IFRBUkdFVF9CTEFOSyA9ICdfYmxhbmsnO1xuXG5jb25zdCBGSVJFRk9YX0VNUFRZX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0JztcblxuZXhwb3J0IGNsYXNzIEF1dGhQb3B1cCB7XG4gIGFzc29jaWF0ZWRFdmVudDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgd2luZG93OiBXaW5kb3cgfCBudWxsKSB7fVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLndpbmRvdykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfb3BlbihcbiAgYXV0aDogQXV0aEludGVybmFsLFxuICB1cmw/OiBzdHJpbmcsXG4gIG5hbWU/OiBzdHJpbmcsXG4gIHdpZHRoID0gREVGQVVMVF9XSURUSCxcbiAgaGVpZ2h0ID0gREVGQVVMVF9IRUlHSFRcbik6IEF1dGhQb3B1cCB7XG4gIGNvbnN0IHRvcCA9IE1hdGgubWF4KCh3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0IC0gaGVpZ2h0KSAvIDIsIDApLnRvU3RyaW5nKCk7XG4gIGNvbnN0IGxlZnQgPSBNYXRoLm1heCgod2luZG93LnNjcmVlbi5hdmFpbFdpZHRoIC0gd2lkdGgpIC8gMiwgMCkudG9TdHJpbmcoKTtcbiAgbGV0IHRhcmdldCA9ICcnO1xuXG4gIGNvbnN0IG9wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgLi4uQkFTRV9QT1BVUF9PUFRJT05TLFxuICAgIHdpZHRoOiB3aWR0aC50b1N0cmluZygpLFxuICAgIGhlaWdodDogaGVpZ2h0LnRvU3RyaW5nKCksXG4gICAgdG9wLFxuICAgIGxlZnRcbiAgfTtcblxuICAvLyBDaHJvbWUgaU9TIDcgYW5kIDggaXMgcmV0dXJuaW5nIGFuIHVuZGVmaW5lZCBwb3B1cCB3aW4gd2hlbiB0YXJnZXQgaXNcbiAgLy8gc3BlY2lmaWVkLCBldmVuIHRob3VnaCB0aGUgcG9wdXAgaXMgbm90IG5lY2Vzc2FyaWx5IGJsb2NrZWQuXG4gIGNvbnN0IHVhID0gZ2V0VUEoKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChuYW1lKSB7XG4gICAgdGFyZ2V0ID0gX2lzQ2hyb21lSU9TKHVhKSA/IFRBUkdFVF9CTEFOSyA6IG5hbWU7XG4gIH1cblxuICBpZiAoX2lzRmlyZWZveCh1YSkpIHtcbiAgICAvLyBGaXJlZm94IGNvbXBsYWlucyB3aGVuIGludmFsaWQgVVJMcyBhcmUgcG9wcGVkIG91dC4gSGFja3kgd2F5IHRvIGJ5cGFzcy5cbiAgICB1cmwgPSB1cmwgfHwgRklSRUZPWF9FTVBUWV9VUkw7XG4gICAgLy8gRmlyZWZveCBkaXNhYmxlcyBieSBkZWZhdWx0IHNjcm9sbGluZyBvbiBwb3B1cCB3aW5kb3dzLCB3aGljaCBjYW4gY3JlYXRlXG4gICAgLy8gaXNzdWVzIHdoZW4gdGhlIHVzZXIgaGFzIG1hbnkgR29vZ2xlIGFjY291bnRzLCBmb3IgaW5zdGFuY2UuXG4gICAgb3B0aW9ucy5zY3JvbGxiYXJzID0gJ3llcyc7XG4gIH1cblxuICBjb25zdCBvcHRpb25zU3RyaW5nID0gT2JqZWN0LmVudHJpZXMob3B0aW9ucykucmVkdWNlKFxuICAgIChhY2N1bSwgW2tleSwgdmFsdWVdKSA9PiBgJHthY2N1bX0ke2tleX09JHt2YWx1ZX0sYCxcbiAgICAnJ1xuICApO1xuXG4gIGlmIChfaXNJT1NTdGFuZGFsb25lKHVhKSAmJiB0YXJnZXQgIT09ICdfc2VsZicpIHtcbiAgICBvcGVuQXNOZXdXaW5kb3dJT1ModXJsIHx8ICcnLCB0YXJnZXQpO1xuICAgIHJldHVybiBuZXcgQXV0aFBvcHVwKG51bGwpO1xuICB9XG5cbiAgLy8gYWJvdXQ6YmxhbmsgZ2V0dGluZyBzYW5pdGl6ZWQgY2F1c2luZyBicm93c2VycyBsaWtlIElFL0VkZ2UgdG8gZGlzcGxheVxuICAvLyBicmllZiBlcnJvciBtZXNzYWdlIGJlZm9yZSByZWRpcmVjdGluZyB0byBoYW5kbGVyLlxuICBjb25zdCBuZXdXaW4gPSB3aW5kb3cub3Blbih1cmwgfHwgJycsIHRhcmdldCwgb3B0aW9uc1N0cmluZyk7XG4gIF9hc3NlcnQobmV3V2luLCBhdXRoLCBBdXRoRXJyb3JDb2RlLlBPUFVQX0JMT0NLRUQpO1xuXG4gIC8vIEZsYWt5IG9uIElFIGVkZ2UsIGVuY2Fwc3VsYXRlIHdpdGggYSB0cnkgYW5kIGNhdGNoLlxuICB0cnkge1xuICAgIG5ld1dpbi5mb2N1cygpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHJldHVybiBuZXcgQXV0aFBvcHVwKG5ld1dpbik7XG59XG5cbmZ1bmN0aW9uIG9wZW5Bc05ld1dpbmRvd0lPUyh1cmw6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGVsLmhyZWYgPSB1cmw7XG4gIGVsLnRhcmdldCA9IHRhcmdldDtcbiAgY29uc3QgY2xpY2sgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICBjbGljay5pbml0TW91c2VFdmVudChcbiAgICAnY2xpY2snLFxuICAgIHRydWUsXG4gICAgdHJ1ZSxcbiAgICB3aW5kb3csXG4gICAgMSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIGZhbHNlLFxuICAgIGZhbHNlLFxuICAgIGZhbHNlLFxuICAgIGZhbHNlLFxuICAgIDEsXG4gICAgbnVsbFxuICApO1xuICBlbC5kaXNwYXRjaEV2ZW50KGNsaWNrKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTREtfVkVSU0lPTiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vbW9kZWwvcHVibGljX3R5cGVzJztcbmltcG9ydCB7IEFwaUtleSwgQXBwTmFtZSwgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBBdXRoRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcG9wdXBfcmVkaXJlY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL2Vycm9ycyc7XG5pbXBvcnQgeyBfYXNzZXJ0IH0gZnJvbSAnLi9hc3NlcnQnO1xuaW1wb3J0IHsgaXNFbXB0eSwgcXVlcnlzdHJpbmcgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBfZW11bGF0b3JVcmwgfSBmcm9tICcuL2VtdWxhdG9yJztcbmltcG9ydCB7IEZlZGVyYXRlZEF1dGhQcm92aWRlciB9IGZyb20gJy4uL3Byb3ZpZGVycy9mZWRlcmF0ZWQnO1xuaW1wb3J0IHsgQmFzZU9BdXRoUHJvdmlkZXIgfSBmcm9tICcuLi9wcm92aWRlcnMvb2F1dGgnO1xuXG4vKipcbiAqIFVSTCBmb3IgQXV0aGVudGljYXRpb24gd2lkZ2V0IHdoaWNoIHdpbGwgaW5pdGlhdGUgdGhlIE9BdXRoIGhhbmRzaGFrZVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBXSURHRVRfUEFUSCA9ICdfXy9hdXRoL2hhbmRsZXInO1xuXG4vKipcbiAqIFVSTCBmb3IgZW11bGF0ZWQgZW52aXJvbm1lbnRcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgRU1VTEFUT1JfV0lER0VUX1BBVEggPSAnZW11bGF0b3IvYXV0aC9oYW5kbGVyJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtZGVmaW5pdGlvbnNcbnR5cGUgV2lkZ2V0UGFyYW1zID0ge1xuICBhcGlLZXk6IEFwaUtleTtcbiAgYXBwTmFtZTogQXBwTmFtZTtcbiAgYXV0aFR5cGU6IEF1dGhFdmVudFR5cGU7XG4gIHJlZGlyZWN0VXJsPzogc3RyaW5nO1xuICB2OiBzdHJpbmc7XG4gIHByb3ZpZGVySWQ/OiBzdHJpbmc7XG4gIHNjb3Blcz86IHN0cmluZztcbiAgY3VzdG9tUGFyYW1ldGVycz86IHN0cmluZztcbiAgZXZlbnRJZD86IHN0cmluZztcbiAgdGlkPzogc3RyaW5nO1xufSAmIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0UmVkaXJlY3RVcmwoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgcHJvdmlkZXI6IEF1dGhQcm92aWRlcixcbiAgYXV0aFR5cGU6IEF1dGhFdmVudFR5cGUsXG4gIHJlZGlyZWN0VXJsPzogc3RyaW5nLFxuICBldmVudElkPzogc3RyaW5nLFxuICBhZGRpdGlvbmFsUGFyYW1zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuKTogc3RyaW5nIHtcbiAgX2Fzc2VydChhdXRoLmNvbmZpZy5hdXRoRG9tYWluLCBhdXRoLCBBdXRoRXJyb3JDb2RlLk1JU1NJTkdfQVVUSF9ET01BSU4pO1xuICBfYXNzZXJ0KGF1dGguY29uZmlnLmFwaUtleSwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlZBTElEX0FQSV9LRVkpO1xuXG4gIGNvbnN0IHBhcmFtczogV2lkZ2V0UGFyYW1zID0ge1xuICAgIGFwaUtleTogYXV0aC5jb25maWcuYXBpS2V5LFxuICAgIGFwcE5hbWU6IGF1dGgubmFtZSxcbiAgICBhdXRoVHlwZSxcbiAgICByZWRpcmVjdFVybCxcbiAgICB2OiBTREtfVkVSU0lPTixcbiAgICBldmVudElkXG4gIH07XG5cbiAgaWYgKHByb3ZpZGVyIGluc3RhbmNlb2YgRmVkZXJhdGVkQXV0aFByb3ZpZGVyKSB7XG4gICAgcHJvdmlkZXIuc2V0RGVmYXVsdExhbmd1YWdlKGF1dGgubGFuZ3VhZ2VDb2RlKTtcbiAgICBwYXJhbXMucHJvdmlkZXJJZCA9IHByb3ZpZGVyLnByb3ZpZGVySWQgfHwgJyc7XG4gICAgaWYgKCFpc0VtcHR5KHByb3ZpZGVyLmdldEN1c3RvbVBhcmFtZXRlcnMoKSkpIHtcbiAgICAgIHBhcmFtcy5jdXN0b21QYXJhbWV0ZXJzID0gSlNPTi5zdHJpbmdpZnkocHJvdmlkZXIuZ2V0Q3VzdG9tUGFyYW1ldGVycygpKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPIHNldCBhZGRpdGlvbmFsUGFyYW1zIGZyb20gdGhlIHByb3ZpZGVyIGFzIHdlbGw/XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYWRkaXRpb25hbFBhcmFtcyB8fCB7fSkpIHtcbiAgICAgIHBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3ZpZGVyIGluc3RhbmNlb2YgQmFzZU9BdXRoUHJvdmlkZXIpIHtcbiAgICBjb25zdCBzY29wZXMgPSBwcm92aWRlci5nZXRTY29wZXMoKS5maWx0ZXIoc2NvcGUgPT4gc2NvcGUgIT09ICcnKTtcbiAgICBpZiAoc2NvcGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhcmFtcy5zY29wZXMgPSBzY29wZXMuam9pbignLCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhdXRoLnRlbmFudElkKSB7XG4gICAgcGFyYW1zLnRpZCA9IGF1dGgudGVuYW50SWQ7XG4gIH1cblxuICAvLyBUT0RPOiBtYXliZSBzZXQgZWlkIGFzIGVuZGlwb2ludElkXG4gIC8vIFRPRE86IG1heWJlIHNldCBmdyBhcyBGcmFtZXdvcmtzLmpvaW4oXCIsXCIpXG5cbiAgY29uc3QgcGFyYW1zRGljdCA9IHBhcmFtcyBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhwYXJhbXNEaWN0KSkge1xuICAgIGlmIChwYXJhbXNEaWN0W2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVsZXRlIHBhcmFtc0RpY3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGAke2dldEhhbmRsZXJCYXNlKGF1dGgpfT8ke3F1ZXJ5c3RyaW5nKHBhcmFtc0RpY3QpLnNsaWNlKDEpfWA7XG59XG5cbmZ1bmN0aW9uIGdldEhhbmRsZXJCYXNlKHsgY29uZmlnIH06IEF1dGhJbnRlcm5hbCk6IHN0cmluZyB7XG4gIGlmICghY29uZmlnLmVtdWxhdG9yKSB7XG4gICAgcmV0dXJuIGBodHRwczovLyR7Y29uZmlnLmF1dGhEb21haW59LyR7V0lER0VUX1BBVEh9YDtcbiAgfVxuXG4gIHJldHVybiBfZW11bGF0b3JVcmwoY29uZmlnLCBFTVVMQVRPUl9XSURHRVRfUEFUSCk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQXV0aFByb3ZpZGVyLCBQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBBdXRoRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi4vY29yZS9hdXRoL2F1dGhfZXZlbnRfbWFuYWdlcic7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCwgZGVidWdBc3NlcnQsIF9mYWlsIH0gZnJvbSAnLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBfZ2VuZXJhdGVFdmVudElkIH0gZnJvbSAnLi4vY29yZS91dGlsL2V2ZW50X2lkJztcbmltcG9ydCB7IF9nZXRDdXJyZW50VXJsIH0gZnJvbSAnLi4vY29yZS91dGlsL2xvY2F0aW9uJztcbmltcG9ydCB7IF92YWxpZGF0ZU9yaWdpbiB9IGZyb20gJy4uL2NvcmUvdXRpbC92YWxpZGF0ZV9vcmlnaW4nO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQge1xuICBBdXRoRXZlbnRUeXBlLFxuICBFdmVudE1hbmFnZXIsXG4gIEdhcGlBdXRoRXZlbnQsXG4gIEdhcGlPdXRjb21lLFxuICBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbFxufSBmcm9tICcuLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBfc2V0V2luZG93TG9jYXRpb24gfSBmcm9tICcuL2F1dGhfd2luZG93JztcbmltcG9ydCB7IF9vcGVuSWZyYW1lIH0gZnJvbSAnLi9pZnJhbWUvaWZyYW1lJztcbmltcG9ydCB7IGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UgfSBmcm9tICcuL3BlcnNpc3RlbmNlL3Nlc3Npb25fc3RvcmFnZSc7XG5pbXBvcnQgeyBfb3BlbiwgQXV0aFBvcHVwIH0gZnJvbSAnLi91dGlsL3BvcHVwJztcbmltcG9ydCB7IF9nZXRSZWRpcmVjdFJlc3VsdCB9IGZyb20gJy4vc3RyYXRlZ2llcy9yZWRpcmVjdCc7XG5pbXBvcnQgeyBfZ2V0UmVkaXJlY3RVcmwgfSBmcm9tICcuLi9jb3JlL3V0aWwvaGFuZGxlcic7XG5pbXBvcnQgeyBfaXNJT1MsIF9pc01vYmlsZUJyb3dzZXIsIF9pc1NhZmFyaSB9IGZyb20gJy4uL2NvcmUvdXRpbC9icm93c2VyJztcblxuLyoqXG4gKiBUaGUgc3BlY2lhbCB3ZWIgc3RvcmFnZSBldmVudFxuICpcbiAqL1xuY29uc3QgV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVkgPSAnd2ViU3RvcmFnZVN1cHBvcnQnO1xuXG5pbnRlcmZhY2UgV2ViU3RvcmFnZVN1cHBvcnRNZXNzYWdlIGV4dGVuZHMgZ2FwaS5pZnJhbWVzLk1lc3NhZ2Uge1xuICBbaW5kZXg6IG51bWJlcl06IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xufVxuXG5pbnRlcmZhY2UgTWFuYWdlck9yUHJvbWlzZSB7XG4gIG1hbmFnZXI/OiBFdmVudE1hbmFnZXI7XG4gIHByb21pc2U/OiBQcm9taXNlPEV2ZW50TWFuYWdlcj47XG59XG5cbmNsYXNzIEJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgaW1wbGVtZW50cyBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRNYW5hZ2VyczogUmVjb3JkPHN0cmluZywgTWFuYWdlck9yUHJvbWlzZT4gPSB7fTtcbiAgcHJpdmF0ZSByZWFkb25seSBpZnJhbWVzOiBSZWNvcmQ8c3RyaW5nLCBnYXBpLmlmcmFtZXMuSWZyYW1lPiA9IHt9O1xuICBwcml2YXRlIHJlYWRvbmx5IG9yaWdpblZhbGlkYXRpb25Qcm9taXNlczogUmVjb3JkPHN0cmluZywgUHJvbWlzZTx2b2lkPj4gPSB7fTtcblxuICByZWFkb25seSBfcmVkaXJlY3RQZXJzaXN0ZW5jZSA9IGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2U7XG5cbiAgLy8gV3JhcHBpbmcgaW4gYXN5bmMgZXZlbiB0aG91Z2ggd2UgZG9uJ3QgYXdhaXQgYW55d2hlcmUgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBzdXJlIGVycm9ycyBhcmUgcmFpc2VkIGFzIHByb21pc2UgcmVqZWN0aW9uc1xuICBhc3luYyBfb3BlblBvcHVwKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICAgIGF1dGhUeXBlOiBBdXRoRXZlbnRUeXBlLFxuICAgIGV2ZW50SWQ/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxBdXRoUG9wdXA+IHtcbiAgICBkZWJ1Z0Fzc2VydChcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2Vyc1thdXRoLl9rZXkoKV0/Lm1hbmFnZXIsXG4gICAgICAnX2luaXRpYWxpemUoKSBub3QgY2FsbGVkIGJlZm9yZSBfb3BlblBvcHVwKCknXG4gICAgKTtcblxuICAgIGNvbnN0IHVybCA9IF9nZXRSZWRpcmVjdFVybChcbiAgICAgIGF1dGgsXG4gICAgICBwcm92aWRlcixcbiAgICAgIGF1dGhUeXBlLFxuICAgICAgX2dldEN1cnJlbnRVcmwoKSxcbiAgICAgIGV2ZW50SWRcbiAgICApO1xuICAgIHJldHVybiBfb3BlbihhdXRoLCB1cmwsIF9nZW5lcmF0ZUV2ZW50SWQoKSk7XG4gIH1cblxuICBhc3luYyBfb3BlblJlZGlyZWN0KFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBwcm92aWRlcjogQXV0aFByb3ZpZGVyLFxuICAgIGF1dGhUeXBlOiBBdXRoRXZlbnRUeXBlLFxuICAgIGV2ZW50SWQ/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxuZXZlcj4ge1xuICAgIGF3YWl0IHRoaXMuX29yaWdpblZhbGlkYXRpb24oYXV0aCk7XG4gICAgX3NldFdpbmRvd0xvY2F0aW9uKFxuICAgICAgX2dldFJlZGlyZWN0VXJsKGF1dGgsIHByb3ZpZGVyLCBhdXRoVHlwZSwgX2dldEN1cnJlbnRVcmwoKSwgZXZlbnRJZClcbiAgICApO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gIH1cblxuICBfaW5pdGlhbGl6ZShhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPEV2ZW50TWFuYWdlcj4ge1xuICAgIGNvbnN0IGtleSA9IGF1dGguX2tleSgpO1xuICAgIGlmICh0aGlzLmV2ZW50TWFuYWdlcnNba2V5XSkge1xuICAgICAgY29uc3QgeyBtYW5hZ2VyLCBwcm9taXNlIH0gPSB0aGlzLmV2ZW50TWFuYWdlcnNba2V5XTtcbiAgICAgIGlmIChtYW5hZ2VyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWFuYWdlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Z0Fzc2VydChwcm9taXNlLCAnSWYgbWFuYWdlciBpcyBub3Qgc2V0LCBwcm9taXNlIHNob3VsZCBiZScpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5pbml0QW5kR2V0TWFuYWdlcihhdXRoKTtcbiAgICB0aGlzLmV2ZW50TWFuYWdlcnNba2V5XSA9IHsgcHJvbWlzZSB9O1xuXG4gICAgLy8gSWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQsIHRoZSBrZXkgc2hvdWxkIGJlIHJlbW92ZWQgc28gdGhhdCB0aGVcbiAgICAvLyBvcGVyYXRpb24gY2FuIGJlIHJldHJpZWQgbGF0ZXIuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5ldmVudE1hbmFnZXJzW2tleV07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaW5pdEFuZEdldE1hbmFnZXIoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxFdmVudE1hbmFnZXI+IHtcbiAgICBjb25zdCBpZnJhbWUgPSBhd2FpdCBfb3BlbklmcmFtZShhdXRoKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gbmV3IEF1dGhFdmVudE1hbmFnZXIoYXV0aCk7XG4gICAgaWZyYW1lLnJlZ2lzdGVyPEdhcGlBdXRoRXZlbnQ+KFxuICAgICAgJ2F1dGhFdmVudCcsXG4gICAgICAoaWZyYW1lRXZlbnQ6IEdhcGlBdXRoRXZlbnQgfCBudWxsKSA9PiB7XG4gICAgICAgIF9hc3NlcnQoaWZyYW1lRXZlbnQ/LmF1dGhFdmVudCwgYXV0aCwgQXV0aEVycm9yQ29kZS5JTlZBTElEX0FVVEhfRVZFTlQpO1xuICAgICAgICAvLyBUT0RPOiBDb25zaWRlciBzcGxpdHRpbmcgcmVkaXJlY3QgYW5kIHBvcHVwIGV2ZW50cyBlYXJsaWVyIG9uXG5cbiAgICAgICAgY29uc3QgaGFuZGxlZCA9IG1hbmFnZXIub25FdmVudChpZnJhbWVFdmVudC5hdXRoRXZlbnQpO1xuICAgICAgICByZXR1cm4geyBzdGF0dXM6IGhhbmRsZWQgPyBHYXBpT3V0Y29tZS5BQ0sgOiBHYXBpT3V0Y29tZS5FUlJPUiB9O1xuICAgICAgfSxcbiAgICAgIGdhcGkuaWZyYW1lcy5DUk9TU19PUklHSU5fSUZSQU1FU19GSUxURVJcbiAgICApO1xuXG4gICAgdGhpcy5ldmVudE1hbmFnZXJzW2F1dGguX2tleSgpXSA9IHsgbWFuYWdlciB9O1xuICAgIHRoaXMuaWZyYW1lc1thdXRoLl9rZXkoKV0gPSBpZnJhbWU7XG4gICAgcmV0dXJuIG1hbmFnZXI7XG4gIH1cblxuICBfaXNJZnJhbWVXZWJTdG9yYWdlU3VwcG9ydGVkKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBjYjogKHN1cHBvcnRlZDogYm9vbGVhbikgPT4gdW5rbm93blxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpZnJhbWUgPSB0aGlzLmlmcmFtZXNbYXV0aC5fa2V5KCldO1xuICAgIGlmcmFtZS5zZW5kPGdhcGkuaWZyYW1lcy5NZXNzYWdlLCBXZWJTdG9yYWdlU3VwcG9ydE1lc3NhZ2U+KFxuICAgICAgV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVksXG4gICAgICB7IHR5cGU6IFdFQl9TVE9SQUdFX1NVUFBPUlRfS0VZIH0sXG4gICAgICByZXN1bHQgPT4ge1xuICAgICAgICBjb25zdCBpc1N1cHBvcnRlZCA9IHJlc3VsdD8uWzBdPy5bV0VCX1NUT1JBR0VfU1VQUE9SVF9LRVldO1xuICAgICAgICBpZiAoaXNTdXBwb3J0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNiKCEhaXNTdXBwb3J0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2ZhaWwoYXV0aCwgQXV0aEVycm9yQ29kZS5JTlRFUk5BTF9FUlJPUik7XG4gICAgICB9LFxuICAgICAgZ2FwaS5pZnJhbWVzLkNST1NTX09SSUdJTl9JRlJBTUVTX0ZJTFRFUlxuICAgICk7XG4gIH1cblxuICBfb3JpZ2luVmFsaWRhdGlvbihhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBrZXkgPSBhdXRoLl9rZXkoKTtcbiAgICBpZiAoIXRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV0pIHtcbiAgICAgIHRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV0gPSBfdmFsaWRhdGVPcmlnaW4oYXV0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV07XG4gIH1cblxuICBnZXQgX3Nob3VsZEluaXRQcm9hY3RpdmVseSgpOiBib29sZWFuIHtcbiAgICAvLyBNb2JpbGUgYnJvd3NlcnMgYW5kIFNhZmFyaSBuZWVkIHRvIG9wdGltaXN0aWNhbGx5IGluaXRpYWxpemVcbiAgICByZXR1cm4gX2lzTW9iaWxlQnJvd3NlcigpIHx8IF9pc1NhZmFyaSgpIHx8IF9pc0lPUygpO1xuICB9XG5cbiAgX2NvbXBsZXRlUmVkaXJlY3RGbiA9IF9nZXRSZWRpcmVjdFJlc3VsdDtcbn1cblxuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgUG9wdXBSZWRpcmVjdFJlc29sdmVyfSBzdWl0YWJsZSBmb3IgYnJvd3NlclxuICogYmFzZWQgYXBwbGljYXRpb25zLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IFBvcHVwUmVkaXJlY3RSZXNvbHZlciA9IEJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXI7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEZhY3RvcklkLCBNdWx0aUZhY3RvckFzc2VydGlvbiB9IGZyb20gJy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBkZWJ1Z0ZhaWwgfSBmcm9tICcuLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IE11bHRpRmFjdG9yU2Vzc2lvbkltcGwsIE11bHRpRmFjdG9yU2Vzc2lvblR5cGUgfSBmcm9tICcuL21mYV9zZXNzaW9uJztcbmltcG9ydCB7IEZpbmFsaXplTWZhUmVzcG9uc2UgfSBmcm9tICcuLi9hcGkvYXV0aGVudGljYXRpb24vbWZhJztcbmltcG9ydCB7IEF1dGhJbnRlcm5hbCB9IGZyb20gJy4uL21vZGVsL2F1dGgnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsIGltcGxlbWVudHMgTXVsdGlGYWN0b3JBc3NlcnRpb24ge1xuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocmVhZG9ubHkgZmFjdG9ySWQ6IEZhY3RvcklkKSB7fVxuXG4gIF9wcm9jZXNzKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBzZXNzaW9uOiBNdWx0aUZhY3RvclNlc3Npb25JbXBsLFxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+IHtcbiAgICBzd2l0Y2ggKHNlc3Npb24udHlwZSkge1xuICAgICAgY2FzZSBNdWx0aUZhY3RvclNlc3Npb25UeXBlLkVOUk9MTDpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmFsaXplRW5yb2xsKGF1dGgsIHNlc3Npb24uY3JlZGVudGlhbCwgZGlzcGxheU5hbWUpO1xuICAgICAgY2FzZSBNdWx0aUZhY3RvclNlc3Npb25UeXBlLlNJR05fSU46XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5hbGl6ZVNpZ25JbihhdXRoLCBzZXNzaW9uLmNyZWRlbnRpYWwpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRlYnVnRmFpbCgndW5leHBlY3RlZCBNdWx0aUZhY3RvclNlc3Npb25UeXBlJyk7XG4gICAgfVxuICB9XG5cbiAgYWJzdHJhY3QgX2ZpbmFsaXplRW5yb2xsKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBpZFRva2VuOiBzdHJpbmcsXG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmcgfCBudWxsXG4gICk6IFByb21pc2U8RmluYWxpemVNZmFSZXNwb25zZT47XG4gIGFic3RyYWN0IF9maW5hbGl6ZVNpZ25JbihcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgbWZhUGVuZGluZ0NyZWRlbnRpYWw6IHN0cmluZ1xuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+O1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQge1xuICBGYWN0b3JJZCxcbiAgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvblxufSBmcm9tICcuLi8uLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG5pbXBvcnQgeyBNdWx0aUZhY3RvckFzc2VydGlvbkltcGwgfSBmcm9tICcuLi8uLi8uLi9tZmEvbWZhX2Fzc2VydGlvbic7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IGZpbmFsaXplRW5yb2xsUGhvbmVNZmEgfSBmcm9tICcuLi8uLi8uLi9hcGkvYWNjb3VudF9tYW5hZ2VtZW50L21mYSc7XG5pbXBvcnQgeyBQaG9uZUF1dGhDcmVkZW50aWFsIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9jcmVkZW50aWFscy9waG9uZSc7XG5pbXBvcnQge1xuICBmaW5hbGl6ZVNpZ25JblBob25lTWZhLFxuICBGaW5hbGl6ZU1mYVJlc3BvbnNlXG59IGZyb20gJy4uLy4uLy4uL2FwaS9hdXRoZW50aWNhdGlvbi9tZmEnO1xuXG4vKipcbiAqIHtAaW5oZXJpdGRvYyBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9ufVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFBob25lTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsXG4gIGV4dGVuZHMgTXVsdGlGYWN0b3JBc3NlcnRpb25JbXBsXG4gIGltcGxlbWVudHMgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbiB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjcmVkZW50aWFsOiBQaG9uZUF1dGhDcmVkZW50aWFsKSB7XG4gICAgc3VwZXIoRmFjdG9ySWQuUEhPTkUpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBzdGF0aWMgX2Zyb21DcmVkZW50aWFsKFxuICAgIGNyZWRlbnRpYWw6IFBob25lQXV0aENyZWRlbnRpYWxcbiAgKTogUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwge1xuICAgIHJldHVybiBuZXcgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwoY3JlZGVudGlhbCk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIF9maW5hbGl6ZUVucm9sbChcbiAgICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgaWRUb2tlbjogc3RyaW5nLFxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nIHwgbnVsbFxuICApOiBQcm9taXNlPEZpbmFsaXplTWZhUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZmluYWxpemVFbnJvbGxQaG9uZU1mYShhdXRoLCB7XG4gICAgICBpZFRva2VuLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IHRoaXMuY3JlZGVudGlhbC5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBfZmluYWxpemVTaWduSW4oXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIG1mYVBlbmRpbmdDcmVkZW50aWFsOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxGaW5hbGl6ZU1mYVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGZpbmFsaXplU2lnbkluUGhvbmVNZmEoYXV0aCwge1xuICAgICAgbWZhUGVuZGluZ0NyZWRlbnRpYWwsXG4gICAgICBwaG9uZVZlcmlmaWNhdGlvbkluZm86IHRoaXMuY3JlZGVudGlhbC5fbWFrZVZlcmlmaWNhdGlvblJlcXVlc3QoKVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIGdlbmVyYXRpbmcgYSB7QGxpbmsgUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvciB7XG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIHtAbGluayBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9ufSB0byBjb25maXJtIG93bmVyc2hpcCBvZiB0aGUgcGhvbmUgc2Vjb25kIGZhY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHBob25lQXV0aENyZWRlbnRpYWwgLSBBIGNyZWRlbnRpYWwgcHJvdmlkZWQgYnkge0BsaW5rIFBob25lQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWx9LlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9ufSB3aGljaCBjYW4gYmUgdXNlZCB3aXRoXG4gICAqIHtAbGluayBNdWx0aUZhY3RvclJlc29sdmVyLnJlc29sdmVTaWduSW59XG4gICAqL1xuICBzdGF0aWMgYXNzZXJ0aW9uKGNyZWRlbnRpYWw6IFBob25lQXV0aENyZWRlbnRpYWwpOiBQaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9uIHtcbiAgICByZXR1cm4gUGhvbmVNdWx0aUZhY3RvckFzc2VydGlvbkltcGwuX2Zyb21DcmVkZW50aWFsKGNyZWRlbnRpYWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBwaG9uZSBzZWNvbmQgZmFjdG9yOiBgcGhvbmVgLlxuICAgKi9cbiAgc3RhdGljIEZBQ1RPUl9JRCA9ICdwaG9uZSc7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgVW5zdWJzY3JpYmUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBGaXJlYmFzZUF1dGhJbnRlcm5hbCB9IGZyb20gJ0BmaXJlYmFzZS9hdXRoLWludGVyb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IFVzZXJJbnRlcm5hbCB9IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG5pbnRlcmZhY2UgVG9rZW5MaXN0ZW5lciB7XG4gICh0b2s6IHN0cmluZyB8IG51bGwpOiB1bmtub3duO1xufVxuXG5leHBvcnQgY2xhc3MgQXV0aEludGVyb3AgaW1wbGVtZW50cyBGaXJlYmFzZUF1dGhJbnRlcm5hbCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW50ZXJuYWxMaXN0ZW5lcnM6IE1hcDxcbiAgICBUb2tlbkxpc3RlbmVyLFxuICAgIFVuc3Vic2NyaWJlXG4gID4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhdXRoOiBBdXRoSW50ZXJuYWwpIHt9XG5cbiAgZ2V0VWlkKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHRoaXMuYXNzZXJ0QXV0aENvbmZpZ3VyZWQoKTtcbiAgICByZXR1cm4gdGhpcy5hdXRoLmN1cnJlbnRVc2VyPy51aWQgfHwgbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGdldFRva2VuKFxuICAgIGZvcmNlUmVmcmVzaD86IGJvb2xlYW5cbiAgKTogUHJvbWlzZTx7IGFjY2Vzc1Rva2VuOiBzdHJpbmcgfSB8IG51bGw+IHtcbiAgICB0aGlzLmFzc2VydEF1dGhDb25maWd1cmVkKCk7XG4gICAgYXdhaXQgdGhpcy5hdXRoLl9pbml0aWFsaXphdGlvblByb21pc2U7XG4gICAgaWYgKCF0aGlzLmF1dGguY3VycmVudFVzZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gYXdhaXQgdGhpcy5hdXRoLmN1cnJlbnRVc2VyLmdldElkVG9rZW4oZm9yY2VSZWZyZXNoKTtcbiAgICByZXR1cm4geyBhY2Nlc3NUb2tlbiB9O1xuICB9XG5cbiAgYWRkQXV0aFRva2VuTGlzdGVuZXIobGlzdGVuZXI6IFRva2VuTGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLmFzc2VydEF1dGhDb25maWd1cmVkKCk7XG4gICAgaWYgKHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuaGFzKGxpc3RlbmVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gdGhpcy5hdXRoLm9uSWRUb2tlbkNoYW5nZWQodXNlciA9PiB7XG4gICAgICBsaXN0ZW5lcihcbiAgICAgICAgKHVzZXIgYXMgVXNlckludGVybmFsIHwgbnVsbCk/LnN0c1Rva2VuTWFuYWdlci5hY2Nlc3NUb2tlbiB8fCBudWxsXG4gICAgICApO1xuICAgIH0pO1xuICAgIHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuc2V0KGxpc3RlbmVyLCB1bnN1YnNjcmliZSk7XG4gICAgdGhpcy51cGRhdGVQcm9hY3RpdmVSZWZyZXNoKCk7XG4gIH1cblxuICByZW1vdmVBdXRoVG9rZW5MaXN0ZW5lcihsaXN0ZW5lcjogVG9rZW5MaXN0ZW5lcik6IHZvaWQge1xuICAgIHRoaXMuYXNzZXJ0QXV0aENvbmZpZ3VyZWQoKTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHRoaXMuaW50ZXJuYWxMaXN0ZW5lcnMuZ2V0KGxpc3RlbmVyKTtcbiAgICBpZiAoIXVuc3Vic2NyaWJlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcm5hbExpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy51cGRhdGVQcm9hY3RpdmVSZWZyZXNoKCk7XG4gIH1cblxuICBwcml2YXRlIGFzc2VydEF1dGhDb25maWd1cmVkKCk6IHZvaWQge1xuICAgIF9hc3NlcnQoXG4gICAgICB0aGlzLmF1dGguX2luaXRpYWxpemF0aW9uUHJvbWlzZSxcbiAgICAgIEF1dGhFcnJvckNvZGUuREVQRU5ERU5UX1NES19JTklUX0JFRk9SRV9BVVRIXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUHJvYWN0aXZlUmVmcmVzaCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnRlcm5hbExpc3RlbmVycy5zaXplID4gMCkge1xuICAgICAgdGhpcy5hdXRoLl9zdGFydFByb2FjdGl2ZVJlZnJlc2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdXRoLl9zdG9wUHJvYWN0aXZlUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IF9yZWdpc3RlckNvbXBvbmVudCwgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbXBvbmVudFR5cGUsXG4gIEluc3RhbnRpYXRpb25Nb2RlXG59IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBuYW1lLCB2ZXJzaW9uIH0gZnJvbSAnLi4vLi4vLi4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7IEF1dGhFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IHsgX2Fzc2VydCB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRDbGllbnRWZXJzaW9uLCBDbGllbnRQbGF0Zm9ybSB9IGZyb20gJy4uL3V0aWwvdmVyc2lvbic7XG5pbXBvcnQgeyBfY2FzdEF1dGgsIEF1dGhJbXBsLCBEZWZhdWx0Q29uZmlnIH0gZnJvbSAnLi9hdXRoX2ltcGwnO1xuaW1wb3J0IHsgQXV0aEludGVyb3AgfSBmcm9tICcuL2ZpcmViYXNlX2ludGVybmFsJztcbmltcG9ydCB7IENvbmZpZ0ludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi8uLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuaW1wb3J0IHsgX2luaXRpYWxpemVBdXRoSW5zdGFuY2UgfSBmcm9tICcuL2luaXRpYWxpemUnO1xuXG5leHBvcnQgY29uc3QgZW51bSBfQ29tcG9uZW50TmFtZSB7XG4gIEFVVEggPSAnYXV0aCcsXG4gIEFVVEhfSU5URVJOQUwgPSAnYXV0aC1pbnRlcm5hbCdcbn1cblxuZnVuY3Rpb24gZ2V0VmVyc2lvbkZvclBsYXRmb3JtKFxuICBjbGllbnRQbGF0Zm9ybTogQ2xpZW50UGxhdGZvcm1cbik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIHN3aXRjaCAoY2xpZW50UGxhdGZvcm0pIHtcbiAgICBjYXNlIENsaWVudFBsYXRmb3JtLk5PREU6XG4gICAgICByZXR1cm4gJ25vZGUnO1xuICAgIGNhc2UgQ2xpZW50UGxhdGZvcm0uUkVBQ1RfTkFUSVZFOlxuICAgICAgcmV0dXJuICdybic7XG4gICAgY2FzZSBDbGllbnRQbGF0Zm9ybS5XT1JLRVI6XG4gICAgICByZXR1cm4gJ3dlYndvcmtlcic7XG4gICAgY2FzZSBDbGllbnRQbGF0Zm9ybS5DT1JET1ZBOlxuICAgICAgcmV0dXJuICdjb3Jkb3ZhJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJBdXRoKGNsaWVudFBsYXRmb3JtOiBDbGllbnRQbGF0Zm9ybSk6IHZvaWQge1xuICBfcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgbmV3IENvbXBvbmVudChcbiAgICAgIF9Db21wb25lbnROYW1lLkFVVEgsXG4gICAgICAoY29udGFpbmVyLCB7IG9wdGlvbnM6IGRlcHMgfTogeyBvcHRpb25zPzogRGVwZW5kZW5jaWVzIH0pID0+IHtcbiAgICAgICAgY29uc3QgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKSE7XG4gICAgICAgIGNvbnN0IHsgYXBpS2V5LCBhdXRoRG9tYWluIH0gPSBhcHAub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIChhcHAgPT4ge1xuICAgICAgICAgIF9hc3NlcnQoXG4gICAgICAgICAgICBhcGlLZXkgJiYgIWFwaUtleS5pbmNsdWRlcygnOicpLFxuICAgICAgICAgICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX0FQSV9LRVksXG4gICAgICAgICAgICB7IGFwcE5hbWU6IGFwcC5uYW1lIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIEF1dGggZG9tYWluIGlzIG9wdGlvbmFsIGlmIElkUCBzaWduIGluIGlzbid0IGJlaW5nIHVzZWRcbiAgICAgICAgICBfYXNzZXJ0KCFhdXRoRG9tYWluPy5pbmNsdWRlcygnOicpLCBBdXRoRXJyb3JDb2RlLkFSR1VNRU5UX0VSUk9SLCB7XG4gICAgICAgICAgICBhcHBOYW1lOiBhcHAubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IGNvbmZpZzogQ29uZmlnSW50ZXJuYWwgPSB7XG4gICAgICAgICAgICBhcGlLZXksXG4gICAgICAgICAgICBhdXRoRG9tYWluLFxuICAgICAgICAgICAgY2xpZW50UGxhdGZvcm0sXG4gICAgICAgICAgICBhcGlIb3N0OiBEZWZhdWx0Q29uZmlnLkFQSV9IT1NULFxuICAgICAgICAgICAgdG9rZW5BcGlIb3N0OiBEZWZhdWx0Q29uZmlnLlRPS0VOX0FQSV9IT1NULFxuICAgICAgICAgICAgYXBpU2NoZW1lOiBEZWZhdWx0Q29uZmlnLkFQSV9TQ0hFTUUsXG4gICAgICAgICAgICBzZGtDbGllbnRWZXJzaW9uOiBfZ2V0Q2xpZW50VmVyc2lvbihjbGllbnRQbGF0Zm9ybSlcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgYXV0aEluc3RhbmNlID0gbmV3IEF1dGhJbXBsKGFwcCwgY29uZmlnKTtcbiAgICAgICAgICBfaW5pdGlhbGl6ZUF1dGhJbnN0YW5jZShhdXRoSW5zdGFuY2UsIGRlcHMpO1xuXG4gICAgICAgICAgcmV0dXJuIGF1dGhJbnN0YW5jZTtcbiAgICAgICAgfSkoYXBwKTtcbiAgICAgIH0sXG4gICAgICBDb21wb25lbnRUeXBlLlBVQkxJQ1xuICAgIClcbiAgICAgIC8qKlxuICAgICAgICogQXV0aCBjYW4gb25seSBiZSBpbml0aWFsaXplZCBieSBleHBsaWNpdGx5IGNhbGxpbmcgZ2V0QXV0aCgpIG9yIGluaXRpYWxpemVBdXRoKClcbiAgICAgICAqIEZvciB3aHkgd2UgZG8gdGhpcywgU2VlIGdvL2ZpcmViYXNlLW5leHQtYXV0aC1pbml0XG4gICAgICAgKi9cbiAgICAgIC5zZXRJbnN0YW50aWF0aW9uTW9kZShJbnN0YW50aWF0aW9uTW9kZS5FWFBMSUNJVClcbiAgICAgIC8qKlxuICAgICAgICogQmVjYXVzZSBhbGwgZmlyZWJhc2UgcHJvZHVjdHMgdGhhdCBkZXBlbmQgb24gYXV0aCBkZXBlbmQgb24gYXV0aC1pbnRlcm5hbCBkaXJlY3RseSxcbiAgICAgICAqIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSBhdXRoLWludGVybmFsIGFmdGVyIGF1dGggaXMgaW5pdGlhbGl6ZWQgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gb3RoZXIgZmlyZWJhc2UgcHJvZHVjdHMuXG4gICAgICAgKi9cbiAgICAgIC5zZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayhcbiAgICAgICAgKGNvbnRhaW5lciwgX2luc3RhbmNlSWRlbnRpZmllciwgX2luc3RhbmNlKSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV0aEludGVybmFsUHJvdmlkZXIgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoXG4gICAgICAgICAgICBfQ29tcG9uZW50TmFtZS5BVVRIX0lOVEVSTkFMXG4gICAgICAgICAgKTtcbiAgICAgICAgICBhdXRoSW50ZXJuYWxQcm92aWRlci5pbml0aWFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgKTtcblxuICBfcmVnaXN0ZXJDb21wb25lbnQoXG4gICAgbmV3IENvbXBvbmVudChcbiAgICAgIF9Db21wb25lbnROYW1lLkFVVEhfSU5URVJOQUwsXG4gICAgICBjb250YWluZXIgPT4ge1xuICAgICAgICBjb25zdCBhdXRoID0gX2Nhc3RBdXRoKFxuICAgICAgICAgIGNvbnRhaW5lci5nZXRQcm92aWRlcihfQ29tcG9uZW50TmFtZS5BVVRIKS5nZXRJbW1lZGlhdGUoKSFcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIChhdXRoID0+IG5ldyBBdXRoSW50ZXJvcChhdXRoKSkoYXV0aCk7XG4gICAgICB9LFxuICAgICAgQ29tcG9uZW50VHlwZS5QUklWQVRFXG4gICAgKS5zZXRJbnN0YW50aWF0aW9uTW9kZShJbnN0YW50aWF0aW9uTW9kZS5FWFBMSUNJVClcbiAgKTtcblxuICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgZ2V0VmVyc2lvbkZvclBsYXRmb3JtKGNsaWVudFBsYXRmb3JtKSk7XG4gIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXG4gIHJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnX19CVUlMRF9UQVJHRVRfXycpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEZpcmViYXNlQXBwLCBnZXRBcHAsIF9nZXRQcm92aWRlciB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG5pbXBvcnQgeyBpbml0aWFsaXplQXV0aCB9IGZyb20gJy4uJztcbmltcG9ydCB7IHJlZ2lzdGVyQXV0aCB9IGZyb20gJy4uL2NvcmUvYXV0aC9yZWdpc3Rlcic7XG5pbXBvcnQgeyBDbGllbnRQbGF0Zm9ybSB9IGZyb20gJy4uL2NvcmUvdXRpbC92ZXJzaW9uJztcbmltcG9ydCB7IGJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlIH0gZnJvbSAnLi9wZXJzaXN0ZW5jZS9sb2NhbF9zdG9yYWdlJztcbmltcG9ydCB7IGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UgfSBmcm9tICcuL3BlcnNpc3RlbmNlL3Nlc3Npb25fc3RvcmFnZSc7XG5pbXBvcnQgeyBpbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlIH0gZnJvbSAnLi9wZXJzaXN0ZW5jZS9pbmRleGVkX2RiJztcbmltcG9ydCB7IGJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgfSBmcm9tICcuL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi9tb2RlbC9wdWJsaWNfdHlwZXMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIEF1dGggaW5zdGFuY2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0uXG4gKiBJZiBubyBpbnN0YW5jZSBleGlzdHMsIGluaXRpYWxpemVzIGFuIEF1dGggaW5zdGFuY2Ugd2l0aCBwbGF0Zm9ybS1zcGVjaWZpYyBkZWZhdWx0IGRlcGVuZGVuY2llcy5cbiAqXG4gKiBAcGFyYW0gYXBwIC0gVGhlIEZpcmViYXNlIEFwcC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdXRoKGFwcDogRmlyZWJhc2VBcHAgPSBnZXRBcHAoKSk6IEF1dGgge1xuICBjb25zdCBwcm92aWRlciA9IF9nZXRQcm92aWRlcihhcHAsICdhdXRoJyk7XG5cbiAgaWYgKHByb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSkge1xuICAgIHJldHVybiBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcbiAgfVxuXG4gIHJldHVybiBpbml0aWFsaXplQXV0aChhcHAsIHtcbiAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IGJyb3dzZXJQb3B1cFJlZGlyZWN0UmVzb2x2ZXIsXG4gICAgcGVyc2lzdGVuY2U6IFtcbiAgICAgIGluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2UsXG4gICAgICBicm93c2VyTG9jYWxQZXJzaXN0ZW5jZSxcbiAgICAgIGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2VcbiAgICBdXG4gIH0pO1xufVxuXG5yZWdpc3RlckF1dGgoQ2xpZW50UGxhdGZvcm0uQlJPV1NFUik7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VPcHRpb25zIH0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRDb250YWluZXIsXG4gIENvbXBvbmVudFR5cGUsXG4gIEluc3RhbnRpYXRpb25Nb2RlLFxuICBOYW1lXG59IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgZGVsZXRlQXBwLFxuICBfYWRkQ29tcG9uZW50LFxuICBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQsXG4gIF9ERUZBVUxUX0VOVFJZX05BTUUsXG4gIF9GaXJlYmFzZUFwcEludGVybmFsIGFzIF9GaXJlYmFzZUFwcEV4cFxufSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IF9GaXJlYmFzZVNlcnZpY2UsIF9GaXJlYmFzZU5hbWVzcGFjZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ29tcGF0IH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgaW50ZXJmYWNlIF9GaXJlYmFzZUFwcCB7XG4gIC8qKlxuICAgKiBUaGUgKHJlYWQtb25seSkgbmFtZSAoaWRlbnRpZmllcikgZm9yIHRoaXMgQXBwLiAnW0RFRkFVTFRdJyBpcyB0aGUgZGVmYXVsdFxuICAgKiBBcHAuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSAocmVhZC1vbmx5KSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZnJvbSB0aGUgYXBwIGluaXRpYWxpemF0aW9uLlxuICAgKi9cbiAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0dGFibGUgY29uZmlnIGZsYWcgZm9yIEdEUFIgb3B0LWluL29wdC1vdXRcbiAgICovXG4gIGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICogTWFrZSB0aGUgZ2l2ZW4gQXBwIHVudXNhYmxlIGFuZCBmcmVlIHJlc291cmNlcy5cbiAgICovXG4gIGRlbGV0ZSgpOiBQcm9taXNlPHZvaWQ+O1xufVxuLyoqXG4gKiBHbG9iYWwgY29udGV4dCBvYmplY3QgZm9yIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcyB1c2luZ1xuICogYSBzaGFyZWQgYXV0aGVudGljYXRpb24gc3RhdGUuXG4gKlxuICogbWFya2VkIGFzIGludGVybmFsIGJlY2F1c2UgaXQgcmVmZXJlbmNlcyBpbnRlcm5hbCB0eXBlcyBleHBvcnRlZCBmcm9tIEBmaXJlYmFzZS9hcHBcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VBcHBJbXBsIGltcGxlbWVudHMgQ29tcGF0PF9GaXJlYmFzZUFwcEV4cD4sIF9GaXJlYmFzZUFwcCB7XG4gIHByaXZhdGUgY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgX2RlbGVnYXRlOiBfRmlyZWJhc2VBcHBFeHAsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaXJlYmFzZTogX0ZpcmViYXNlTmFtZXNwYWNlXG4gICkge1xuICAgIC8vIGFkZCBpdHNlbGYgdG8gY29udGFpbmVyXG4gICAgX2FkZENvbXBvbmVudChcbiAgICAgIF9kZWxlZ2F0ZSxcbiAgICAgIG5ldyBDb21wb25lbnQoJ2FwcC1jb21wYXQnLCAoKSA9PiB0aGlzLCBDb21wb25lbnRUeXBlLlBVQkxJQylcbiAgICApO1xuXG4gICAgdGhpcy5jb250YWluZXIgPSBfZGVsZWdhdGUuY29udGFpbmVyO1xuICB9XG5cbiAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xuICB9XG5cbiAgc2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCh2YWwpIHtcbiAgICB0aGlzLl9kZWxlZ2F0ZS5hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPSB2YWw7XG4gIH1cblxuICBnZXQgbmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5uYW1lO1xuICB9XG5cbiAgZ2V0IG9wdGlvbnMoKTogRmlyZWJhc2VPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUub3B0aW9ucztcbiAgfVxuXG4gIGRlbGV0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLl9kZWxlZ2F0ZS5jaGVja0Rlc3Ryb3llZCgpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5maXJlYmFzZS5JTlRFUk5BTC5yZW1vdmVBcHAodGhpcy5uYW1lKTtcbiAgICAgIHJldHVybiBkZWxldGVBcHAodGhpcy5fZGVsZWdhdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHNlcnZpY2UgaW5zdGFuY2UgYXNzb2NpYXRlZCB3aXRoIHRoaXMgYXBwIChjcmVhdGluZyBpdFxuICAgKiBvbiBkZW1hbmQpLCBpZGVudGlmaWVkIGJ5IHRoZSBwYXNzZWQgaW5zdGFuY2VJZGVudGlmaWVyLlxuICAgKlxuICAgKiBOT1RFOiBDdXJyZW50bHkgc3RvcmFnZSBhbmQgZnVuY3Rpb25zIGFyZSB0aGUgb25seSBvbmVzIHRoYXQgYXJlIGxldmVyYWdpbmcgdGhpc1xuICAgKiBmdW5jdGlvbmFsaXR5LiBUaGV5IGludm9rZSBpdCBieSBjYWxsaW5nOlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGZpcmViYXNlLmFwcCgpLnN0b3JhZ2UoJ1NUT1JBR0UgQlVDS0VUIElEJylcbiAgICogYGBgXG4gICAqXG4gICAqIFRoZSBzZXJ2aWNlIG5hbWUgaXMgcGFzc2VkIHRvIHRoaXMgYWxyZWFkeVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9nZXRTZXJ2aWNlKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBpbnN0YW5jZUlkZW50aWZpZXI6IHN0cmluZyA9IF9ERUZBVUxUX0VOVFJZX05BTUVcbiAgKTogX0ZpcmViYXNlU2VydmljZSB7XG4gICAgdGhpcy5fZGVsZWdhdGUuY2hlY2tEZXN0cm95ZWQoKTtcblxuICAgIC8vIEluaXRpYWxpemUgaW5zdGFuY2UgaWYgSW5zdGF0aWF0aW9uTW9kZSBpcyBgRVhQTElDSVRgLlxuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5fZGVsZWdhdGUuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUgYXMgTmFtZSk7XG4gICAgaWYgKFxuICAgICAgIXByb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSAmJlxuICAgICAgcHJvdmlkZXIuZ2V0Q29tcG9uZW50KCk/Lmluc3RhbnRpYXRpb25Nb2RlID09PSBJbnN0YW50aWF0aW9uTW9kZS5FWFBMSUNJVFxuICAgICkge1xuICAgICAgcHJvdmlkZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIC8vIGdldEltbWVkaWF0ZSB3aWxsIGFsd2F5cyBzdWNjZWVkIGJlY2F1c2UgX2dldFNlcnZpY2UgaXMgb25seSBjYWxsZWQgZm9yIHJlZ2lzdGVyZWQgY29tcG9uZW50cy5cbiAgICByZXR1cm4gcHJvdmlkZXIuZ2V0SW1tZWRpYXRlKHtcbiAgICAgIGlkZW50aWZpZXI6IGluc3RhbmNlSWRlbnRpZmllclxuICAgIH0pIGFzIHVua25vd24gYXMgX0ZpcmViYXNlU2VydmljZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBzZXJ2aWNlIGluc3RhbmNlIGZyb20gdGhlIGNhY2hlLCBzbyB3ZSB3aWxsIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBmb3IgdGhpcyBzZXJ2aWNlXG4gICAqIHdoZW4gcGVvcGxlIHRyeSB0byBnZXQgaXQgYWdhaW4uXG4gICAqXG4gICAqIE5PVEU6IGN1cnJlbnRseSBvbmx5IGZpcmVzdG9yZSB1c2VzIHRoaXMgZnVuY3Rpb25hbGl0eSB0byBzdXBwb3J0IGZpcmVzdG9yZSBzaHV0ZG93bi5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgVGhlIHNlcnZpY2UgbmFtZVxuICAgKiBAcGFyYW0gaW5zdGFuY2VJZGVudGlmaWVyIGluc3RhbmNlIGlkZW50aWZpZXIgaW4gY2FzZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIGFsbG93ZWRcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfcmVtb3ZlU2VydmljZUluc3RhbmNlKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBpbnN0YW5jZUlkZW50aWZpZXI6IHN0cmluZyA9IF9ERUZBVUxUX0VOVFJZX05BTUVcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fZGVsZWdhdGUuY29udGFpbmVyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgLmdldFByb3ZpZGVyKG5hbWUgYXMgYW55KVxuICAgICAgLmNsZWFySW5zdGFuY2UoaW5zdGFuY2VJZGVudGlmaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gY29tcG9uZW50IHRoZSBjb21wb25lbnQgYmVpbmcgYWRkZWQgdG8gdGhpcyBhcHAncyBjb250YWluZXJcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfYWRkQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50KTogdm9pZCB7XG4gICAgX2FkZENvbXBvbmVudCh0aGlzLl9kZWxlZ2F0ZSwgY29tcG9uZW50KTtcbiAgfVxuXG4gIF9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQ6IENvbXBvbmVudCk6IHZvaWQge1xuICAgIF9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudCh0aGlzLl9kZWxlZ2F0ZSwgY29tcG9uZW50KTtcbiAgfVxuXG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IHRoaXMuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkLFxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zXG4gICAgfTtcbiAgfVxufVxuXG4vLyBUT0RPOiBpbnZlc3RpZ2F0ZSB3aHkgdGhlIGZvbGxvd2luZyBuZWVkcyB0byBiZSBjb21tZW50ZWQgb3V0XG4vLyBQcmV2ZW50IGRlYWQtY29kZSBlbGltaW5hdGlvbiBvZiB0aGVzZSBtZXRob2RzIHcvbyBpbnZhbGlkIHByb3BlcnR5XG4vLyBjb3B5aW5nLlxuLy8gKEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUubmFtZSAmJiBGaXJlYmFzZUFwcEltcGwucHJvdG90eXBlLm9wdGlvbnMpIHx8XG4vLyAgIEZpcmViYXNlQXBwSW1wbC5wcm90b3R5cGUuZGVsZXRlIHx8XG4vLyAgIGNvbnNvbGUubG9nKCdkYycpO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgRXJyb3JNYXAgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIEFwcEVycm9yIHtcbiAgTk9fQVBQID0gJ25vLWFwcCcsXG4gIElOVkFMSURfQVBQX0FSR1VNRU5UID0gJ2ludmFsaWQtYXBwLWFyZ3VtZW50J1xufVxuXG5jb25zdCBFUlJPUlM6IEVycm9yTWFwPEFwcEVycm9yPiA9IHtcbiAgW0FwcEVycm9yLk5PX0FQUF06XG4gICAgXCJObyBGaXJlYmFzZSBBcHAgJ3skYXBwTmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXG4gICAgJ2NhbGwgRmlyZWJhc2UgQXBwLmluaXRpYWxpemVBcHAoKScsXG4gIFtBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVF06XG4gICAgJ2ZpcmViYXNlLnskYXBwTmFtZX0oKSB0YWtlcyBlaXRoZXIgbm8gYXJndW1lbnQgb3IgYSAnICtcbiAgICAnRmlyZWJhc2UgQXBwIGluc3RhbmNlLidcbn07XG5cbnR5cGUgRXJyb3JQYXJhbXMgPSB7IFtrZXkgaW4gQXBwRXJyb3JdOiB7IGFwcE5hbWU6IHN0cmluZyB9IH07XG5cbmV4cG9ydCBjb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeTxBcHBFcnJvciwgRXJyb3JQYXJhbXM+KFxuICAnYXBwLWNvbXBhdCcsXG4gICdGaXJlYmFzZScsXG4gIEVSUk9SU1xuKTtcbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaXJlYmFzZUFwcCwgRmlyZWJhc2VPcHRpb25zIH0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuaW1wb3J0IHtcbiAgX0ZpcmViYXNlTmFtZXNwYWNlLFxuICBfRmlyZWJhc2VTZXJ2aWNlLFxuICBGaXJlYmFzZVNlcnZpY2VOYW1lc3BhY2Vcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgKiBhcyBtb2R1bGFyQVBJcyBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IF9GaXJlYmFzZUFwcEludGVybmFsIGFzIF9GaXJlYmFzZUFwcEV4cCB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRUeXBlLCBOYW1lIH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5cbmltcG9ydCB7IGRlZXBFeHRlbmQsIGNvbnRhaW5zIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBJbXBsIH0gZnJvbSAnLi9maXJlYmFzZUFwcCc7XG5pbXBvcnQgeyBFUlJPUl9GQUNUT1JZLCBBcHBFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IEZpcmViYXNlQXBwTGl0ZUltcGwgfSBmcm9tICcuL2xpdGUvZmlyZWJhc2VBcHBMaXRlJztcblxuLyoqXG4gKiBCZWNhdXNlIGF1dGggY2FuJ3Qgc2hhcmUgY29kZSB3aXRoIG90aGVyIGNvbXBvbmVudHMsIHdlIGF0dGFjaCB0aGUgdXRpbGl0eSBmdW5jdGlvbnNcbiAqIGluIGFuIGludGVybmFsIG5hbWVzcGFjZSB0byBzaGFyZSBjb2RlLlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm4gYSBmaXJlYmFzZSBuYW1lc3BhY2Ugb2JqZWN0IHdpdGhvdXRcbiAqIGFueSB1dGlsaXR5IGZ1bmN0aW9ucywgc28gaXQgY2FuIGJlIHNoYXJlZCBiZXR3ZWVuIHRoZSByZWd1bGFyIGZpcmViYXNlTmFtZXNwYWNlIGFuZFxuICogdGhlIGxpdGUgdmVyc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlQ29yZShcbiAgZmlyZWJhc2VBcHBJbXBsOiB0eXBlb2YgRmlyZWJhc2VBcHBJbXBsIHwgdHlwZW9mIEZpcmViYXNlQXBwTGl0ZUltcGxcbik6IF9GaXJlYmFzZU5hbWVzcGFjZSB7XG4gIGNvbnN0IGFwcHM6IHsgW25hbWU6IHN0cmluZ106IEZpcmViYXNlQXBwIH0gPSB7fTtcbiAgLy8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgLy8gY29uc3QgY29tcG9uZW50cyA9IG5ldyBNYXA8c3RyaW5nLCBDb21wb25lbnQ8YW55Pj4oKTtcblxuICAvLyBBIG5hbWVzcGFjZSBpcyBhIHBsYWluIEphdmFTY3JpcHQgT2JqZWN0LlxuICBjb25zdCBuYW1lc3BhY2U6IF9GaXJlYmFzZU5hbWVzcGFjZSA9IHtcbiAgICAvLyBIYWNrIHRvIHByZXZlbnQgQmFiZWwgZnJvbSBtb2RpZnlpbmcgdGhlIG9iamVjdCByZXR1cm5lZFxuICAgIC8vIGFzIHRoZSBmaXJlYmFzZSBuYW1lc3BhY2UuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgaW5pdGlhbGl6ZUFwcDogaW5pdGlhbGl6ZUFwcENvbXBhdCxcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXBwLFxuICAgIHJlZ2lzdGVyVmVyc2lvbjogbW9kdWxhckFQSXMucmVnaXN0ZXJWZXJzaW9uLFxuICAgIHNldExvZ0xldmVsOiBtb2R1bGFyQVBJcy5zZXRMb2dMZXZlbCxcbiAgICBvbkxvZzogbW9kdWxhckFQSXMub25Mb2csXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFwcHM6IG51bGwsXG4gICAgU0RLX1ZFUlNJT046IG1vZHVsYXJBUElzLlNES19WRVJTSU9OLFxuICAgIElOVEVSTkFMOiB7XG4gICAgICByZWdpc3RlckNvbXBvbmVudDogcmVnaXN0ZXJDb21wb25lbnRDb21wYXQsXG4gICAgICByZW1vdmVBcHAsXG4gICAgICB1c2VBc1NlcnZpY2UsXG4gICAgICBtb2R1bGFyQVBJc1xuICAgIH1cbiAgfTtcblxuICAvLyBJbmplY3QgYSBjaXJjdWxhciBkZWZhdWx0IGV4cG9ydCB0byBhbGxvdyBCYWJlbCB1c2VycyB3aG8gd2VyZSBwcmV2aW91c2x5XG4gIC8vIHVzaW5nOlxuICAvL1xuICAvLyAgIGltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZSc7XG4gIC8vICAgd2hpY2ggYmVjb21lczogdmFyIGZpcmViYXNlID0gcmVxdWlyZSgnZmlyZWJhc2UnKS5kZWZhdWx0O1xuICAvL1xuICAvLyBpbnN0ZWFkIG9mXG4gIC8vXG4gIC8vICAgaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xuICAvLyAgIHdoaWNoIGJlY29tZXM6IHZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJ2ZpcmViYXNlJyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIChuYW1lc3BhY2UgYXMgYW55KVsnZGVmYXVsdCddID0gbmFtZXNwYWNlO1xuXG4gIC8vIGZpcmViYXNlLmFwcHMgaXMgYSByZWFkLW9ubHkgZ2V0dGVyLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmFtZXNwYWNlLCAnYXBwcycsIHtcbiAgICBnZXQ6IGdldEFwcHNcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENhbGxlZCBieSBBcHAuZGVsZXRlKCkgLSBidXQgYmVmb3JlIGFueSBzZXJ2aWNlcyBhc3NvY2lhdGVkIHdpdGggdGhlIEFwcFxuICAgKiBhcmUgZGVsZXRlZC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbW92ZUFwcChuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBkZWxldGUgYXBwc1tuYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIEFwcCBvYmplY3QgZm9yIGEgZ2l2ZW4gbmFtZSAob3IgREVGQVVMVCkuXG4gICAqL1xuICBmdW5jdGlvbiBhcHAobmFtZT86IHN0cmluZyk6IEZpcmViYXNlQXBwIHtcbiAgICBuYW1lID0gbmFtZSB8fCBtb2R1bGFyQVBJcy5fREVGQVVMVF9FTlRSWV9OQU1FO1xuICAgIGlmICghY29udGFpbnMoYXBwcywgbmFtZSkpIHtcbiAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLk5PX0FQUCwgeyBhcHBOYW1lOiBuYW1lIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXBwc1tuYW1lXTtcbiAgfVxuXG4gIC8vIEB0cy1pZ25vcmVcbiAgYXBwWydBcHAnXSA9IGZpcmViYXNlQXBwSW1wbDtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEFwcCBpbnN0YW5jZSAobmFtZSBtdXN0IGJlIHVuaXF1ZSkuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgaWRlbXBvdGVudC4gSXQgY2FuIGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZSBhbmQgcmV0dXJuIHRoZSBzYW1lIGluc3RhbmNlIHVzaW5nIHRoZSBzYW1lIG9wdGlvbnMgYW5kIGNvbmZpZy5cbiAgICovXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVBcHBDb21wYXQoXG4gICAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICAgIHJhd0NvbmZpZyA9IHt9XG4gICk6IEZpcmViYXNlQXBwIHtcbiAgICBjb25zdCBhcHAgPSBtb2R1bGFyQVBJcy5pbml0aWFsaXplQXBwKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHJhd0NvbmZpZ1xuICAgICkgYXMgX0ZpcmViYXNlQXBwRXhwO1xuXG4gICAgaWYgKGNvbnRhaW5zKGFwcHMsIGFwcC5uYW1lKSkge1xuICAgICAgcmV0dXJuIGFwcHNbYXBwLm5hbWVdO1xuICAgIH1cblxuICAgIGNvbnN0IGFwcENvbXBhdCA9IG5ldyBmaXJlYmFzZUFwcEltcGwoYXBwLCBuYW1lc3BhY2UpO1xuICAgIGFwcHNbYXBwLm5hbWVdID0gYXBwQ29tcGF0O1xuICAgIHJldHVybiBhcHBDb21wYXQ7XG4gIH1cblxuICAvKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBub24tZGVsZXRlZCBGaXJlYmFzZUFwcHMuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRBcHBzKCk6IEZpcmViYXNlQXBwW10ge1xuICAgIC8vIE1ha2UgYSBjb3B5IHNvIGNhbGxlciBjYW5ub3QgbXV0YXRlIHRoZSBhcHBzIGxpc3QuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGFwcHMpLm1hcChuYW1lID0+IGFwcHNbbmFtZV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnRDb21wYXQ8VCBleHRlbmRzIE5hbWU+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50PFQ+XG4gICk6IEZpcmViYXNlU2VydmljZU5hbWVzcGFjZTxfRmlyZWJhc2VTZXJ2aWNlPiB8IG51bGwge1xuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQubmFtZTtcbiAgICBjb25zdCBjb21wb25lbnROYW1lV2l0aG91dENvbXBhdCA9IGNvbXBvbmVudE5hbWUucmVwbGFjZSgnLWNvbXBhdCcsICcnKTtcbiAgICBpZiAoXG4gICAgICBtb2R1bGFyQVBJcy5fcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50KSAmJlxuICAgICAgY29tcG9uZW50LnR5cGUgPT09IENvbXBvbmVudFR5cGUuUFVCTElDXG4gICAgKSB7XG4gICAgICAvLyBjcmVhdGUgc2VydmljZSBuYW1lc3BhY2UgZm9yIHB1YmxpYyBjb21wb25lbnRzXG4gICAgICAvLyBUaGUgU2VydmljZSBuYW1lc3BhY2UgaXMgYW4gYWNjZXNzb3IgZnVuY3Rpb24gLi4uXG4gICAgICBjb25zdCBzZXJ2aWNlTmFtZXNwYWNlID0gKFxuICAgICAgICBhcHBBcmc6IEZpcmViYXNlQXBwID0gYXBwKClcbiAgICAgICk6IF9GaXJlYmFzZVNlcnZpY2UgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBpZiAodHlwZW9mIChhcHBBcmcgYXMgYW55KVtjb21wb25lbnROYW1lV2l0aG91dENvbXBhdF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbnZhbGlkIGFyZ3VtZW50LlxuICAgICAgICAgIC8vIFRoaXMgaGFwcGVucyBpbiB0aGUgZm9sbG93aW5nIGNhc2U6IGZpcmViYXNlLnN0b3JhZ2UoJ2dzOi8nKVxuICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKEFwcEVycm9yLklOVkFMSURfQVBQX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICBhcHBOYW1lOiBjb21wb25lbnROYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3J3YXJkIHNlcnZpY2UgaW5zdGFuY2UgbG9va3VwIHRvIHRoZSBGaXJlYmFzZUFwcC5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgcmV0dXJuIChhcHBBcmcgYXMgYW55KVtjb21wb25lbnROYW1lV2l0aG91dENvbXBhdF0oKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIC4uLiBhbmQgYSBjb250YWluZXIgZm9yIHNlcnZpY2UtbGV2ZWwgcHJvcGVydGllcy5cbiAgICAgIGlmIChjb21wb25lbnQuc2VydmljZVByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVlcEV4dGVuZChzZXJ2aWNlTmFtZXNwYWNlLCBjb21wb25lbnQuc2VydmljZVByb3BzKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIChuYW1lc3BhY2UgYXMgYW55KVtjb21wb25lbnROYW1lV2l0aG91dENvbXBhdF0gPSBzZXJ2aWNlTmFtZXNwYWNlO1xuXG4gICAgICAvLyBQYXRjaCB0aGUgRmlyZWJhc2VBcHBJbXBsIHByb3RvdHlwZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIChmaXJlYmFzZUFwcEltcGwucHJvdG90eXBlIGFzIGFueSlbY29tcG9uZW50TmFtZVdpdGhvdXRDb21wYXRdID1cbiAgICAgICAgLy8gVE9ETzogVGhlIGVzbGludCBkaXNhYmxlIGNhbiBiZSByZW1vdmVkIGFuZCB0aGUgJ2lnbm9yZVJlc3RBcmdzJ1xuICAgICAgICAvLyBvcHRpb24gYWRkZWQgdG8gdGhlIG5vLWV4cGxpY2l0LWFueSBydWxlIHdoZW4gRVNsaW50IHJlbGVhc2VzIGl0LlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBmdW5jdGlvbiAoLi4uYXJnczogYW55KSB7XG4gICAgICAgICAgY29uc3Qgc2VydmljZUZ4biA9IHRoaXMuX2dldFNlcnZpY2UuYmluZCh0aGlzLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgICByZXR1cm4gc2VydmljZUZ4bi5hcHBseShcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBjb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBhcmdzIDogW11cbiAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnQudHlwZSA9PT0gQ29tcG9uZW50VHlwZS5QVUJMSUNcbiAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgKG5hbWVzcGFjZSBhcyBhbnkpW2NvbXBvbmVudE5hbWVXaXRob3V0Q29tcGF0XVxuICAgICAgOiBudWxsO1xuICB9XG5cbiAgLy8gTWFwIHRoZSByZXF1ZXN0ZWQgc2VydmljZSB0byBhIHJlZ2lzdGVyZWQgc2VydmljZSBuYW1lXG4gIC8vICh1c2VkIHRvIG1hcCBhdXRoIHRvIHNlcnZlckF1dGggc2VydmljZSB3aGVuIG5lZWRlZCkuXG4gIGZ1bmN0aW9uIHVzZUFzU2VydmljZShhcHA6IEZpcmViYXNlQXBwLCBuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAobmFtZSA9PT0gJ3NlcnZlckF1dGgnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VTZXJ2aWNlID0gbmFtZTtcblxuICAgIHJldHVybiB1c2VTZXJ2aWNlO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzcGFjZTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGaXJlYmFzZU5hbWVzcGFjZSB9IGZyb20gJy4vcHVibGljLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmliZSwgZGVlcEV4dGVuZCwgRXJyb3JGYWN0b3J5IH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgRmlyZWJhc2VBcHBJbXBsIH0gZnJvbSAnLi9maXJlYmFzZUFwcCc7XG5pbXBvcnQgeyBjcmVhdGVGaXJlYmFzZU5hbWVzcGFjZUNvcmUgfSBmcm9tICcuL2ZpcmViYXNlTmFtZXNwYWNlQ29yZSc7XG5cbi8qKlxuICogUmV0dXJuIGEgZmlyZWJhc2UgbmFtZXNwYWNlIG9iamVjdC5cbiAqXG4gKiBJbiBwcm9kdWN0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGV4YWN0bHkgb25jZSBhbmQgdGhlIHJlc3VsdFxuICogYXNzaWduZWQgdG8gdGhlICdmaXJlYmFzZScgZ2xvYmFsLiAgSXQgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lc1xuICogaW4gdW5pdCB0ZXN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlKCk6IEZpcmViYXNlTmFtZXNwYWNlIHtcbiAgY29uc3QgbmFtZXNwYWNlID0gY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2VDb3JlKEZpcmViYXNlQXBwSW1wbCk7XG4gIG5hbWVzcGFjZS5JTlRFUk5BTCA9IHtcbiAgICAuLi5uYW1lc3BhY2UuSU5URVJOQUwsXG4gICAgY3JlYXRlRmlyZWJhc2VOYW1lc3BhY2UsXG4gICAgZXh0ZW5kTmFtZXNwYWNlLFxuICAgIGNyZWF0ZVN1YnNjcmliZSxcbiAgICBFcnJvckZhY3RvcnksXG4gICAgZGVlcEV4dGVuZFxuICB9O1xuXG4gIC8qKlxuICAgKiBQYXRjaCB0aGUgdG9wLWxldmVsIGZpcmViYXNlIG5hbWVzcGFjZSB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcy5cbiAgICpcbiAgICogZmlyZWJhc2UuSU5URVJOQUwuZXh0ZW5kTmFtZXNwYWNlKClcbiAgICovXG4gIGZ1bmN0aW9uIGV4dGVuZE5hbWVzcGFjZShwcm9wczogeyBbcHJvcDogc3RyaW5nXTogdW5rbm93biB9KTogdm9pZCB7XG4gICAgZGVlcEV4dGVuZChuYW1lc3BhY2UsIHByb3BzKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lc3BhY2U7XG59XG5cbmV4cG9ydCBjb25zdCBmaXJlYmFzZSA9IGNyZWF0ZUZpcmViYXNlTmFtZXNwYWNlKCk7XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5cbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXBwLWNvbXBhdCcpO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG5pbXBvcnQgeyBuYW1lLCB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyQ29yZUNvbXBvbmVudHModmFyaWFudD86IHN0cmluZyk6IHZvaWQge1xuICAvLyBSZWdpc3RlciBgYXBwYCBwYWNrYWdlLlxuICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgdmFyaWFudCk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VOYW1lc3BhY2UgfSBmcm9tICcuL3B1YmxpYy10eXBlcyc7XG5pbXBvcnQgeyBpc0Jyb3dzZXIgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBmaXJlYmFzZSBhcyBmaXJlYmFzZU5hbWVzcGFjZSB9IGZyb20gJy4vZmlyZWJhc2VOYW1lc3BhY2UnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyB9IGZyb20gJy4vcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyc7XG5cbi8vIEZpcmViYXNlIExpdGUgZGV0ZWN0aW9uXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuaWYgKGlzQnJvd3NlcigpICYmIChzZWxmIGFzIGFueSkuZmlyZWJhc2UgIT09IHVuZGVmaW5lZCkge1xuICBsb2dnZXIud2FybihgXG4gICAgV2FybmluZzogRmlyZWJhc2UgaXMgYWxyZWFkeSBkZWZpbmVkIGluIHRoZSBnbG9iYWwgc2NvcGUuIFBsZWFzZSBtYWtlIHN1cmVcbiAgICBGaXJlYmFzZSBsaWJyYXJ5IGlzIG9ubHkgbG9hZGVkIG9uY2UuXG4gIGApO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBzZGtWZXJzaW9uID0gKChzZWxmIGFzIGFueSkuZmlyZWJhc2UgYXMgRmlyZWJhc2VOYW1lc3BhY2UpLlNES19WRVJTSU9OO1xuICBpZiAoc2RrVmVyc2lvbiAmJiBzZGtWZXJzaW9uLmluZGV4T2YoJ0xJVEUnKSA+PSAwKSB7XG4gICAgbG9nZ2VyLndhcm4oYFxuICAgIFdhcm5pbmc6IFlvdSBhcmUgdHJ5aW5nIHRvIGxvYWQgRmlyZWJhc2Ugd2hpbGUgdXNpbmcgRmlyZWJhc2UgUGVyZm9ybWFuY2Ugc3RhbmRhbG9uZSBzY3JpcHQuXG4gICAgWW91IHNob3VsZCBsb2FkIEZpcmViYXNlIFBlcmZvcm1hbmNlIHdpdGggdGhpcyBpbnN0YW5jZSBvZiBGaXJlYmFzZSB0byBhdm9pZCBsb2FkaW5nIGR1cGxpY2F0ZSBjb2RlLlxuICAgIGApO1xuICB9XG59XG5cbmNvbnN0IGZpcmViYXNlID0gZmlyZWJhc2VOYW1lc3BhY2U7XG5cbnJlZ2lzdGVyQ29yZUNvbXBvbmVudHMoKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgZmlyZWJhc2U7XG5cbmV4cG9ydCB7IF9GaXJlYmFzZU5hbWVzcGFjZSwgX0ZpcmViYXNlU2VydmljZSB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IHsgRmlyZWJhc2VBcHAsIEZpcmViYXNlTmFtZXNwYWNlIH0gZnJvbSAnLi9wdWJsaWMtdHlwZXMnO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBmaXJlYmFzZSBmcm9tICdAZmlyZWJhc2UvYXBwLWNvbXBhdCc7XG5pbXBvcnQgeyBuYW1lLCB2ZXJzaW9uIH0gZnJvbSAnLi4vLi4vcGFja2FnZS5qc29uJztcblxuZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdhcHAtY29tcGF0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZpcmViYXNlO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29yZG92YVdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gIGNvcmRvdmE6IHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBicm93c2VydGFiOiB7XG4gICAgICAgIGlzQXZhaWxhYmxlKGNiOiAoYXZhaWxhYmxlOiBib29sZWFuKSA9PiB2b2lkKTogdm9pZDtcbiAgICAgICAgb3BlblVybCh1cmw6IHN0cmluZyk6IHZvaWQ7XG4gICAgICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBJbkFwcEJyb3dzZXI6IHtcbiAgICAgIG9wZW4odXJsOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nLCBvcHRpb25zOiBzdHJpbmcpOiBJbkFwcEJyb3dzZXJSZWY7XG4gICAgfTtcbiAgfTtcblxuICB1bml2ZXJzYWxMaW5rczoge1xuICAgIHN1YnNjcmliZShcbiAgICAgIG46IG51bGwsXG4gICAgICBjYjogKGV2ZW50OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCkgPT4gdm9pZFxuICAgICk6IHZvaWQ7XG4gIH07XG5cbiAgQnVpbGRJbmZvOiB7XG4gICAgcmVhZG9ubHkgcGFja2FnZU5hbWU6IHN0cmluZztcbiAgICByZWFkb25seSBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICB9O1xuXG4gIGhhbmRsZU9wZW5VUkwodXJsOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluQXBwQnJvd3NlclJlZiB7XG4gIGNsb3NlPzogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jb3Jkb3ZhV2luZG93KCk6IENvcmRvdmFXaW5kb3cge1xuICByZXR1cm4gKHdpbmRvdyBhcyB1bmtub3duKSBhcyBDb3Jkb3ZhV2luZG93O1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEF1dGhQcm92aWRlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgZGVidWdBc3NlcnQsXG4gIF9hc3NlcnQsXG4gIF9jcmVhdGVFcnJvcixcbiAgX2ZhaWxcbn0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBfaXNBbmRyb2lkLCBfaXNJT1MsIF9pc0lPUzdPcjggfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgeyBfZ2V0UmVkaXJlY3RVcmwgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvaGFuZGxlcic7XG5pbXBvcnQgeyBBdXRoSW50ZXJuYWwgfSBmcm9tICcuLi8uLi9tb2RlbC9hdXRoJztcbmltcG9ydCB7IEF1dGhFdmVudCB9IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IEluQXBwQnJvd3NlclJlZiwgX2NvcmRvdmFXaW5kb3cgfSBmcm9tICcuLi9wbHVnaW5zJztcbmltcG9ydCB7XG4gIEdldFByb2plY3RDb25maWdSZXF1ZXN0LFxuICBfZ2V0UHJvamVjdENvbmZpZ1xufSBmcm9tICcuLi8uLi9hcGkvcHJvamVjdF9jb25maWcvZ2V0X3Byb2plY3RfY29uZmlnJztcblxuLyoqXG4gKiBIb3cgbG9uZyB0byB3YWl0IGFmdGVyIHRoZSBhcHAgY29tZXMgYmFjayBpbnRvIGZvY3VzIGJlZm9yZSBjb25jbHVkaW5nIHRoYXRcbiAqIHRoZSB1c2VyIGNsb3NlZCB0aGUgc2lnbiBpbiB0YWIuXG4gKi9cbmNvbnN0IFJFRElSRUNUX1RJTUVPVVRfTVMgPSAyMDAwO1xuXG4vKipcbiAqIEdlbmVyYXRlcyB0aGUgVVJMIGZvciB0aGUgT0F1dGggaGFuZGxlci5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF9nZW5lcmF0ZUhhbmRsZXJVcmwoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgZXZlbnQ6IEF1dGhFdmVudCxcbiAgcHJvdmlkZXI6IEF1dGhQcm92aWRlclxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgLy8gR2V0IHRoZSBjb3Jkb3ZhIHBsdWdpbnNcbiAgY29uc3QgeyBCdWlsZEluZm8gfSA9IF9jb3Jkb3ZhV2luZG93KCk7XG4gIGRlYnVnQXNzZXJ0KGV2ZW50LnNlc3Npb25JZCwgJ0F1dGhFdmVudCBkaWQgbm90IGNvbnRhaW4gYSBzZXNzaW9uIElEJyk7XG4gIGNvbnN0IHNlc3Npb25EaWdlc3QgPSBhd2FpdCBjb21wdXRlU2hhMjU2KGV2ZW50LnNlc3Npb25JZCk7XG5cbiAgY29uc3QgYWRkaXRpb25hbFBhcmFtczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICBpZiAoX2lzSU9TKCkpIHtcbiAgICAvLyBpT1MgYXBwIGlkZW50aWZpZXJcbiAgICBhZGRpdGlvbmFsUGFyYW1zWydpYmknXSA9IEJ1aWxkSW5mby5wYWNrYWdlTmFtZTtcbiAgfSBlbHNlIGlmIChfaXNBbmRyb2lkKCkpIHtcbiAgICAvLyBBbmRyb2lkIGFwcCBpZGVudGlmaWVyXG4gICAgYWRkaXRpb25hbFBhcmFtc1snYXBuJ10gPSBCdWlsZEluZm8ucGFja2FnZU5hbWU7XG4gIH0gZWxzZSB7XG4gICAgX2ZhaWwoYXV0aCwgQXV0aEVycm9yQ29kZS5PUEVSQVRJT05fTk9UX1NVUFBPUlRFRCk7XG4gIH1cblxuICAvLyBBZGQgdGhlIGRpc3BsYXkgbmFtZSBpZiBhdmFpbGFibGVcbiAgaWYgKEJ1aWxkSW5mby5kaXNwbGF5TmFtZSkge1xuICAgIGFkZGl0aW9uYWxQYXJhbXNbJ2FwcERpc3BsYXlOYW1lJ10gPSBCdWlsZEluZm8uZGlzcGxheU5hbWU7XG4gIH1cblxuICAvLyBBdHRhY2hlZCB0aGUgaGFzaGVkIHNlc3Npb24gSURcbiAgYWRkaXRpb25hbFBhcmFtc1snc2Vzc2lvbklkJ10gPSBzZXNzaW9uRGlnZXN0O1xuICByZXR1cm4gX2dldFJlZGlyZWN0VXJsKFxuICAgIGF1dGgsXG4gICAgcHJvdmlkZXIsXG4gICAgZXZlbnQudHlwZSxcbiAgICB1bmRlZmluZWQsXG4gICAgZXZlbnQuZXZlbnRJZCA/PyB1bmRlZmluZWQsXG4gICAgYWRkaXRpb25hbFBhcmFtc1xuICApO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGF0IHRoaXMgYXBwIGlzIHZhbGlkIGZvciB0aGlzIHByb2plY3QgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX3ZhbGlkYXRlT3JpZ2luKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB7IEJ1aWxkSW5mbyB9ID0gX2NvcmRvdmFXaW5kb3coKTtcbiAgY29uc3QgcmVxdWVzdDogR2V0UHJvamVjdENvbmZpZ1JlcXVlc3QgPSB7fTtcbiAgaWYgKF9pc0lPUygpKSB7XG4gICAgcmVxdWVzdC5pb3NCdW5kbGVJZCA9IEJ1aWxkSW5mby5wYWNrYWdlTmFtZTtcbiAgfSBlbHNlIGlmIChfaXNBbmRyb2lkKCkpIHtcbiAgICByZXF1ZXN0LmFuZHJvaWRQYWNrYWdlTmFtZSA9IEJ1aWxkSW5mby5wYWNrYWdlTmFtZTtcbiAgfSBlbHNlIHtcbiAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEKTtcbiAgfVxuXG4gIC8vIFdpbGwgZmFpbCBhdXRvbWF0aWNhbGx5IGlmIHBhY2thZ2UgbmFtZSBpcyBub3QgYXV0aG9yaXplZFxuICBhd2FpdCBfZ2V0UHJvamVjdENvbmZpZyhhdXRoLCByZXF1ZXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9wZXJmb3JtUmVkaXJlY3QoXG4gIGhhbmRsZXJVcmw6IHN0cmluZ1xuKTogUHJvbWlzZTxJbkFwcEJyb3dzZXJSZWYgfCBudWxsPiB7XG4gIC8vIEdldCB0aGUgY29yZG92YSBwbHVnaW5zXG4gIGNvbnN0IHsgY29yZG92YSB9ID0gX2NvcmRvdmFXaW5kb3coKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIuaXNBdmFpbGFibGUoYnJvd3NlclRhYklzQXZhaWxhYmxlID0+IHtcbiAgICAgIGxldCBpYWJSZWY6IEluQXBwQnJvd3NlclJlZiB8IG51bGwgPSBudWxsO1xuICAgICAgaWYgKGJyb3dzZXJUYWJJc0F2YWlsYWJsZSkge1xuICAgICAgICBjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5vcGVuVXJsKGhhbmRsZXJVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogUmV0dXJuIHRoZSBpbmFwcGJyb3dzZXIgcmVmIHRoYXQncyByZXR1cm5lZCBmcm9tIHRoZSBvcGVuIGNhbGxcbiAgICAgICAgaWFiUmVmID0gY29yZG92YS5JbkFwcEJyb3dzZXIub3BlbihcbiAgICAgICAgICBoYW5kbGVyVXJsLFxuICAgICAgICAgIF9pc0lPUzdPcjgoKSA/ICdfYmxhbmsnIDogJ19zeXN0ZW0nLFxuICAgICAgICAgICdsb2NhdGlvbj15ZXMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGlhYlJlZik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBUaGluIGludGVyZmFjZSB3cmFwcGVyIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgd2l0aCAuL2V2ZW50cyBtb2R1bGVcbmludGVyZmFjZSBQYXNzaXZlQXV0aEV2ZW50TGlzdGVuZXIge1xuICBhZGRQYXNzaXZlTGlzdGVuZXIoY2I6ICgpID0+IHZvaWQpOiB2b2lkO1xuICByZW1vdmVQYXNzaXZlTGlzdGVuZXIoY2I6ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2FpdHMgZm9yIGFwcCBhY3Rpdml0eSB0byBiZSBzZWVuIGJlZm9yZSByZXNvbHZpbmcuIEl0IGRvZXNcbiAqIHRoaXMgYnkgYXR0YWNoaW5nIGxpc3RlbmVycyB0byB2YXJpb3VzIGRvbSBldmVudHMuIE9uY2UgdGhlIGFwcCBpcyBkZXRlcm1pbmVkXG4gKiB0byBiZSB2aXNpYmxlLCB0aGlzIHByb21pc2UgcmVzb2x2ZXMuIEFGVEVSIHRoYXQgcmVzb2x1dGlvbiwgdGhlIGxpc3RlbmVyc1xuICogYXJlIGRldGFjaGVkIGFuZCBhbnkgYnJvd3NlciB0YWJzIGxlZnQgb3BlbiB3aWxsIGJlIGNsb3NlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIF93YWl0Rm9yQXBwUmVzdW1lKFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIGV2ZW50TGlzdGVuZXI6IFBhc3NpdmVBdXRoRXZlbnRMaXN0ZW5lcixcbiAgaWFiUmVmOiBJbkFwcEJyb3dzZXJSZWYgfCBudWxsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gR2V0IHRoZSBjb3Jkb3ZhIHBsdWdpbnNcbiAgY29uc3QgeyBjb3Jkb3ZhIH0gPSBfY29yZG92YVdpbmRvdygpO1xuXG4gIGxldCBjbGVhbnVwID0gKCk6IHZvaWQgPT4ge307XG4gIHRyeSB7XG4gICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IG9uQ2xvc2VUaW1lcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgIC8vIERFRklORSBBTEwgVEhFIENBTExCQUNLUyA9PT09PVxuICAgICAgZnVuY3Rpb24gYXV0aEV2ZW50U2VlbigpOiB2b2lkIHtcbiAgICAgICAgLy8gQXV0aCBldmVudCB3YXMgZGV0ZWN0ZWQuIFJlc29sdmUgdGhpcyBwcm9taXNlIGFuZCBjbG9zZSB0aGUgZXh0cmFcbiAgICAgICAgLy8gd2luZG93IGlmIGl0J3Mgc3RpbGwgb3Blbi5cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICBjb25zdCBjbG9zZUJyb3dzZXJUYWIgPSBjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYj8uY2xvc2U7XG4gICAgICAgIGlmICh0eXBlb2YgY2xvc2VCcm93c2VyVGFiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2xvc2VCcm93c2VyVGFiKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2xvc2UgaW5hcHBicm93c2VyIGVtZWJlZGRlZCB3ZWJ2aWV3IGluIGlPUzcgYW5kIDggY2FzZSBpZiBzdGlsbFxuICAgICAgICAvLyBvcGVuLlxuICAgICAgICBpZiAodHlwZW9mIGlhYlJlZj8uY2xvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBpYWJSZWYuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXN1bWVkKCk6IHZvaWQge1xuICAgICAgICBpZiAob25DbG9zZVRpbWVyKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb2RlIGFscmVhZHkgcmFuOyBkbyBub3QgcmVydW4uXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25DbG9zZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIC8vIFdhaXQgdHdvIHNlZWNvbmRzIGFmdGVyIHJlc3VtZSB0aGVuIHJlamVjdC5cbiAgICAgICAgICByZWplY3QoX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuUkVESVJFQ1RfQ0FOQ0VMTEVEX0JZX1VTRVIpKTtcbiAgICAgICAgfSwgUkVESVJFQ1RfVElNRU9VVF9NUyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHZpc2liaWxpdHlDaGFuZ2VkKCk6IHZvaWQge1xuICAgICAgICBpZiAoZG9jdW1lbnQ/LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICAgICAgcmVzdW1lZCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEFUVEFDSCBBTEwgVEhFIExJU1RFTkVSUyA9PT09PVxuICAgICAgLy8gTGlzdGVuIGZvciB0aGUgYXV0aCBldmVudFxuICAgICAgZXZlbnRMaXN0ZW5lci5hZGRQYXNzaXZlTGlzdGVuZXIoYXV0aEV2ZW50U2Vlbik7XG5cbiAgICAgIC8vIExpc3RlbiBmb3IgcmVzdW1lIGFuZCB2aXNpYmlsaXR5IGV2ZW50c1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzdW1lJywgcmVzdW1lZCwgZmFsc2UpO1xuICAgICAgaWYgKF9pc0FuZHJvaWQoKSkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgdmlzaWJpbGl0eUNoYW5nZWQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgLy8gU0VUVVAgVEhFIENMRUFOVVAgRlVOQ1RJT04gPT09PT1cbiAgICAgIGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICAgIGV2ZW50TGlzdGVuZXIucmVtb3ZlUGFzc2l2ZUxpc3RlbmVyKGF1dGhFdmVudFNlZW4pO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXN1bWUnLCByZXN1bWVkLCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgJ3Zpc2liaWxpdHljaGFuZ2UnLFxuICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2VkLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICAgIGlmIChvbkNsb3NlVGltZXIpIHtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KG9uQ2xvc2VUaW1lcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZmluYWxseSB7XG4gICAgY2xlYW51cCgpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIHRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBDb3Jkb3ZhIGVudmlyb25tZW50LiBUaGlzIGhhcyBubyBzaWRlIGVmZmVjdFxuICogaWYgdGhlIGNvbmZpZ3VyYXRpb24gaXMgY29ycmVjdDsgb3RoZXJ3aXNlIGl0IHRocm93cyBhbiBlcnJvciB3aXRoIHRoZVxuICogbWlzc2luZyBwbHVnaW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2hlY2tDb3Jkb3ZhQ29uZmlndXJhdGlvbihhdXRoOiBBdXRoSW50ZXJuYWwpOiB2b2lkIHtcbiAgY29uc3Qgd2luID0gX2NvcmRvdmFXaW5kb3coKTtcbiAgLy8gQ2hlY2sgYWxsIGRlcGVuZGVuY2llcyBpbnN0YWxsZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub3JkbmV0L2NvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpblxuICAvLyBOb3RlIHRoYXQgY29yZG92YS11bml2ZXJzYWwtbGlua3MtcGx1Z2luIGhhcyBiZWVuIGFiYW5kb25lZC5cbiAgLy8gQSBmb3JrIHdpdGggbGF0ZXN0IGZpeGVzIGlzIGF2YWlsYWJsZSBhdDpcbiAgLy8gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29yZG92YS11bml2ZXJzYWwtbGlua3MtcGx1Z2luLWZpeFxuICBfYXNzZXJ0KFxuICAgIHR5cGVvZiB3aW4/LnVuaXZlcnNhbExpbmtzPy5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicsXG4gICAgYXV0aCxcbiAgICBBdXRoRXJyb3JDb2RlLklOVkFMSURfQ09SRE9WQV9DT05GSUdVUkFUSU9OLFxuICAgIHtcbiAgICAgIG1pc3NpbmdQbHVnaW46ICdjb3Jkb3ZhLXVuaXZlcnNhbC1saW5rcy1wbHVnaW4tZml4J1xuICAgIH1cbiAgKTtcblxuICAvLyBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9jb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm9cbiAgX2Fzc2VydChcbiAgICB0eXBlb2Ygd2luPy5CdWlsZEluZm8/LnBhY2thZ2VOYW1lICE9PSAndW5kZWZpbmVkJyxcbiAgICBhdXRoLFxuICAgIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9DT1JET1ZBX0NPTkZJR1VSQVRJT04sXG4gICAge1xuICAgICAgbWlzc2luZ1BsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJ1aWxkSW5mbydcbiAgICB9XG4gICk7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jb3Jkb3ZhLXBsdWdpbi1icm93c2VydGFiXG4gIF9hc3NlcnQoXG4gICAgdHlwZW9mIHdpbj8uY29yZG92YT8ucGx1Z2lucz8uYnJvd3NlcnRhYj8ub3BlblVybCA9PT0gJ2Z1bmN0aW9uJyxcbiAgICBhdXRoLFxuICAgIEF1dGhFcnJvckNvZGUuSU5WQUxJRF9DT1JET1ZBX0NPTkZJR1VSQVRJT04sXG4gICAge1xuICAgICAgbWlzc2luZ1BsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJyb3dzZXJ0YWInXG4gICAgfVxuICApO1xuICBfYXNzZXJ0KFxuICAgIHR5cGVvZiB3aW4/LmNvcmRvdmE/LnBsdWdpbnM/LmJyb3dzZXJ0YWI/LmlzQXZhaWxhYmxlID09PSAnZnVuY3Rpb24nLFxuICAgIGF1dGgsXG4gICAgQXV0aEVycm9yQ29kZS5JTlZBTElEX0NPUkRPVkFfQ09ORklHVVJBVElPTixcbiAgICB7XG4gICAgICBtaXNzaW5nUGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYnJvd3NlcnRhYidcbiAgICB9XG4gICk7XG5cbiAgLy8gaHR0cHM6Ly9jb3Jkb3ZhLmFwYWNoZS5vcmcvZG9jcy9lbi9sYXRlc3QvcmVmZXJlbmNlL2NvcmRvdmEtcGx1Z2luLWluYXBwYnJvd3Nlci9cbiAgX2Fzc2VydChcbiAgICB0eXBlb2Ygd2luPy5jb3Jkb3ZhPy5JbkFwcEJyb3dzZXI/Lm9wZW4gPT09ICdmdW5jdGlvbicsXG4gICAgYXV0aCxcbiAgICBBdXRoRXJyb3JDb2RlLklOVkFMSURfQ09SRE9WQV9DT05GSUdVUkFUSU9OLFxuICAgIHtcbiAgICAgIG1pc3NpbmdQbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbmFwcGJyb3dzZXInXG4gICAgfVxuICApO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBTSEEtMjU2IG9mIGEgc2Vzc2lvbiBJRC4gVGhlIFN1YnRsZUNyeXB0byBpbnRlcmZhY2UgaXMgb25seVxuICogYXZhaWxhYmxlIGluIFwic2VjdXJlXCIgY29udGV4dHMsIHdoaWNoIGNvdmVycyBDb3Jkb3ZhICh3aGljaCBpcyBzZXJ2ZWQgb24gYSBmaWxlXG4gKiBwcm90b2NvbCkuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNvbXB1dGVTaGEyNTYoc2Vzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBieXRlcyA9IHN0cmluZ1RvQXJyYXlCdWZmZXIoc2Vzc2lvbklkKTtcblxuICAvLyBUT0RPOiBGb3IgSUUxMSBjcnlwdG8gaGFzIGEgZGlmZmVyZW50IG5hbWUgYW5kIHRoaXMgb3BlcmF0aW9uIGNvbWVzIGJhY2tcbiAgLy8gICAgICAgYXMgYW4gb2JqZWN0LCBub3QgYSBwcm9taXNlLiBUaGlzIGlzIHRoZSBvbGQgcHJvcG9zZWQgc3RhbmRhcmQgdGhhdFxuICAvLyAgICAgICBpcyB1c2VkIGJ5IElFMTE6XG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELVdlYkNyeXB0b0FQSS0yMDEzMDEwOC8jY3J5cHRvb3BlcmF0aW9uLWludGVyZmFjZVxuICBjb25zdCBidWYgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGJ5dGVzKTtcbiAgY29uc3QgYXJyID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShidWYpKTtcbiAgcmV0dXJuIGFyci5tYXAobnVtID0+IG51bS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXlCdWZmZXIoc3RyOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBvbmx5IG1lYW50IHRvIGRlYWwgd2l0aCBhbiBBU0NJSSBjaGFyc2V0IGFuZCBtYWtlc1xuICAvLyBjZXJ0YWluIHNpbXBsaWZ5aW5nIGFzc3VtcHRpb25zLlxuICBkZWJ1Z0Fzc2VydChcbiAgICAvWzAtOWEtekEtWl0rLy50ZXN0KHN0ciksXG4gICAgJ0NhbiBvbmx5IGNvbnZlcnQgYWxwaGEtbnVtZXJpYyBzdHJpbmdzJ1xuICApO1xuICBpZiAodHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbiAgfVxuXG4gIGNvbnN0IGJ1ZmYgPSBuZXcgQXJyYXlCdWZmZXIoc3RyLmxlbmd0aCk7XG4gIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShidWZmKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICB2aWV3W2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIHZpZXc7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgcXVlcnlzdHJpbmdEZWNvZGUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vY29yZS9hdXRoL2F1dGhfZXZlbnRfbWFuYWdlcic7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHsgUGVyc2lzdGVkQmxvYiwgUGVyc2lzdGVuY2VJbnRlcm5hbCB9IGZyb20gJy4uLy4uL2NvcmUvcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHtcbiAgS2V5TmFtZSxcbiAgX3BlcnNpc3RlbmNlS2V5TmFtZVxufSBmcm9tICcuLi8uLi9jb3JlL3BlcnNpc3RlbmNlL3BlcnNpc3RlbmNlX3VzZXJfbWFuYWdlcic7XG5pbXBvcnQgeyBfY3JlYXRlRXJyb3IgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwvYXNzZXJ0JztcbmltcG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbC9pbnN0YW50aWF0b3InO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQgeyBBdXRoRXZlbnQsIEF1dGhFdmVudFR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQgeyBicm93c2VyTG9jYWxQZXJzaXN0ZW5jZSB9IGZyb20gJy4uLy4uL3BsYXRmb3JtX2Jyb3dzZXIvcGVyc2lzdGVuY2UvbG9jYWxfc3RvcmFnZSc7XG5cbmNvbnN0IFNFU1NJT05fSURfTEVOR1RIID0gMjA7XG5cbi8qKiBDdXN0b20gQXV0aEV2ZW50TWFuYWdlciB0aGF0IGFkZHMgcGFzc2l2ZSBsaXN0ZW5lcnMgdG8gZXZlbnRzICovXG5leHBvcnQgY2xhc3MgQ29yZG92YUF1dGhFdmVudE1hbmFnZXIgZXh0ZW5kcyBBdXRoRXZlbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwYXNzaXZlTGlzdGVuZXJzID0gbmV3IFNldDwoZTogQXV0aEV2ZW50KSA9PiB2b2lkPigpO1xuICBwcml2YXRlIHJlc29sdmVJbmlhbGl6ZWQhOiAoKSA9PiB2b2lkO1xuICBwcml2YXRlIGluaXRQcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG4gICAgdGhpcy5yZXNvbHZlSW5pYWxpemVkID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgYWRkUGFzc2l2ZUxpc3RlbmVyKGNiOiAoZTogQXV0aEV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5wYXNzaXZlTGlzdGVuZXJzLmFkZChjYik7XG4gIH1cblxuICByZW1vdmVQYXNzaXZlTGlzdGVuZXIoY2I6IChlOiBBdXRoRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnBhc3NpdmVMaXN0ZW5lcnMuZGVsZXRlKGNiKTtcbiAgfVxuXG4gIC8vIEluIGEgQ29yZG92YSBlbnZpcm9ubWVudCwgdGhpcyBtYW5hZ2VyIGNhbiBsaXZlIHRocm91Z2ggbXVsdGlwbGUgcmVkaXJlY3RcbiAgLy8gb3BlcmF0aW9uc1xuICByZXNldFJlZGlyZWN0KCk6IHZvaWQge1xuICAgIHRoaXMucXVldWVkUmVkaXJlY3RFdmVudCA9IG51bGw7XG4gICAgdGhpcy5oYXNIYW5kbGVkUG90ZW50aWFsUmVkaXJlY3QgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKiBPdmVycmlkZSB0aGUgb25FdmVudCBtZXRob2QgKi9cbiAgb25FdmVudChldmVudDogQXV0aEV2ZW50KTogYm9vbGVhbiB7XG4gICAgdGhpcy5yZXNvbHZlSW5pYWxpemVkKCk7XG4gICAgdGhpcy5wYXNzaXZlTGlzdGVuZXJzLmZvckVhY2goY2IgPT4gY2IoZXZlbnQpKTtcbiAgICByZXR1cm4gc3VwZXIub25FdmVudChldmVudCk7XG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmluaXRQcm9taXNlO1xuICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgKHBhcnRpYWwpIHtAbGluayBBdXRoRXZlbnR9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2dlbmVyYXRlTmV3RXZlbnQoXG4gIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgdHlwZTogQXV0aEV2ZW50VHlwZSxcbiAgZXZlbnRJZDogc3RyaW5nIHwgbnVsbCA9IG51bGxcbik6IEF1dGhFdmVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICBldmVudElkLFxuICAgIHVybFJlc3BvbnNlOiBudWxsLFxuICAgIHNlc3Npb25JZDogZ2VuZXJhdGVTZXNzaW9uSWQoKSxcbiAgICBwb3N0Qm9keTogbnVsbCxcbiAgICB0ZW5hbnRJZDogYXV0aC50ZW5hbnRJZCxcbiAgICBlcnJvcjogX2NyZWF0ZUVycm9yKGF1dGgsIEF1dGhFcnJvckNvZGUuTk9fQVVUSF9FVkVOVClcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9zYXZlUGFydGlhbEV2ZW50KFxuICBhdXRoOiBBdXRoSW50ZXJuYWwsXG4gIGV2ZW50OiBBdXRoRXZlbnRcbik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gc3RvcmFnZSgpLl9zZXQoXG4gICAgcGVyc2lzdGVuY2VLZXkoYXV0aCksXG4gICAgKGV2ZW50IGFzIG9iamVjdCkgYXMgUGVyc2lzdGVkQmxvYlxuICApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2dldEFuZFJlbW92ZUV2ZW50KFxuICBhdXRoOiBBdXRoSW50ZXJuYWxcbik6IFByb21pc2U8QXV0aEV2ZW50IHwgbnVsbD4ge1xuICBjb25zdCBldmVudCA9IChhd2FpdCBzdG9yYWdlKCkuX2dldChcbiAgICBwZXJzaXN0ZW5jZUtleShhdXRoKVxuICApKSBhcyBBdXRoRXZlbnQgfCBudWxsO1xuICBpZiAoZXZlbnQpIHtcbiAgICBhd2FpdCBzdG9yYWdlKCkuX3JlbW92ZShwZXJzaXN0ZW5jZUtleShhdXRoKSk7XG4gIH1cbiAgcmV0dXJuIGV2ZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2V2ZW50RnJvbVBhcnRpYWxBbmRVcmwoXG4gIHBhcnRpYWxFdmVudDogQXV0aEV2ZW50LFxuICB1cmw6IHN0cmluZ1xuKTogQXV0aEV2ZW50IHwgbnVsbCB7XG4gIC8vIFBhcnNlIHRoZSBkZWVwIGxpbmsgd2l0aGluIHRoZSBkeW5hbWljIGxpbmsgVVJMLlxuICBjb25zdCBjYWxsYmFja1VybCA9IF9nZXREZWVwTGlua0Zyb21DYWxsYmFjayh1cmwpO1xuICAvLyBDb25maXJtIGl0IGlzIGFjdHVhbGx5IGEgY2FsbGJhY2sgVVJMLlxuICAvLyBDdXJyZW50bHkgdGhlIHVuaXZlcnNhbCBsaW5rIHdpbGwgYmUgb2YgdGhpcyBmb3JtYXQ6XG4gIC8vIGh0dHBzOi8vPEFVVEhfRE9NQUlOPi9fXy9hdXRoL2NhbGxiYWNrPE9BVVRIX1JFU1BPTlNFPlxuICAvLyBUaGlzIGlzIGEgZmFrZSBVUkwgYnV0IGlzIG5vdCBpbnRlbmRlZCB0byB0YWtlIHRoZSB1c2VyIGFueXdoZXJlXG4gIC8vIGFuZCBqdXN0IHJlZGlyZWN0IHRvIHRoZSBhcHAuXG4gIGlmIChjYWxsYmFja1VybC5pbmNsdWRlcygnL19fL2F1dGgvY2FsbGJhY2snKSkge1xuICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGFuIGVycm9yIGluIHRoZSBVUkwuXG4gICAgLy8gVGhpcyBtZWNoYW5pc20gaXMgYWxzbyB1c2VkIHRvIHBhc3MgZXJyb3JzIGJhY2sgdG8gdGhlIGFwcDpcbiAgICAvLyBodHRwczovLzxBVVRIX0RPTUFJTj4vX18vYXV0aC9jYWxsYmFjaz9maXJlYmFzZUVycm9yPTxTVFJJTkdJRklFRF9FUlJPUj5cbiAgICBjb25zdCBwYXJhbXMgPSBzZWFyY2hQYXJhbXNPckVtcHR5KGNhbGxiYWNrVXJsKTtcbiAgICAvLyBHZXQgdGhlIGVycm9yIG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBzdHJpbmdpZmllZCBlcnJvciBpZiBmb3VuZC5cbiAgICBjb25zdCBlcnJvck9iamVjdCA9IHBhcmFtc1snZmlyZWJhc2VFcnJvciddXG4gICAgICA/IHBhcnNlSnNvbk9yTnVsbChkZWNvZGVVUklDb21wb25lbnQocGFyYW1zWydmaXJlYmFzZUVycm9yJ10pKVxuICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGNvZGUgPSBlcnJvck9iamVjdD8uWydjb2RlJ10/LnNwbGl0KCdhdXRoLycpPy5bMV07XG4gICAgY29uc3QgZXJyb3IgPSBjb2RlID8gX2NyZWF0ZUVycm9yKGNvZGUpIDogbnVsbDtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHBhcnRpYWxFdmVudC50eXBlLFxuICAgICAgICBldmVudElkOiBwYXJ0aWFsRXZlbnQuZXZlbnRJZCxcbiAgICAgICAgdGVuYW50SWQ6IHBhcnRpYWxFdmVudC50ZW5hbnRJZCxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIHVybFJlc3BvbnNlOiBudWxsLFxuICAgICAgICBzZXNzaW9uSWQ6IG51bGwsXG4gICAgICAgIHBvc3RCb2R5OiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwYXJ0aWFsRXZlbnQudHlwZSxcbiAgICAgICAgZXZlbnRJZDogcGFydGlhbEV2ZW50LmV2ZW50SWQsXG4gICAgICAgIHRlbmFudElkOiBwYXJ0aWFsRXZlbnQudGVuYW50SWQsXG4gICAgICAgIHNlc3Npb25JZDogcGFydGlhbEV2ZW50LnNlc3Npb25JZCxcbiAgICAgICAgdXJsUmVzcG9uc2U6IGNhbGxiYWNrVXJsLFxuICAgICAgICBwb3N0Qm9keTogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTZXNzaW9uSWQoKTogc3RyaW5nIHtcbiAgY29uc3QgY2hhcnMgPSBbXTtcbiAgY29uc3QgYWxsb3dlZENoYXJzID1cbiAgICAnMTIzNDU2Nzg5MGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IFNFU1NJT05fSURfTEVOR1RIOyBpKyspIHtcbiAgICBjb25zdCBpZHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhbGxvd2VkQ2hhcnMubGVuZ3RoKTtcbiAgICBjaGFycy5wdXNoKGFsbG93ZWRDaGFycy5jaGFyQXQoaWR4KSk7XG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBzdG9yYWdlKCk6IFBlcnNpc3RlbmNlSW50ZXJuYWwge1xuICByZXR1cm4gX2dldEluc3RhbmNlKGJyb3dzZXJMb2NhbFBlcnNpc3RlbmNlKTtcbn1cblxuZnVuY3Rpb24gcGVyc2lzdGVuY2VLZXkoYXV0aDogQXV0aEludGVybmFsKTogc3RyaW5nIHtcbiAgcmV0dXJuIF9wZXJzaXN0ZW5jZUtleU5hbWUoS2V5TmFtZS5BVVRIX0VWRU5ULCBhdXRoLmNvbmZpZy5hcGlLZXksIGF1dGgubmFtZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSnNvbk9yTnVsbChqc29uOiBzdHJpbmcpOiBSZXR1cm5UeXBlPHR5cGVvZiBKU09OLnBhcnNlPiB8IG51bGwge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGpzb24pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLy8gRXhwb3J0ZWQgZm9yIHRlc3RpbmdcbmV4cG9ydCBmdW5jdGlvbiBfZ2V0RGVlcExpbmtGcm9tQ2FsbGJhY2sodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBwYXJhbXMgPSBzZWFyY2hQYXJhbXNPckVtcHR5KHVybCk7XG4gIGNvbnN0IGxpbmsgPSBwYXJhbXNbJ2xpbmsnXSA/IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXNbJ2xpbmsnXSkgOiB1bmRlZmluZWQ7XG4gIC8vIERvdWJsZSBsaW5rIGNhc2UgKGF1dG9tYXRpYyByZWRpcmVjdClcbiAgY29uc3QgZG91YmxlRGVlcExpbmsgPSBzZWFyY2hQYXJhbXNPckVtcHR5KGxpbmspWydsaW5rJ107XG4gIC8vIGlPUyBjdXN0b20gc2NoZW1lIGxpbmtzLlxuICBjb25zdCBpT1NEZWVwTGluayA9IHBhcmFtc1snZGVlcF9saW5rX2lkJ11cbiAgICA/IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXNbJ2RlZXBfbGlua19pZCddKVxuICAgIDogdW5kZWZpbmVkO1xuICBjb25zdCBpT1NEb3VibGVEZWVwTGluayA9IHNlYXJjaFBhcmFtc09yRW1wdHkoaU9TRGVlcExpbmspWydsaW5rJ107XG4gIHJldHVybiBpT1NEb3VibGVEZWVwTGluayB8fCBpT1NEZWVwTGluayB8fCBkb3VibGVEZWVwTGluayB8fCBsaW5rIHx8IHVybDtcbn1cblxuLyoqXG4gKiBPcHRpbWlzdGljYWxseSB0cmllcyB0byBnZXQgc2VhcmNoIHBhcmFtcyBmcm9tIGEgc3RyaW5nLCBvciBlbHNlIHJldHVybnMgYW5cbiAqIGVtcHR5IHNlYXJjaCBwYXJhbXMgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBzZWFyY2hQYXJhbXNPckVtcHR5KHVybDogc3RyaW5nIHwgdW5kZWZpbmVkKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gIGlmICghdXJsPy5pbmNsdWRlcygnPycpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgW18sIC4uLnJlc3RdID0gdXJsLnNwbGl0KCc/Jyk7XG4gIHJldHVybiBxdWVyeXN0cmluZ0RlY29kZShyZXN0LmpvaW4oJz8nKSkgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIsIFBvcHVwUmVkaXJlY3RSZXNvbHZlciB9IGZyb20gJy4uLy4uL21vZGVsL3B1YmxpY190eXBlcyc7XG5pbXBvcnQgeyBicm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm1fYnJvd3Nlci9wZXJzaXN0ZW5jZS9zZXNzaW9uX3N0b3JhZ2UnO1xuaW1wb3J0IHsgQXV0aEludGVybmFsIH0gZnJvbSAnLi4vLi4vbW9kZWwvYXV0aCc7XG5pbXBvcnQge1xuICBBdXRoRXZlbnQsXG4gIEF1dGhFdmVudFR5cGUsXG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsXG59IGZyb20gJy4uLy4uL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IEF1dGhQb3B1cCB9IGZyb20gJy4uLy4uL3BsYXRmb3JtX2Jyb3dzZXIvdXRpbC9wb3B1cCc7XG5pbXBvcnQgeyBfY3JlYXRlRXJyb3IsIF9mYWlsIH0gZnJvbSAnLi4vLi4vY29yZS91dGlsL2Fzc2VydCc7XG5pbXBvcnQgeyBBdXRoRXJyb3JDb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgX2NoZWNrQ29yZG92YUNvbmZpZ3VyYXRpb24sXG4gIF9nZW5lcmF0ZUhhbmRsZXJVcmwsXG4gIF9wZXJmb3JtUmVkaXJlY3QsXG4gIF92YWxpZGF0ZU9yaWdpbixcbiAgX3dhaXRGb3JBcHBSZXN1bWVcbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1xuICBDb3Jkb3ZhQXV0aEV2ZW50TWFuYWdlcixcbiAgX2V2ZW50RnJvbVBhcnRpYWxBbmRVcmwsXG4gIF9nZW5lcmF0ZU5ld0V2ZW50LFxuICBfZ2V0QW5kUmVtb3ZlRXZlbnQsXG4gIF9zYXZlUGFydGlhbEV2ZW50XG59IGZyb20gJy4vZXZlbnRzJztcbmltcG9ydCB7IEF1dGhFdmVudE1hbmFnZXIgfSBmcm9tICcuLi8uLi9jb3JlL2F1dGgvYXV0aF9ldmVudF9tYW5hZ2VyJztcbmltcG9ydCB7IF9nZXRSZWRpcmVjdFJlc3VsdCB9IGZyb20gJy4uLy4uL3BsYXRmb3JtX2Jyb3dzZXIvc3RyYXRlZ2llcy9yZWRpcmVjdCc7XG5pbXBvcnQgeyBfY2xlYXJSZWRpcmVjdE91dGNvbWVzIH0gZnJvbSAnLi4vLi4vY29yZS9zdHJhdGVnaWVzL3JlZGlyZWN0JztcbmltcG9ydCB7IF9jb3Jkb3ZhV2luZG93IH0gZnJvbSAnLi4vcGx1Z2lucyc7XG5cbi8qKlxuICogSG93IGxvbmcgdG8gd2FpdCBmb3IgdGhlIGluaXRpYWwgYXV0aCBldmVudCBiZWZvcmUgY29uY2x1ZGluZyBub1xuICogcmVkaXJlY3QgcGVuZGluZ1xuICovXG5jb25zdCBJTklUSUFMX0VWRU5UX1RJTUVPVVRfTVMgPSA1MDA7XG5cbmNsYXNzIENvcmRvdmFQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgaW1wbGVtZW50cyBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCB7XG4gIHJlYWRvbmx5IF9yZWRpcmVjdFBlcnNpc3RlbmNlID0gYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZTtcbiAgcmVhZG9ubHkgX3Nob3VsZEluaXRQcm9hY3RpdmVseSA9IHRydWU7IC8vIFRoaXMgaXMgbGlnaHR3ZWlnaHQgZm9yIENvcmRvdmFcbiAgcHJpdmF0ZSByZWFkb25seSBldmVudE1hbmFnZXJzID0gbmV3IE1hcDxzdHJpbmcsIENvcmRvdmFBdXRoRXZlbnRNYW5hZ2VyPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IG9yaWdpblZhbGlkYXRpb25Qcm9taXNlczogUmVjb3JkPHN0cmluZywgUHJvbWlzZTx2b2lkPj4gPSB7fTtcblxuICBfY29tcGxldGVSZWRpcmVjdEZuID0gX2dldFJlZGlyZWN0UmVzdWx0O1xuXG4gIGFzeW5jIF9pbml0aWFsaXplKGF1dGg6IEF1dGhJbnRlcm5hbCk6IFByb21pc2U8Q29yZG92YUF1dGhFdmVudE1hbmFnZXI+IHtcbiAgICBjb25zdCBrZXkgPSBhdXRoLl9rZXkoKTtcbiAgICBsZXQgbWFuYWdlciA9IHRoaXMuZXZlbnRNYW5hZ2Vycy5nZXQoa2V5KTtcbiAgICBpZiAoIW1hbmFnZXIpIHtcbiAgICAgIG1hbmFnZXIgPSBuZXcgQ29yZG92YUF1dGhFdmVudE1hbmFnZXIoYXV0aCk7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlcnMuc2V0KGtleSwgbWFuYWdlcik7XG4gICAgICB0aGlzLmF0dGFjaENhbGxiYWNrTGlzdGVuZXJzKGF1dGgsIG1hbmFnZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbWFuYWdlcjtcbiAgfVxuXG4gIF9vcGVuUG9wdXAoYXV0aDogQXV0aEludGVybmFsKTogUHJvbWlzZTxBdXRoUG9wdXA+IHtcbiAgICBfZmFpbChhdXRoLCBBdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEKTtcbiAgfVxuXG4gIGFzeW5jIF9vcGVuUmVkaXJlY3QoXG4gICAgYXV0aDogQXV0aEludGVybmFsLFxuICAgIHByb3ZpZGVyOiBBdXRoUHJvdmlkZXIsXG4gICAgYXV0aFR5cGU6IEF1dGhFdmVudFR5cGUsXG4gICAgZXZlbnRJZD86IHN0cmluZ1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBfY2hlY2tDb3Jkb3ZhQ29uZmlndXJhdGlvbihhdXRoKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gYXdhaXQgdGhpcy5faW5pdGlhbGl6ZShhdXRoKTtcbiAgICBhd2FpdCBtYW5hZ2VyLmluaXRpYWxpemVkKCk7XG5cbiAgICAvLyBSZXNldCB0aGUgcGVyc2lzdGVkIHJlZGlyZWN0IHN0YXRlcy4gVGhpcyBkb2VzIG5vdCBtYXR0ZXIgb24gV2ViIHdoZXJlXG4gICAgLy8gdGhlIHJlZGlyZWN0IGFsd2F5cyBibG93cyBhd2F5IGFwcGxpY2F0aW9uIHN0YXRlIGVudGlyZWx5LiBPbiBDb3Jkb3ZhLFxuICAgIC8vIHRoZSBhcHAgbWFpbnRhaW5zIGNvbnRyb2wgZmxvdyB0aHJvdWdoIHRoZSByZWRpcmVjdC5cbiAgICBtYW5hZ2VyLnJlc2V0UmVkaXJlY3QoKTtcbiAgICBfY2xlYXJSZWRpcmVjdE91dGNvbWVzKCk7XG5cbiAgICBhd2FpdCB0aGlzLl9vcmlnaW5WYWxpZGF0aW9uKGF1dGgpO1xuXG4gICAgY29uc3QgZXZlbnQgPSBfZ2VuZXJhdGVOZXdFdmVudChhdXRoLCBhdXRoVHlwZSwgZXZlbnRJZCk7XG4gICAgYXdhaXQgX3NhdmVQYXJ0aWFsRXZlbnQoYXV0aCwgZXZlbnQpO1xuICAgIGNvbnN0IHVybCA9IGF3YWl0IF9nZW5lcmF0ZUhhbmRsZXJVcmwoYXV0aCwgZXZlbnQsIHByb3ZpZGVyKTtcbiAgICBjb25zdCBpYWJSZWYgPSBhd2FpdCBfcGVyZm9ybVJlZGlyZWN0KHVybCk7XG4gICAgcmV0dXJuIF93YWl0Rm9yQXBwUmVzdW1lKGF1dGgsIG1hbmFnZXIsIGlhYlJlZik7XG4gIH1cblxuICBfaXNJZnJhbWVXZWJTdG9yYWdlU3VwcG9ydGVkKFxuICAgIF9hdXRoOiBBdXRoSW50ZXJuYWwsXG4gICAgX2NiOiAoc3VwcG9ydDogYm9vbGVhbikgPT4gdW5rbm93blxuICApOiB2b2lkIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBfb3JpZ2luVmFsaWRhdGlvbihhdXRoOiBBdXRoSW50ZXJuYWwpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBrZXkgPSBhdXRoLl9rZXkoKTtcbiAgICBpZiAoIXRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV0pIHtcbiAgICAgIHRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV0gPSBfdmFsaWRhdGVPcmlnaW4oYXV0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub3JpZ2luVmFsaWRhdGlvblByb21pc2VzW2tleV07XG4gIH1cblxuICBwcml2YXRlIGF0dGFjaENhbGxiYWNrTGlzdGVuZXJzKFxuICAgIGF1dGg6IEF1dGhJbnRlcm5hbCxcbiAgICBtYW5hZ2VyOiBBdXRoRXZlbnRNYW5hZ2VyXG4gICk6IHZvaWQge1xuICAgIC8vIEdldCB0aGUgZ2xvYmFsIHBsdWdpbnNcbiAgICBjb25zdCB7IHVuaXZlcnNhbExpbmtzLCBoYW5kbGVPcGVuVVJMLCBCdWlsZEluZm8gfSA9IF9jb3Jkb3ZhV2luZG93KCk7XG5cbiAgICBjb25zdCBub0V2ZW50VGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gV2UgZGlkbid0IHNlZSB0aGF0IGluaXRpYWwgZXZlbnQuIENsZWFyIGFueSBwZW5kaW5nIG9iamVjdCBhbmRcbiAgICAgIC8vIGRpc3BhdGNoIG5vIGV2ZW50XG4gICAgICBhd2FpdCBfZ2V0QW5kUmVtb3ZlRXZlbnQoYXV0aCk7XG4gICAgICBtYW5hZ2VyLm9uRXZlbnQoZ2VuZXJhdGVOb0V2ZW50KCkpO1xuICAgIH0sIElOSVRJQUxfRVZFTlRfVElNRU9VVF9NUyk7XG5cbiAgICBjb25zdCB1bml2ZXJzYWxMaW5rc0NiID0gYXN5bmMgKFxuICAgICAgZXZlbnREYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbFxuICAgICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgLy8gV2UgaGF2ZSBhbiBldmVudCBzbyB3ZSBjYW4gY2xlYXIgdGhlIG5vIGV2ZW50IHRpbWVvdXRcbiAgICAgIGNsZWFyVGltZW91dChub0V2ZW50VGltZW91dCk7XG5cbiAgICAgIGNvbnN0IHBhcnRpYWxFdmVudCA9IGF3YWl0IF9nZXRBbmRSZW1vdmVFdmVudChhdXRoKTtcbiAgICAgIGxldCBmaW5hbEV2ZW50OiBBdXRoRXZlbnQgfCBudWxsID0gbnVsbDtcbiAgICAgIGlmIChwYXJ0aWFsRXZlbnQgJiYgZXZlbnREYXRhPy5bJ3VybCddKSB7XG4gICAgICAgIGZpbmFsRXZlbnQgPSBfZXZlbnRGcm9tUGFydGlhbEFuZFVybChwYXJ0aWFsRXZlbnQsIGV2ZW50RGF0YVsndXJsJ10pO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBmaW5hbEV2ZW50IGlzIG5ldmVyIGZpbGxlZCwgdHJpZ2dlciB3aXRoIG5vIGV2ZW50XG4gICAgICBtYW5hZ2VyLm9uRXZlbnQoZmluYWxFdmVudCB8fCBnZW5lcmF0ZU5vRXZlbnQoKSk7XG4gICAgfTtcblxuICAgIC8vIFVuaXZlcnNhbCBsaW5rcyBzdWJzY3JpYmVyIGRvZXNuJ3QgZXhpc3QgZm9yIGlPUywgc28gd2UgbmVlZCB0byBjaGVja1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiB1bml2ZXJzYWxMaW5rcyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiB1bml2ZXJzYWxMaW5rcy5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbidcbiAgICApIHtcbiAgICAgIHVuaXZlcnNhbExpbmtzLnN1YnNjcmliZShudWxsLCB1bml2ZXJzYWxMaW5rc0NiKTtcbiAgICB9XG5cbiAgICAvLyBpT1MgNyBvciA4IGN1c3RvbSBVUkwgc2NoZW1lcy5cbiAgICAvLyBUaGlzIGlzIGFsc28gdGhlIGN1cnJlbnQgZGVmYXVsdCBiZWhhdmlvciBmb3IgaU9TIDkrLlxuICAgIC8vIEZvciB0aGlzIHRvIHdvcmssIGNvcmRvdmEtcGx1Z2luLWN1c3RvbXVybHNjaGVtZSBuZWVkcyB0byBiZSBpbnN0YWxsZWQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL0N1c3RvbS1VUkwtc2NoZW1lXG4gICAgLy8gRG8gbm90IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgZGV2ZWxvcGVyJ3MgVVJMIGhhbmRsZXIuXG4gICAgY29uc3QgZXhpc3RpbmdIYW5kbGVPcGVuVVJMID0gaGFuZGxlT3BlblVSTDtcbiAgICBjb25zdCBwYWNrYWdlUHJlZml4ID0gYCR7QnVpbGRJbmZvLnBhY2thZ2VOYW1lLnRvTG93ZXJDYXNlKCl9Oi8vYDtcbiAgICBfY29yZG92YVdpbmRvdygpLmhhbmRsZU9wZW5VUkwgPSBhc3luYyB1cmwgPT4ge1xuICAgICAgaWYgKHVybC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgocGFja2FnZVByZWZpeCkpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0aGlzIGludGVudGlvbmFsbHkgdG8gZmxvYXRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICB1bml2ZXJzYWxMaW5rc0NiKHsgdXJsIH0pO1xuICAgICAgfVxuICAgICAgLy8gQ2FsbCB0aGUgZGV2ZWxvcGVyJ3MgaGFuZGxlciBpZiBpdCBpcyBwcmVzZW50LlxuICAgICAgaWYgKHR5cGVvZiBleGlzdGluZ0hhbmRsZU9wZW5VUkwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBleGlzdGluZ0hhbmRsZU9wZW5VUkwodXJsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYSBkZXZlbG9wZXIgZXJyb3IuIERvbid0IHN0b3AgdGhlIGZsb3cgb2YgdGhlIFNESy5cbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBQb3B1cFJlZGlyZWN0UmVzb2x2ZXJ9IHN1aXRhYmxlIGZvciBDb3Jkb3ZhXG4gKiBiYXNlZCBhcHBsaWNhdGlvbnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgY29yZG92YVBvcHVwUmVkaXJlY3RSZXNvbHZlcjogUG9wdXBSZWRpcmVjdFJlc29sdmVyID1cbiAgQ29yZG92YVBvcHVwUmVkaXJlY3RSZXNvbHZlcjtcblxuZnVuY3Rpb24gZ2VuZXJhdGVOb0V2ZW50KCk6IEF1dGhFdmVudCB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQXV0aEV2ZW50VHlwZS5VTktOT1dOLFxuICAgIGV2ZW50SWQ6IG51bGwsXG4gICAgc2Vzc2lvbklkOiBudWxsLFxuICAgIHVybFJlc3BvbnNlOiBudWxsLFxuICAgIHBvc3RCb2R5OiBudWxsLFxuICAgIHRlbmFudElkOiBudWxsLFxuICAgIGVycm9yOiBfY3JlYXRlRXJyb3IoQXV0aEVycm9yQ29kZS5OT19BVVRIX0VWRU5UKVxuICB9O1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IF9jYXN0QXV0aCB9IGZyb20gJy4uL3NyYy9jb3JlL2F1dGgvYXV0aF9pbXBsJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi9zcmMvbW9kZWwvcHVibGljX3R5cGVzJztcblxuLyoqXG4gKiBUaGlzIGludGVyZmFjZSBpcyBpbnRlbmRlZCBvbmx5IGZvciB1c2UgYnkgQGZpcmViYXNlL2F1dGgtY29tcGF0LCBkbyBub3QgdXNlIGRpcmVjdGx5XG4gKi9cbmV4cG9ydCAqIGZyb20gJy4uL2luZGV4JztcblxuZXhwb3J0IHsgU2lnbkluV2l0aElkcFJlc3BvbnNlIH0gZnJvbSAnLi4vc3JjL2FwaS9hdXRoZW50aWNhdGlvbi9pZHAnO1xuZXhwb3J0IHsgQXV0aEVycm9yQ29kZSB9IGZyb20gJy4uL3NyYy9jb3JlL2Vycm9ycyc7XG5leHBvcnQgeyBQZXJzaXN0ZW5jZUludGVybmFsIH0gZnJvbSAnLi4vc3JjL2NvcmUvcGVyc2lzdGVuY2UnO1xuZXhwb3J0IHsgX3BlcnNpc3RlbmNlS2V5TmFtZSB9IGZyb20gJy4uL3NyYy9jb3JlL3BlcnNpc3RlbmNlL3BlcnNpc3RlbmNlX3VzZXJfbWFuYWdlcic7XG5leHBvcnQgeyBVc2VySW1wbCB9IGZyb20gJy4uL3NyYy9jb3JlL3VzZXIvdXNlcl9pbXBsJztcbmV4cG9ydCB7IF9nZXRJbnN0YW5jZSB9IGZyb20gJy4uL3NyYy9jb3JlL3V0aWwvaW5zdGFudGlhdG9yJztcbmV4cG9ydCB7XG4gIFBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsLFxuICBFdmVudE1hbmFnZXIsXG4gIEF1dGhFdmVudFR5cGVcbn0gZnJvbSAnLi4vc3JjL21vZGVsL3BvcHVwX3JlZGlyZWN0JztcbmV4cG9ydCB7IFVzZXJDcmVkZW50aWFsSW50ZXJuYWwsIFVzZXJQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vc3JjL21vZGVsL3VzZXInO1xuZXhwb3J0IHsgQXV0aEludGVybmFsLCBDb25maWdJbnRlcm5hbCB9IGZyb20gJy4uL3NyYy9tb2RlbC9hdXRoJztcbmV4cG9ydCB7IERlZmF1bHRDb25maWcsIEF1dGhJbXBsLCBfY2FzdEF1dGggfSBmcm9tICcuLi9zcmMvY29yZS9hdXRoL2F1dGhfaW1wbCc7XG5cbmV4cG9ydCB7IENsaWVudFBsYXRmb3JtLCBfZ2V0Q2xpZW50VmVyc2lvbiB9IGZyb20gJy4uL3NyYy9jb3JlL3V0aWwvdmVyc2lvbic7XG5cbmV4cG9ydCB7IF9nZW5lcmF0ZUV2ZW50SWQgfSBmcm9tICcuLi9zcmMvY29yZS91dGlsL2V2ZW50X2lkJztcbmV4cG9ydCB7IFRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vc3JjL21vZGVsL2lkX3Rva2VuJztcbmV4cG9ydCB7IF9mYWlsLCBfYXNzZXJ0IH0gZnJvbSAnLi4vc3JjL2NvcmUvdXRpbC9hc3NlcnQnO1xuZXhwb3J0IHsgQXV0aFBvcHVwIH0gZnJvbSAnLi4vc3JjL3BsYXRmb3JtX2Jyb3dzZXIvdXRpbC9wb3B1cCc7XG5leHBvcnQgeyBfZ2V0UmVkaXJlY3RSZXN1bHQgfSBmcm9tICcuLi9zcmMvcGxhdGZvcm1fYnJvd3Nlci9zdHJhdGVnaWVzL3JlZGlyZWN0JztcbmV4cG9ydCB7IGNvcmRvdmFQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgfSBmcm9tICcuLi9zcmMvcGxhdGZvcm1fY29yZG92YS9wb3B1cF9yZWRpcmVjdC9wb3B1cF9yZWRpcmVjdCc7XG5leHBvcnQgeyBGZXRjaFByb3ZpZGVyIH0gZnJvbSAnLi4vc3JjL2NvcmUvdXRpbC9mZXRjaF9wcm92aWRlcic7XG5leHBvcnQgeyBTQU1MQXV0aENyZWRlbnRpYWwgfSBmcm9tICcuLi9zcmMvY29yZS9jcmVkZW50aWFscy9zYW1sJztcblxuLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgYnkgZnJhbWV3b3JrcyAoZS5nLiBGaXJlYmFzZVVJLXdlYikgdG8gbG9nIHRoZWlyIHVzYWdlLlxuLy8gSXQgaXMgbm90IGludGVuZGVkIGZvciBkaXJlY3QgdXNlIGJ5IGRldmVsb3BlciBhcHBzLiBOTyBqc2RvYyBoZXJlIHRvIGludGVudGlvbmFsbHkgbGVhdmUgaXQgb3V0XG4vLyBvZiBhdXRvZ2VuZXJhdGVkIGRvY3VtZW50YXRpb24gcGFnZXMgdG8gcmVkdWNlIGFjY2lkZW50YWwgbWlzdXNlLlxuZXhwb3J0IGZ1bmN0aW9uIGFkZEZyYW1ld29ya0ZvckxvZ2dpbmcoYXV0aDogQXV0aCwgZnJhbWV3b3JrOiBzdHJpbmcpOiB2b2lkIHtcbiAgX2Nhc3RBdXRoKGF1dGgpLl9sb2dGcmFtZXdvcmsoZnJhbWV3b3JrKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBpbXBsIGZyb20gJ0BmaXJlYmFzZS9hdXRoL2ludGVybmFsJztcbmltcG9ydCB7XG4gIGdldFVBLFxuICBpc0Jyb3dzZXJFeHRlbnNpb24sXG4gIGlzUmVhY3ROYXRpdmUsXG4gIGlzTm9kZSxcbiAgaXNJRSxcbiAgaXNJbmRleGVkREJBdmFpbGFibGVcbn0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBEb2N1bWVudCB7XG4gICAgZG9jdW1lbnRNb2RlPzogbnVtYmVyO1xuICB9XG59XG5cbmNvbnN0IENPUkRPVkFfT05ERVZJQ0VSRUFEWV9USU1FT1VUX01TID0gMTAwMDtcblxuZnVuY3Rpb24gX2dldEN1cnJlbnRTY2hlbWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gIHJldHVybiBzZWxmPy5sb2NhdGlvbj8ucHJvdG9jb2wgfHwgbnVsbDtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBjdXJyZW50IGVudmlyb25tZW50IGlzIGh0dHAgb3IgaHR0cHMuXG4gKi9cbmZ1bmN0aW9uIF9pc0h0dHBPckh0dHBzKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gX2dldEN1cnJlbnRTY2hlbWUoKSA9PT0gJ2h0dHA6JyB8fCBfZ2V0Q3VycmVudFNjaGVtZSgpID09PSAnaHR0cHM6Jztcbn1cblxuLyoqXG4gKiBAcGFyYW0gez9zdHJpbmc9fSB1YSBUaGUgdXNlciBhZ2VudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGFwcCBpcyByZW5kZXJlZCBpbiBhIG1vYmlsZSBpT1Mgb3IgQW5kcm9pZFxuICogICAgIENvcmRvdmEgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaXNBbmRyb2lkT3JJb3NDb3Jkb3ZhU2NoZW1lKHVhOiBzdHJpbmcgPSBnZXRVQSgpKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIShcbiAgICAoX2dldEN1cnJlbnRTY2hlbWUoKSA9PT0gJ2ZpbGU6JyB8fCBfZ2V0Q3VycmVudFNjaGVtZSgpID09PSAnaW9uaWM6JykgJiZcbiAgICB1YS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9pcGhvbmV8aXBhZHxpcG9kfGFuZHJvaWQvKVxuICApO1xufVxuXG4vKipcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGVudmlyb25tZW50IGlzIGEgbmF0aXZlIGVudmlyb25tZW50LCB3aGVyZVxuICogICAgIENPUlMgY2hlY2tzIGRvIG5vdCBhcHBseS5cbiAqL1xuZnVuY3Rpb24gX2lzTmF0aXZlRW52aXJvbm1lbnQoKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc1JlYWN0TmF0aXZlKCkgfHwgaXNOb2RlKCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIHVzZXIgYWdlbnQgaXMgSUUxMS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaXQgaXMgSUUxMS5cbiAqL1xuZnVuY3Rpb24gX2lzSWUxMSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSUUoKSAmJiBkb2N1bWVudD8uZG9jdW1lbnRNb2RlID09PSAxMTtcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgdXNlciBhZ2VudCBpcyBFZGdlLlxuICogQHBhcmFtIHtzdHJpbmd9IHVzZXJBZ2VudCBUaGUgYnJvd3NlciB1c2VyIGFnZW50IHN0cmluZy5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgaXQgaXMgRWRnZS5cbiAqL1xuZnVuY3Rpb24gX2lzRWRnZSh1YTogc3RyaW5nID0gZ2V0VUEoKSk6IGJvb2xlYW4ge1xuICByZXR1cm4gL0VkZ2VcXC9cXGQrLy50ZXN0KHVhKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gez9zdHJpbmc9fSBvcHRfdXNlckFnZW50IFRoZSBuYXZpZ2F0b3IgdXNlciBhZ2VudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgbG9jYWwgc3RvcmFnZSBpcyBub3Qgc3luY2hyb25pemVkIGJldHdlZW4gYW4gaWZyYW1lXG4gKiAgICAgYW5kIGEgcG9wdXAgb2YgdGhlIHNhbWUgZG9tYWluLlxuICovXG5mdW5jdGlvbiBfaXNMb2NhbFN0b3JhZ2VOb3RTeW5jaHJvbml6ZWQodWE6IHN0cmluZyA9IGdldFVBKCkpOiBib29sZWFuIHtcbiAgcmV0dXJuIF9pc0llMTEoKSB8fCBfaXNFZGdlKHVhKTtcbn1cblxuLyoqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgd2ViIHN0b3JhZ2UgaXMgc3VwcG9ydGVkLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pc1dlYlN0b3JhZ2VTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3RvcmFnZSA9IHNlbGYubG9jYWxTdG9yYWdlO1xuICAgIGNvbnN0IGtleSA9IGltcGwuX2dlbmVyYXRlRXZlbnRJZCgpO1xuICAgIGlmIChzdG9yYWdlKSB7XG4gICAgICAvLyBzZXRJdGVtIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHdlIGNhbm5vdCBhY2Nlc3MgV2ViU3RvcmFnZSAoZS5nLixcbiAgICAgIC8vIFNhZmFyaSBpbiBwcml2YXRlIG1vZGUpLlxuICAgICAgc3RvcmFnZVsnc2V0SXRlbSddKGtleSwgJzEnKTtcbiAgICAgIHN0b3JhZ2VbJ3JlbW92ZUl0ZW0nXShrZXkpO1xuICAgICAgLy8gRm9yIGJyb3dzZXJzIHdoZXJlIGlmcmFtZSB3ZWIgc3RvcmFnZSBkb2VzIG5vdCBzeW5jaHJvbml6ZSB3aXRoIGEgcG9wdXBcbiAgICAgIC8vIG9mIHRoZSBzYW1lIGRvbWFpbiwgaW5kZXhlZERCIGlzIHVzZWQgZm9yIHBlcnNpc3RlbnQgc3RvcmFnZS4gVGhlc2VcbiAgICAgIC8vIGJyb3dzZXJzIGluY2x1ZGUgSUUxMSBhbmQgRWRnZS5cbiAgICAgIC8vIE1ha2Ugc3VyZSBpdCBpcyBzdXBwb3J0ZWQgKElFMTEgYW5kIEVkZ2UgcHJpdmF0ZSBtb2RlIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHRoYXQpLlxuICAgICAgaWYgKF9pc0xvY2FsU3RvcmFnZU5vdFN5bmNocm9uaXplZCgpKSB7XG4gICAgICAgIC8vIEluIHN1Y2ggYnJvd3NlcnMsIGlmIGluZGV4ZWREQiBpcyBub3Qgc3VwcG9ydGVkLCBhbiBpZnJhbWUgY2Fubm90IGJlXG4gICAgICAgIC8vIG5vdGlmaWVkIG9mIHRoZSBwb3B1cCBzaWduIGluIHJlc3VsdC5cbiAgICAgICAgcmV0dXJuIGlzSW5kZXhlZERCQXZhaWxhYmxlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBsb2NhbFN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZSBmcm9tIGEgd29ya2VyLiBUZXN0IGF2YWlsYWJpbGl0eSBvZlxuICAgIC8vIGluZGV4ZWREQi5cbiAgICByZXR1cm4gX2lzV29ya2VyKCkgJiYgaXNJbmRleGVkREJBdmFpbGFibGUoKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHs/T2JqZWN0PX0gZ2xvYmFsIFRoZSBvcHRpb25hbCBnbG9iYWwgc2NvcGUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgaXMgYSB3b3JrZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaXNXb3JrZXIoKTogYm9vbGVhbiB7XG4gIC8vIFdvcmtlckdsb2JhbFNjb3BlIG9ubHkgZGVmaW5lZCBpbiB3b3JrZXIgZW52aXJvbm1lbnQuXG4gIHJldHVybiAoXG4gICAgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAnV29ya2VyR2xvYmFsU2NvcGUnIGluIGdsb2JhbCAmJlxuICAgICdpbXBvcnRTY3JpcHRzJyBpbiBnbG9iYWxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9pc1BvcHVwUmVkaXJlY3RTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgKF9pc0h0dHBPckh0dHBzKCkgfHxcbiAgICAgIGlzQnJvd3NlckV4dGVuc2lvbigpIHx8XG4gICAgICBfaXNBbmRyb2lkT3JJb3NDb3Jkb3ZhU2NoZW1lKCkpICYmXG4gICAgLy8gUmVhY3QgTmF0aXZlIHdpdGggcmVtb3RlIGRlYnVnZ2luZyByZXBvcnRzIGl0cyBsb2NhdGlvbi5wcm90b2NvbCBhc1xuICAgIC8vIGh0dHAuXG4gICAgIV9pc05hdGl2ZUVudmlyb25tZW50KCkgJiZcbiAgICAvLyBMb2NhbCBzdG9yYWdlIGhhcyB0byBiZSBzdXBwb3J0ZWQgZm9yIGJyb3dzZXIgcG9wdXAgYW5kIHJlZGlyZWN0XG4gICAgLy8gb3BlcmF0aW9ucyB0byB3b3JrLlxuICAgIF9pc1dlYlN0b3JhZ2VTdXBwb3J0ZWQoKSAmJlxuICAgIC8vIERPTSwgcG9wdXBzIGFuZCByZWRpcmVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aGluIGEgd29ya2VyLlxuICAgICFfaXNXb3JrZXIoKVxuICApO1xufVxuXG4vKiogUXVpY2sgY2hlY2sgdGhhdCBpbmRpY2F0ZXMgdGhlIHBsYXRmb3JtICptYXkqIGJlIENvcmRvdmEgKi9cbmV4cG9ydCBmdW5jdGlvbiBfaXNMaWtlbHlDb3Jkb3ZhKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gX2lzQW5kcm9pZE9ySW9zQ29yZG92YVNjaGVtZSgpICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfaXNDb3Jkb3ZhKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBpZiAoIV9pc0xpa2VseUNvcmRvdmEoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIFdlJ3ZlIHdhaXRlZCBsb25nIGVub3VnaDsgdGhlIHRlbGx0YWxlIENvcmRvdmEgZXZlbnQgZGlkbid0IGhhcHBlblxuICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgfSwgQ09SRE9WQV9PTkRFVklDRVJFQURZX1RJTUVPVVRfTVMpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCAqIGFzIGV4cCBmcm9tICdAZmlyZWJhc2UvYXV0aC9pbnRlcm5hbCc7XG5pbXBvcnQgeyBpc0luZGV4ZWREQkF2YWlsYWJsZSwgaXNOb2RlLCBpc1JlYWN0TmF0aXZlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgX2lzV2ViU3RvcmFnZVN1cHBvcnRlZCwgX2lzV29ya2VyIH0gZnJvbSAnLi9wbGF0Zm9ybSc7XG5cbmV4cG9ydCBjb25zdCBQZXJzaXN0ZW5jZSA9IHtcbiAgTE9DQUw6ICdsb2NhbCcsXG4gIE5PTkU6ICdub25lJyxcbiAgU0VTU0lPTjogJ3Nlc3Npb24nXG59O1xuXG5jb25zdCBfYXNzZXJ0OiB0eXBlb2YgZXhwLl9hc3NlcnQgPSBleHAuX2Fzc2VydDtcblxuY29uc3QgUEVSU0lTVEVOQ0VfS0VZID0gJ3BlcnNpc3RlbmNlJztcblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhhdCBhbiBhcmd1bWVudCBpcyBhIHZhbGlkIHBlcnNpc3RlbmNlIHZhbHVlLiBJZiBhbiBpbnZhbGlkIHR5cGVcbiAqIGlzIHNwZWNpZmllZCwgYW4gZXJyb3IgaXMgdGhyb3duIHN5bmNocm9ub3VzbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfdmFsaWRhdGVQZXJzaXN0ZW5jZUFyZ3VtZW50KFxuICBhdXRoOiBleHAuQXV0aCxcbiAgcGVyc2lzdGVuY2U6IHN0cmluZ1xuKTogdm9pZCB7XG4gIF9hc3NlcnQoXG4gICAgT2JqZWN0LnZhbHVlcyhQZXJzaXN0ZW5jZSkuaW5jbHVkZXMocGVyc2lzdGVuY2UpLFxuICAgIGF1dGgsXG4gICAgZXhwLkF1dGhFcnJvckNvZGUuSU5WQUxJRF9QRVJTSVNURU5DRVxuICApO1xuICAvLyBWYWxpZGF0ZSBpZiB0aGUgc3BlY2lmaWVkIHR5cGUgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LlxuICBpZiAoaXNSZWFjdE5hdGl2ZSgpKSB7XG4gICAgLy8gVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIGJyb3dzZXIuXG4gICAgX2Fzc2VydChcbiAgICAgIHBlcnNpc3RlbmNlICE9PSBQZXJzaXN0ZW5jZS5TRVNTSU9OLFxuICAgICAgYXV0aCxcbiAgICAgIGV4cC5BdXRoRXJyb3JDb2RlLlVOU1VQUE9SVEVEX1BFUlNJU1RFTkNFXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzTm9kZSgpKSB7XG4gICAgLy8gT25seSBub25lIGlzIHN1cHBvcnRlZCBpbiBOb2RlLmpzLlxuICAgIF9hc3NlcnQoXG4gICAgICBwZXJzaXN0ZW5jZSA9PT0gUGVyc2lzdGVuY2UuTk9ORSxcbiAgICAgIGF1dGgsXG4gICAgICBleHAuQXV0aEVycm9yQ29kZS5VTlNVUFBPUlRFRF9QRVJTSVNURU5DRVxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChfaXNXb3JrZXIoKSkge1xuICAgIC8vIEluIGEgd29ya2VyIGVudmlyb25tZW50LCBlaXRoZXIgTE9DQUwgb3IgTk9ORSBhcmUgc3VwcG9ydGVkLlxuICAgIC8vIElmIGluZGV4ZWREQiBub3Qgc3VwcG9ydGVkIGFuZCBMT0NBTCBwcm92aWRlZCwgdGhyb3cgYW4gZXJyb3JcbiAgICBfYXNzZXJ0KFxuICAgICAgcGVyc2lzdGVuY2UgPT09IFBlcnNpc3RlbmNlLk5PTkUgfHxcbiAgICAgICAgKHBlcnNpc3RlbmNlID09PSBQZXJzaXN0ZW5jZS5MT0NBTCAmJiBpc0luZGV4ZWREQkF2YWlsYWJsZSgpKSxcbiAgICAgIGF1dGgsXG4gICAgICBleHAuQXV0aEVycm9yQ29kZS5VTlNVUFBPUlRFRF9QRVJTSVNURU5DRVxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFRoaXMgaXMgcmVzdHJpY3RlZCBieSB3aGF0IHRoZSBicm93c2VyIHN1cHBvcnRzLlxuICBfYXNzZXJ0KFxuICAgIHBlcnNpc3RlbmNlID09PSBQZXJzaXN0ZW5jZS5OT05FIHx8IF9pc1dlYlN0b3JhZ2VTdXBwb3J0ZWQoKSxcbiAgICBhdXRoLFxuICAgIGV4cC5BdXRoRXJyb3JDb2RlLlVOU1VQUE9SVEVEX1BFUlNJU1RFTkNFXG4gICk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBfc2F2ZVBlcnNpc3RlbmNlRm9yUmVkaXJlY3QoXG4gIGF1dGg6IGV4cC5BdXRoSW50ZXJuYWxcbik6IFByb21pc2U8dm9pZD4ge1xuICBhd2FpdCBhdXRoLl9pbml0aWFsaXphdGlvblByb21pc2U7XG5cbiAgY29uc3Qgd2luID0gZ2V0U2VsZldpbmRvdygpO1xuICBjb25zdCBrZXkgPSBleHAuX3BlcnNpc3RlbmNlS2V5TmFtZShcbiAgICBQRVJTSVNURU5DRV9LRVksXG4gICAgYXV0aC5jb25maWcuYXBpS2V5LFxuICAgIGF1dGgubmFtZVxuICApO1xuICBpZiAod2luPy5zZXNzaW9uU3RvcmFnZSkge1xuICAgIHdpbi5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgYXV0aC5fZ2V0UGVyc2lzdGVuY2UoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRQZXJzaXN0ZW5jZXNGcm9tUmVkaXJlY3QoXG4gIGFwaUtleTogc3RyaW5nLFxuICBhcHBOYW1lOiBzdHJpbmdcbik6IGV4cC5QZXJzaXN0ZW5jZVtdIHtcbiAgY29uc3Qgd2luID0gZ2V0U2VsZldpbmRvdygpO1xuICBpZiAoIXdpbj8uc2Vzc2lvblN0b3JhZ2UpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBrZXkgPSBleHAuX3BlcnNpc3RlbmNlS2V5TmFtZShQRVJTSVNURU5DRV9LRVksIGFwaUtleSwgYXBwTmFtZSk7XG4gIGNvbnN0IHBlcnNpc3RlbmNlID0gd2luLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcblxuICBzd2l0Y2ggKHBlcnNpc3RlbmNlKSB7XG4gICAgY2FzZSBQZXJzaXN0ZW5jZS5OT05FOlxuICAgICAgcmV0dXJuIFtleHAuaW5NZW1vcnlQZXJzaXN0ZW5jZV07XG4gICAgY2FzZSBQZXJzaXN0ZW5jZS5MT0NBTDpcbiAgICAgIHJldHVybiBbZXhwLmluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2UsIGV4cC5icm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlXTtcbiAgICBjYXNlIFBlcnNpc3RlbmNlLlNFU1NJT046XG4gICAgICByZXR1cm4gW2V4cC5icm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNlbGZXaW5kb3coKTogV2luZG93IHwgbnVsbCB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IG51bGw7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0ICogYXMgZXhwIGZyb20gJ0BmaXJlYmFzZS9hdXRoL2ludGVybmFsJztcbmltcG9ydCB7IF9pc0NvcmRvdmEsIF9pc0xpa2VseUNvcmRvdmEgfSBmcm9tICcuL3BsYXRmb3JtJztcblxuY29uc3QgX2Fzc2VydDogdHlwZW9mIGV4cC5fYXNzZXJ0ID0gZXhwLl9hc3NlcnQ7XG5cbi8qKiBQbGF0Zm9ybS1hZ25vc3RpYyBwb3B1cC1yZWRpcmVjdCByZXNvbHZlciAqL1xuZXhwb3J0IGNsYXNzIENvbXBhdFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuICBpbXBsZW1lbnRzIGV4cC5Qb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbFxue1xuICAvLyBDcmVhdGUgYm90aCByZXNvbHZlcnMgZm9yIGR5bmFtaWMgcmVzb2x1dGlvbiBsYXRlclxuICBwcml2YXRlIHJlYWRvbmx5IGJyb3dzZXJSZXNvbHZlcjogZXhwLlBvcHVwUmVkaXJlY3RSZXNvbHZlckludGVybmFsID1cbiAgICBleHAuX2dldEluc3RhbmNlKGV4cC5icm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb3Jkb3ZhUmVzb2x2ZXI6IGV4cC5Qb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCA9XG4gICAgZXhwLl9nZXRJbnN0YW5jZShleHAuY29yZG92YVBvcHVwUmVkaXJlY3RSZXNvbHZlcik7XG4gIC8vIFRoZSBhY3R1YWwgcmVzb2x2ZXIgaW4gdXNlOiBlaXRoZXIgYnJvd3NlclJlc29sdmVyIG9yIGNvcmRvdmFSZXNvbHZlci5cbiAgcHJpdmF0ZSB1bmRlcmx5aW5nUmVzb2x2ZXI6IGV4cC5Qb3B1cFJlZGlyZWN0UmVzb2x2ZXJJbnRlcm5hbCB8IG51bGwgPSBudWxsO1xuICBfcmVkaXJlY3RQZXJzaXN0ZW5jZSA9IGV4cC5icm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlO1xuXG4gIF9jb21wbGV0ZVJlZGlyZWN0Rm46IChcbiAgICBhdXRoOiBleHAuQXV0aCxcbiAgICByZXNvbHZlcjogZXhwLlBvcHVwUmVkaXJlY3RSZXNvbHZlcixcbiAgICBieXBhc3NBdXRoU3RhdGU6IGJvb2xlYW5cbiAgKSA9PiBQcm9taXNlPGV4cC5Vc2VyQ3JlZGVudGlhbCB8IG51bGw+ID0gZXhwLl9nZXRSZWRpcmVjdFJlc3VsdDtcblxuICBhc3luYyBfaW5pdGlhbGl6ZShhdXRoOiBleHAuQXV0aEltcGwpOiBQcm9taXNlPGV4cC5FdmVudE1hbmFnZXI+IHtcbiAgICBhd2FpdCB0aGlzLnNlbGVjdFVuZGVybHlpbmdSZXNvbHZlcigpO1xuICAgIHJldHVybiB0aGlzLmFzc2VydGVkVW5kZXJseWluZ1Jlc29sdmVyLl9pbml0aWFsaXplKGF1dGgpO1xuICB9XG5cbiAgYXN5bmMgX29wZW5Qb3B1cChcbiAgICBhdXRoOiBleHAuQXV0aEltcGwsXG4gICAgcHJvdmlkZXI6IGV4cC5BdXRoUHJvdmlkZXIsXG4gICAgYXV0aFR5cGU6IGV4cC5BdXRoRXZlbnRUeXBlLFxuICAgIGV2ZW50SWQ/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxleHAuQXV0aFBvcHVwPiB7XG4gICAgYXdhaXQgdGhpcy5zZWxlY3RVbmRlcmx5aW5nUmVzb2x2ZXIoKTtcbiAgICByZXR1cm4gdGhpcy5hc3NlcnRlZFVuZGVybHlpbmdSZXNvbHZlci5fb3BlblBvcHVwKFxuICAgICAgYXV0aCxcbiAgICAgIHByb3ZpZGVyLFxuICAgICAgYXV0aFR5cGUsXG4gICAgICBldmVudElkXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIF9vcGVuUmVkaXJlY3QoXG4gICAgYXV0aDogZXhwLkF1dGhJbXBsLFxuICAgIHByb3ZpZGVyOiBleHAuQXV0aFByb3ZpZGVyLFxuICAgIGF1dGhUeXBlOiBleHAuQXV0aEV2ZW50VHlwZSxcbiAgICBldmVudElkPzogc3RyaW5nXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuc2VsZWN0VW5kZXJseWluZ1Jlc29sdmVyKCk7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXJ0ZWRVbmRlcmx5aW5nUmVzb2x2ZXIuX29wZW5SZWRpcmVjdChcbiAgICAgIGF1dGgsXG4gICAgICBwcm92aWRlcixcbiAgICAgIGF1dGhUeXBlLFxuICAgICAgZXZlbnRJZFxuICAgICk7XG4gIH1cblxuICBfaXNJZnJhbWVXZWJTdG9yYWdlU3VwcG9ydGVkKFxuICAgIGF1dGg6IGV4cC5BdXRoSW1wbCxcbiAgICBjYjogKHN1cHBvcnQ6IGJvb2xlYW4pID0+IHVua25vd25cbiAgKTogdm9pZCB7XG4gICAgdGhpcy5hc3NlcnRlZFVuZGVybHlpbmdSZXNvbHZlci5faXNJZnJhbWVXZWJTdG9yYWdlU3VwcG9ydGVkKGF1dGgsIGNiKTtcbiAgfVxuXG4gIF9vcmlnaW5WYWxpZGF0aW9uKGF1dGg6IGV4cC5BdXRoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXJ0ZWRVbmRlcmx5aW5nUmVzb2x2ZXIuX29yaWdpblZhbGlkYXRpb24oYXV0aCk7XG4gIH1cblxuICBnZXQgX3Nob3VsZEluaXRQcm9hY3RpdmVseSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gX2lzTGlrZWx5Q29yZG92YSgpIHx8IHRoaXMuYnJvd3NlclJlc29sdmVyLl9zaG91bGRJbml0UHJvYWN0aXZlbHk7XG4gIH1cblxuICBwcml2YXRlIGdldCBhc3NlcnRlZFVuZGVybHlpbmdSZXNvbHZlcigpOiBleHAuUG9wdXBSZWRpcmVjdFJlc29sdmVySW50ZXJuYWwge1xuICAgIF9hc3NlcnQodGhpcy51bmRlcmx5aW5nUmVzb2x2ZXIsIGV4cC5BdXRoRXJyb3JDb2RlLklOVEVSTkFMX0VSUk9SKTtcbiAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nUmVzb2x2ZXI7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbGVjdFVuZGVybHlpbmdSZXNvbHZlcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy51bmRlcmx5aW5nUmVzb2x2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBoYXZlbid0IHlldCBkZXRlcm1pbmVkIHdoZXRoZXIgb3Igbm90IHdlJ3JlIGluIENvcmRvdmE7IGdvIGFoZWFkXG4gICAgLy8gYW5kIGRldGVybWluZSB0aGF0IHN0YXRlIG5vdy5cbiAgICBjb25zdCBpc0NvcmRvdmEgPSBhd2FpdCBfaXNDb3Jkb3ZhKCk7XG4gICAgdGhpcy51bmRlcmx5aW5nUmVzb2x2ZXIgPSBpc0NvcmRvdmFcbiAgICAgID8gdGhpcy5jb3Jkb3ZhUmVzb2x2ZXJcbiAgICAgIDogdGhpcy5icm93c2VyUmVzb2x2ZXI7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiogRm9yd2FyZCBkaXJlY3Rpb24gd3JhcHBlciBmcm9tIENvbXBhdCAtLXVud3JhcC0+IEV4cCAqL1xuZXhwb3J0IGludGVyZmFjZSBXcmFwcGVyPFQ+IHtcbiAgdW53cmFwKCk6IFQ7XG59XG5cbi8qKiBSZXZlcnNlIGRpcmVjdGlvbiB3cmFwcGVyIGZyb20gRXhwIC0td3JhcHBlZC0tPiBDb21wYXQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmV2ZXJzZVdyYXBwZXI8VD4ge1xuICB3cmFwcGVkKCk6IFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXA8VD4ob2JqZWN0OiB1bmtub3duKTogVCB7XG4gIHJldHVybiAob2JqZWN0IGFzIFdyYXBwZXI8VD4pLnVud3JhcCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcHBlZDxUPihvYmplY3Q6IHVua25vd24pOiBUIHtcbiAgcmV0dXJuIChvYmplY3QgYXMgUmV2ZXJzZVdyYXBwZXI8VD4pLndyYXBwZWQoKTtcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBleHAgZnJvbSAnQGZpcmViYXNlL2F1dGgvaW50ZXJuYWwnO1xuaW1wb3J0ICogYXMgY29tcGF0IGZyb20gJ0BmaXJlYmFzZS9hdXRoLXR5cGVzJztcbmltcG9ydCB7IEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBBdXRoIH0gZnJvbSAnLi9hdXRoJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuaW1wb3J0IHsgdW53cmFwLCB3cmFwcGVkIH0gZnJvbSAnLi93cmFwJztcblxuZnVuY3Rpb24gY3JlZGVudGlhbEZyb21SZXNwb25zZShcbiAgdXNlckNyZWRlbnRpYWw6IGV4cC5Vc2VyQ3JlZGVudGlhbEludGVybmFsXG4pOiBleHAuQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgcmV0dXJuIGNyZWRlbnRpYWxGcm9tT2JqZWN0KHVzZXJDcmVkZW50aWFsKTtcbn1cblxuZnVuY3Rpb24gYXR0YWNoRXh0cmFFcnJvckZpZWxkcyhhdXRoOiBleHAuQXV0aCwgZTogRmlyZWJhc2VFcnJvcik6IHZvaWQge1xuICAvLyBUaGUgcmVzcG9uc2UgY29udGFpbnMgYWxsIGZpZWxkcyBmcm9tIHRoZSBzZXJ2ZXIgd2hpY2ggbWF5IG9yIG1heSBub3RcbiAgLy8gYWN0dWFsbHkgbWF0Y2ggdGhlIHVuZGVybHlpbmcgdHlwZVxuICBjb25zdCByZXNwb25zZSA9IChlLmN1c3RvbURhdGEgYXMgZXhwLlRhZ2dlZFdpdGhUb2tlblJlc3BvbnNlIHwgdW5kZWZpbmVkKVxuICAgID8uX3Rva2VuUmVzcG9uc2UgYXMgdW5rbm93biBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICBpZiAoZS5jb2RlID09PSAnYXV0aC9tdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZCcpIHtcbiAgICBjb25zdCBtZmFFcnIgPSBlIGFzIGNvbXBhdC5NdWx0aUZhY3RvckVycm9yO1xuICAgIG1mYUVyci5yZXNvbHZlciA9IG5ldyBNdWx0aUZhY3RvclJlc29sdmVyKFxuICAgICAgYXV0aCxcbiAgICAgIGV4cC5nZXRNdWx0aUZhY3RvclJlc29sdmVyKGF1dGgsIGUgYXMgZXhwLk11bHRpRmFjdG9yRXJyb3IpXG4gICAgKTtcbiAgfSBlbHNlIGlmIChyZXNwb25zZSkge1xuICAgIGNvbnN0IGNyZWRlbnRpYWwgPSBjcmVkZW50aWFsRnJvbU9iamVjdChlKTtcbiAgICBjb25zdCBjcmVkRXJyID0gZSBhcyBjb21wYXQuQXV0aEVycm9yO1xuICAgIGlmIChjcmVkZW50aWFsKSB7XG4gICAgICBjcmVkRXJyLmNyZWRlbnRpYWwgPSBjcmVkZW50aWFsO1xuICAgICAgY3JlZEVyci50ZW5hbnRJZCA9IHJlc3BvbnNlLnRlbmFudElkIHx8IHVuZGVmaW5lZDtcbiAgICAgIGNyZWRFcnIuZW1haWwgPSByZXNwb25zZS5lbWFpbCB8fCB1bmRlZmluZWQ7XG4gICAgICBjcmVkRXJyLnBob25lTnVtYmVyID0gcmVzcG9uc2UucGhvbmVOdW1iZXIgfHwgdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVkZW50aWFsRnJvbU9iamVjdChcbiAgb2JqZWN0OiBGaXJlYmFzZUVycm9yIHwgZXhwLlVzZXJDcmVkZW50aWFsXG4pOiBleHAuQXV0aENyZWRlbnRpYWwgfCBudWxsIHtcbiAgY29uc3QgeyBfdG9rZW5SZXNwb25zZSB9ID0gKFxuICAgIG9iamVjdCBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IgPyBvYmplY3QuY3VzdG9tRGF0YSA6IG9iamVjdFxuICApIGFzIGV4cC5UYWdnZWRXaXRoVG9rZW5SZXNwb25zZTtcbiAgaWYgKCFfdG9rZW5SZXNwb25zZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gSGFuZGxlIHBob25lIEF1dGggY3JlZGVudGlhbCByZXNwb25zZXMsIGFzIHRoZXkgaGF2ZSBhIGRpZmZlcmVudCBmb3JtYXRcbiAgLy8gZnJvbSBvdGhlciBiYWNrZW5kIHJlc3BvbnNlcyAoaS5lLiBubyBwcm92aWRlcklkKS4gVGhpcyBpcyBhbHNvIG9ubHkgdGhlXG4gIC8vIGNhc2UgZm9yIHVzZXIgY3JlZGVudGlhbHMgKGRvZXMgbm90IHdvcmsgZm9yIGVycm9ycykuXG4gIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpKSB7XG4gICAgaWYgKCd0ZW1wb3JhcnlQcm9vZicgaW4gX3Rva2VuUmVzcG9uc2UgJiYgJ3Bob25lTnVtYmVyJyBpbiBfdG9rZW5SZXNwb25zZSkge1xuICAgICAgcmV0dXJuIGV4cC5QaG9uZUF1dGhQcm92aWRlci5jcmVkZW50aWFsRnJvbVJlc3VsdChvYmplY3QpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHByb3ZpZGVySWQgPSBfdG9rZW5SZXNwb25zZS5wcm92aWRlcklkO1xuXG4gIC8vIEVtYWlsIGFuZCBwYXNzd29yZCBpcyBub3Qgc3VwcG9ydGVkIGFzIHRoZXJlIGlzIG5vIHNpdHVhdGlvbiB3aGVyZSB0aGVcbiAgLy8gc2VydmVyIHdvdWxkIHJldHVybiB0aGUgcGFzc3dvcmQgdG8gdGhlIGNsaWVudC5cbiAgaWYgKCFwcm92aWRlcklkIHx8IHByb3ZpZGVySWQgPT09IGV4cC5Qcm92aWRlcklkLlBBU1NXT1JEKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgcHJvdmlkZXI6IFBpY2s8XG4gICAgdHlwZW9mIGV4cC5PQXV0aFByb3ZpZGVyLFxuICAgICdjcmVkZW50aWFsRnJvbVJlc3VsdCcgfCAnY3JlZGVudGlhbEZyb21FcnJvcidcbiAgPjtcbiAgc3dpdGNoIChwcm92aWRlcklkKSB7XG4gICAgY2FzZSBleHAuUHJvdmlkZXJJZC5HT09HTEU6XG4gICAgICBwcm92aWRlciA9IGV4cC5Hb29nbGVBdXRoUHJvdmlkZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cC5Qcm92aWRlcklkLkZBQ0VCT09LOlxuICAgICAgcHJvdmlkZXIgPSBleHAuRmFjZWJvb2tBdXRoUHJvdmlkZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGV4cC5Qcm92aWRlcklkLkdJVEhVQjpcbiAgICAgIHByb3ZpZGVyID0gZXhwLkdpdGh1YkF1dGhQcm92aWRlcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZXhwLlByb3ZpZGVySWQuVFdJVFRFUjpcbiAgICAgIHByb3ZpZGVyID0gZXhwLlR3aXR0ZXJBdXRoUHJvdmlkZXI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgY29uc3Qge1xuICAgICAgICBvYXV0aElkVG9rZW4sXG4gICAgICAgIG9hdXRoQWNjZXNzVG9rZW4sXG4gICAgICAgIG9hdXRoVG9rZW5TZWNyZXQsXG4gICAgICAgIHBlbmRpbmdUb2tlbixcbiAgICAgICAgbm9uY2VcbiAgICAgIH0gPSBfdG9rZW5SZXNwb25zZSBhcyBleHAuU2lnbkluV2l0aElkcFJlc3BvbnNlO1xuICAgICAgaWYgKFxuICAgICAgICAhb2F1dGhBY2Nlc3NUb2tlbiAmJlxuICAgICAgICAhb2F1dGhUb2tlblNlY3JldCAmJlxuICAgICAgICAhb2F1dGhJZFRva2VuICYmXG4gICAgICAgICFwZW5kaW5nVG9rZW5cbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE8oYXZvbGtvdmkpOiB1bmNvbW1lbnQgdGhpcyBhbmQgZ2V0IGl0IHdvcmtpbmcgd2l0aCBTQU1MICYgT0lEQ1xuICAgICAgaWYgKHBlbmRpbmdUb2tlbikge1xuICAgICAgICBpZiAocHJvdmlkZXJJZC5zdGFydHNXaXRoKCdzYW1sLicpKSB7XG4gICAgICAgICAgcmV0dXJuIGV4cC5TQU1MQXV0aENyZWRlbnRpYWwuX2NyZWF0ZShwcm92aWRlcklkLCBwZW5kaW5nVG9rZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9JREMgYW5kIG5vbi1kZWZhdWx0IHByb3ZpZGVycyBleGNsdWRpbmcgVHdpdHRlci5cbiAgICAgICAgICByZXR1cm4gZXhwLk9BdXRoQ3JlZGVudGlhbC5fZnJvbVBhcmFtcyh7XG4gICAgICAgICAgICBwcm92aWRlcklkLFxuICAgICAgICAgICAgc2lnbkluTWV0aG9kOiBwcm92aWRlcklkLFxuICAgICAgICAgICAgcGVuZGluZ1Rva2VuLFxuICAgICAgICAgICAgaWRUb2tlbjogb2F1dGhJZFRva2VuLFxuICAgICAgICAgICAgYWNjZXNzVG9rZW46IG9hdXRoQWNjZXNzVG9rZW5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBleHAuT0F1dGhQcm92aWRlcihwcm92aWRlcklkKS5jcmVkZW50aWFsKHtcbiAgICAgICAgaWRUb2tlbjogb2F1dGhJZFRva2VuLFxuICAgICAgICBhY2Nlc3NUb2tlbjogb2F1dGhBY2Nlc3NUb2tlbixcbiAgICAgICAgcmF3Tm9uY2U6IG5vbmNlXG4gICAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yXG4gICAgPyBwcm92aWRlci5jcmVkZW50aWFsRnJvbUVycm9yKG9iamVjdClcbiAgICA6IHByb3ZpZGVyLmNyZWRlbnRpYWxGcm9tUmVzdWx0KG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Q3JlZGVudGlhbChcbiAgYXV0aDogZXhwLkF1dGgsXG4gIGNyZWRlbnRpYWxQcm9taXNlOiBQcm9taXNlPGV4cC5Vc2VyQ3JlZGVudGlhbD5cbik6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gIHJldHVybiBjcmVkZW50aWFsUHJvbWlzZVxuICAgIC5jYXRjaChlID0+IHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xuICAgICAgICBhdHRhY2hFeHRyYUVycm9yRmllbGRzKGF1dGgsIGUpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9KVxuICAgIC50aGVuKGNyZWRlbnRpYWwgPT4ge1xuICAgICAgY29uc3Qgb3BlcmF0aW9uVHlwZSA9IGNyZWRlbnRpYWwub3BlcmF0aW9uVHlwZTtcbiAgICAgIGNvbnN0IHVzZXIgPSBjcmVkZW50aWFsLnVzZXI7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wZXJhdGlvblR5cGUsXG4gICAgICAgIGNyZWRlbnRpYWw6IGNyZWRlbnRpYWxGcm9tUmVzcG9uc2UoXG4gICAgICAgICAgY3JlZGVudGlhbCBhcyBleHAuVXNlckNyZWRlbnRpYWxJbnRlcm5hbFxuICAgICAgICApLFxuICAgICAgICBhZGRpdGlvbmFsVXNlckluZm86IGV4cC5nZXRBZGRpdGlvbmFsVXNlckluZm8oXG4gICAgICAgICAgY3JlZGVudGlhbCBhcyBleHAuVXNlckNyZWRlbnRpYWxcbiAgICAgICAgKSxcbiAgICAgICAgdXNlcjogVXNlci5nZXRPckNyZWF0ZSh1c2VyKVxuICAgICAgfTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRDb25maXJtYXRpb25SZXN1bHQoXG4gIGF1dGg6IGV4cC5BdXRoLFxuICBjb25maXJtYXRpb25SZXN1bHRQcm9taXNlOiBQcm9taXNlPGV4cC5Db25maXJtYXRpb25SZXN1bHQ+XG4pOiBQcm9taXNlPGNvbXBhdC5Db25maXJtYXRpb25SZXN1bHQ+IHtcbiAgY29uc3QgY29uZmlybWF0aW9uUmVzdWx0RXhwID0gYXdhaXQgY29uZmlybWF0aW9uUmVzdWx0UHJvbWlzZTtcbiAgcmV0dXJuIHtcbiAgICB2ZXJpZmljYXRpb25JZDogY29uZmlybWF0aW9uUmVzdWx0RXhwLnZlcmlmaWNhdGlvbklkLFxuICAgIGNvbmZpcm06ICh2ZXJpZmljYXRpb25Db2RlOiBzdHJpbmcpID0+XG4gICAgICBjb252ZXJ0Q3JlZGVudGlhbChhdXRoLCBjb25maXJtYXRpb25SZXN1bHRFeHAuY29uZmlybSh2ZXJpZmljYXRpb25Db2RlKSlcbiAgfTtcbn1cblxuY2xhc3MgTXVsdGlGYWN0b3JSZXNvbHZlciBpbXBsZW1lbnRzIGNvbXBhdC5NdWx0aUZhY3RvclJlc29sdmVyIHtcbiAgcmVhZG9ubHkgYXV0aDogQXV0aDtcbiAgY29uc3RydWN0b3IoXG4gICAgYXV0aDogZXhwLkF1dGgsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNvbHZlcjogZXhwLk11bHRpRmFjdG9yUmVzb2x2ZXJcbiAgKSB7XG4gICAgdGhpcy5hdXRoID0gd3JhcHBlZChhdXRoKTtcbiAgfVxuXG4gIGdldCBzZXNzaW9uKCk6IGNvbXBhdC5NdWx0aUZhY3RvclNlc3Npb24ge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVyLnNlc3Npb247XG4gIH1cblxuICBnZXQgaGludHMoKTogY29tcGF0Lk11bHRpRmFjdG9ySW5mb1tdIHtcbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlci5oaW50cztcbiAgfVxuXG4gIHJlc29sdmVTaWduSW4oXG4gICAgYXNzZXJ0aW9uOiBjb21wYXQuTXVsdGlGYWN0b3JBc3NlcnRpb25cbiAgKTogUHJvbWlzZTxjb21wYXQuVXNlckNyZWRlbnRpYWw+IHtcbiAgICByZXR1cm4gY29udmVydENyZWRlbnRpYWwoXG4gICAgICB1bndyYXAodGhpcy5hdXRoKSxcbiAgICAgIHRoaXMucmVzb2x2ZXIucmVzb2x2ZVNpZ25Jbihhc3NlcnRpb24gYXMgZXhwLk11bHRpRmFjdG9yQXNzZXJ0aW9uKVxuICAgICk7XG4gIH1cbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBleHAgZnJvbSAnQGZpcmViYXNlL2F1dGgvaW50ZXJuYWwnO1xuaW1wb3J0ICogYXMgY29tcGF0IGZyb20gJ0BmaXJlYmFzZS9hdXRoLXR5cGVzJztcbmltcG9ydCB7IENvbXBhdCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IF9zYXZlUGVyc2lzdGVuY2VGb3JSZWRpcmVjdCB9IGZyb20gJy4vcGVyc2lzdGVuY2UnO1xuaW1wb3J0IHsgQ29tcGF0UG9wdXBSZWRpcmVjdFJlc29sdmVyIH0gZnJvbSAnLi9wb3B1cF9yZWRpcmVjdCc7XG5pbXBvcnQge1xuICBjb252ZXJ0Q29uZmlybWF0aW9uUmVzdWx0LFxuICBjb252ZXJ0Q3JlZGVudGlhbFxufSBmcm9tICcuL3VzZXJfY3JlZGVudGlhbCc7XG5cbmV4cG9ydCBjbGFzcyBVc2VyIGltcGxlbWVudHMgY29tcGF0LlVzZXIsIENvbXBhdDxleHAuVXNlcj4ge1xuICAvLyBNYWludGFpbiBhIG1hcCBzbyB0aGF0IHRoZXJlJ3MgYWx3YXlzIGEgMToxIG1hcHBpbmcgYmV0d2VlbiBuZXcgVXNlciBhbmRcbiAgLy8gbGVnYWN5IGNvbXBhdCB1c2Vyc1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBVU0VSX01BUCA9IG5ldyBXZWFrTWFwPGV4cC5Vc2VyLCBVc2VyPigpO1xuXG4gIHJlYWRvbmx5IG11bHRpRmFjdG9yOiBjb21wYXQuTXVsdGlGYWN0b3JVc2VyO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IocmVhZG9ubHkgX2RlbGVnYXRlOiBleHAuVXNlcikge1xuICAgIHRoaXMubXVsdGlGYWN0b3IgPSBleHAubXVsdGlGYWN0b3IoX2RlbGVnYXRlKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRPckNyZWF0ZSh1c2VyOiBleHAuVXNlcik6IFVzZXIge1xuICAgIGlmICghVXNlci5VU0VSX01BUC5oYXModXNlcikpIHtcbiAgICAgIFVzZXIuVVNFUl9NQVAuc2V0KHVzZXIsIG5ldyBVc2VyKHVzZXIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gVXNlci5VU0VSX01BUC5nZXQodXNlcikhO1xuICB9XG5cbiAgZGVsZXRlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5kZWxldGUoKTtcbiAgfVxuICByZWxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLnJlbG9hZCgpO1xuICB9XG4gIHRvSlNPTigpOiBvYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS50b0pTT04oKTtcbiAgfVxuICBnZXRJZFRva2VuUmVzdWx0KGZvcmNlUmVmcmVzaD86IGJvb2xlYW4pOiBQcm9taXNlPGNvbXBhdC5JZFRva2VuUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLmdldElkVG9rZW5SZXN1bHQoZm9yY2VSZWZyZXNoKTtcbiAgfVxuICBnZXRJZFRva2VuKGZvcmNlUmVmcmVzaD86IGJvb2xlYW4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5nZXRJZFRva2VuKGZvcmNlUmVmcmVzaCk7XG4gIH1cbiAgbGlua0FuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsKFxuICAgIGNyZWRlbnRpYWw6IGNvbXBhdC5BdXRoQ3JlZGVudGlhbFxuICApOiBQcm9taXNlPGNvbXBhdC5Vc2VyQ3JlZGVudGlhbD4ge1xuICAgIHJldHVybiB0aGlzLmxpbmtXaXRoQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcbiAgfVxuICBhc3luYyBsaW5rV2l0aENyZWRlbnRpYWwoXG4gICAgY3JlZGVudGlhbDogY29tcGF0LkF1dGhDcmVkZW50aWFsXG4gICk6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gICAgcmV0dXJuIGNvbnZlcnRDcmVkZW50aWFsKFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgZXhwLmxpbmtXaXRoQ3JlZGVudGlhbCh0aGlzLl9kZWxlZ2F0ZSwgY3JlZGVudGlhbCBhcyBleHAuQXV0aENyZWRlbnRpYWwpXG4gICAgKTtcbiAgfVxuICBhc3luYyBsaW5rV2l0aFBob25lTnVtYmVyKFxuICAgIHBob25lTnVtYmVyOiBzdHJpbmcsXG4gICAgYXBwbGljYXRpb25WZXJpZmllcjogY29tcGF0LkFwcGxpY2F0aW9uVmVyaWZpZXJcbiAgKTogUHJvbWlzZTxjb21wYXQuQ29uZmlybWF0aW9uUmVzdWx0PiB7XG4gICAgcmV0dXJuIGNvbnZlcnRDb25maXJtYXRpb25SZXN1bHQoXG4gICAgICB0aGlzLmF1dGgsXG4gICAgICBleHAubGlua1dpdGhQaG9uZU51bWJlcih0aGlzLl9kZWxlZ2F0ZSwgcGhvbmVOdW1iZXIsIGFwcGxpY2F0aW9uVmVyaWZpZXIpXG4gICAgKTtcbiAgfVxuICBhc3luYyBsaW5rV2l0aFBvcHVwKFxuICAgIHByb3ZpZGVyOiBjb21wYXQuQXV0aFByb3ZpZGVyXG4gICk6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gICAgcmV0dXJuIGNvbnZlcnRDcmVkZW50aWFsKFxuICAgICAgdGhpcy5hdXRoLFxuICAgICAgZXhwLmxpbmtXaXRoUG9wdXAoXG4gICAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgICBwcm92aWRlciBhcyBleHAuQXV0aFByb3ZpZGVyLFxuICAgICAgICBDb21wYXRQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGFzeW5jIGxpbmtXaXRoUmVkaXJlY3QocHJvdmlkZXI6IGNvbXBhdC5BdXRoUHJvdmlkZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBfc2F2ZVBlcnNpc3RlbmNlRm9yUmVkaXJlY3QoZXhwLl9jYXN0QXV0aCh0aGlzLmF1dGgpKTtcbiAgICByZXR1cm4gZXhwLmxpbmtXaXRoUmVkaXJlY3QoXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIHByb3ZpZGVyIGFzIGV4cC5BdXRoUHJvdmlkZXIsXG4gICAgICBDb21wYXRQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgICApO1xuICB9XG4gIHJlYXV0aGVudGljYXRlQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWwoXG4gICAgY3JlZGVudGlhbDogY29tcGF0LkF1dGhDcmVkZW50aWFsXG4gICk6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gICAgcmV0dXJuIHRoaXMucmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbChjcmVkZW50aWFsKTtcbiAgfVxuICBhc3luYyByZWF1dGhlbnRpY2F0ZVdpdGhDcmVkZW50aWFsKFxuICAgIGNyZWRlbnRpYWw6IGNvbXBhdC5BdXRoQ3JlZGVudGlhbFxuICApOiBQcm9taXNlPGNvbXBhdC5Vc2VyQ3JlZGVudGlhbD4ge1xuICAgIHJldHVybiBjb252ZXJ0Q3JlZGVudGlhbChcbiAgICAgIHRoaXMuYXV0aCBhcyB1bmtub3duIGFzIGV4cC5BdXRoLFxuICAgICAgZXhwLnJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWwoXG4gICAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgICBjcmVkZW50aWFsIGFzIGV4cC5BdXRoQ3JlZGVudGlhbFxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmVhdXRoZW50aWNhdGVXaXRoUGhvbmVOdW1iZXIoXG4gICAgcGhvbmVOdW1iZXI6IHN0cmluZyxcbiAgICBhcHBsaWNhdGlvblZlcmlmaWVyOiBjb21wYXQuQXBwbGljYXRpb25WZXJpZmllclxuICApOiBQcm9taXNlPGNvbXBhdC5Db25maXJtYXRpb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gY29udmVydENvbmZpcm1hdGlvblJlc3VsdChcbiAgICAgIHRoaXMuYXV0aCxcbiAgICAgIGV4cC5yZWF1dGhlbnRpY2F0ZVdpdGhQaG9uZU51bWJlcihcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUsXG4gICAgICAgIHBob25lTnVtYmVyLFxuICAgICAgICBhcHBsaWNhdGlvblZlcmlmaWVyXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZWF1dGhlbnRpY2F0ZVdpdGhQb3B1cChcbiAgICBwcm92aWRlcjogY29tcGF0LkF1dGhQcm92aWRlclxuICApOiBQcm9taXNlPGNvbXBhdC5Vc2VyQ3JlZGVudGlhbD4ge1xuICAgIHJldHVybiBjb252ZXJ0Q3JlZGVudGlhbChcbiAgICAgIHRoaXMuYXV0aCxcbiAgICAgIGV4cC5yZWF1dGhlbnRpY2F0ZVdpdGhQb3B1cChcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUsXG4gICAgICAgIHByb3ZpZGVyIGFzIGV4cC5BdXRoUHJvdmlkZXIsXG4gICAgICAgIENvbXBhdFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgYXN5bmMgcmVhdXRoZW50aWNhdGVXaXRoUmVkaXJlY3QoXG4gICAgcHJvdmlkZXI6IGNvbXBhdC5BdXRoUHJvdmlkZXJcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgX3NhdmVQZXJzaXN0ZW5jZUZvclJlZGlyZWN0KGV4cC5fY2FzdEF1dGgodGhpcy5hdXRoKSk7XG4gICAgcmV0dXJuIGV4cC5yZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdChcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgcHJvdmlkZXIgYXMgZXhwLkF1dGhQcm92aWRlcixcbiAgICAgIENvbXBhdFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuICAgICk7XG4gIH1cbiAgc2VuZEVtYWlsVmVyaWZpY2F0aW9uKFxuICAgIGFjdGlvbkNvZGVTZXR0aW5ncz86IGNvbXBhdC5BY3Rpb25Db2RlU2V0dGluZ3MgfCBudWxsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBleHAuc2VuZEVtYWlsVmVyaWZpY2F0aW9uKHRoaXMuX2RlbGVnYXRlLCBhY3Rpb25Db2RlU2V0dGluZ3MpO1xuICB9XG4gIGFzeW5jIHVubGluayhwcm92aWRlcklkOiBzdHJpbmcpOiBQcm9taXNlPGNvbXBhdC5Vc2VyPiB7XG4gICAgYXdhaXQgZXhwLnVubGluayh0aGlzLl9kZWxlZ2F0ZSwgcHJvdmlkZXJJZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdXBkYXRlRW1haWwobmV3RW1haWw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBleHAudXBkYXRlRW1haWwodGhpcy5fZGVsZWdhdGUsIG5ld0VtYWlsKTtcbiAgfVxuICB1cGRhdGVQYXNzd29yZChuZXdQYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIGV4cC51cGRhdGVQYXNzd29yZCh0aGlzLl9kZWxlZ2F0ZSwgbmV3UGFzc3dvcmQpO1xuICB9XG4gIHVwZGF0ZVBob25lTnVtYmVyKHBob25lQ3JlZGVudGlhbDogY29tcGF0LkF1dGhDcmVkZW50aWFsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIGV4cC51cGRhdGVQaG9uZU51bWJlcihcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgcGhvbmVDcmVkZW50aWFsIGFzIGV4cC5QaG9uZUF1dGhDcmVkZW50aWFsXG4gICAgKTtcbiAgfVxuICB1cGRhdGVQcm9maWxlKHByb2ZpbGU6IHtcbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZyB8IG51bGw7XG4gICAgcGhvdG9VUkw/OiBzdHJpbmcgfCBudWxsO1xuICB9KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIGV4cC51cGRhdGVQcm9maWxlKHRoaXMuX2RlbGVnYXRlLCBwcm9maWxlKTtcbiAgfVxuICB2ZXJpZnlCZWZvcmVVcGRhdGVFbWFpbChcbiAgICBuZXdFbWFpbDogc3RyaW5nLFxuICAgIGFjdGlvbkNvZGVTZXR0aW5ncz86IGNvbXBhdC5BY3Rpb25Db2RlU2V0dGluZ3MgfCBudWxsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBleHAudmVyaWZ5QmVmb3JlVXBkYXRlRW1haWwoXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIG5ld0VtYWlsLFxuICAgICAgYWN0aW9uQ29kZVNldHRpbmdzXG4gICAgKTtcbiAgfVxuICBnZXQgZW1haWxWZXJpZmllZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUuZW1haWxWZXJpZmllZDtcbiAgfVxuICBnZXQgaXNBbm9ueW1vdXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLmlzQW5vbnltb3VzO1xuICB9XG4gIGdldCBtZXRhZGF0YSgpOiBjb21wYXQuVXNlck1ldGFkYXRhIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUubWV0YWRhdGE7XG4gIH1cbiAgZ2V0IHBob25lTnVtYmVyKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5waG9uZU51bWJlcjtcbiAgfVxuICBnZXQgcHJvdmlkZXJEYXRhKCk6IEFycmF5PGNvbXBhdC5Vc2VySW5mbyB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUucHJvdmlkZXJEYXRhO1xuICB9XG4gIGdldCByZWZyZXNoVG9rZW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUucmVmcmVzaFRva2VuO1xuICB9XG4gIGdldCB0ZW5hbnRJZCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUudGVuYW50SWQ7XG4gIH1cbiAgZ2V0IGRpc3BsYXlOYW1lKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5kaXNwbGF5TmFtZTtcbiAgfVxuICBnZXQgZW1haWwoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLmVtYWlsO1xuICB9XG4gIGdldCBwaG90b1VSTCgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUucGhvdG9VUkw7XG4gIH1cbiAgZ2V0IHByb3ZpZGVySWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUucHJvdmlkZXJJZDtcbiAgfVxuICBnZXQgdWlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLnVpZDtcbiAgfVxuICBwcml2YXRlIGdldCBhdXRoKCk6IGV4cC5BdXRoIHtcbiAgICByZXR1cm4gKHRoaXMuX2RlbGVnYXRlIGFzIGV4cC5Vc2VySW1wbCkuYXV0aCBhcyB1bmtub3duIGFzIGV4cC5BdXRoO1xuICB9XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRmlyZWJhc2VBcHAsIF9GaXJlYmFzZVNlcnZpY2UgfSBmcm9tICdAZmlyZWJhc2UvYXBwLWNvbXBhdCc7XG5pbXBvcnQgKiBhcyBleHAgZnJvbSAnQGZpcmViYXNlL2F1dGgvaW50ZXJuYWwnO1xuaW1wb3J0ICogYXMgY29tcGF0IGZyb20gJ0BmaXJlYmFzZS9hdXRoLXR5cGVzJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBFcnJvckZuLCBPYnNlcnZlciwgVW5zdWJzY3JpYmUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5cbmltcG9ydCB7XG4gIF92YWxpZGF0ZVBlcnNpc3RlbmNlQXJndW1lbnQsXG4gIFBlcnNpc3RlbmNlLFxuICBfZ2V0UGVyc2lzdGVuY2VzRnJvbVJlZGlyZWN0LFxuICBfc2F2ZVBlcnNpc3RlbmNlRm9yUmVkaXJlY3Rcbn0gZnJvbSAnLi9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBfaXNQb3B1cFJlZGlyZWN0U3VwcG9ydGVkIH0gZnJvbSAnLi9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBDb21wYXRQb3B1cFJlZGlyZWN0UmVzb2x2ZXIgfSBmcm9tICcuL3BvcHVwX3JlZGlyZWN0JztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3VzZXInO1xuaW1wb3J0IHtcbiAgY29udmVydENvbmZpcm1hdGlvblJlc3VsdCxcbiAgY29udmVydENyZWRlbnRpYWxcbn0gZnJvbSAnLi91c2VyX2NyZWRlbnRpYWwnO1xuaW1wb3J0IHsgUmV2ZXJzZVdyYXBwZXIsIFdyYXBwZXIgfSBmcm9tICcuL3dyYXAnO1xuXG5jb25zdCBfYXNzZXJ0OiB0eXBlb2YgZXhwLl9hc3NlcnQgPSBleHAuX2Fzc2VydDtcblxuZXhwb3J0IGNsYXNzIEF1dGhcbiAgaW1wbGVtZW50cyBjb21wYXQuRmlyZWJhc2VBdXRoLCBXcmFwcGVyPGV4cC5BdXRoPiwgX0ZpcmViYXNlU2VydmljZVxue1xuICBzdGF0aWMgUGVyc2lzdGVuY2UgPSBQZXJzaXN0ZW5jZTtcbiAgcmVhZG9ubHkgX2RlbGVnYXRlOiBleHAuQXV0aEltcGw7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgYXBwOiBGaXJlYmFzZUFwcCwgcHJvdmlkZXI6IFByb3ZpZGVyPCdhdXRoJz4pIHtcbiAgICBpZiAocHJvdmlkZXIuaXNJbml0aWFsaXplZCgpKSB7XG4gICAgICB0aGlzLl9kZWxlZ2F0ZSA9IHByb3ZpZGVyLmdldEltbWVkaWF0ZSgpIGFzIGV4cC5BdXRoSW1wbDtcbiAgICAgIHRoaXMubGlua1VuZGVybHlpbmdBdXRoKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBhcGlLZXkgfSA9IGFwcC5vcHRpb25zO1xuICAgIC8vIFRPRE86IHBsYXRmb3JtIG5lZWRzIHRvIGJlIGRldGVybWluZWQgdXNpbmcgaGV1cmlzdGljc1xuICAgIF9hc3NlcnQoYXBpS2V5LCBleHAuQXV0aEVycm9yQ29kZS5JTlZBTElEX0FQSV9LRVksIHtcbiAgICAgIGFwcE5hbWU6IGFwcC5uYW1lXG4gICAgfSk7XG5cbiAgICAvLyBUT0RPOiBwbGF0Zm9ybSBuZWVkcyB0byBiZSBkZXRlcm1pbmVkIHVzaW5nIGhldXJpc3RpY3NcbiAgICBfYXNzZXJ0KGFwaUtleSwgZXhwLkF1dGhFcnJvckNvZGUuSU5WQUxJRF9BUElfS0VZLCB7XG4gICAgICBhcHBOYW1lOiBhcHAubmFtZVxuICAgIH0pO1xuXG4gICAgLy8gT25seSB1c2UgYSBwb3B1cC9yZWRpcmVjdCByZXNvbHZlciBpbiBicm93c2VyIGVudmlyb25tZW50c1xuICAgIGNvbnN0IHJlc29sdmVyID1cbiAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gQ29tcGF0UG9wdXBSZWRpcmVjdFJlc29sdmVyIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RlbGVnYXRlID0gcHJvdmlkZXIuaW5pdGlhbGl6ZSh7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHBlcnNpc3RlbmNlOiBidWlsZFBlcnNpc3RlbmNlSGllcmFyY2h5KGFwaUtleSwgYXBwLm5hbWUpLFxuICAgICAgICBwb3B1cFJlZGlyZWN0UmVzb2x2ZXI6IHJlc29sdmVyXG4gICAgICB9XG4gICAgfSkgYXMgZXhwLkF1dGhJbXBsO1xuXG4gICAgdGhpcy5fZGVsZWdhdGUuX3VwZGF0ZUVycm9yTWFwKGV4cC5kZWJ1Z0Vycm9yTWFwKTtcbiAgICB0aGlzLmxpbmtVbmRlcmx5aW5nQXV0aCgpO1xuICB9XG5cbiAgZ2V0IGVtdWxhdG9yQ29uZmlnKCk6IGNvbXBhdC5FbXVsYXRvckNvbmZpZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5lbXVsYXRvckNvbmZpZztcbiAgfVxuXG4gIGdldCBjdXJyZW50VXNlcigpOiBjb21wYXQuVXNlciB8IG51bGwge1xuICAgIGlmICghdGhpcy5fZGVsZWdhdGUuY3VycmVudFVzZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBVc2VyLmdldE9yQ3JlYXRlKHRoaXMuX2RlbGVnYXRlLmN1cnJlbnRVc2VyKTtcbiAgfVxuICBnZXQgbGFuZ3VhZ2VDb2RlKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5sYW5ndWFnZUNvZGU7XG4gIH1cbiAgc2V0IGxhbmd1YWdlQ29kZShsYW5ndWFnZUNvZGU6IHN0cmluZyB8IG51bGwpIHtcbiAgICB0aGlzLl9kZWxlZ2F0ZS5sYW5ndWFnZUNvZGUgPSBsYW5ndWFnZUNvZGU7XG4gIH1cbiAgZ2V0IHNldHRpbmdzKCk6IGNvbXBhdC5BdXRoU2V0dGluZ3Mge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5zZXR0aW5ncztcbiAgfVxuICBnZXQgdGVuYW50SWQoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLnRlbmFudElkO1xuICB9XG4gIHNldCB0ZW5hbnRJZCh0aWQ6IHN0cmluZyB8IG51bGwpIHtcbiAgICB0aGlzLl9kZWxlZ2F0ZS50ZW5hbnRJZCA9IHRpZDtcbiAgfVxuICB1c2VEZXZpY2VMYW5ndWFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9kZWxlZ2F0ZS51c2VEZXZpY2VMYW5ndWFnZSgpO1xuICB9XG4gIHNpZ25PdXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLnNpZ25PdXQoKTtcbiAgfVxuICB1c2VFbXVsYXRvcih1cmw6IHN0cmluZywgb3B0aW9ucz86IHsgZGlzYWJsZVdhcm5pbmdzOiBib29sZWFuIH0pOiB2b2lkIHtcbiAgICBleHAuY29ubmVjdEF1dGhFbXVsYXRvcih0aGlzLl9kZWxlZ2F0ZSwgdXJsLCBvcHRpb25zKTtcbiAgfVxuICBhcHBseUFjdGlvbkNvZGUoY29kZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIGV4cC5hcHBseUFjdGlvbkNvZGUodGhpcy5fZGVsZWdhdGUsIGNvZGUpO1xuICB9XG5cbiAgY2hlY2tBY3Rpb25Db2RlKGNvZGU6IHN0cmluZyk6IFByb21pc2U8Y29tcGF0LkFjdGlvbkNvZGVJbmZvPiB7XG4gICAgcmV0dXJuIGV4cC5jaGVja0FjdGlvbkNvZGUodGhpcy5fZGVsZWdhdGUsIGNvZGUpO1xuICB9XG5cbiAgY29uZmlybVBhc3N3b3JkUmVzZXQoY29kZTogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIGV4cC5jb25maXJtUGFzc3dvcmRSZXNldCh0aGlzLl9kZWxlZ2F0ZSwgY29kZSwgbmV3UGFzc3dvcmQpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkKFxuICAgIGVtYWlsOiBzdHJpbmcsXG4gICAgcGFzc3dvcmQ6IHN0cmluZ1xuICApOiBQcm9taXNlPGNvbXBhdC5Vc2VyQ3JlZGVudGlhbD4ge1xuICAgIHJldHVybiBjb252ZXJ0Q3JlZGVudGlhbChcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgZXhwLmNyZWF0ZVVzZXJXaXRoRW1haWxBbmRQYXNzd29yZCh0aGlzLl9kZWxlZ2F0ZSwgZW1haWwsIHBhc3N3b3JkKVxuICAgICk7XG4gIH1cbiAgZmV0Y2hQcm92aWRlcnNGb3JFbWFpbChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiB0aGlzLmZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsKGVtYWlsKTtcbiAgfVxuICBmZXRjaFNpZ25Jbk1ldGhvZHNGb3JFbWFpbChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiBleHAuZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwodGhpcy5fZGVsZWdhdGUsIGVtYWlsKTtcbiAgfVxuICBpc1NpZ25JbldpdGhFbWFpbExpbmsoZW1haWxMaW5rOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZXhwLmlzU2lnbkluV2l0aEVtYWlsTGluayh0aGlzLl9kZWxlZ2F0ZSwgZW1haWxMaW5rKTtcbiAgfVxuICBhc3luYyBnZXRSZWRpcmVjdFJlc3VsdCgpOiBQcm9taXNlPGNvbXBhdC5Vc2VyQ3JlZGVudGlhbD4ge1xuICAgIF9hc3NlcnQoXG4gICAgICBfaXNQb3B1cFJlZGlyZWN0U3VwcG9ydGVkKCksXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIGV4cC5BdXRoRXJyb3JDb2RlLk9QRVJBVElPTl9OT1RfU1VQUE9SVEVEXG4gICAgKTtcbiAgICBjb25zdCBjcmVkZW50aWFsID0gYXdhaXQgZXhwLmdldFJlZGlyZWN0UmVzdWx0KFxuICAgICAgdGhpcy5fZGVsZWdhdGUsXG4gICAgICBDb21wYXRQb3B1cFJlZGlyZWN0UmVzb2x2ZXJcbiAgICApO1xuICAgIGlmICghY3JlZGVudGlhbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3JlZGVudGlhbDogbnVsbCxcbiAgICAgICAgdXNlcjogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRDcmVkZW50aWFsKHRoaXMuX2RlbGVnYXRlLCBQcm9taXNlLnJlc29sdmUoY3JlZGVudGlhbCkpO1xuICB9XG5cbiAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSBjYWxsZWQgYnkgZnJhbWV3b3JrcyAoZS5nLiBGaXJlYmFzZVVJLXdlYikgdG8gbG9nIHRoZWlyIHVzYWdlLlxuICAvLyBJdCBpcyBub3QgaW50ZW5kZWQgZm9yIGRpcmVjdCB1c2UgYnkgZGV2ZWxvcGVyIGFwcHMuIE5PIGpzZG9jIGhlcmUgdG8gaW50ZW50aW9uYWxseSBsZWF2ZSBpdFxuICAvLyBvdXQgb2YgYXV0b2dlbmVyYXRlZCBkb2N1bWVudGF0aW9uIHBhZ2VzIHRvIHJlZHVjZSBhY2NpZGVudGFsIG1pc3VzZS5cbiAgYWRkRnJhbWV3b3JrRm9yTG9nZ2luZyhmcmFtZXdvcms6IHN0cmluZyk6IHZvaWQge1xuICAgIGV4cC5hZGRGcmFtZXdvcmtGb3JMb2dnaW5nKHRoaXMuX2RlbGVnYXRlLCBmcmFtZXdvcmspO1xuICB9XG5cbiAgb25BdXRoU3RhdGVDaGFuZ2VkKFxuICAgIG5leHRPck9ic2VydmVyOiBPYnNlcnZlcjx1bmtub3duPiB8ICgoYTogY29tcGF0LlVzZXIgfCBudWxsKSA9PiB1bmtub3duKSxcbiAgICBlcnJvckZuPzogKGVycm9yOiBjb21wYXQuRXJyb3IpID0+IHVua25vd24sXG4gICAgY29tcGxldGVkPzogVW5zdWJzY3JpYmVcbiAgKTogVW5zdWJzY3JpYmUge1xuICAgIGNvbnN0IHsgbmV4dCwgZXJyb3IsIGNvbXBsZXRlIH0gPSB3cmFwT2JzZXJ2ZXJzKFxuICAgICAgbmV4dE9yT2JzZXJ2ZXIsXG4gICAgICBlcnJvckZuLFxuICAgICAgY29tcGxldGVkXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUub25BdXRoU3RhdGVDaGFuZ2VkKG5leHQhLCBlcnJvciwgY29tcGxldGUpO1xuICB9XG4gIG9uSWRUb2tlbkNoYW5nZWQoXG4gICAgbmV4dE9yT2JzZXJ2ZXI6IE9ic2VydmVyPHVua25vd24+IHwgKChhOiBjb21wYXQuVXNlciB8IG51bGwpID0+IHVua25vd24pLFxuICAgIGVycm9yRm4/OiAoZXJyb3I6IGNvbXBhdC5FcnJvcikgPT4gdW5rbm93bixcbiAgICBjb21wbGV0ZWQ/OiBVbnN1YnNjcmliZVxuICApOiBVbnN1YnNjcmliZSB7XG4gICAgY29uc3QgeyBuZXh0LCBlcnJvciwgY29tcGxldGUgfSA9IHdyYXBPYnNlcnZlcnMoXG4gICAgICBuZXh0T3JPYnNlcnZlcixcbiAgICAgIGVycm9yRm4sXG4gICAgICBjb21wbGV0ZWRcbiAgICApO1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5vbklkVG9rZW5DaGFuZ2VkKG5leHQhLCBlcnJvciwgY29tcGxldGUpO1xuICB9XG4gIHNlbmRTaWduSW5MaW5rVG9FbWFpbChcbiAgICBlbWFpbDogc3RyaW5nLFxuICAgIGFjdGlvbkNvZGVTZXR0aW5nczogY29tcGF0LkFjdGlvbkNvZGVTZXR0aW5nc1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gZXhwLnNlbmRTaWduSW5MaW5rVG9FbWFpbCh0aGlzLl9kZWxlZ2F0ZSwgZW1haWwsIGFjdGlvbkNvZGVTZXR0aW5ncyk7XG4gIH1cbiAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChcbiAgICBlbWFpbDogc3RyaW5nLFxuICAgIGFjdGlvbkNvZGVTZXR0aW5ncz86IGNvbXBhdC5BY3Rpb25Db2RlU2V0dGluZ3MgfCBudWxsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBleHAuc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgZW1haWwsXG4gICAgICBhY3Rpb25Db2RlU2V0dGluZ3MgfHwgdW5kZWZpbmVkXG4gICAgKTtcbiAgfVxuICBhc3luYyBzZXRQZXJzaXN0ZW5jZShwZXJzaXN0ZW5jZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgX3ZhbGlkYXRlUGVyc2lzdGVuY2VBcmd1bWVudCh0aGlzLl9kZWxlZ2F0ZSwgcGVyc2lzdGVuY2UpO1xuICAgIGxldCBjb252ZXJ0ZWQ7XG4gICAgc3dpdGNoIChwZXJzaXN0ZW5jZSkge1xuICAgICAgY2FzZSBQZXJzaXN0ZW5jZS5TRVNTSU9OOlxuICAgICAgICBjb252ZXJ0ZWQgPSBleHAuYnJvd3NlclNlc3Npb25QZXJzaXN0ZW5jZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFBlcnNpc3RlbmNlLkxPQ0FMOlxuICAgICAgICAvLyBOb3QgdXNpbmcgaXNJbmRleGVkREJBdmFpbGFibGUoKSBzaW5jZSBpdCBvbmx5IGNoZWNrcyBpZiBpbmRleGVkREIgaXMgZGVmaW5lZC5cbiAgICAgICAgY29uc3QgaXNJbmRleGVkREJGdWxseVN1cHBvcnRlZCA9IGF3YWl0IGV4cFxuICAgICAgICAgIC5fZ2V0SW5zdGFuY2U8ZXhwLlBlcnNpc3RlbmNlSW50ZXJuYWw+KGV4cC5pbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlKVxuICAgICAgICAgIC5faXNBdmFpbGFibGUoKTtcbiAgICAgICAgY29udmVydGVkID0gaXNJbmRleGVkREJGdWxseVN1cHBvcnRlZFxuICAgICAgICAgID8gZXhwLmluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2VcbiAgICAgICAgICA6IGV4cC5icm93c2VyTG9jYWxQZXJzaXN0ZW5jZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFBlcnNpc3RlbmNlLk5PTkU6XG4gICAgICAgIGNvbnZlcnRlZCA9IGV4cC5pbk1lbW9yeVBlcnNpc3RlbmNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBleHAuX2ZhaWwoZXhwLkF1dGhFcnJvckNvZGUuQVJHVU1FTlRfRVJST1IsIHtcbiAgICAgICAgICBhcHBOYW1lOiB0aGlzLl9kZWxlZ2F0ZS5uYW1lXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS5zZXRQZXJzaXN0ZW5jZShjb252ZXJ0ZWQpO1xuICB9XG5cbiAgc2lnbkluQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWwoXG4gICAgY3JlZGVudGlhbDogY29tcGF0LkF1dGhDcmVkZW50aWFsXG4gICk6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gICAgcmV0dXJuIHRoaXMuc2lnbkluV2l0aENyZWRlbnRpYWwoY3JlZGVudGlhbCk7XG4gIH1cbiAgc2lnbkluQW5vbnltb3VzbHkoKTogUHJvbWlzZTxjb21wYXQuVXNlckNyZWRlbnRpYWw+IHtcbiAgICByZXR1cm4gY29udmVydENyZWRlbnRpYWwoXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIGV4cC5zaWduSW5Bbm9ueW1vdXNseSh0aGlzLl9kZWxlZ2F0ZSlcbiAgICApO1xuICB9XG4gIHNpZ25JbldpdGhDcmVkZW50aWFsKFxuICAgIGNyZWRlbnRpYWw6IGNvbXBhdC5BdXRoQ3JlZGVudGlhbFxuICApOiBQcm9taXNlPGNvbXBhdC5Vc2VyQ3JlZGVudGlhbD4ge1xuICAgIHJldHVybiBjb252ZXJ0Q3JlZGVudGlhbChcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgZXhwLnNpZ25JbldpdGhDcmVkZW50aWFsKHRoaXMuX2RlbGVnYXRlLCBjcmVkZW50aWFsIGFzIGV4cC5BdXRoQ3JlZGVudGlhbClcbiAgICApO1xuICB9XG4gIHNpZ25JbldpdGhDdXN0b21Ub2tlbih0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxjb21wYXQuVXNlckNyZWRlbnRpYWw+IHtcbiAgICByZXR1cm4gY29udmVydENyZWRlbnRpYWwoXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIGV4cC5zaWduSW5XaXRoQ3VzdG9tVG9rZW4odGhpcy5fZGVsZWdhdGUsIHRva2VuKVxuICAgICk7XG4gIH1cbiAgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoXG4gICAgZW1haWw6IHN0cmluZyxcbiAgICBwYXNzd29yZDogc3RyaW5nXG4gICk6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gICAgcmV0dXJuIGNvbnZlcnRDcmVkZW50aWFsKFxuICAgICAgdGhpcy5fZGVsZWdhdGUsXG4gICAgICBleHAuc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQodGhpcy5fZGVsZWdhdGUsIGVtYWlsLCBwYXNzd29yZClcbiAgICApO1xuICB9XG4gIHNpZ25JbldpdGhFbWFpbExpbmsoXG4gICAgZW1haWw6IHN0cmluZyxcbiAgICBlbWFpbExpbms/OiBzdHJpbmdcbiAgKTogUHJvbWlzZTxjb21wYXQuVXNlckNyZWRlbnRpYWw+IHtcbiAgICByZXR1cm4gY29udmVydENyZWRlbnRpYWwoXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIGV4cC5zaWduSW5XaXRoRW1haWxMaW5rKHRoaXMuX2RlbGVnYXRlLCBlbWFpbCwgZW1haWxMaW5rKVxuICAgICk7XG4gIH1cbiAgc2lnbkluV2l0aFBob25lTnVtYmVyKFxuICAgIHBob25lTnVtYmVyOiBzdHJpbmcsXG4gICAgYXBwbGljYXRpb25WZXJpZmllcjogY29tcGF0LkFwcGxpY2F0aW9uVmVyaWZpZXJcbiAgKTogUHJvbWlzZTxjb21wYXQuQ29uZmlybWF0aW9uUmVzdWx0PiB7XG4gICAgcmV0dXJuIGNvbnZlcnRDb25maXJtYXRpb25SZXN1bHQoXG4gICAgICB0aGlzLl9kZWxlZ2F0ZSxcbiAgICAgIGV4cC5zaWduSW5XaXRoUGhvbmVOdW1iZXIoXG4gICAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgICBwaG9uZU51bWJlcixcbiAgICAgICAgYXBwbGljYXRpb25WZXJpZmllclxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgYXN5bmMgc2lnbkluV2l0aFBvcHVwKFxuICAgIHByb3ZpZGVyOiBjb21wYXQuQXV0aFByb3ZpZGVyXG4gICk6IFByb21pc2U8Y29tcGF0LlVzZXJDcmVkZW50aWFsPiB7XG4gICAgX2Fzc2VydChcbiAgICAgIF9pc1BvcHVwUmVkaXJlY3RTdXBwb3J0ZWQoKSxcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgZXhwLkF1dGhFcnJvckNvZGUuT1BFUkFUSU9OX05PVF9TVVBQT1JURURcbiAgICApO1xuICAgIHJldHVybiBjb252ZXJ0Q3JlZGVudGlhbChcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgZXhwLnNpZ25JbldpdGhQb3B1cChcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUsXG4gICAgICAgIHByb3ZpZGVyIGFzIGV4cC5BdXRoUHJvdmlkZXIsXG4gICAgICAgIENvbXBhdFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgYXN5bmMgc2lnbkluV2l0aFJlZGlyZWN0KHByb3ZpZGVyOiBjb21wYXQuQXV0aFByb3ZpZGVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgX2Fzc2VydChcbiAgICAgIF9pc1BvcHVwUmVkaXJlY3RTdXBwb3J0ZWQoKSxcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgZXhwLkF1dGhFcnJvckNvZGUuT1BFUkFUSU9OX05PVF9TVVBQT1JURURcbiAgICApO1xuXG4gICAgYXdhaXQgX3NhdmVQZXJzaXN0ZW5jZUZvclJlZGlyZWN0KHRoaXMuX2RlbGVnYXRlKTtcbiAgICByZXR1cm4gZXhwLnNpZ25JbldpdGhSZWRpcmVjdChcbiAgICAgIHRoaXMuX2RlbGVnYXRlLFxuICAgICAgcHJvdmlkZXIgYXMgZXhwLkF1dGhQcm92aWRlcixcbiAgICAgIENvbXBhdFBvcHVwUmVkaXJlY3RSZXNvbHZlclxuICAgICk7XG4gIH1cbiAgdXBkYXRlQ3VycmVudFVzZXIodXNlcjogY29tcGF0LlVzZXIgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gcmVtb3ZlIHRzLWlnbm9yZSBvbmNlIG92ZXJsb2FkcyBhcmUgZGVmaW5lZCBmb3IgZXhwIGZ1bmN0aW9ucyB0byBhY2NlcHQgY29tcGF0IG9iamVjdHNcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLnVwZGF0ZUN1cnJlbnRVc2VyKHVzZXIpO1xuICB9XG4gIHZlcmlmeVBhc3N3b3JkUmVzZXRDb2RlKGNvZGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGV4cC52ZXJpZnlQYXNzd29yZFJlc2V0Q29kZSh0aGlzLl9kZWxlZ2F0ZSwgY29kZSk7XG4gIH1cbiAgdW53cmFwKCk6IGV4cC5BdXRoIHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGU7XG4gIH1cbiAgX2RlbGV0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUuX2RlbGV0ZSgpO1xuICB9XG4gIHByaXZhdGUgbGlua1VuZGVybHlpbmdBdXRoKCk6IHZvaWQge1xuICAgICh0aGlzLl9kZWxlZ2F0ZSBhcyB1bmtub3duIGFzIFJldmVyc2VXcmFwcGVyPEF1dGg+KS53cmFwcGVkID0gKCkgPT4gdGhpcztcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwT2JzZXJ2ZXJzKFxuICBuZXh0T3JPYnNlcnZlcjogT2JzZXJ2ZXI8dW5rbm93bj4gfCAoKGE6IGNvbXBhdC5Vc2VyIHwgbnVsbCkgPT4gdW5rbm93biksXG4gIGVycm9yPzogKGVycm9yOiBjb21wYXQuRXJyb3IpID0+IHVua25vd24sXG4gIGNvbXBsZXRlPzogVW5zdWJzY3JpYmVcbik6IFBhcnRpYWw8T2JzZXJ2ZXI8ZXhwLlVzZXIgfCBudWxsPj4ge1xuICBsZXQgbmV4dCA9IG5leHRPck9ic2VydmVyO1xuICBpZiAodHlwZW9mIG5leHRPck9ic2VydmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgKHsgbmV4dCwgZXJyb3IsIGNvbXBsZXRlIH0gPSBuZXh0T3JPYnNlcnZlcik7XG4gIH1cblxuICAvLyBXZSBrbm93ICduZXh0JyBpcyBub3cgYSBmdW5jdGlvblxuICBjb25zdCBvbGROZXh0ID0gbmV4dCBhcyAoYTogY29tcGF0LlVzZXIgfCBudWxsKSA9PiB1bmtub3duO1xuXG4gIGNvbnN0IG5ld05leHQgPSAodXNlcjogZXhwLlVzZXIgfCBudWxsKTogdW5rbm93biA9PlxuICAgIG9sZE5leHQodXNlciAmJiBVc2VyLmdldE9yQ3JlYXRlKHVzZXIgYXMgZXhwLlVzZXIpKTtcbiAgcmV0dXJuIHtcbiAgICBuZXh0OiBuZXdOZXh0LFxuICAgIGVycm9yOiBlcnJvciBhcyBFcnJvckZuLFxuICAgIGNvbXBsZXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkUGVyc2lzdGVuY2VIaWVyYXJjaHkoXG4gIGFwaUtleTogc3RyaW5nLFxuICBhcHBOYW1lOiBzdHJpbmdcbik6IGV4cC5QZXJzaXN0ZW5jZVtdIHtcbiAgLy8gTm90ZSB0aGlzIGlzIHNsaWdodGx5IGRpZmZlcmVudCBiZWhhdmlvcjogaW4gdGhpcyBjYXNlLCB0aGUgc3RvcmVkXG4gIC8vIHBlcnNpc3RlbmNlIGlzIGNoZWNrZWQgKmZpcnN0KiByYXRoZXIgdGhhbiBsYXN0LiBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudFxuICAvLyB0byBwcmVmZXIgc3RvcmVkIHBlcnNpc3RlbmNlIHR5cGUgaW4gdGhlIGhpZXJhcmNoeS4gVGhpcyBpcyBhbiBlbXB0eVxuICAvLyBhcnJheSBpZiB3aW5kb3cgaXMgbm90IGF2YWlsYWJsZSBvciB0aGVyZSBpcyBubyBwZW5kaW5nIHJlZGlyZWN0XG4gIGNvbnN0IHBlcnNpc3RlbmNlcyA9IF9nZXRQZXJzaXN0ZW5jZXNGcm9tUmVkaXJlY3QoYXBpS2V5LCBhcHBOYW1lKTtcblxuICAvLyBJZiBcInNlbGZcIiBpcyBhdmFpbGFibGUsIGFkZCBpbmRleGVkREJcbiAgaWYgKFxuICAgIHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICFwZXJzaXN0ZW5jZXMuaW5jbHVkZXMoZXhwLmluZGV4ZWREQkxvY2FsUGVyc2lzdGVuY2UpXG4gICkge1xuICAgIHBlcnNpc3RlbmNlcy5wdXNoKGV4cC5pbmRleGVkREJMb2NhbFBlcnNpc3RlbmNlKTtcbiAgfVxuXG4gIC8vIElmIFwid2luZG93XCIgaXMgYXZhaWxhYmxlLCBhZGQgSFRNTCBTdG9yYWdlIHBlcnNpc3RlbmNlc1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmb3IgKGNvbnN0IHBlcnNpc3RlbmNlIG9mIFtcbiAgICAgIGV4cC5icm93c2VyTG9jYWxQZXJzaXN0ZW5jZSxcbiAgICAgIGV4cC5icm93c2VyU2Vzc2lvblBlcnNpc3RlbmNlXG4gICAgXSkge1xuICAgICAgaWYgKCFwZXJzaXN0ZW5jZXMuaW5jbHVkZXMocGVyc2lzdGVuY2UpKSB7XG4gICAgICAgIHBlcnNpc3RlbmNlcy5wdXNoKHBlcnNpc3RlbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBZGQgaW4tbWVtb3J5IGFzIGEgZmluYWwgZmFsbGJhY2tcbiAgaWYgKCFwZXJzaXN0ZW5jZXMuaW5jbHVkZXMoZXhwLmluTWVtb3J5UGVyc2lzdGVuY2UpKSB7XG4gICAgcGVyc2lzdGVuY2VzLnB1c2goZXhwLmluTWVtb3J5UGVyc2lzdGVuY2UpO1xuICB9XG5cbiAgcmV0dXJuIHBlcnNpc3RlbmNlcztcbn1cbiIsICIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBleHAgZnJvbSAnQGZpcmViYXNlL2F1dGgvaW50ZXJuYWwnO1xuaW1wb3J0ICogYXMgY29tcGF0IGZyb20gJ0BmaXJlYmFzZS9hdXRoLXR5cGVzJztcbmltcG9ydCBmaXJlYmFzZSBmcm9tICdAZmlyZWJhc2UvYXBwLWNvbXBhdCc7XG5pbXBvcnQgeyBDb21wYXQgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyB1bndyYXAgfSBmcm9tICcuL3dyYXAnO1xuXG5leHBvcnQgY2xhc3MgUGhvbmVBdXRoUHJvdmlkZXJcbiAgaW1wbGVtZW50cyBjb21wYXQuUGhvbmVBdXRoUHJvdmlkZXIsIENvbXBhdDxleHAuUGhvbmVBdXRoUHJvdmlkZXI+XG57XG4gIHByb3ZpZGVySWQgPSAncGhvbmUnO1xuICByZWFkb25seSBfZGVsZWdhdGU6IGV4cC5QaG9uZUF1dGhQcm92aWRlcjtcblxuICBzdGF0aWMgUEhPTkVfU0lHTl9JTl9NRVRIT0QgPSBleHAuUGhvbmVBdXRoUHJvdmlkZXIuUEhPTkVfU0lHTl9JTl9NRVRIT0Q7XG4gIHN0YXRpYyBQUk9WSURFUl9JRCA9IGV4cC5QaG9uZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRDtcblxuICBzdGF0aWMgY3JlZGVudGlhbChcbiAgICB2ZXJpZmljYXRpb25JZDogc3RyaW5nLFxuICAgIHZlcmlmaWNhdGlvbkNvZGU6IHN0cmluZ1xuICApOiBjb21wYXQuQXV0aENyZWRlbnRpYWwge1xuICAgIHJldHVybiBleHAuUGhvbmVBdXRoUHJvdmlkZXIuY3JlZGVudGlhbCh2ZXJpZmljYXRpb25JZCwgdmVyaWZpY2F0aW9uQ29kZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBUT0RPOiByZW1vdmUgdHMtaWdub3JlIHdoZW4gbW92aW5nIHR5cGVzIGZyb20gYXV0aC10eXBlcyB0byBhdXRoLWNvbXBhdFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB0aGlzLl9kZWxlZ2F0ZSA9IG5ldyBleHAuUGhvbmVBdXRoUHJvdmlkZXIodW53cmFwKGZpcmViYXNlLmF1dGghKCkpKTtcbiAgfVxuXG4gIHZlcmlmeVBob25lTnVtYmVyKFxuICAgIHBob25lSW5mb09wdGlvbnM6XG4gICAgICB8IHN0cmluZ1xuICAgICAgfCBjb21wYXQuUGhvbmVTaW5nbGVGYWN0b3JJbmZvT3B0aW9uc1xuICAgICAgfCBjb21wYXQuUGhvbmVNdWx0aUZhY3RvckVucm9sbEluZm9PcHRpb25zXG4gICAgICB8IGNvbXBhdC5QaG9uZU11bHRpRmFjdG9yU2lnbkluSW5mb09wdGlvbnMsXG4gICAgYXBwbGljYXRpb25WZXJpZmllcjogY29tcGF0LkFwcGxpY2F0aW9uVmVyaWZpZXJcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGUudmVyaWZ5UGhvbmVOdW1iZXIoXG4gICAgICAvLyBUaGUgaW1wbGVtZW50YXRpb24gbWF0Y2hlcyBidXQgdGhlIHR5cGVzIGFyZSBzdWJ0bHkgaW5jb21wYXRpYmxlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgcGhvbmVJbmZvT3B0aW9ucyBhcyBhbnksXG4gICAgICBhcHBsaWNhdGlvblZlcmlmaWVyXG4gICAgKTtcbiAgfVxuXG4gIHVud3JhcCgpOiBleHAuUGhvbmVBdXRoUHJvdmlkZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBmaXJlYmFzZSwgeyBGaXJlYmFzZUFwcCB9IGZyb20gJ0BmaXJlYmFzZS9hcHAtY29tcGF0JztcbmltcG9ydCAqIGFzIGV4cCBmcm9tICdAZmlyZWJhc2UvYXV0aC9pbnRlcm5hbCc7XG5pbXBvcnQgKiBhcyBjb21wYXQgZnJvbSAnQGZpcmViYXNlL2F1dGgtdHlwZXMnO1xuaW1wb3J0IHsgQ29tcGF0IH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG5jb25zdCBfYXNzZXJ0OiB0eXBlb2YgZXhwLl9hc3NlcnQgPSBleHAuX2Fzc2VydDtcblxuZXhwb3J0IGNsYXNzIFJlY2FwdGNoYVZlcmlmaWVyXG4gIGltcGxlbWVudHMgY29tcGF0LlJlY2FwdGNoYVZlcmlmaWVyLCBDb21wYXQ8ZXhwLkFwcGxpY2F0aW9uVmVyaWZpZXI+XG57XG4gIHJlYWRvbmx5IF9kZWxlZ2F0ZTogZXhwLlJlY2FwdGNoYVZlcmlmaWVyO1xuICB0eXBlOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBzdHJpbmcsXG4gICAgcGFyYW1ldGVycz86IG9iamVjdCB8IG51bGwsXG4gICAgYXBwOiBGaXJlYmFzZUFwcCA9IGZpcmViYXNlLmFwcCgpXG4gICkge1xuICAgIC8vIEFQSSBrZXkgaXMgcmVxdWlyZWQgZm9yIHdlYiBjbGllbnQgUlBDIGNhbGxzLlxuICAgIF9hc3NlcnQoYXBwLm9wdGlvbnM/LmFwaUtleSwgZXhwLkF1dGhFcnJvckNvZGUuSU5WQUxJRF9BUElfS0VZLCB7XG4gICAgICBhcHBOYW1lOiBhcHAubmFtZVxuICAgIH0pO1xuICAgIHRoaXMuX2RlbGVnYXRlID0gbmV3IGV4cC5SZWNhcHRjaGFWZXJpZmllcihcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBwYXJhbWV0ZXJzIGFzIGFueSxcblxuICAgICAgLy8gVE9ETzogcmVtb3ZlIHRzLWlnbm9yZSB3aGVuIG1vdmluZyB0eXBlcyBmcm9tIGF1dGgtdHlwZXMgdG8gYXV0aC1jb21wYXRcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGFwcC5hdXRoISgpXG4gICAgKTtcbiAgICB0aGlzLnR5cGUgPSB0aGlzLl9kZWxlZ2F0ZS50eXBlO1xuICB9XG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX2RlbGVnYXRlLmNsZWFyKCk7XG4gIH1cbiAgcmVuZGVyKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGVnYXRlLnJlbmRlcigpO1xuICB9XG4gIHZlcmlmeSgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9kZWxlZ2F0ZS52ZXJpZnkoKTtcbiAgfVxufVxuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuXG5pbXBvcnQgZmlyZWJhc2UsIHsgX0ZpcmViYXNlTmFtZXNwYWNlIH0gZnJvbSAnQGZpcmViYXNlL2FwcC1jb21wYXQnO1xuaW1wb3J0ICogYXMgaW1wbCBmcm9tICdAZmlyZWJhc2UvYXV0aC9pbnRlcm5hbCc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbXBvbmVudFR5cGUsXG4gIEluc3RhbnRpYXRpb25Nb2RlXG59IGZyb20gJ0BmaXJlYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnQGZpcmViYXNlL2F1dGgtdHlwZXMnO1xuaW1wb3J0IHsgbmFtZSwgdmVyc2lvbiB9IGZyb20gJy4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuL3NyYy9hdXRoJztcbmltcG9ydCB7IFBob25lQXV0aFByb3ZpZGVyIGFzIENvbXBhdEF1dGhQcm92aWRlciB9IGZyb20gJy4vc3JjL3Bob25lX2F1dGhfcHJvdmlkZXInO1xuaW1wb3J0IHsgUmVjYXB0Y2hhVmVyaWZpZXIgYXMgQ29tcGF0UmVjYXB0Y2hhVmVyaWZpZXIgfSBmcm9tICcuL3NyYy9yZWNhcHRjaGFfdmVyaWZpZXInO1xuXG5jb25zdCBBVVRIX1RZUEUgPSAnYXV0aC1jb21wYXQnO1xuXG5kZWNsYXJlIG1vZHVsZSAnQGZpcmViYXNlL2NvbXBvbmVudCcge1xuICBpbnRlcmZhY2UgTmFtZVNlcnZpY2VNYXBwaW5nIHtcbiAgICAnYXV0aC1jb21wYXQnOiB0eXBlcy5GaXJlYmFzZUF1dGg7XG4gIH1cbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BmaXJlYmFzZS9hcHAtY29tcGF0JyB7XG4gIGludGVyZmFjZSBGaXJlYmFzZU5hbWVzcGFjZSB7XG4gICAgYXV0aDoge1xuICAgICAgKGFwcD86IEZpcmViYXNlQXBwKTogdHlwZXMuRmlyZWJhc2VBdXRoO1xuICAgICAgQXV0aDogdHlwZW9mIHR5cGVzLkZpcmViYXNlQXV0aDtcbiAgICAgIEVtYWlsQXV0aFByb3ZpZGVyOiB0eXBlb2YgdHlwZXMuRW1haWxBdXRoUHJvdmlkZXI7XG4gICAgICBFbWFpbEF1dGhQcm92aWRlcl9JbnN0YW5jZTogdHlwZW9mIHR5cGVzLkVtYWlsQXV0aFByb3ZpZGVyX0luc3RhbmNlO1xuICAgICAgRmFjZWJvb2tBdXRoUHJvdmlkZXI6IHR5cGVvZiB0eXBlcy5GYWNlYm9va0F1dGhQcm92aWRlcjtcbiAgICAgIEZhY2Vib29rQXV0aFByb3ZpZGVyX0luc3RhbmNlOiB0eXBlb2YgdHlwZXMuRmFjZWJvb2tBdXRoUHJvdmlkZXJfSW5zdGFuY2U7XG4gICAgICBHaXRodWJBdXRoUHJvdmlkZXI6IHR5cGVvZiB0eXBlcy5HaXRodWJBdXRoUHJvdmlkZXI7XG4gICAgICBHaXRodWJBdXRoUHJvdmlkZXJfSW5zdGFuY2U6IHR5cGVvZiB0eXBlcy5HaXRodWJBdXRoUHJvdmlkZXJfSW5zdGFuY2U7XG4gICAgICBHb29nbGVBdXRoUHJvdmlkZXI6IHR5cGVvZiB0eXBlcy5Hb29nbGVBdXRoUHJvdmlkZXI7XG4gICAgICBHb29nbGVBdXRoUHJvdmlkZXJfSW5zdGFuY2U6IHR5cGVvZiB0eXBlcy5Hb29nbGVBdXRoUHJvdmlkZXJfSW5zdGFuY2U7XG4gICAgICBPQXV0aFByb3ZpZGVyOiB0eXBlb2YgdHlwZXMuT0F1dGhQcm92aWRlcjtcbiAgICAgIFNBTUxBdXRoUHJvdmlkZXI6IHR5cGVvZiB0eXBlcy5TQU1MQXV0aFByb3ZpZGVyO1xuICAgICAgUGhvbmVBdXRoUHJvdmlkZXI6IHR5cGVvZiB0eXBlcy5QaG9uZUF1dGhQcm92aWRlcjtcbiAgICAgIFBob25lQXV0aFByb3ZpZGVyX0luc3RhbmNlOiB0eXBlb2YgdHlwZXMuUGhvbmVBdXRoUHJvdmlkZXJfSW5zdGFuY2U7XG4gICAgICBQaG9uZU11bHRpRmFjdG9yR2VuZXJhdG9yOiB0eXBlb2YgdHlwZXMuUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvcjtcbiAgICAgIFJlY2FwdGNoYVZlcmlmaWVyOiB0eXBlb2YgdHlwZXMuUmVjYXB0Y2hhVmVyaWZpZXI7XG4gICAgICBSZWNhcHRjaGFWZXJpZmllcl9JbnN0YW5jZTogdHlwZW9mIHR5cGVzLlJlY2FwdGNoYVZlcmlmaWVyX0luc3RhbmNlO1xuICAgICAgVHdpdHRlckF1dGhQcm92aWRlcjogdHlwZW9mIHR5cGVzLlR3aXR0ZXJBdXRoUHJvdmlkZXI7XG4gICAgICBUd2l0dGVyQXV0aFByb3ZpZGVyX0luc3RhbmNlOiB0eXBlb2YgdHlwZXMuVHdpdHRlckF1dGhQcm92aWRlcl9JbnN0YW5jZTtcbiAgICB9O1xuICB9XG4gIGludGVyZmFjZSBGaXJlYmFzZUFwcCB7XG4gICAgYXV0aD8oKTogdHlwZXMuRmlyZWJhc2VBdXRoO1xuICB9XG59XG5cbi8vIENyZWF0ZSBhdXRoIGNvbXBvbmVudHMgdG8gcmVnaXN0ZXIgd2l0aCBmaXJlYmFzZS5cbi8vIFByb3ZpZGVzIEF1dGggcHVibGljIEFQSXMuXG5mdW5jdGlvbiByZWdpc3RlckF1dGhDb21wYXQoaW5zdGFuY2U6IF9GaXJlYmFzZU5hbWVzcGFjZSk6IHZvaWQge1xuICBpbnN0YW5jZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudChcbiAgICBuZXcgQ29tcG9uZW50KFxuICAgICAgQVVUSF9UWVBFLFxuICAgICAgY29udGFpbmVyID0+IHtcbiAgICAgICAgLy8gZ2V0SW1tZWRpYXRlIGZvciBGaXJlYmFzZUFwcCB3aWxsIGFsd2F5cyBzdWNjZWVkXG4gICAgICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwLWNvbXBhdCcpLmdldEltbWVkaWF0ZSgpO1xuICAgICAgICBjb25zdCBhdXRoUHJvdmlkZXIgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ2F1dGgnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdXRoKGFwcCwgYXV0aFByb3ZpZGVyKTtcbiAgICAgIH0sXG4gICAgICBDb21wb25lbnRUeXBlLlBVQkxJQ1xuICAgIClcbiAgICAgIC5zZXRTZXJ2aWNlUHJvcHMoe1xuICAgICAgICBBY3Rpb25Db2RlSW5mbzoge1xuICAgICAgICAgIE9wZXJhdGlvbjoge1xuICAgICAgICAgICAgRU1BSUxfU0lHTklOOiBpbXBsLkFjdGlvbkNvZGVPcGVyYXRpb24uRU1BSUxfU0lHTklOLFxuICAgICAgICAgICAgUEFTU1dPUkRfUkVTRVQ6IGltcGwuQWN0aW9uQ29kZU9wZXJhdGlvbi5QQVNTV09SRF9SRVNFVCxcbiAgICAgICAgICAgIFJFQ09WRVJfRU1BSUw6IGltcGwuQWN0aW9uQ29kZU9wZXJhdGlvbi5SRUNPVkVSX0VNQUlMLFxuICAgICAgICAgICAgUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT046XG4gICAgICAgICAgICAgIGltcGwuQWN0aW9uQ29kZU9wZXJhdGlvbi5SRVZFUlRfU0VDT05EX0ZBQ1RPUl9BRERJVElPTixcbiAgICAgICAgICAgIFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMOlxuICAgICAgICAgICAgICBpbXBsLkFjdGlvbkNvZGVPcGVyYXRpb24uVkVSSUZZX0FORF9DSEFOR0VfRU1BSUwsXG4gICAgICAgICAgICBWRVJJRllfRU1BSUw6IGltcGwuQWN0aW9uQ29kZU9wZXJhdGlvbi5WRVJJRllfRU1BSUxcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIEVtYWlsQXV0aFByb3ZpZGVyOiBpbXBsLkVtYWlsQXV0aFByb3ZpZGVyLFxuICAgICAgICBGYWNlYm9va0F1dGhQcm92aWRlcjogaW1wbC5GYWNlYm9va0F1dGhQcm92aWRlcixcbiAgICAgICAgR2l0aHViQXV0aFByb3ZpZGVyOiBpbXBsLkdpdGh1YkF1dGhQcm92aWRlcixcbiAgICAgICAgR29vZ2xlQXV0aFByb3ZpZGVyOiBpbXBsLkdvb2dsZUF1dGhQcm92aWRlcixcbiAgICAgICAgT0F1dGhQcm92aWRlcjogaW1wbC5PQXV0aFByb3ZpZGVyLFxuICAgICAgICBTQU1MQXV0aFByb3ZpZGVyOiBpbXBsLlNBTUxBdXRoUHJvdmlkZXIsXG4gICAgICAgIFBob25lQXV0aFByb3ZpZGVyOiBDb21wYXRBdXRoUHJvdmlkZXIsXG4gICAgICAgIFBob25lTXVsdGlGYWN0b3JHZW5lcmF0b3I6IGltcGwuUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvcixcbiAgICAgICAgUmVjYXB0Y2hhVmVyaWZpZXI6IENvbXBhdFJlY2FwdGNoYVZlcmlmaWVyLFxuICAgICAgICBUd2l0dGVyQXV0aFByb3ZpZGVyOiBpbXBsLlR3aXR0ZXJBdXRoUHJvdmlkZXIsXG4gICAgICAgIEF1dGgsXG4gICAgICAgIEF1dGhDcmVkZW50aWFsOiBpbXBsLkF1dGhDcmVkZW50aWFsLFxuICAgICAgICBFcnJvcjogRmlyZWJhc2VFcnJvclxuICAgICAgfSlcbiAgICAgIC5zZXRJbnN0YW50aWF0aW9uTW9kZShJbnN0YW50aWF0aW9uTW9kZS5MQVpZKVxuICAgICAgLnNldE11bHRpcGxlSW5zdGFuY2VzKGZhbHNlKVxuICApO1xuXG4gIGluc3RhbmNlLnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uKTtcbn1cblxucmVnaXN0ZXJBdXRoQ29tcGF0KGZpcmViYXNlIGFzIF9GaXJlYmFzZU5hbWVzcGFjZSk7XG4iLCAiaW1wb3J0ICdAZmlyZWJhc2UvYXV0aC1jb21wYXQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwgIihmdW5jdGlvbigpIHtcblxuICAvLyBuYi4gVGhpcyBpcyBmb3IgSUUxMCBhbmQgbG93ZXIgX29ubHlfLlxuICB2YXIgc3VwcG9ydEN1c3RvbUV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuICBpZiAoIXN1cHBvcnRDdXN0b21FdmVudCB8fCB0eXBlb2Ygc3VwcG9ydEN1c3RvbUV2ZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHN1cHBvcnRDdXN0b21FdmVudCA9IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCB4KSB7XG4gICAgICB4ID0geCB8fCB7fTtcbiAgICAgIHZhciBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXYuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCAhIXguYnViYmxlcywgISF4LmNhbmNlbGFibGUsIHguZGV0YWlsIHx8IG51bGwpO1xuICAgICAgcmV0dXJuIGV2O1xuICAgIH07XG4gICAgc3VwcG9ydEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbCB0byBjaGVjayBmb3Igc3RhY2tpbmcgY29udGV4dFxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoaXMgZWwgb3IgaXRzIHBhcmVudHMgY3JlYXRlcyBhIHN0YWNraW5nIGNvbnRleHRcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZXNTdGFja2luZ0NvbnRleHQoZWwpIHtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIHZhciBzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgdmFyIGludmFsaWQgPSBmdW5jdGlvbihrLCBvaykge1xuICAgICAgICByZXR1cm4gIShzW2tdID09PSB1bmRlZmluZWQgfHwgc1trXSA9PT0gb2spO1xuICAgICAgfVxuICAgICAgaWYgKHMub3BhY2l0eSA8IDEgfHxcbiAgICAgICAgICBpbnZhbGlkKCd6SW5kZXgnLCAnYXV0bycpIHx8XG4gICAgICAgICAgaW52YWxpZCgndHJhbnNmb3JtJywgJ25vbmUnKSB8fFxuICAgICAgICAgIGludmFsaWQoJ21peEJsZW5kTW9kZScsICdub3JtYWwnKSB8fFxuICAgICAgICAgIGludmFsaWQoJ2ZpbHRlcicsICdub25lJykgfHxcbiAgICAgICAgICBpbnZhbGlkKCdwZXJzcGVjdGl2ZScsICdub25lJykgfHxcbiAgICAgICAgICBzWydpc29sYXRpb24nXSA9PT0gJ2lzb2xhdGUnIHx8XG4gICAgICAgICAgcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJyB8fFxuICAgICAgICAgIHMud2Via2l0T3ZlcmZsb3dTY3JvbGxpbmcgPT09ICd0b3VjaCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgbmVhcmVzdCA8ZGlhbG9nPiBmcm9tIHRoZSBwYXNzZWQgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbCB0byBzZWFyY2ggZnJvbVxuICAgKiBAcmV0dXJuIHtIVE1MRGlhbG9nRWxlbWVudH0gZGlhbG9nIGZvdW5kXG4gICAqL1xuICBmdW5jdGlvbiBmaW5kTmVhcmVzdERpYWxvZyhlbCkge1xuICAgIHdoaWxlIChlbCkge1xuICAgICAgaWYgKGVsLmxvY2FsTmFtZSA9PT0gJ2RpYWxvZycpIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7SFRNTERpYWxvZ0VsZW1lbnR9ICovIChlbCk7XG4gICAgICB9XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEJsdXIgdGhlIHNwZWNpZmllZCBlbGVtZW50LCBhcyBsb25nIGFzIGl0J3Mgbm90IHRoZSBIVE1MIGJvZHkgZWxlbWVudC5cbiAgICogVGhpcyB3b3JrcyBhcm91bmQgYW4gSUU5LzEwIGJ1ZyAtIGJsdXJyaW5nIHRoZSBib2R5IGNhdXNlcyBXaW5kb3dzIHRvXG4gICAqIGJsdXIgdGhlIHdob2xlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIHRvIGJsdXJcbiAgICovXG4gIGZ1bmN0aW9uIHNhZmVCbHVyKGVsKSB7XG4gICAgaWYgKGVsICYmIGVsLmJsdXIgJiYgZWwgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGVsLmJsdXIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshTm9kZUxpc3R9IG5vZGVMaXN0IHRvIHNlYXJjaFxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgdG8gZmluZFxuICAgKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIG5vZGUgaXMgaW5zaWRlIG5vZGVMaXN0XG4gICAqL1xuICBmdW5jdGlvbiBpbk5vZGVMaXN0KG5vZGVMaXN0LCBub2RlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKG5vZGVMaXN0W2ldID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGVsIHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhpcyBmb3JtIGhhcyBtZXRob2Q9XCJkaWFsb2dcIlxuICAgKi9cbiAgZnVuY3Rpb24gaXNGb3JtTWV0aG9kRGlhbG9nKGVsKSB7XG4gICAgaWYgKCFlbCB8fCAhZWwuaGFzQXR0cmlidXRlKCdtZXRob2QnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCdtZXRob2QnKS50b0xvd2VyQ2FzZSgpID09PSAnZGlhbG9nJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MRGlhbG9nRWxlbWVudH0gZGlhbG9nIHRvIHVwZ3JhZGVcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBmdW5jdGlvbiBkaWFsb2dQb2x5ZmlsbEluZm8oZGlhbG9nKSB7XG4gICAgdGhpcy5kaWFsb2dfID0gZGlhbG9nO1xuICAgIHRoaXMucmVwbGFjZWRTdHlsZVRvcF8gPSBmYWxzZTtcbiAgICB0aGlzLm9wZW5Bc01vZGFsXyA9IGZhbHNlO1xuXG4gICAgLy8gU2V0IGExMXkgcm9sZS4gQnJvd3NlcnMgdGhhdCBzdXBwb3J0IGRpYWxvZyBpbXBsaWNpdGx5IGtub3cgdGhpcyBhbHJlYWR5LlxuICAgIGlmICghZGlhbG9nLmhhc0F0dHJpYnV0ZSgncm9sZScpKSB7XG4gICAgICBkaWFsb2cuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuICAgIH1cblxuICAgIGRpYWxvZy5zaG93ID0gdGhpcy5zaG93LmJpbmQodGhpcyk7XG4gICAgZGlhbG9nLnNob3dNb2RhbCA9IHRoaXMuc2hvd01vZGFsLmJpbmQodGhpcyk7XG4gICAgZGlhbG9nLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpO1xuXG4gICAgaWYgKCEoJ3JldHVyblZhbHVlJyBpbiBkaWFsb2cpKSB7XG4gICAgICBkaWFsb2cucmV0dXJuVmFsdWUgPSAnJztcbiAgICB9XG5cbiAgICBpZiAoJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgdmFyIG1vID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5tYXliZUhpZGVNb2RhbC5iaW5kKHRoaXMpKTtcbiAgICAgIG1vLm9ic2VydmUoZGlhbG9nLCB7YXR0cmlidXRlczogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbJ29wZW4nXX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJRTEwIGFuZCBiZWxvdyBzdXBwb3J0LiBOb3RlIHRoYXQgRE9NTm9kZVJlbW92ZWQgZXRjIGZpcmUgX2JlZm9yZV8gcmVtb3ZhbC4gVGhleSBhbHNvXG4gICAgICAvLyBzZWVtIHRvIGZpcmUgZXZlbiBpZiB0aGUgZWxlbWVudCB3YXMgcmVtb3ZlZCBhcyBwYXJ0IG9mIGEgcGFyZW50IHJlbW92YWwuIFVzZSB0aGUgcmVtb3ZlZFxuICAgICAgLy8gZXZlbnRzIHRvIGZvcmNlIGRvd25ncmFkZSAodXNlZnVsIGlmIHJlbW92ZWQvaW1tZWRpYXRlbHkgYWRkZWQpLlxuICAgICAgdmFyIHJlbW92ZWQgPSBmYWxzZTtcbiAgICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZW1vdmVkID8gdGhpcy5kb3duZ3JhZGVNb2RhbCgpIDogdGhpcy5tYXliZUhpZGVNb2RhbCgpO1xuICAgICAgICByZW1vdmVkID0gZmFsc2U7XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgICB2YXIgdGltZW91dDtcbiAgICAgIHZhciBkZWxheU1vZGVsID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgaWYgKGV2LnRhcmdldCAhPT0gZGlhbG9nKSB7IHJldHVybjsgfSAgLy8gbm90IGZvciBhIGNoaWxkIGVsZW1lbnRcbiAgICAgICAgdmFyIGNhbmQgPSAnRE9NTm9kZVJlbW92ZWQnO1xuICAgICAgICByZW1vdmVkIHw9IChldi50eXBlLnN1YnN0cigwLCBjYW5kLmxlbmd0aCkgPT09IGNhbmQpO1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoY2IsIDApO1xuICAgICAgfTtcbiAgICAgIFsnRE9NQXR0ck1vZGlmaWVkJywgJ0RPTU5vZGVSZW1vdmVkJywgJ0RPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50J10uZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGRpYWxvZy5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGRlbGF5TW9kZWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIE5vdGUgdGhhdCB0aGUgRE9NIGlzIG9ic2VydmVkIGluc2lkZSBEaWFsb2dNYW5hZ2VyIHdoaWxlIGFueSBkaWFsb2dcbiAgICAvLyBpcyBiZWluZyBkaXNwbGF5ZWQgYXMgYSBtb2RhbCwgdG8gY2F0Y2ggbW9kYWwgcmVtb3ZhbCBmcm9tIHRoZSBET00uXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGlhbG9nLCAnb3BlbicsIHtcbiAgICAgIHNldDogdGhpcy5zZXRPcGVuLmJpbmQodGhpcyksXG4gICAgICBnZXQ6IGRpYWxvZy5oYXNBdHRyaWJ1dGUuYmluZChkaWFsb2csICdvcGVuJylcbiAgICB9KTtcblxuICAgIHRoaXMuYmFja2Ryb3BfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5iYWNrZHJvcF8uY2xhc3NOYW1lID0gJ2JhY2tkcm9wJztcbiAgICB0aGlzLmJhY2tkcm9wXy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuYmFja2Ryb3BDbGlja18uYmluZCh0aGlzKSk7XG4gIH1cblxuICBkaWFsb2dQb2x5ZmlsbEluZm8ucHJvdG90eXBlID0ge1xuXG4gICAgZ2V0IGRpYWxvZygpIHtcbiAgICAgIHJldHVybiB0aGlzLmRpYWxvZ187XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1heWJlIHJlbW92ZSB0aGlzIGRpYWxvZyBmcm9tIHRoZSBtb2RhbCB0b3AgbGF5ZXIuIFRoaXMgaXMgY2FsbGVkIHdoZW5cbiAgICAgKiBhIG1vZGFsIGRpYWxvZyBtYXkgbm8gbG9uZ2VyIGJlIHRlbmFibGUsIGUuZy4sIHdoZW4gdGhlIGRpYWxvZyBpcyBub1xuICAgICAqIGxvbmdlciBvcGVuIG9yIGlzIG5vIGxvbmdlciBwYXJ0IG9mIHRoZSBET00uXG4gICAgICovXG4gICAgbWF5YmVIaWRlTW9kYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZGlhbG9nXy5oYXNBdHRyaWJ1dGUoJ29wZW4nKSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuZGlhbG9nXykpIHsgcmV0dXJuOyB9XG4gICAgICB0aGlzLmRvd25ncmFkZU1vZGFsKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGlzIGRpYWxvZyBmcm9tIHRoZSBtb2RhbCB0b3AgbGF5ZXIsIGxlYXZpbmcgaXQgYXMgYSBub24tbW9kYWwuXG4gICAgICovXG4gICAgZG93bmdyYWRlTW9kYWw6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLm9wZW5Bc01vZGFsXykgeyByZXR1cm47IH1cbiAgICAgIHRoaXMub3BlbkFzTW9kYWxfID0gZmFsc2U7XG4gICAgICB0aGlzLmRpYWxvZ18uc3R5bGUuekluZGV4ID0gJyc7XG5cbiAgICAgIC8vIFRoaXMgd29uJ3QgbWF0Y2ggdGhlIG5hdGl2ZSA8ZGlhbG9nPiBleGFjdGx5IGJlY2F1c2UgaWYgdGhlIHVzZXIgc2V0IHRvcCBvbiBhIGNlbnRlcmVkXG4gICAgICAvLyBwb2x5ZmlsbCBkaWFsb2csIHRoYXQgdG9wIGdldHMgdGhyb3duIGF3YXkgd2hlbiB0aGUgZGlhbG9nIGlzIGNsb3NlZC4gTm90IHN1cmUgaXQnc1xuICAgICAgLy8gcG9zc2libGUgdG8gcG9seWZpbGwgdGhpcyBwZXJmZWN0bHkuXG4gICAgICBpZiAodGhpcy5yZXBsYWNlZFN0eWxlVG9wXykge1xuICAgICAgICB0aGlzLmRpYWxvZ18uc3R5bGUudG9wID0gJyc7XG4gICAgICAgIHRoaXMucmVwbGFjZWRTdHlsZVRvcF8gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYXIgdGhlIGJhY2tkcm9wIGFuZCByZW1vdmUgZnJvbSB0aGUgbWFuYWdlci5cbiAgICAgIHRoaXMuYmFja2Ryb3BfLnBhcmVudE5vZGUgJiYgdGhpcy5iYWNrZHJvcF8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmJhY2tkcm9wXyk7XG4gICAgICBkaWFsb2dQb2x5ZmlsbC5kbS5yZW1vdmVEaWFsb2codGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgd2hldGhlciB0byBvcGVuIG9yIGNsb3NlIHRoaXMgZGlhbG9nXG4gICAgICovXG4gICAgc2V0T3BlbjogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRpYWxvZ18uaGFzQXR0cmlidXRlKCdvcGVuJykgfHwgdGhpcy5kaWFsb2dfLnNldEF0dHJpYnV0ZSgnb3BlbicsICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlhbG9nXy5yZW1vdmVBdHRyaWJ1dGUoJ29wZW4nKTtcbiAgICAgICAgdGhpcy5tYXliZUhpZGVNb2RhbCgpOyAgLy8gbmIuIHJlZHVuZGFudCB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBjbGlja3Mgb24gdGhlIGZha2UgLmJhY2tkcm9wIGVsZW1lbnQsIHJlZGlyZWN0aW5nIHRoZW0gYXMgaWZcbiAgICAgKiB0aGV5IHdlcmUgb24gdGhlIGRpYWxvZyBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFFdmVudH0gZSB0byByZWRpcmVjdFxuICAgICAqL1xuICAgIGJhY2tkcm9wQ2xpY2tfOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoIXRoaXMuZGlhbG9nXy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgLy8gQ2xpY2tpbmcgb24gdGhlIGJhY2tkcm9wIHNob3VsZCBtb3ZlIHRoZSBpbXBsaWNpdCBjdXJzb3IsIGV2ZW4gaWYgZGlhbG9nIGNhbm5vdCBiZVxuICAgICAgICAvLyBmb2N1c2VkLiBDcmVhdGUgYSBmYWtlIHRoaW5nIHRvIGZvY3VzIG9uLiBJZiB0aGUgYmFja2Ryb3Agd2FzIF9iZWZvcmVfIHRoZSBkaWFsb2csIHRoaXNcbiAgICAgICAgLy8gd291bGQgbm90IGJlIG5lZWRlZCAtIGNsaWNrcyB3b3VsZCBtb3ZlIHRoZSBpbXBsaWNpdCBjdXJzb3IgdGhlcmUuXG4gICAgICAgIHZhciBmYWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuZGlhbG9nXy5pbnNlcnRCZWZvcmUoZmFrZSwgdGhpcy5kaWFsb2dfLmZpcnN0Q2hpbGQpO1xuICAgICAgICBmYWtlLnRhYkluZGV4ID0gLTE7XG4gICAgICAgIGZha2UuZm9jdXMoKTtcbiAgICAgICAgdGhpcy5kaWFsb2dfLnJlbW92ZUNoaWxkKGZha2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaWFsb2dfLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWRpcmVjdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtcbiAgICAgIHJlZGlyZWN0ZWRFdmVudC5pbml0TW91c2VFdmVudChlLnR5cGUsIGUuYnViYmxlcywgZS5jYW5jZWxhYmxlLCB3aW5kb3csXG4gICAgICAgICAgZS5kZXRhaWwsIGUuc2NyZWVuWCwgZS5zY3JlZW5ZLCBlLmNsaWVudFgsIGUuY2xpZW50WSwgZS5jdHJsS2V5LFxuICAgICAgICAgIGUuYWx0S2V5LCBlLnNoaWZ0S2V5LCBlLm1ldGFLZXksIGUuYnV0dG9uLCBlLnJlbGF0ZWRUYXJnZXQpO1xuICAgICAgdGhpcy5kaWFsb2dfLmRpc3BhdGNoRXZlbnQocmVkaXJlY3RlZEV2ZW50KTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IHdpdGhpbiB0aGUgZGlhbG9nLiBUaGlzIHdpbGwgYWx3YXlzIGJsdXIgdGhlIGN1cnJlbnRcbiAgICAgKiBmb2N1cywgZXZlbiBpZiBub3RoaW5nIHdpdGhpbiB0aGUgZGlhbG9nIGlzIGZvdW5kLlxuICAgICAqL1xuICAgIGZvY3VzXzogZnVuY3Rpb24oKSB7XG4gICAgICAvLyBGaW5kIGVsZW1lbnQgd2l0aCBgYXV0b2ZvY3VzYCBhdHRyaWJ1dGUsIG9yIGZhbGwgYmFjayB0byB0aGUgZmlyc3QgZm9ybS90YWJpbmRleCBjb250cm9sLlxuICAgICAgdmFyIHRhcmdldCA9IHRoaXMuZGlhbG9nXy5xdWVyeVNlbGVjdG9yKCdbYXV0b2ZvY3VzXTpub3QoW2Rpc2FibGVkXSknKTtcbiAgICAgIGlmICghdGFyZ2V0ICYmIHRoaXMuZGlhbG9nXy50YWJJbmRleCA+PSAwKSB7XG4gICAgICAgIHRhcmdldCA9IHRoaXMuZGlhbG9nXztcbiAgICAgIH1cbiAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzICdhbnkgZm9jdXNhYmxlIGFyZWEnLiBUaGlzIGxpc3QgaXMgcHJvYmFibHkgbm90IGV4aGF1c3RpdmUsIGJ1dCB0aGVcbiAgICAgICAgLy8gYWx0ZXJuYXRpdmUgaW52b2x2ZXMgc3RlcHBpbmcgdGhyb3VnaCBhbmQgdHJ5aW5nIHRvIGZvY3VzIGV2ZXJ5dGhpbmcuXG4gICAgICAgIHZhciBvcHRzID0gWydidXR0b24nLCAnaW5wdXQnLCAna2V5Z2VuJywgJ3NlbGVjdCcsICd0ZXh0YXJlYSddO1xuICAgICAgICB2YXIgcXVlcnkgPSBvcHRzLm1hcChmdW5jdGlvbihlbCkge1xuICAgICAgICAgIHJldHVybiBlbCArICc6bm90KFtkaXNhYmxlZF0pJztcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRPRE8oc2FtdGhvcik6IHRhYmluZGV4IHZhbHVlcyB0aGF0IGFyZSBub3QgbnVtZXJpYyBhcmUgbm90IGZvY3VzYWJsZS5cbiAgICAgICAgcXVlcnkucHVzaCgnW3RhYmluZGV4XTpub3QoW2Rpc2FibGVkXSk6bm90KFt0YWJpbmRleD1cIlwiXSknKTsgIC8vIHRhYmluZGV4ICE9IFwiXCIsIG5vdCBkaXNhYmxlZFxuICAgICAgICB0YXJnZXQgPSB0aGlzLmRpYWxvZ18ucXVlcnlTZWxlY3RvcihxdWVyeS5qb2luKCcsICcpKTtcbiAgICAgIH1cbiAgICAgIHNhZmVCbHVyKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgdGFyZ2V0ICYmIHRhcmdldC5mb2N1cygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB6SW5kZXggZm9yIHRoZSBiYWNrZHJvcCBhbmQgZGlhbG9nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpYWxvZ1pcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmFja2Ryb3BaXG4gICAgICovXG4gICAgdXBkYXRlWkluZGV4OiBmdW5jdGlvbihkaWFsb2daLCBiYWNrZHJvcFopIHtcbiAgICAgIGlmIChkaWFsb2daIDwgYmFja2Ryb3BaKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGlhbG9nWiBzaG91bGQgbmV2ZXIgYmUgPCBiYWNrZHJvcFonKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGlhbG9nXy5zdHlsZS56SW5kZXggPSBkaWFsb2daO1xuICAgICAgdGhpcy5iYWNrZHJvcF8uc3R5bGUuekluZGV4ID0gYmFja2Ryb3BaO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgZGlhbG9nLiBJZiB0aGUgZGlhbG9nIGlzIGFscmVhZHkgb3BlbiwgdGhpcyBkb2VzIG5vdGhpbmcuXG4gICAgICovXG4gICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuZGlhbG9nXy5vcGVuKSB7XG4gICAgICAgIHRoaXMuc2V0T3Blbih0cnVlKTtcbiAgICAgICAgdGhpcy5mb2N1c18oKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGlzIGRpYWxvZyBtb2RhbGx5LlxuICAgICAqL1xuICAgIHNob3dNb2RhbDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5kaWFsb2dfLmhhc0F0dHJpYnV0ZSgnb3BlbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgXFwnc2hvd01vZGFsXFwnIG9uIGRpYWxvZzogVGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBvcGVuLCBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSBvcGVuZWQgbW9kYWxseS4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLmRpYWxvZ18pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgXFwnc2hvd01vZGFsXFwnIG9uIGRpYWxvZzogVGhlIGVsZW1lbnQgaXMgbm90IGluIGEgRG9jdW1lbnQuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWRpYWxvZ1BvbHlmaWxsLmRtLnB1c2hEaWFsb2codGhpcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZXhlY3V0ZSBcXCdzaG93TW9kYWxcXCcgb24gZGlhbG9nOiBUaGVyZSBhcmUgdG9vIG1hbnkgb3BlbiBtb2RhbCBkaWFsb2dzLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3JlYXRlc1N0YWNraW5nQ29udGV4dCh0aGlzLmRpYWxvZ18ucGFyZW50RWxlbWVudCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdBIGRpYWxvZyBpcyBiZWluZyBzaG93biBpbnNpZGUgYSBzdGFja2luZyBjb250ZXh0LiAnICtcbiAgICAgICAgICAgICdUaGlzIG1heSBjYXVzZSBpdCB0byBiZSB1bnVzYWJsZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGlzIGxpbms6ICcgK1xuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvZGlhbG9nLXBvbHlmaWxsLyNzdGFja2luZy1jb250ZXh0Jyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0T3Blbih0cnVlKTtcbiAgICAgIHRoaXMub3BlbkFzTW9kYWxfID0gdHJ1ZTtcblxuICAgICAgLy8gT3B0aW9uYWxseSBjZW50ZXIgdmVydGljYWxseSwgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgdmlld3BvcnQuXG4gICAgICBpZiAoZGlhbG9nUG9seWZpbGwubmVlZHNDZW50ZXJpbmcodGhpcy5kaWFsb2dfKSkge1xuICAgICAgICBkaWFsb2dQb2x5ZmlsbC5yZXBvc2l0aW9uKHRoaXMuZGlhbG9nXyk7XG4gICAgICAgIHRoaXMucmVwbGFjZWRTdHlsZVRvcF8gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXBsYWNlZFN0eWxlVG9wXyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnQgYmFja2Ryb3AuXG4gICAgICB0aGlzLmRpYWxvZ18ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5iYWNrZHJvcF8sIHRoaXMuZGlhbG9nXy5uZXh0U2libGluZyk7XG5cbiAgICAgIC8vIEZvY3VzIG9uIHdoYXRldmVyIGluc2lkZSB0aGUgZGlhbG9nLlxuICAgICAgdGhpcy5mb2N1c18oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoaXMgSFRNTERpYWxvZ0VsZW1lbnQuIFRoaXMgaXMgb3B0aW9uYWwgdnMgY2xlYXJpbmcgdGhlIG9wZW5cbiAgICAgKiBhdHRyaWJ1dGUsIGhvd2V2ZXIgdGhpcyBmaXJlcyBhICdjbG9zZScgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9yZXR1cm5WYWx1ZSB0byB1c2UgYXMgdGhlIHJldHVyblZhbHVlXG4gICAgICovXG4gICAgY2xvc2U6IGZ1bmN0aW9uKG9wdF9yZXR1cm5WYWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmRpYWxvZ18uaGFzQXR0cmlidXRlKCdvcGVuJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZXhlY3V0ZSBcXCdjbG9zZVxcJyBvbiBkaWFsb2c6IFRoZSBlbGVtZW50IGRvZXMgbm90IGhhdmUgYW4gXFwnb3BlblxcJyBhdHRyaWJ1dGUsIGFuZCB0aGVyZWZvcmUgY2Fubm90IGJlIGNsb3NlZC4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0T3BlbihmYWxzZSk7XG5cbiAgICAgIC8vIExlYXZlIHJldHVyblZhbHVlIHVudG91Y2hlZCBpbiBjYXNlIGl0IHdhcyBzZXQgZGlyZWN0bHkgb24gdGhlIGVsZW1lbnRcbiAgICAgIGlmIChvcHRfcmV0dXJuVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmRpYWxvZ18ucmV0dXJuVmFsdWUgPSBvcHRfcmV0dXJuVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyaWdnZXJpbmcgXCJjbG9zZVwiIGV2ZW50IGZvciBhbnkgYXR0YWNoZWQgbGlzdGVuZXJzIG9uIHRoZSA8ZGlhbG9nPi5cbiAgICAgIHZhciBjbG9zZUV2ZW50ID0gbmV3IHN1cHBvcnRDdXN0b21FdmVudCgnY2xvc2UnLCB7XG4gICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRpYWxvZ18uZGlzcGF0Y2hFdmVudChjbG9zZUV2ZW50KTtcbiAgICB9XG5cbiAgfTtcblxuICB2YXIgZGlhbG9nUG9seWZpbGwgPSB7fTtcblxuICBkaWFsb2dQb2x5ZmlsbC5yZXBvc2l0aW9uID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBzY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIHZhciB0b3BWYWx1ZSA9IHNjcm9sbFRvcCArICh3aW5kb3cuaW5uZXJIZWlnaHQgLSBlbGVtZW50Lm9mZnNldEhlaWdodCkgLyAyO1xuICAgIGVsZW1lbnQuc3R5bGUudG9wID0gTWF0aC5tYXgoc2Nyb2xsVG9wLCB0b3BWYWx1ZSkgKyAncHgnO1xuICB9O1xuXG4gIGRpYWxvZ1BvbHlmaWxsLmlzSW5saW5lUG9zaXRpb25TZXRCeVN0eWxlc2hlZXQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHN0eWxlU2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAgIHZhciBjc3NSdWxlcyA9IG51bGw7XG4gICAgICAvLyBTb21lIGJyb3dzZXJzIHRocm93IG9uIGNzc1J1bGVzLlxuICAgICAgdHJ5IHtcbiAgICAgICAgY3NzUnVsZXMgPSBzdHlsZVNoZWV0LmNzc1J1bGVzO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIGlmICghY3NzUnVsZXMpIHsgY29udGludWU7IH1cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY3NzUnVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tqXTtcbiAgICAgICAgdmFyIHNlbGVjdGVkTm9kZXMgPSBudWxsO1xuICAgICAgICAvLyBJZ25vcmUgZXJyb3JzIG9uIGludmFsaWQgc2VsZWN0b3IgdGV4dHMuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2VsZWN0ZWROb2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocnVsZS5zZWxlY3RvclRleHQpO1xuICAgICAgICB9IGNhdGNoKGUpIHt9XG4gICAgICAgIGlmICghc2VsZWN0ZWROb2RlcyB8fCAhaW5Ob2RlTGlzdChzZWxlY3RlZE5vZGVzLCBlbGVtZW50KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjc3NUb3AgPSBydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RvcCcpO1xuICAgICAgICB2YXIgY3NzQm90dG9tID0gcnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdib3R0b20nKTtcbiAgICAgICAgaWYgKChjc3NUb3AgJiYgY3NzVG9wICE9PSAnYXV0bycpIHx8IChjc3NCb3R0b20gJiYgY3NzQm90dG9tICE9PSAnYXV0bycpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGRpYWxvZ1BvbHlmaWxsLm5lZWRzQ2VudGVyaW5nID0gZnVuY3Rpb24oZGlhbG9nKSB7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaWFsb2cpO1xuICAgIGlmIChjb21wdXRlZFN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2UgbXVzdCBkZXRlcm1pbmUgd2hldGhlciB0aGUgdG9wL2JvdHRvbSBzcGVjaWZpZWQgdmFsdWUgaXMgbm9uLWF1dG8uICBJblxuICAgIC8vIFdlYktpdC9CbGluaywgY2hlY2tpbmcgY29tcHV0ZWRTdHlsZS50b3AgPT0gJ2F1dG8nIGlzIHN1ZmZpY2llbnQsIGJ1dFxuICAgIC8vIEZpcmVmb3ggcmV0dXJucyB0aGUgdXNlZCB2YWx1ZS4gU28gd2UgZG8gdGhpcyBjcmF6eSB0aGluZyBpbnN0ZWFkOiBjaGVja1xuICAgIC8vIHRoZSBpbmxpbmUgc3R5bGUgYW5kIHRoZW4gZ28gdGhyb3VnaCBDU1MgcnVsZXMuXG4gICAgaWYgKChkaWFsb2cuc3R5bGUudG9wICE9PSAnYXV0bycgJiYgZGlhbG9nLnN0eWxlLnRvcCAhPT0gJycpIHx8XG4gICAgICAgIChkaWFsb2cuc3R5bGUuYm90dG9tICE9PSAnYXV0bycgJiYgZGlhbG9nLnN0eWxlLmJvdHRvbSAhPT0gJycpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAhZGlhbG9nUG9seWZpbGwuaXNJbmxpbmVQb3NpdGlvblNldEJ5U3R5bGVzaGVldChkaWFsb2cpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IHRvIGZvcmNlIHVwZ3JhZGVcbiAgICovXG4gIGRpYWxvZ1BvbHlmaWxsLmZvcmNlUmVnaXN0ZXJEaWFsb2cgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgaWYgKHdpbmRvdy5IVE1MRGlhbG9nRWxlbWVudCB8fCBlbGVtZW50LnNob3dNb2RhbCkge1xuICAgICAgY29uc29sZS53YXJuKCdUaGlzIGJyb3dzZXIgYWxyZWFkeSBzdXBwb3J0cyA8ZGlhbG9nPiwgdGhlIHBvbHlmaWxsICcgK1xuICAgICAgICAgICdtYXkgbm90IHdvcmsgY29ycmVjdGx5JywgZWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50LmxvY2FsTmFtZSAhPT0gJ2RpYWxvZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHJlZ2lzdGVyIGRpYWxvZzogVGhlIGVsZW1lbnQgaXMgbm90IGEgZGlhbG9nLicpO1xuICAgIH1cbiAgICBuZXcgZGlhbG9nUG9seWZpbGxJbmZvKC8qKiBAdHlwZSB7IUhUTUxEaWFsb2dFbGVtZW50fSAqLyAoZWxlbWVudCkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBlbGVtZW50IHRvIHVwZ3JhZGUsIGlmIG5lY2Vzc2FyeVxuICAgKi9cbiAgZGlhbG9nUG9seWZpbGwucmVnaXN0ZXJEaWFsb2cgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50LnNob3dNb2RhbCkge1xuICAgICAgZGlhbG9nUG9seWZpbGwuZm9yY2VSZWdpc3RlckRpYWxvZyhlbGVtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgZGlhbG9nUG9seWZpbGwuRGlhbG9nTWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7IUFycmF5PCFkaWFsb2dQb2x5ZmlsbEluZm8+fSAqL1xuICAgIHRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrID0gW107XG5cbiAgICB2YXIgY2hlY2tET00gPSB0aGlzLmNoZWNrRE9NXy5iaW5kKHRoaXMpO1xuXG4gICAgLy8gVGhlIG92ZXJsYXkgaXMgdXNlZCB0byBzaW11bGF0ZSBob3cgYSBtb2RhbCBkaWFsb2cgYmxvY2tzIHRoZSBkb2N1bWVudC5cbiAgICAvLyBUaGUgYmxvY2tpbmcgZGlhbG9nIGlzIHBvc2l0aW9uZWQgb24gdG9wIG9mIHRoZSBvdmVybGF5LCBhbmQgdGhlIHJlc3Qgb2ZcbiAgICAvLyB0aGUgZGlhbG9ncyBvbiB0aGUgcGVuZGluZyBkaWFsb2cgc3RhY2sgYXJlIHBvc2l0aW9uZWQgYmVsb3cgaXQuIEluIHRoZVxuICAgIC8vIGFjdHVhbCBpbXBsZW1lbnRhdGlvbiwgdGhlIG1vZGFsIGRpYWxvZyBzdGFja2luZyBpcyBjb250cm9sbGVkIGJ5IHRoZVxuICAgIC8vIHRvcCBsYXllciwgd2hlcmUgei1pbmRleCBoYXMgbm8gZWZmZWN0LlxuICAgIHRoaXMub3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMub3ZlcmxheS5jbGFzc05hbWUgPSAnX2RpYWxvZ19vdmVybGF5JztcbiAgICB0aGlzLm92ZXJsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLmZvcndhcmRUYWJfID0gdW5kZWZpbmVkO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGNoZWNrRE9NKFtdKTsgIC8vIHNhbml0eS1jaGVjayBET01cbiAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5oYW5kbGVLZXlfID0gdGhpcy5oYW5kbGVLZXlfLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVGb2N1c18gPSB0aGlzLmhhbmRsZUZvY3VzXy5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy56SW5kZXhMb3dfID0gMTAwMDAwO1xuICAgIHRoaXMuekluZGV4SGlnaF8gPSAxMDAwMDAgKyAxNTA7XG5cbiAgICB0aGlzLmZvcndhcmRUYWJfID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKCdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbiAgICAgIHRoaXMubW9fID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24ocmVjb3Jkcykge1xuICAgICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24ocmVjKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGM7IGMgPSByZWMucmVtb3ZlZE5vZGVzW2ldOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghKGMgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYy5sb2NhbE5hbWUgPT09ICdkaWFsb2cnKSB7XG4gICAgICAgICAgICAgIHJlbW92ZWQucHVzaChjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZWQgPSByZW1vdmVkLmNvbmNhdChjLnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpYWxvZycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZW1vdmVkLmxlbmd0aCAmJiBjaGVja0RPTShyZW1vdmVkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIHRoZSBmaXJzdCBtb2RhbCBkaWFsb2cgYmVpbmcgc2hvd24uIEFkZHMgdGhlIG92ZXJsYXkgYW5kIHJlbGF0ZWRcbiAgICogaGFuZGxlcnMuXG4gICAqL1xuICBkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS5ibG9ja0RvY3VtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1c18sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleV8pO1xuICAgIHRoaXMubW9fICYmIHRoaXMubW9fLm9ic2VydmUoZG9jdW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbGVkIG9uIHRoZSBmaXJzdCBtb2RhbCBkaWFsb2cgYmVpbmcgcmVtb3ZlZCwgaS5lLiwgd2hlbiBubyBtb3JlIG1vZGFsXG4gICAqIGRpYWxvZ3MgYXJlIHZpc2libGUuXG4gICAqL1xuICBkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS51bmJsb2NrRG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLmhhbmRsZUZvY3VzXywgdHJ1ZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5Xyk7XG4gICAgdGhpcy5tb18gJiYgdGhpcy5tb18uZGlzY29ubmVjdCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBzdGFja2luZyBvZiBhbGwga25vd24gZGlhbG9ncy5cbiAgICovXG4gIGRpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVN0YWNraW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHpJbmRleCA9IHRoaXMuekluZGV4SGlnaF87XG5cbiAgICBmb3IgKHZhciBpID0gMCwgZHBpOyBkcGkgPSB0aGlzLnBlbmRpbmdEaWFsb2dTdGFja1tpXTsgKytpKSB7XG4gICAgICBkcGkudXBkYXRlWkluZGV4KC0tekluZGV4LCAtLXpJbmRleCk7XG4gICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICB0aGlzLm92ZXJsYXkuc3R5bGUuekluZGV4ID0gLS16SW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWFrZSB0aGUgb3ZlcmxheSBhIHNpYmxpbmcgb2YgdGhlIGRpYWxvZyBpdHNlbGYuXG4gICAgdmFyIGxhc3QgPSB0aGlzLnBlbmRpbmdEaWFsb2dTdGFja1swXTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgdmFyIHAgPSBsYXN0LmRpYWxvZy5wYXJlbnROb2RlIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICBwLmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm92ZXJsYXkucGFyZW50Tm9kZSkge1xuICAgICAgdGhpcy5vdmVybGF5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5vdmVybGF5KTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gY2FuZGlkYXRlIHRvIGNoZWNrIGlmIGNvbnRhaW5lZCBvciBpcyB0aGUgdG9wLW1vc3QgbW9kYWwgZGlhbG9nXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgY2FuZGlkYXRlIGlzIGNvbnRhaW5lZCBpbiB0b3AgZGlhbG9nXG4gICAqL1xuICBkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS5jb250YWluZWRCeVRvcERpYWxvZ18gPSBmdW5jdGlvbihjYW5kaWRhdGUpIHtcbiAgICB3aGlsZSAoY2FuZGlkYXRlID0gZmluZE5lYXJlc3REaWFsb2coY2FuZGlkYXRlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGRwaTsgZHBpID0gdGhpcy5wZW5kaW5nRGlhbG9nU3RhY2tbaV07ICsraSkge1xuICAgICAgICBpZiAoZHBpLmRpYWxvZyA9PT0gY2FuZGlkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGkgPT09IDA7ICAvLyBvbmx5IHZhbGlkIGlmIHRvcC1tb3N0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhbmRpZGF0ZSA9IGNhbmRpZGF0ZS5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgZGlhbG9nUG9seWZpbGwuRGlhbG9nTWFuYWdlci5wcm90b3R5cGUuaGFuZGxlRm9jdXNfID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAodGhpcy5jb250YWluZWRCeVRvcERpYWxvZ18oZXZlbnQudGFyZ2V0KSkgeyByZXR1cm47IH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgc2FmZUJsdXIoLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoZXZlbnQudGFyZ2V0KSk7XG5cbiAgICBpZiAodGhpcy5mb3J3YXJkVGFiXyA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfSAgLy8gbW92ZSBmb2N1cyBvbmx5IGZyb20gYSB0YWIga2V5XG5cbiAgICB2YXIgZHBpID0gdGhpcy5wZW5kaW5nRGlhbG9nU3RhY2tbMF07XG4gICAgdmFyIGRpYWxvZyA9IGRwaS5kaWFsb2c7XG4gICAgdmFyIHBvc2l0aW9uID0gZGlhbG9nLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGV2ZW50LnRhcmdldCk7XG4gICAgaWYgKHBvc2l0aW9uICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcpIHtcbiAgICAgIGlmICh0aGlzLmZvcndhcmRUYWJfKSB7ICAvLyBmb3J3YXJkXG4gICAgICAgIGRwaS5mb2N1c18oKTtcbiAgICAgIH0gZWxzZSB7ICAvLyBiYWNrd2FyZHNcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IEZvY3VzIGFmdGVyIHRoZSBkaWFsb2csIGlzIGlnbm9yZWQuXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGRpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIucHJvdG90eXBlLmhhbmRsZUtleV8gPSBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMuZm9yd2FyZFRhYl8gPSB1bmRlZmluZWQ7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB2YXIgY2FuY2VsRXZlbnQgPSBuZXcgc3VwcG9ydEN1c3RvbUV2ZW50KCdjYW5jZWwnLCB7XG4gICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHZhciBkcGkgPSB0aGlzLnBlbmRpbmdEaWFsb2dTdGFja1swXTtcbiAgICAgIGlmIChkcGkgJiYgZHBpLmRpYWxvZy5kaXNwYXRjaEV2ZW50KGNhbmNlbEV2ZW50KSkge1xuICAgICAgICBkcGkuZGlhbG9nLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSA5KSB7XG4gICAgICB0aGlzLmZvcndhcmRUYWJfID0gIWV2ZW50LnNoaWZ0S2V5O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRmluZHMgYW5kIGRvd25ncmFkZXMgYW55IGtub3duIG1vZGFsIGRpYWxvZ3MgdGhhdCBhcmUgbm8gbG9uZ2VyIGRpc3BsYXllZC4gRGlhbG9ncyB0aGF0IGFyZVxuICAgKiByZW1vdmVkIGFuZCBpbW1lZGlhdGVseSByZWFkZGVkIGRvbid0IHN0YXkgbW9kYWwsIHRoZXkgYmVjb21lIG5vcm1hbC5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8IUhUTUxEaWFsb2dFbGVtZW50Pn0gcmVtb3ZlZCB0aGF0IGhhdmUgZGVmaW5pdGVseSBiZWVuIHJlbW92ZWRcbiAgICovXG4gIGRpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIucHJvdG90eXBlLmNoZWNrRE9NXyA9IGZ1bmN0aW9uKHJlbW92ZWQpIHtcbiAgICAvLyBUaGlzIG9wZXJhdGVzIG9uIGEgY2xvbmUgYmVjYXVzZSBpdCBtYXkgY2F1c2UgaXQgdG8gY2hhbmdlLiBFYWNoIGNoYW5nZSBhbHNvIGNhbGxzXG4gICAgLy8gdXBkYXRlU3RhY2tpbmcsIHdoaWNoIG9ubHkgYWN0dWFsbHkgbmVlZHMgdG8gaGFwcGVuIG9uY2UuIEJ1dCB3aG8gcmVtb3ZlcyBtYW55IG1vZGFsIGRpYWxvZ3NcbiAgICAvLyBhdCBhIHRpbWU/IVxuICAgIHZhciBjbG9uZSA9IHRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrLnNsaWNlKCk7XG4gICAgY2xvbmUuZm9yRWFjaChmdW5jdGlvbihkcGkpIHtcbiAgICAgIGlmIChyZW1vdmVkLmluZGV4T2YoZHBpLmRpYWxvZykgIT09IC0xKSB7XG4gICAgICAgIGRwaS5kb3duZ3JhZGVNb2RhbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHBpLm1heWJlSGlkZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IWRpYWxvZ1BvbHlmaWxsSW5mb30gZHBpXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGRpYWxvZyB3YXMgYWxsb3dlZFxuICAgKi9cbiAgZGlhbG9nUG9seWZpbGwuRGlhbG9nTWFuYWdlci5wcm90b3R5cGUucHVzaERpYWxvZyA9IGZ1bmN0aW9uKGRwaSkge1xuICAgIHZhciBhbGxvd2VkID0gKHRoaXMuekluZGV4SGlnaF8gLSB0aGlzLnpJbmRleExvd18pIC8gMiAtIDE7XG4gICAgaWYgKHRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrLmxlbmd0aCA+PSBhbGxvd2VkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLnBlbmRpbmdEaWFsb2dTdGFjay51bnNoaWZ0KGRwaSkgPT09IDEpIHtcbiAgICAgIHRoaXMuYmxvY2tEb2N1bWVudCgpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVN0YWNraW5nKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IWRpYWxvZ1BvbHlmaWxsSW5mb30gZHBpXG4gICAqL1xuICBkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVEaWFsb2cgPSBmdW5jdGlvbihkcGkpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnBlbmRpbmdEaWFsb2dTdGFjay5pbmRleE9mKGRwaSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkgeyByZXR1cm47IH1cblxuICAgIHRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrLnNwbGljZShpbmRleCwgMSk7XG4gICAgaWYgKHRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy51bmJsb2NrRG9jdW1lbnQoKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVTdGFja2luZygpO1xuICB9O1xuXG4gIGRpYWxvZ1BvbHlmaWxsLmRtID0gbmV3IGRpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIoKTtcbiAgZGlhbG9nUG9seWZpbGwuZm9ybVN1Ym1pdHRlciA9IG51bGw7XG4gIGRpYWxvZ1BvbHlmaWxsLnVzZVZhbHVlID0gbnVsbDtcblxuICAvKipcbiAgICogSW5zdGFsbHMgZ2xvYmFsIGhhbmRsZXJzLCBzdWNoIGFzIGNsaWNrIGxpc3RlcnMgYW5kIG5hdGl2ZSBtZXRob2Qgb3ZlcnJpZGVzLiBUaGVzZSBhcmUgbmVlZGVkXG4gICAqIGV2ZW4gaWYgYSBubyBkaWFsb2cgaXMgcmVnaXN0ZXJlZCwgYXMgdGhleSBkZWFsIHdpdGggPGZvcm0gbWV0aG9kPVwiZGlhbG9nXCI+LlxuICAgKi9cbiAgaWYgKHdpbmRvdy5IVE1MRGlhbG9nRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAvKipcbiAgICAgKiBJZiBIVE1MRm9ybUVsZW1lbnQgdHJhbnNsYXRlcyBtZXRob2Q9XCJESUFMT0dcIiBpbnRvICdnZXQnLCB0aGVuIHJlcGxhY2UgdGhlIGRlc2NyaXB0b3Igd2l0aFxuICAgICAqIG9uZSB0aGF0IHJldHVybnMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgICovXG4gICAgdmFyIHRlc3RGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIHRlc3RGb3JtLnNldEF0dHJpYnV0ZSgnbWV0aG9kJywgJ2RpYWxvZycpO1xuICAgIGlmICh0ZXN0Rm9ybS5tZXRob2QgIT09ICdkaWFsb2cnKSB7XG4gICAgICB2YXIgbWV0aG9kRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEZvcm1FbGVtZW50LnByb3RvdHlwZSwgJ21ldGhvZCcpO1xuICAgICAgaWYgKG1ldGhvZERlc2NyaXB0b3IpIHtcbiAgICAgICAgLy8gbmIuIFNvbWUgb2xkZXIgaU9TIGFuZCBvbGRlciBQaGFudG9tSlMgZmFpbCB0byByZXR1cm4gdGhlIGRlc2NyaXB0b3IuIERvbid0IGRvIGFueXRoaW5nXG4gICAgICAgIC8vIGFuZCBkb24ndCBib3RoZXIgdG8gdXBkYXRlIHRoZSBlbGVtZW50LlxuICAgICAgICB2YXIgcmVhbEdldCA9IG1ldGhvZERlc2NyaXB0b3IuZ2V0O1xuICAgICAgICBtZXRob2REZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChpc0Zvcm1NZXRob2REaWFsb2codGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiAnZGlhbG9nJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlYWxHZXQuY2FsbCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlYWxTZXQgPSBtZXRob2REZXNjcmlwdG9yLnNldDtcbiAgICAgICAgbWV0aG9kRGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiB2LnRvTG93ZXJDYXNlKCkgPT09ICdkaWFsb2cnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUoJ21ldGhvZCcsIHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVhbFNldC5jYWxsKHRoaXMsIHYpO1xuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEZvcm1FbGVtZW50LnByb3RvdHlwZSwgJ21ldGhvZCcsIG1ldGhvZERlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdsb2JhbCAnY2xpY2snIGhhbmRsZXIsIHRvIGNhcHR1cmUgdGhlIDxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG9yIDxidXR0b24+IGVsZW1lbnQgd2hpY2ggaGFzXG4gICAgICogc3VibWl0dGVkIGEgPGZvcm0gbWV0aG9kPVwiZGlhbG9nXCI+LiBOZWVkZWQgYXMgU2FmYXJpIGFuZCBvdGhlcnMgZG9uJ3QgcmVwb3J0IHRoaXMgaW5zaWRlXG4gICAgICogZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5cbiAgICAgKi9cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICBkaWFsb2dQb2x5ZmlsbC5mb3JtU3VibWl0dGVyID0gbnVsbDtcbiAgICAgIGRpYWxvZ1BvbHlmaWxsLnVzZVZhbHVlID0gbnVsbDtcbiAgICAgIGlmIChldi5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybjsgfSAgLy8gZS5nLiBhIHN1Ym1pdCB3aGljaCBwcmV2ZW50cyBkZWZhdWx0IHN1Ym1pc3Npb25cblxuICAgICAgdmFyIHRhcmdldCA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKGV2LnRhcmdldCk7XG4gICAgICBpZiAoIXRhcmdldCB8fCAhaXNGb3JtTWV0aG9kRGlhbG9nKHRhcmdldC5mb3JtKSkgeyByZXR1cm47IH1cblxuICAgICAgdmFyIHZhbGlkID0gKHRhcmdldC50eXBlID09PSAnc3VibWl0JyAmJiBbJ2J1dHRvbicsICdpbnB1dCddLmluZGV4T2YodGFyZ2V0LmxvY2FsTmFtZSkgPiAtMSk7XG4gICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgIGlmICghKHRhcmdldC5sb2NhbE5hbWUgPT09ICdpbnB1dCcgJiYgdGFyZ2V0LnR5cGUgPT09ICdpbWFnZScpKSB7IHJldHVybjsgfVxuICAgICAgICAvLyB0aGlzIGlzIGEgPGlucHV0IHR5cGU9XCJpbWFnZVwiPiwgd2hpY2ggY2FuIHN1Ym1pdCBmb3Jtc1xuICAgICAgICBkaWFsb2dQb2x5ZmlsbC51c2VWYWx1ZSA9IGV2Lm9mZnNldFggKyAnLCcgKyBldi5vZmZzZXRZO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlhbG9nID0gZmluZE5lYXJlc3REaWFsb2codGFyZ2V0KTtcbiAgICAgIGlmICghZGlhbG9nKSB7IHJldHVybjsgfVxuXG4gICAgICBkaWFsb2dQb2x5ZmlsbC5mb3JtU3VibWl0dGVyID0gdGFyZ2V0O1xuICAgIH0sIGZhbHNlKTtcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgdGhlIG5hdGl2ZSBIVE1MRm9ybUVsZW1lbnQuc3VibWl0KCkgbWV0aG9kLCBhcyBpdCB3b24ndCBmaXJlIHRoZVxuICAgICAqIHN1Ym1pdCBldmVudCBhbmQgZ2l2ZSB1cyBhIGNoYW5jZSB0byByZXNwb25kLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVGb3JtU3VibWl0ID0gSFRNTEZvcm1FbGVtZW50LnByb3RvdHlwZS5zdWJtaXQ7XG4gICAgdmFyIHJlcGxhY2VtZW50Rm9ybVN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNGb3JtTWV0aG9kRGlhbG9nKHRoaXMpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVGb3JtU3VibWl0LmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgICB2YXIgZGlhbG9nID0gZmluZE5lYXJlc3REaWFsb2codGhpcyk7XG4gICAgICBkaWFsb2cgJiYgZGlhbG9nLmNsb3NlKCk7XG4gICAgfTtcbiAgICBIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLnN1Ym1pdCA9IHJlcGxhY2VtZW50Rm9ybVN1Ym1pdDtcblxuICAgIC8qKlxuICAgICAqIEdsb2JhbCBmb3JtICdkaWFsb2cnIG1ldGhvZCBoYW5kbGVyLiBDbG9zZXMgYSBkaWFsb2cgY29ycmVjdGx5IG9uIHN1Ym1pdFxuICAgICAqIGFuZCBwb3NzaWJseSBzZXRzIGl0cyByZXR1cm4gdmFsdWUuXG4gICAgICovXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24oZXYpIHtcbiAgICAgIHZhciBmb3JtID0gLyoqIEB0eXBlIHtIVE1MRm9ybUVsZW1lbnR9ICovIChldi50YXJnZXQpO1xuICAgICAgaWYgKCFpc0Zvcm1NZXRob2REaWFsb2coZm9ybSkpIHsgcmV0dXJuOyB9XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB2YXIgZGlhbG9nID0gZmluZE5lYXJlc3REaWFsb2coZm9ybSk7XG4gICAgICBpZiAoIWRpYWxvZykgeyByZXR1cm47IH1cblxuICAgICAgLy8gRm9ybXMgY2FuIG9ubHkgYmUgc3VibWl0dGVkIHZpYSAuc3VibWl0KCkgb3IgYSBjbGljayAoPyksIGJ1dCBhbnl3YXk6IHNhbml0eS1jaGVjayB0aGF0XG4gICAgICAvLyB0aGUgc3VibWl0dGVyIGlzIGNvcnJlY3QgYmVmb3JlIHVzaW5nIGl0cyB2YWx1ZSBhcyAucmV0dXJuVmFsdWUuXG4gICAgICB2YXIgcyA9IGRpYWxvZ1BvbHlmaWxsLmZvcm1TdWJtaXR0ZXI7XG4gICAgICBpZiAocyAmJiBzLmZvcm0gPT09IGZvcm0pIHtcbiAgICAgICAgZGlhbG9nLmNsb3NlKGRpYWxvZ1BvbHlmaWxsLnVzZVZhbHVlIHx8IHMudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlhbG9nLmNsb3NlKCk7XG4gICAgICB9XG4gICAgICBkaWFsb2dQb2x5ZmlsbC5mb3JtU3VibWl0dGVyID0gbnVsbDtcbiAgICB9LCB0cnVlKTtcbiAgfVxuXG4gIGRpYWxvZ1BvbHlmaWxsWydmb3JjZVJlZ2lzdGVyRGlhbG9nJ10gPSBkaWFsb2dQb2x5ZmlsbC5mb3JjZVJlZ2lzdGVyRGlhbG9nO1xuICBkaWFsb2dQb2x5ZmlsbFsncmVnaXN0ZXJEaWFsb2cnXSA9IGRpYWxvZ1BvbHlmaWxsLnJlZ2lzdGVyRGlhbG9nO1xuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmICdhbWQnIGluIGRlZmluZSkge1xuICAgIC8vIEFNRCBzdXBwb3J0XG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gZGlhbG9nUG9seWZpbGw7IH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGVbJ2V4cG9ydHMnXSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBDb21tb25KUyBzdXBwb3J0XG4gICAgbW9kdWxlWydleHBvcnRzJ10gPSBkaWFsb2dQb2x5ZmlsbDtcbiAgfSBlbHNlIHtcbiAgICAvLyBhbGwgb3RoZXJzXG4gICAgd2luZG93WydkaWFsb2dQb2x5ZmlsbCddID0gZGlhbG9nUG9seWZpbGw7XG4gIH1cbn0pKCk7XG4iLCAiKGZ1bmN0aW9uKCkgeyB2YXIgZmlyZWJhc2U9cmVxdWlyZSgnZmlyZWJhc2UvY29tcGF0L2FwcCcpO3JlcXVpcmUoJ2ZpcmViYXNlL2NvbXBhdC9hdXRoJyk7aWYodHlwZW9mIGZpcmViYXNlLmRlZmF1bHQhPT0ndW5kZWZpbmVkJyl7ZmlyZWJhc2U9ZmlyZWJhc2UuZGVmYXVsdDt9KGZ1bmN0aW9uKCl7dmFyIHN1cHBvcnRDdXN0b21FdmVudD13aW5kb3cuQ3VzdG9tRXZlbnQ7aWYoIXN1cHBvcnRDdXN0b21FdmVudHx8dHlwZW9mIHN1cHBvcnRDdXN0b21FdmVudD09PVwib2JqZWN0XCIpe3N1cHBvcnRDdXN0b21FdmVudD1mdW5jdGlvbiBDdXN0b21FdmVudChldmVudCx4KXt4PXh8fHt9O3ZhciBldj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO2V2LmluaXRDdXN0b21FdmVudChldmVudCwhIXguYnViYmxlcywhIXguY2FuY2VsYWJsZSx4LmRldGFpbHx8bnVsbCk7cmV0dXJuIGV2fTtzdXBwb3J0Q3VzdG9tRXZlbnQucHJvdG90eXBlPXdpbmRvdy5FdmVudC5wcm90b3R5cGV9ZnVuY3Rpb24gY3JlYXRlc1N0YWNraW5nQ29udGV4dChlbCl7d2hpbGUoZWwmJmVsIT09ZG9jdW1lbnQuYm9keSl7dmFyIHM9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO3ZhciBpbnZhbGlkPWZ1bmN0aW9uKGssb2spe3JldHVybiEoc1trXT09PXVuZGVmaW5lZHx8c1trXT09PVxub2spfTtpZihzLm9wYWNpdHk8MXx8aW52YWxpZChcInpJbmRleFwiLFwiYXV0b1wiKXx8aW52YWxpZChcInRyYW5zZm9ybVwiLFwibm9uZVwiKXx8aW52YWxpZChcIm1peEJsZW5kTW9kZVwiLFwibm9ybWFsXCIpfHxpbnZhbGlkKFwiZmlsdGVyXCIsXCJub25lXCIpfHxpbnZhbGlkKFwicGVyc3BlY3RpdmVcIixcIm5vbmVcIil8fHNbXCJpc29sYXRpb25cIl09PT1cImlzb2xhdGVcInx8cy5wb3NpdGlvbj09PVwiZml4ZWRcInx8cy53ZWJraXRPdmVyZmxvd1Njcm9sbGluZz09PVwidG91Y2hcIilyZXR1cm4gdHJ1ZTtlbD1lbC5wYXJlbnRFbGVtZW50fXJldHVybiBmYWxzZX1mdW5jdGlvbiBmaW5kTmVhcmVzdERpYWxvZyhlbCl7d2hpbGUoZWwpe2lmKGVsLmxvY2FsTmFtZT09PVwiZGlhbG9nXCIpcmV0dXJuIGVsO2VsPWVsLnBhcmVudEVsZW1lbnR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gc2FmZUJsdXIoZWwpe2lmKGVsJiZlbC5ibHVyJiZlbCE9PWRvY3VtZW50LmJvZHkpZWwuYmx1cigpfWZ1bmN0aW9uIGluTm9kZUxpc3Qobm9kZUxpc3QsXG5ub2RlKXtmb3IodmFyIGk9MDtpPG5vZGVMaXN0Lmxlbmd0aDsrK2kpaWYobm9kZUxpc3RbaV09PT1ub2RlKXJldHVybiB0cnVlO3JldHVybiBmYWxzZX1mdW5jdGlvbiBpc0Zvcm1NZXRob2REaWFsb2coZWwpe2lmKCFlbHx8IWVsLmhhc0F0dHJpYnV0ZShcIm1ldGhvZFwiKSlyZXR1cm4gZmFsc2U7cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKS50b0xvd2VyQ2FzZSgpPT09XCJkaWFsb2dcIn1mdW5jdGlvbiBkaWFsb2dQb2x5ZmlsbEluZm8oZGlhbG9nKXt0aGlzLmRpYWxvZ189ZGlhbG9nO3RoaXMucmVwbGFjZWRTdHlsZVRvcF89ZmFsc2U7dGhpcy5vcGVuQXNNb2RhbF89ZmFsc2U7aWYoIWRpYWxvZy5oYXNBdHRyaWJ1dGUoXCJyb2xlXCIpKWRpYWxvZy5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJkaWFsb2dcIik7ZGlhbG9nLnNob3c9dGhpcy5zaG93LmJpbmQodGhpcyk7ZGlhbG9nLnNob3dNb2RhbD10aGlzLnNob3dNb2RhbC5iaW5kKHRoaXMpO2RpYWxvZy5jbG9zZT10aGlzLmNsb3NlLmJpbmQodGhpcyk7XG5pZighKFwicmV0dXJuVmFsdWVcImluIGRpYWxvZykpZGlhbG9nLnJldHVyblZhbHVlPVwiXCI7aWYoXCJNdXRhdGlvbk9ic2VydmVyXCJpbiB3aW5kb3cpe3ZhciBtbz1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLm1heWJlSGlkZU1vZGFsLmJpbmQodGhpcykpO21vLm9ic2VydmUoZGlhbG9nLHthdHRyaWJ1dGVzOnRydWUsYXR0cmlidXRlRmlsdGVyOltcIm9wZW5cIl19KX1lbHNle3ZhciByZW1vdmVkPWZhbHNlO3ZhciBjYj1mdW5jdGlvbigpe3JlbW92ZWQ/dGhpcy5kb3duZ3JhZGVNb2RhbCgpOnRoaXMubWF5YmVIaWRlTW9kYWwoKTtyZW1vdmVkPWZhbHNlfS5iaW5kKHRoaXMpO3ZhciB0aW1lb3V0O3ZhciBkZWxheU1vZGVsPWZ1bmN0aW9uKGV2KXtpZihldi50YXJnZXQhPT1kaWFsb2cpcmV0dXJuO3ZhciBjYW5kPVwiRE9NTm9kZVJlbW92ZWRcIjtyZW1vdmVkfD1ldi50eXBlLnN1YnN0cigwLGNhbmQubGVuZ3RoKT09PWNhbmQ7d2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0KTt0aW1lb3V0PVxud2luZG93LnNldFRpbWVvdXQoY2IsMCl9O1tcIkRPTUF0dHJNb2RpZmllZFwiLFwiRE9NTm9kZVJlbW92ZWRcIixcIkRPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50XCJdLmZvckVhY2goZnVuY3Rpb24obmFtZSl7ZGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIobmFtZSxkZWxheU1vZGVsKX0pfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShkaWFsb2csXCJvcGVuXCIse3NldDp0aGlzLnNldE9wZW4uYmluZCh0aGlzKSxnZXQ6ZGlhbG9nLmhhc0F0dHJpYnV0ZS5iaW5kKGRpYWxvZyxcIm9wZW5cIil9KTt0aGlzLmJhY2tkcm9wXz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RoaXMuYmFja2Ryb3BfLmNsYXNzTmFtZT1cImJhY2tkcm9wXCI7dGhpcy5iYWNrZHJvcF8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5iYWNrZHJvcENsaWNrXy5iaW5kKHRoaXMpKX1kaWFsb2dQb2x5ZmlsbEluZm8ucHJvdG90eXBlPXtnZXQgZGlhbG9nKCl7cmV0dXJuIHRoaXMuZGlhbG9nX30sbWF5YmVIaWRlTW9kYWw6ZnVuY3Rpb24oKXtpZih0aGlzLmRpYWxvZ18uaGFzQXR0cmlidXRlKFwib3BlblwiKSYmXG5kb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuZGlhbG9nXykpcmV0dXJuO3RoaXMuZG93bmdyYWRlTW9kYWwoKX0sZG93bmdyYWRlTW9kYWw6ZnVuY3Rpb24oKXtpZighdGhpcy5vcGVuQXNNb2RhbF8pcmV0dXJuO3RoaXMub3BlbkFzTW9kYWxfPWZhbHNlO3RoaXMuZGlhbG9nXy5zdHlsZS56SW5kZXg9XCJcIjtpZih0aGlzLnJlcGxhY2VkU3R5bGVUb3BfKXt0aGlzLmRpYWxvZ18uc3R5bGUudG9wPVwiXCI7dGhpcy5yZXBsYWNlZFN0eWxlVG9wXz1mYWxzZX10aGlzLmJhY2tkcm9wXy5wYXJlbnROb2RlJiZ0aGlzLmJhY2tkcm9wXy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuYmFja2Ryb3BfKTtkaWFsb2dQb2x5ZmlsbC5kbS5yZW1vdmVEaWFsb2codGhpcyl9LHNldE9wZW46ZnVuY3Rpb24odmFsdWUpe2lmKHZhbHVlKXRoaXMuZGlhbG9nXy5oYXNBdHRyaWJ1dGUoXCJvcGVuXCIpfHx0aGlzLmRpYWxvZ18uc2V0QXR0cmlidXRlKFwib3BlblwiLFwiXCIpO2Vsc2V7dGhpcy5kaWFsb2dfLnJlbW92ZUF0dHJpYnV0ZShcIm9wZW5cIik7XG50aGlzLm1heWJlSGlkZU1vZGFsKCl9fSxiYWNrZHJvcENsaWNrXzpmdW5jdGlvbihlKXtpZighdGhpcy5kaWFsb2dfLmhhc0F0dHJpYnV0ZShcInRhYmluZGV4XCIpKXt2YXIgZmFrZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3RoaXMuZGlhbG9nXy5pbnNlcnRCZWZvcmUoZmFrZSx0aGlzLmRpYWxvZ18uZmlyc3RDaGlsZCk7ZmFrZS50YWJJbmRleD0tMTtmYWtlLmZvY3VzKCk7dGhpcy5kaWFsb2dfLnJlbW92ZUNoaWxkKGZha2UpfWVsc2UgdGhpcy5kaWFsb2dfLmZvY3VzKCk7dmFyIHJlZGlyZWN0ZWRFdmVudD1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO3JlZGlyZWN0ZWRFdmVudC5pbml0TW91c2VFdmVudChlLnR5cGUsZS5idWJibGVzLGUuY2FuY2VsYWJsZSx3aW5kb3csZS5kZXRhaWwsZS5zY3JlZW5YLGUuc2NyZWVuWSxlLmNsaWVudFgsZS5jbGllbnRZLGUuY3RybEtleSxlLmFsdEtleSxlLnNoaWZ0S2V5LGUubWV0YUtleSxlLmJ1dHRvbixlLnJlbGF0ZWRUYXJnZXQpO1xudGhpcy5kaWFsb2dfLmRpc3BhdGNoRXZlbnQocmVkaXJlY3RlZEV2ZW50KTtlLnN0b3BQcm9wYWdhdGlvbigpfSxmb2N1c186ZnVuY3Rpb24oKXt2YXIgdGFyZ2V0PXRoaXMuZGlhbG9nXy5xdWVyeVNlbGVjdG9yKFwiW2F1dG9mb2N1c106bm90KFtkaXNhYmxlZF0pXCIpO2lmKCF0YXJnZXQmJnRoaXMuZGlhbG9nXy50YWJJbmRleD49MCl0YXJnZXQ9dGhpcy5kaWFsb2dfO2lmKCF0YXJnZXQpe3ZhciBvcHRzPVtcImJ1dHRvblwiLFwiaW5wdXRcIixcImtleWdlblwiLFwic2VsZWN0XCIsXCJ0ZXh0YXJlYVwiXTt2YXIgcXVlcnk9b3B0cy5tYXAoZnVuY3Rpb24oZWwpe3JldHVybiBlbCtcIjpub3QoW2Rpc2FibGVkXSlcIn0pO3F1ZXJ5LnB1c2goJ1t0YWJpbmRleF06bm90KFtkaXNhYmxlZF0pOm5vdChbdGFiaW5kZXg9XCJcIl0pJyk7dGFyZ2V0PXRoaXMuZGlhbG9nXy5xdWVyeVNlbGVjdG9yKHF1ZXJ5LmpvaW4oXCIsIFwiKSl9c2FmZUJsdXIoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7dGFyZ2V0JiZ0YXJnZXQuZm9jdXMoKX0sXG51cGRhdGVaSW5kZXg6ZnVuY3Rpb24oZGlhbG9nWixiYWNrZHJvcFope2lmKGRpYWxvZ1o8YmFja2Ryb3BaKXRocm93IG5ldyBFcnJvcihcImRpYWxvZ1ogc2hvdWxkIG5ldmVyIGJlIDwgYmFja2Ryb3BaXCIpO3RoaXMuZGlhbG9nXy5zdHlsZS56SW5kZXg9ZGlhbG9nWjt0aGlzLmJhY2tkcm9wXy5zdHlsZS56SW5kZXg9YmFja2Ryb3BafSxzaG93OmZ1bmN0aW9uKCl7aWYoIXRoaXMuZGlhbG9nXy5vcGVuKXt0aGlzLnNldE9wZW4odHJ1ZSk7dGhpcy5mb2N1c18oKX19LHNob3dNb2RhbDpmdW5jdGlvbigpe2lmKHRoaXMuZGlhbG9nXy5oYXNBdHRyaWJ1dGUoXCJvcGVuXCIpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdzaG93TW9kYWwnIG9uIGRpYWxvZzogVGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBvcGVuLCBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSBvcGVuZWQgbW9kYWxseS5cIik7aWYoIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5kaWFsb2dfKSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnc2hvd01vZGFsJyBvbiBkaWFsb2c6IFRoZSBlbGVtZW50IGlzIG5vdCBpbiBhIERvY3VtZW50LlwiKTtcbmlmKCFkaWFsb2dQb2x5ZmlsbC5kbS5wdXNoRGlhbG9nKHRoaXMpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBleGVjdXRlICdzaG93TW9kYWwnIG9uIGRpYWxvZzogVGhlcmUgYXJlIHRvbyBtYW55IG9wZW4gbW9kYWwgZGlhbG9ncy5cIik7aWYoY3JlYXRlc1N0YWNraW5nQ29udGV4dCh0aGlzLmRpYWxvZ18ucGFyZW50RWxlbWVudCkpY29uc29sZS53YXJuKFwiQSBkaWFsb2cgaXMgYmVpbmcgc2hvd24gaW5zaWRlIGEgc3RhY2tpbmcgY29udGV4dC4gXCIrXCJUaGlzIG1heSBjYXVzZSBpdCB0byBiZSB1bnVzYWJsZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGlzIGxpbms6IFwiK1wiaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZS9kaWFsb2ctcG9seWZpbGwvI3N0YWNraW5nLWNvbnRleHRcIik7dGhpcy5zZXRPcGVuKHRydWUpO3RoaXMub3BlbkFzTW9kYWxfPXRydWU7aWYoZGlhbG9nUG9seWZpbGwubmVlZHNDZW50ZXJpbmcodGhpcy5kaWFsb2dfKSl7ZGlhbG9nUG9seWZpbGwucmVwb3NpdGlvbih0aGlzLmRpYWxvZ18pO1xudGhpcy5yZXBsYWNlZFN0eWxlVG9wXz10cnVlfWVsc2UgdGhpcy5yZXBsYWNlZFN0eWxlVG9wXz1mYWxzZTt0aGlzLmRpYWxvZ18ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5iYWNrZHJvcF8sdGhpcy5kaWFsb2dfLm5leHRTaWJsaW5nKTt0aGlzLmZvY3VzXygpfSxjbG9zZTpmdW5jdGlvbihvcHRfcmV0dXJuVmFsdWUpe2lmKCF0aGlzLmRpYWxvZ18uaGFzQXR0cmlidXRlKFwib3BlblwiKSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnY2xvc2UnIG9uIGRpYWxvZzogVGhlIGVsZW1lbnQgZG9lcyBub3QgaGF2ZSBhbiAnb3BlbicgYXR0cmlidXRlLCBhbmQgdGhlcmVmb3JlIGNhbm5vdCBiZSBjbG9zZWQuXCIpO3RoaXMuc2V0T3BlbihmYWxzZSk7aWYob3B0X3JldHVyblZhbHVlIT09dW5kZWZpbmVkKXRoaXMuZGlhbG9nXy5yZXR1cm5WYWx1ZT1vcHRfcmV0dXJuVmFsdWU7dmFyIGNsb3NlRXZlbnQ9bmV3IHN1cHBvcnRDdXN0b21FdmVudChcImNsb3NlXCIse2J1YmJsZXM6ZmFsc2UsXG5jYW5jZWxhYmxlOmZhbHNlfSk7dGhpcy5kaWFsb2dfLmRpc3BhdGNoRXZlbnQoY2xvc2VFdmVudCl9fTt2YXIgZGlhbG9nUG9seWZpbGw9e307ZGlhbG9nUG9seWZpbGwucmVwb3NpdGlvbj1mdW5jdGlvbihlbGVtZW50KXt2YXIgc2Nyb2xsVG9wPWRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wfHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO3ZhciB0b3BWYWx1ZT1zY3JvbGxUb3ArKHdpbmRvdy5pbm5lckhlaWdodC1lbGVtZW50Lm9mZnNldEhlaWdodCkvMjtlbGVtZW50LnN0eWxlLnRvcD1NYXRoLm1heChzY3JvbGxUb3AsdG9wVmFsdWUpK1wicHhcIn07ZGlhbG9nUG9seWZpbGwuaXNJbmxpbmVQb3NpdGlvblNldEJ5U3R5bGVzaGVldD1mdW5jdGlvbihlbGVtZW50KXtmb3IodmFyIGk9MDtpPGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsrK2kpe3ZhciBzdHlsZVNoZWV0PWRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO3ZhciBjc3NSdWxlcz1udWxsO3RyeXtjc3NSdWxlcz1cbnN0eWxlU2hlZXQuY3NzUnVsZXN9Y2F0Y2goZSl7fWlmKCFjc3NSdWxlcyljb250aW51ZTtmb3IodmFyIGo9MDtqPGNzc1J1bGVzLmxlbmd0aDsrK2ope3ZhciBydWxlPWNzc1J1bGVzW2pdO3ZhciBzZWxlY3RlZE5vZGVzPW51bGw7dHJ5e3NlbGVjdGVkTm9kZXM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChydWxlLnNlbGVjdG9yVGV4dCl9Y2F0Y2goZSQwKXt9aWYoIXNlbGVjdGVkTm9kZXN8fCFpbk5vZGVMaXN0KHNlbGVjdGVkTm9kZXMsZWxlbWVudCkpY29udGludWU7dmFyIGNzc1RvcD1ydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJ0b3BcIik7dmFyIGNzc0JvdHRvbT1ydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCJib3R0b21cIik7aWYoY3NzVG9wJiZjc3NUb3AhPT1cImF1dG9cInx8Y3NzQm90dG9tJiZjc3NCb3R0b20hPT1cImF1dG9cIilyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfTtkaWFsb2dQb2x5ZmlsbC5uZWVkc0NlbnRlcmluZz1mdW5jdGlvbihkaWFsb2cpe3ZhciBjb21wdXRlZFN0eWxlPVxud2luZG93LmdldENvbXB1dGVkU3R5bGUoZGlhbG9nKTtpZihjb21wdXRlZFN0eWxlLnBvc2l0aW9uIT09XCJhYnNvbHV0ZVwiKXJldHVybiBmYWxzZTtpZihkaWFsb2cuc3R5bGUudG9wIT09XCJhdXRvXCImJmRpYWxvZy5zdHlsZS50b3AhPT1cIlwifHxkaWFsb2cuc3R5bGUuYm90dG9tIT09XCJhdXRvXCImJmRpYWxvZy5zdHlsZS5ib3R0b20hPT1cIlwiKXJldHVybiBmYWxzZTtyZXR1cm4hZGlhbG9nUG9seWZpbGwuaXNJbmxpbmVQb3NpdGlvblNldEJ5U3R5bGVzaGVldChkaWFsb2cpfTtkaWFsb2dQb2x5ZmlsbC5mb3JjZVJlZ2lzdGVyRGlhbG9nPWZ1bmN0aW9uKGVsZW1lbnQpe2lmKHdpbmRvdy5IVE1MRGlhbG9nRWxlbWVudHx8ZWxlbWVudC5zaG93TW9kYWwpY29uc29sZS53YXJuKFwiVGhpcyBicm93c2VyIGFscmVhZHkgc3VwcG9ydHMgPGRpYWxvZz4sIHRoZSBwb2x5ZmlsbCBcIitcIm1heSBub3Qgd29yayBjb3JyZWN0bHlcIixlbGVtZW50KTtpZihlbGVtZW50LmxvY2FsTmFtZSE9PVwiZGlhbG9nXCIpdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlZ2lzdGVyIGRpYWxvZzogVGhlIGVsZW1lbnQgaXMgbm90IGEgZGlhbG9nLlwiKTtcbm5ldyBkaWFsb2dQb2x5ZmlsbEluZm8oZWxlbWVudCl9O2RpYWxvZ1BvbHlmaWxsLnJlZ2lzdGVyRGlhbG9nPWZ1bmN0aW9uKGVsZW1lbnQpe2lmKCFlbGVtZW50LnNob3dNb2RhbClkaWFsb2dQb2x5ZmlsbC5mb3JjZVJlZ2lzdGVyRGlhbG9nKGVsZW1lbnQpfTtkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyPWZ1bmN0aW9uKCl7dGhpcy5wZW5kaW5nRGlhbG9nU3RhY2s9W107dmFyIGNoZWNrRE9NPXRoaXMuY2hlY2tET01fLmJpbmQodGhpcyk7dGhpcy5vdmVybGF5PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dGhpcy5vdmVybGF5LmNsYXNzTmFtZT1cIl9kaWFsb2dfb3ZlcmxheVwiO3RoaXMub3ZlcmxheS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihlKXt0aGlzLmZvcndhcmRUYWJfPXVuZGVmaW5lZDtlLnN0b3BQcm9wYWdhdGlvbigpO2NoZWNrRE9NKFtdKX0uYmluZCh0aGlzKSk7dGhpcy5oYW5kbGVLZXlfPXRoaXMuaGFuZGxlS2V5Xy5iaW5kKHRoaXMpO1xudGhpcy5oYW5kbGVGb2N1c189dGhpcy5oYW5kbGVGb2N1c18uYmluZCh0aGlzKTt0aGlzLnpJbmRleExvd189MUU1O3RoaXMuekluZGV4SGlnaF89MUU1KzE1MDt0aGlzLmZvcndhcmRUYWJfPXVuZGVmaW5lZDtpZihcIk11dGF0aW9uT2JzZXJ2ZXJcImluIHdpbmRvdyl0aGlzLm1vXz1uZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihyZWNvcmRzKXt2YXIgcmVtb3ZlZD1bXTtyZWNvcmRzLmZvckVhY2goZnVuY3Rpb24ocmVjKXtmb3IodmFyIGk9MCxjO2M9cmVjLnJlbW92ZWROb2Rlc1tpXTsrK2kpe2lmKCEoYyBpbnN0YW5jZW9mIEVsZW1lbnQpKWNvbnRpbnVlO2Vsc2UgaWYoYy5sb2NhbE5hbWU9PT1cImRpYWxvZ1wiKXJlbW92ZWQucHVzaChjKTtyZW1vdmVkPXJlbW92ZWQuY29uY2F0KGMucXVlcnlTZWxlY3RvckFsbChcImRpYWxvZ1wiKSl9fSk7cmVtb3ZlZC5sZW5ndGgmJmNoZWNrRE9NKHJlbW92ZWQpfSl9O2RpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIucHJvdG90eXBlLmJsb2NrRG9jdW1lbnQ9XG5mdW5jdGlvbigpe2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0aGlzLmhhbmRsZUZvY3VzXyx0cnVlKTtkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuaGFuZGxlS2V5Xyk7dGhpcy5tb18mJnRoaXMubW9fLm9ic2VydmUoZG9jdW1lbnQse2NoaWxkTGlzdDp0cnVlLHN1YnRyZWU6dHJ1ZX0pfTtkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS51bmJsb2NrRG9jdW1lbnQ9ZnVuY3Rpb24oKXtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5oYW5kbGVGb2N1c18sdHJ1ZSk7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLmhhbmRsZUtleV8pO3RoaXMubW9fJiZ0aGlzLm1vXy5kaXNjb25uZWN0KCl9O2RpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVN0YWNraW5nPWZ1bmN0aW9uKCl7dmFyIHpJbmRleD1cbnRoaXMuekluZGV4SGlnaF87Zm9yKHZhciBpPTAsZHBpO2RwaT10aGlzLnBlbmRpbmdEaWFsb2dTdGFja1tpXTsrK2kpe2RwaS51cGRhdGVaSW5kZXgoLS16SW5kZXgsLS16SW5kZXgpO2lmKGk9PT0wKXRoaXMub3ZlcmxheS5zdHlsZS56SW5kZXg9LS16SW5kZXh9dmFyIGxhc3Q9dGhpcy5wZW5kaW5nRGlhbG9nU3RhY2tbMF07aWYobGFzdCl7dmFyIHA9bGFzdC5kaWFsb2cucGFyZW50Tm9kZXx8ZG9jdW1lbnQuYm9keTtwLmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSl9ZWxzZSBpZih0aGlzLm92ZXJsYXkucGFyZW50Tm9kZSl0aGlzLm92ZXJsYXkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm92ZXJsYXkpfTtkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS5jb250YWluZWRCeVRvcERpYWxvZ189ZnVuY3Rpb24oY2FuZGlkYXRlKXt3aGlsZShjYW5kaWRhdGU9ZmluZE5lYXJlc3REaWFsb2coY2FuZGlkYXRlKSl7Zm9yKHZhciBpPTAsZHBpO2RwaT10aGlzLnBlbmRpbmdEaWFsb2dTdGFja1tpXTsrK2kpaWYoZHBpLmRpYWxvZz09PVxuY2FuZGlkYXRlKXJldHVybiBpPT09MDtjYW5kaWRhdGU9Y2FuZGlkYXRlLnBhcmVudEVsZW1lbnR9cmV0dXJuIGZhbHNlfTtkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS5oYW5kbGVGb2N1c189ZnVuY3Rpb24oZXZlbnQpe2lmKHRoaXMuY29udGFpbmVkQnlUb3BEaWFsb2dfKGV2ZW50LnRhcmdldCkpcmV0dXJuO2V2ZW50LnByZXZlbnREZWZhdWx0KCk7ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7c2FmZUJsdXIoZXZlbnQudGFyZ2V0KTtpZih0aGlzLmZvcndhcmRUYWJfPT09dW5kZWZpbmVkKXJldHVybjt2YXIgZHBpPXRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrWzBdO3ZhciBkaWFsb2c9ZHBpLmRpYWxvZzt2YXIgcG9zaXRpb249ZGlhbG9nLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGV2ZW50LnRhcmdldCk7aWYocG9zaXRpb24mTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcpaWYodGhpcy5mb3J3YXJkVGFiXylkcGkuZm9jdXNfKCk7ZWxzZSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZm9jdXMoKTtcbmVsc2U7cmV0dXJuIGZhbHNlfTtkaWFsb2dQb2x5ZmlsbC5EaWFsb2dNYW5hZ2VyLnByb3RvdHlwZS5oYW5kbGVLZXlfPWZ1bmN0aW9uKGV2ZW50KXt0aGlzLmZvcndhcmRUYWJfPXVuZGVmaW5lZDtpZihldmVudC5rZXlDb2RlPT09Mjcpe2V2ZW50LnByZXZlbnREZWZhdWx0KCk7ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7dmFyIGNhbmNlbEV2ZW50PW5ldyBzdXBwb3J0Q3VzdG9tRXZlbnQoXCJjYW5jZWxcIix7YnViYmxlczpmYWxzZSxjYW5jZWxhYmxlOnRydWV9KTt2YXIgZHBpPXRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrWzBdO2lmKGRwaSYmZHBpLmRpYWxvZy5kaXNwYXRjaEV2ZW50KGNhbmNlbEV2ZW50KSlkcGkuZGlhbG9nLmNsb3NlKCl9ZWxzZSBpZihldmVudC5rZXlDb2RlPT09OSl0aGlzLmZvcndhcmRUYWJfPSFldmVudC5zaGlmdEtleX07ZGlhbG9nUG9seWZpbGwuRGlhbG9nTWFuYWdlci5wcm90b3R5cGUuY2hlY2tET01fPWZ1bmN0aW9uKHJlbW92ZWQpe3ZhciBjbG9uZT10aGlzLnBlbmRpbmdEaWFsb2dTdGFjay5zbGljZSgpO1xuY2xvbmUuZm9yRWFjaChmdW5jdGlvbihkcGkpe2lmKHJlbW92ZWQuaW5kZXhPZihkcGkuZGlhbG9nKSE9PS0xKWRwaS5kb3duZ3JhZGVNb2RhbCgpO2Vsc2UgZHBpLm1heWJlSGlkZU1vZGFsKCl9KX07ZGlhbG9nUG9seWZpbGwuRGlhbG9nTWFuYWdlci5wcm90b3R5cGUucHVzaERpYWxvZz1mdW5jdGlvbihkcGkpe3ZhciBhbGxvd2VkPSh0aGlzLnpJbmRleEhpZ2hfLXRoaXMuekluZGV4TG93XykvMi0xO2lmKHRoaXMucGVuZGluZ0RpYWxvZ1N0YWNrLmxlbmd0aD49YWxsb3dlZClyZXR1cm4gZmFsc2U7aWYodGhpcy5wZW5kaW5nRGlhbG9nU3RhY2sudW5zaGlmdChkcGkpPT09MSl0aGlzLmJsb2NrRG9jdW1lbnQoKTt0aGlzLnVwZGF0ZVN0YWNraW5nKCk7cmV0dXJuIHRydWV9O2RpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXIucHJvdG90eXBlLnJlbW92ZURpYWxvZz1mdW5jdGlvbihkcGkpe3ZhciBpbmRleD10aGlzLnBlbmRpbmdEaWFsb2dTdGFjay5pbmRleE9mKGRwaSk7aWYoaW5kZXg9PT1cbi0xKXJldHVybjt0aGlzLnBlbmRpbmdEaWFsb2dTdGFjay5zcGxpY2UoaW5kZXgsMSk7aWYodGhpcy5wZW5kaW5nRGlhbG9nU3RhY2subGVuZ3RoPT09MCl0aGlzLnVuYmxvY2tEb2N1bWVudCgpO3RoaXMudXBkYXRlU3RhY2tpbmcoKX07ZGlhbG9nUG9seWZpbGwuZG09bmV3IGRpYWxvZ1BvbHlmaWxsLkRpYWxvZ01hbmFnZXI7ZGlhbG9nUG9seWZpbGwuZm9ybVN1Ym1pdHRlcj1udWxsO2RpYWxvZ1BvbHlmaWxsLnVzZVZhbHVlPW51bGw7aWYod2luZG93LkhUTUxEaWFsb2dFbGVtZW50PT09dW5kZWZpbmVkKXt2YXIgdGVzdEZvcm09ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7dGVzdEZvcm0uc2V0QXR0cmlidXRlKFwibWV0aG9kXCIsXCJkaWFsb2dcIik7aWYodGVzdEZvcm0ubWV0aG9kIT09XCJkaWFsb2dcIil7dmFyIG1ldGhvZERlc2NyaXB0b3I9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLFwibWV0aG9kXCIpO2lmKG1ldGhvZERlc2NyaXB0b3Ipe3ZhciByZWFsR2V0PVxubWV0aG9kRGVzY3JpcHRvci5nZXQ7bWV0aG9kRGVzY3JpcHRvci5nZXQ9ZnVuY3Rpb24oKXtpZihpc0Zvcm1NZXRob2REaWFsb2codGhpcykpcmV0dXJuXCJkaWFsb2dcIjtyZXR1cm4gcmVhbEdldC5jYWxsKHRoaXMpfTt2YXIgcmVhbFNldD1tZXRob2REZXNjcmlwdG9yLnNldDttZXRob2REZXNjcmlwdG9yLnNldD1mdW5jdGlvbih2KXtpZih0eXBlb2Ygdj09PVwic3RyaW5nXCImJnYudG9Mb3dlckNhc2UoKT09PVwiZGlhbG9nXCIpcmV0dXJuIHRoaXMuc2V0QXR0cmlidXRlKFwibWV0aG9kXCIsdik7cmV0dXJuIHJlYWxTZXQuY2FsbCh0aGlzLHYpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEZvcm1FbGVtZW50LnByb3RvdHlwZSxcIm1ldGhvZFwiLG1ldGhvZERlc2NyaXB0b3IpfX1kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbihldil7ZGlhbG9nUG9seWZpbGwuZm9ybVN1Ym1pdHRlcj1udWxsO2RpYWxvZ1BvbHlmaWxsLnVzZVZhbHVlPW51bGw7aWYoZXYuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47XG52YXIgdGFyZ2V0PWV2LnRhcmdldDtpZighdGFyZ2V0fHwhaXNGb3JtTWV0aG9kRGlhbG9nKHRhcmdldC5mb3JtKSlyZXR1cm47dmFyIHZhbGlkPXRhcmdldC50eXBlPT09XCJzdWJtaXRcIiYmW1wiYnV0dG9uXCIsXCJpbnB1dFwiXS5pbmRleE9mKHRhcmdldC5sb2NhbE5hbWUpPi0xO2lmKCF2YWxpZCl7aWYoISh0YXJnZXQubG9jYWxOYW1lPT09XCJpbnB1dFwiJiZ0YXJnZXQudHlwZT09PVwiaW1hZ2VcIikpcmV0dXJuO2RpYWxvZ1BvbHlmaWxsLnVzZVZhbHVlPWV2Lm9mZnNldFgrXCIsXCIrZXYub2Zmc2V0WX12YXIgZGlhbG9nPWZpbmROZWFyZXN0RGlhbG9nKHRhcmdldCk7aWYoIWRpYWxvZylyZXR1cm47ZGlhbG9nUG9seWZpbGwuZm9ybVN1Ym1pdHRlcj10YXJnZXR9LGZhbHNlKTt2YXIgbmF0aXZlRm9ybVN1Ym1pdD1IVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLnN1Ym1pdDt2YXIgcmVwbGFjZW1lbnRGb3JtU3VibWl0PWZ1bmN0aW9uKCl7aWYoIWlzRm9ybU1ldGhvZERpYWxvZyh0aGlzKSlyZXR1cm4gbmF0aXZlRm9ybVN1Ym1pdC5jYWxsKHRoaXMpO1xudmFyIGRpYWxvZz1maW5kTmVhcmVzdERpYWxvZyh0aGlzKTtkaWFsb2cmJmRpYWxvZy5jbG9zZSgpfTtIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLnN1Ym1pdD1yZXBsYWNlbWVudEZvcm1TdWJtaXQ7ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLGZ1bmN0aW9uKGV2KXt2YXIgZm9ybT1ldi50YXJnZXQ7aWYoIWlzRm9ybU1ldGhvZERpYWxvZyhmb3JtKSlyZXR1cm47ZXYucHJldmVudERlZmF1bHQoKTt2YXIgZGlhbG9nPWZpbmROZWFyZXN0RGlhbG9nKGZvcm0pO2lmKCFkaWFsb2cpcmV0dXJuO3ZhciBzPWRpYWxvZ1BvbHlmaWxsLmZvcm1TdWJtaXR0ZXI7aWYocyYmcy5mb3JtPT09Zm9ybSlkaWFsb2cuY2xvc2UoZGlhbG9nUG9seWZpbGwudXNlVmFsdWV8fHMudmFsdWUpO2Vsc2UgZGlhbG9nLmNsb3NlKCk7ZGlhbG9nUG9seWZpbGwuZm9ybVN1Ym1pdHRlcj1udWxsfSx0cnVlKX1kaWFsb2dQb2x5ZmlsbFtcImZvcmNlUmVnaXN0ZXJEaWFsb2dcIl09ZGlhbG9nUG9seWZpbGwuZm9yY2VSZWdpc3RlckRpYWxvZztcbmRpYWxvZ1BvbHlmaWxsW1wicmVnaXN0ZXJEaWFsb2dcIl09ZGlhbG9nUG9seWZpbGwucmVnaXN0ZXJEaWFsb2c7aWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmXCJhbWRcImluIGRlZmluZSlkZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm4gZGlhbG9nUG9seWZpbGx9KTtlbHNlIGlmKHR5cGVvZiBtb2R1bGU9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlW1wiZXhwb3J0c1wiXT09PVwib2JqZWN0XCIpbW9kdWxlW1wiZXhwb3J0c1wiXT1kaWFsb2dQb2x5ZmlsbDtlbHNlIHdpbmRvd1tcImRpYWxvZ1BvbHlmaWxsXCJdPWRpYWxvZ1BvbHlmaWxsfSkoKTsvKlxuXG4gQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBjb21wb25lbnRIYW5kbGVyPXt1cGdyYWRlRG9tOmZ1bmN0aW9uKG9wdEpzQ2xhc3Msb3B0Q3NzQ2xhc3Mpe30sdXBncmFkZUVsZW1lbnQ6ZnVuY3Rpb24oZWxlbWVudCxvcHRKc0NsYXNzKXt9LHVwZ3JhZGVFbGVtZW50czpmdW5jdGlvbihlbGVtZW50cyl7fSx1cGdyYWRlQWxsUmVnaXN0ZXJlZDpmdW5jdGlvbigpe30scmVnaXN0ZXJVcGdyYWRlZENhbGxiYWNrOmZ1bmN0aW9uKGpzQ2xhc3MsY2FsbGJhY2spe30scmVnaXN0ZXI6ZnVuY3Rpb24oY29uZmlnKXt9LGRvd25ncmFkZUVsZW1lbnRzOmZ1bmN0aW9uKG5vZGVzKXt9fTtcbmNvbXBvbmVudEhhbmRsZXI9ZnVuY3Rpb24oKXt2YXIgcmVnaXN0ZXJlZENvbXBvbmVudHNfPVtdO3ZhciBjcmVhdGVkQ29tcG9uZW50c189W107dmFyIGNvbXBvbmVudENvbmZpZ1Byb3BlcnR5Xz1cIm1kbENvbXBvbmVudENvbmZpZ0ludGVybmFsX1wiO2Z1bmN0aW9uIGZpbmRSZWdpc3RlcmVkQ2xhc3NfKG5hbWUsb3B0UmVwbGFjZSl7Zm9yKHZhciBpPTA7aTxyZWdpc3RlcmVkQ29tcG9uZW50c18ubGVuZ3RoO2krKylpZihyZWdpc3RlcmVkQ29tcG9uZW50c19baV0uY2xhc3NOYW1lPT09bmFtZSl7aWYodHlwZW9mIG9wdFJlcGxhY2UhPT1cInVuZGVmaW5lZFwiKXJlZ2lzdGVyZWRDb21wb25lbnRzX1tpXT1vcHRSZXBsYWNlO3JldHVybiByZWdpc3RlcmVkQ29tcG9uZW50c19baV19cmV0dXJuIGZhbHNlfWZ1bmN0aW9uIGdldFVwZ3JhZGVkTGlzdE9mRWxlbWVudF8oZWxlbWVudCl7dmFyIGRhdGFVcGdyYWRlZD1lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdXBncmFkZWRcIik7cmV0dXJuIGRhdGFVcGdyYWRlZD09PVxubnVsbD9bXCJcIl06ZGF0YVVwZ3JhZGVkLnNwbGl0KFwiLFwiKX1mdW5jdGlvbiBpc0VsZW1lbnRVcGdyYWRlZF8oZWxlbWVudCxqc0NsYXNzKXt2YXIgdXBncmFkZWRMaXN0PWdldFVwZ3JhZGVkTGlzdE9mRWxlbWVudF8oZWxlbWVudCk7cmV0dXJuIHVwZ3JhZGVkTGlzdC5pbmRleE9mKGpzQ2xhc3MpIT09LTF9ZnVuY3Rpb24gY3JlYXRlRXZlbnRfKGV2ZW50VHlwZSxidWJibGVzLGNhbmNlbGFibGUpe2lmKFwiQ3VzdG9tRXZlbnRcImluIHdpbmRvdyYmdHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudD09PVwiZnVuY3Rpb25cIilyZXR1cm4gbmV3IEN1c3RvbUV2ZW50KGV2ZW50VHlwZSx7YnViYmxlczpidWJibGVzLGNhbmNlbGFibGU6Y2FuY2VsYWJsZX0pO2Vsc2V7dmFyIGV2PWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRzXCIpO2V2LmluaXRFdmVudChldmVudFR5cGUsYnViYmxlcyxjYW5jZWxhYmxlKTtyZXR1cm4gZXZ9fWZ1bmN0aW9uIHVwZ3JhZGVEb21JbnRlcm5hbChvcHRKc0NsYXNzLFxub3B0Q3NzQ2xhc3Mpe2lmKHR5cGVvZiBvcHRKc0NsYXNzPT09XCJ1bmRlZmluZWRcIiYmdHlwZW9mIG9wdENzc0NsYXNzPT09XCJ1bmRlZmluZWRcIilmb3IodmFyIGk9MDtpPHJlZ2lzdGVyZWRDb21wb25lbnRzXy5sZW5ndGg7aSsrKXVwZ3JhZGVEb21JbnRlcm5hbChyZWdpc3RlcmVkQ29tcG9uZW50c19baV0uY2xhc3NOYW1lLHJlZ2lzdGVyZWRDb21wb25lbnRzX1tpXS5jc3NDbGFzcyk7ZWxzZXt2YXIganNDbGFzcz1vcHRKc0NsYXNzO2lmKHR5cGVvZiBvcHRDc3NDbGFzcz09PVwidW5kZWZpbmVkXCIpe3ZhciByZWdpc3RlcmVkQ2xhc3M9ZmluZFJlZ2lzdGVyZWRDbGFzc18oanNDbGFzcyk7aWYocmVnaXN0ZXJlZENsYXNzKW9wdENzc0NsYXNzPXJlZ2lzdGVyZWRDbGFzcy5jc3NDbGFzc312YXIgZWxlbWVudHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5cIitvcHRDc3NDbGFzcyk7Zm9yKHZhciBuPTA7bjxlbGVtZW50cy5sZW5ndGg7bisrKXVwZ3JhZGVFbGVtZW50SW50ZXJuYWwoZWxlbWVudHNbbl0sXG5qc0NsYXNzKX19ZnVuY3Rpb24gdXBncmFkZUVsZW1lbnRJbnRlcm5hbChlbGVtZW50LG9wdEpzQ2xhc3Mpe2lmKCEodHlwZW9mIGVsZW1lbnQ9PT1cIm9iamVjdFwiJiZlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwcm92aWRlZCB0byB1cGdyYWRlIE1ETCBlbGVtZW50LlwiKTt2YXIgdXBncmFkaW5nRXY9Y3JlYXRlRXZlbnRfKFwibWRsLWNvbXBvbmVudHVwZ3JhZGluZ1wiLHRydWUsdHJ1ZSk7ZWxlbWVudC5kaXNwYXRjaEV2ZW50KHVwZ3JhZGluZ0V2KTtpZih1cGdyYWRpbmdFdi5kZWZhdWx0UHJldmVudGVkKXJldHVybjt2YXIgdXBncmFkZWRMaXN0PWdldFVwZ3JhZGVkTGlzdE9mRWxlbWVudF8oZWxlbWVudCk7dmFyIGNsYXNzZXNUb1VwZ3JhZGU9W107aWYoIW9wdEpzQ2xhc3Mpe3ZhciBjbGFzc0xpc3Q9ZWxlbWVudC5jbGFzc0xpc3Q7cmVnaXN0ZXJlZENvbXBvbmVudHNfLmZvckVhY2goZnVuY3Rpb24oY29tcG9uZW50KXtpZihjbGFzc0xpc3QuY29udGFpbnMoY29tcG9uZW50LmNzc0NsYXNzKSYmXG5jbGFzc2VzVG9VcGdyYWRlLmluZGV4T2YoY29tcG9uZW50KT09PS0xJiYhaXNFbGVtZW50VXBncmFkZWRfKGVsZW1lbnQsY29tcG9uZW50LmNsYXNzTmFtZSkpY2xhc3Nlc1RvVXBncmFkZS5wdXNoKGNvbXBvbmVudCl9KX1lbHNlIGlmKCFpc0VsZW1lbnRVcGdyYWRlZF8oZWxlbWVudCxvcHRKc0NsYXNzKSljbGFzc2VzVG9VcGdyYWRlLnB1c2goZmluZFJlZ2lzdGVyZWRDbGFzc18ob3B0SnNDbGFzcykpO2Zvcih2YXIgaT0wLG49Y2xhc3Nlc1RvVXBncmFkZS5sZW5ndGgscmVnaXN0ZXJlZENsYXNzO2k8bjtpKyspe3JlZ2lzdGVyZWRDbGFzcz1jbGFzc2VzVG9VcGdyYWRlW2ldO2lmKHJlZ2lzdGVyZWRDbGFzcyl7dXBncmFkZWRMaXN0LnB1c2gocmVnaXN0ZXJlZENsYXNzLmNsYXNzTmFtZSk7ZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXVwZ3JhZGVkXCIsdXBncmFkZWRMaXN0LmpvaW4oXCIsXCIpKTt2YXIgaW5zdGFuY2U9bmV3IHJlZ2lzdGVyZWRDbGFzcy5jbGFzc0NvbnN0cnVjdG9yKGVsZW1lbnQpO1xuaW5zdGFuY2VbY29tcG9uZW50Q29uZmlnUHJvcGVydHlfXT1yZWdpc3RlcmVkQ2xhc3M7Y3JlYXRlZENvbXBvbmVudHNfLnB1c2goaW5zdGFuY2UpO2Zvcih2YXIgaj0wLG09cmVnaXN0ZXJlZENsYXNzLmNhbGxiYWNrcy5sZW5ndGg7ajxtO2orKylyZWdpc3RlcmVkQ2xhc3MuY2FsbGJhY2tzW2pdKGVsZW1lbnQpO2lmKHJlZ2lzdGVyZWRDbGFzcy53aWRnZXQpZWxlbWVudFtyZWdpc3RlcmVkQ2xhc3MuY2xhc3NOYW1lXT1pbnN0YW5jZX1lbHNlIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGEgcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSBnaXZlbiBjbGFzcy5cIik7dmFyIHVwZ3JhZGVkRXY9Y3JlYXRlRXZlbnRfKFwibWRsLWNvbXBvbmVudHVwZ3JhZGVkXCIsdHJ1ZSxmYWxzZSk7ZWxlbWVudC5kaXNwYXRjaEV2ZW50KHVwZ3JhZGVkRXYpfX1mdW5jdGlvbiB1cGdyYWRlRWxlbWVudHNJbnRlcm5hbChlbGVtZW50cyl7aWYoIUFycmF5LmlzQXJyYXkoZWxlbWVudHMpKWlmKGVsZW1lbnRzIGluc3RhbmNlb2ZcbkVsZW1lbnQpZWxlbWVudHM9W2VsZW1lbnRzXTtlbHNlIGVsZW1lbnRzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW1lbnRzKTtmb3IodmFyIGk9MCxuPWVsZW1lbnRzLmxlbmd0aCxlbGVtZW50O2k8bjtpKyspe2VsZW1lbnQ9ZWxlbWVudHNbaV07aWYoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXt1cGdyYWRlRWxlbWVudEludGVybmFsKGVsZW1lbnQpO2lmKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoPjApdXBncmFkZUVsZW1lbnRzSW50ZXJuYWwoZWxlbWVudC5jaGlsZHJlbil9fX1mdW5jdGlvbiByZWdpc3RlckludGVybmFsKGNvbmZpZyl7dmFyIHdpZGdldE1pc3Npbmc9dHlwZW9mIGNvbmZpZy53aWRnZXQ9PT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgY29uZmlnW1wid2lkZ2V0XCJdPT09XCJ1bmRlZmluZWRcIjt2YXIgd2lkZ2V0PXRydWU7aWYoIXdpZGdldE1pc3Npbmcpd2lkZ2V0PWNvbmZpZy53aWRnZXR8fGNvbmZpZ1tcIndpZGdldFwiXTt2YXIgbmV3Q29uZmlnPXtjbGFzc0NvbnN0cnVjdG9yOmNvbmZpZy5jb25zdHJ1Y3Rvcnx8XG5jb25maWdbXCJjb25zdHJ1Y3RvclwiXSxjbGFzc05hbWU6Y29uZmlnLmNsYXNzQXNTdHJpbmd8fGNvbmZpZ1tcImNsYXNzQXNTdHJpbmdcIl0sY3NzQ2xhc3M6Y29uZmlnLmNzc0NsYXNzfHxjb25maWdbXCJjc3NDbGFzc1wiXSx3aWRnZXQ6d2lkZ2V0LGNhbGxiYWNrczpbXX07cmVnaXN0ZXJlZENvbXBvbmVudHNfLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7aWYoaXRlbS5jc3NDbGFzcz09PW5ld0NvbmZpZy5jc3NDbGFzcyl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcHJvdmlkZWQgY3NzQ2xhc3MgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkOiBcIitpdGVtLmNzc0NsYXNzKTtpZihpdGVtLmNsYXNzTmFtZT09PW5ld0NvbmZpZy5jbGFzc05hbWUpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWRcIik7fSk7aWYoY29uZmlnLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShjb21wb25lbnRDb25maWdQcm9wZXJ0eV8pKXRocm93IG5ldyBFcnJvcihcIk1ETCBjb21wb25lbnQgY2xhc3NlcyBtdXN0IG5vdCBoYXZlIFwiK1xuY29tcG9uZW50Q29uZmlnUHJvcGVydHlfK1wiIGRlZmluZWQgYXMgYSBwcm9wZXJ0eS5cIik7dmFyIGZvdW5kPWZpbmRSZWdpc3RlcmVkQ2xhc3NfKGNvbmZpZy5jbGFzc0FzU3RyaW5nLG5ld0NvbmZpZyk7aWYoIWZvdW5kKXJlZ2lzdGVyZWRDb21wb25lbnRzXy5wdXNoKG5ld0NvbmZpZyl9ZnVuY3Rpb24gcmVnaXN0ZXJVcGdyYWRlZENhbGxiYWNrSW50ZXJuYWwoanNDbGFzcyxjYWxsYmFjayl7dmFyIHJlZ0NsYXNzPWZpbmRSZWdpc3RlcmVkQ2xhc3NfKGpzQ2xhc3MpO2lmKHJlZ0NsYXNzKXJlZ0NsYXNzLmNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKX1mdW5jdGlvbiB1cGdyYWRlQWxsUmVnaXN0ZXJlZEludGVybmFsKCl7Zm9yKHZhciBuPTA7bjxyZWdpc3RlcmVkQ29tcG9uZW50c18ubGVuZ3RoO24rKyl1cGdyYWRlRG9tSW50ZXJuYWwocmVnaXN0ZXJlZENvbXBvbmVudHNfW25dLmNsYXNzTmFtZSl9ZnVuY3Rpb24gZGVjb25zdHJ1Y3RDb21wb25lbnRJbnRlcm5hbChjb21wb25lbnQpe2lmKGNvbXBvbmVudCl7dmFyIGNvbXBvbmVudEluZGV4PVxuY3JlYXRlZENvbXBvbmVudHNfLmluZGV4T2YoY29tcG9uZW50KTtjcmVhdGVkQ29tcG9uZW50c18uc3BsaWNlKGNvbXBvbmVudEluZGV4LDEpO3ZhciB1cGdyYWRlcz1jb21wb25lbnQuZWxlbWVudF8uZ2V0QXR0cmlidXRlKFwiZGF0YS11cGdyYWRlZFwiKS5zcGxpdChcIixcIik7dmFyIGNvbXBvbmVudFBsYWNlPXVwZ3JhZGVzLmluZGV4T2YoY29tcG9uZW50W2NvbXBvbmVudENvbmZpZ1Byb3BlcnR5X10uY2xhc3NBc1N0cmluZyk7dXBncmFkZXMuc3BsaWNlKGNvbXBvbmVudFBsYWNlLDEpO2NvbXBvbmVudC5lbGVtZW50Xy5zZXRBdHRyaWJ1dGUoXCJkYXRhLXVwZ3JhZGVkXCIsdXBncmFkZXMuam9pbihcIixcIikpO3ZhciBldj1jcmVhdGVFdmVudF8oXCJtZGwtY29tcG9uZW50ZG93bmdyYWRlZFwiLHRydWUsZmFsc2UpO2NvbXBvbmVudC5lbGVtZW50Xy5kaXNwYXRjaEV2ZW50KGV2KX19ZnVuY3Rpb24gZG93bmdyYWRlTm9kZXNJbnRlcm5hbChub2Rlcyl7dmFyIGRvd25ncmFkZU5vZGU9ZnVuY3Rpb24obm9kZSl7Y3JlYXRlZENvbXBvbmVudHNfLmZpbHRlcihmdW5jdGlvbihpdGVtKXtyZXR1cm4gaXRlbS5lbGVtZW50Xz09PVxubm9kZX0pLmZvckVhY2goZGVjb25zdHJ1Y3RDb21wb25lbnRJbnRlcm5hbCl9O2lmKG5vZGVzIGluc3RhbmNlb2YgQXJyYXl8fG5vZGVzIGluc3RhbmNlb2YgTm9kZUxpc3QpZm9yKHZhciBuPTA7bjxub2Rlcy5sZW5ndGg7bisrKWRvd25ncmFkZU5vZGUobm9kZXNbbl0pO2Vsc2UgaWYobm9kZXMgaW5zdGFuY2VvZiBOb2RlKWRvd25ncmFkZU5vZGUobm9kZXMpO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwcm92aWRlZCB0byBkb3duZ3JhZGUgTURMIG5vZGVzLlwiKTt9cmV0dXJue3VwZ3JhZGVEb206dXBncmFkZURvbUludGVybmFsLHVwZ3JhZGVFbGVtZW50OnVwZ3JhZGVFbGVtZW50SW50ZXJuYWwsdXBncmFkZUVsZW1lbnRzOnVwZ3JhZGVFbGVtZW50c0ludGVybmFsLHVwZ3JhZGVBbGxSZWdpc3RlcmVkOnVwZ3JhZGVBbGxSZWdpc3RlcmVkSW50ZXJuYWwscmVnaXN0ZXJVcGdyYWRlZENhbGxiYWNrOnJlZ2lzdGVyVXBncmFkZWRDYWxsYmFja0ludGVybmFsLFxucmVnaXN0ZXI6cmVnaXN0ZXJJbnRlcm5hbCxkb3duZ3JhZGVFbGVtZW50czpkb3duZ3JhZGVOb2Rlc0ludGVybmFsfX0oKTtjb21wb25lbnRIYW5kbGVyLkNvbXBvbmVudENvbmZpZ1B1YmxpYztjb21wb25lbnRIYW5kbGVyLkNvbXBvbmVudENvbmZpZztjb21wb25lbnRIYW5kbGVyLkNvbXBvbmVudDtjb21wb25lbnRIYW5kbGVyW1widXBncmFkZURvbVwiXT1jb21wb25lbnRIYW5kbGVyLnVwZ3JhZGVEb207Y29tcG9uZW50SGFuZGxlcltcInVwZ3JhZGVFbGVtZW50XCJdPWNvbXBvbmVudEhhbmRsZXIudXBncmFkZUVsZW1lbnQ7Y29tcG9uZW50SGFuZGxlcltcInVwZ3JhZGVFbGVtZW50c1wiXT1jb21wb25lbnRIYW5kbGVyLnVwZ3JhZGVFbGVtZW50cztjb21wb25lbnRIYW5kbGVyW1widXBncmFkZUFsbFJlZ2lzdGVyZWRcIl09Y29tcG9uZW50SGFuZGxlci51cGdyYWRlQWxsUmVnaXN0ZXJlZDtjb21wb25lbnRIYW5kbGVyW1wicmVnaXN0ZXJVcGdyYWRlZENhbGxiYWNrXCJdPWNvbXBvbmVudEhhbmRsZXIucmVnaXN0ZXJVcGdyYWRlZENhbGxiYWNrO1xuY29tcG9uZW50SGFuZGxlcltcInJlZ2lzdGVyXCJdPWNvbXBvbmVudEhhbmRsZXIucmVnaXN0ZXI7Y29tcG9uZW50SGFuZGxlcltcImRvd25ncmFkZUVsZW1lbnRzXCJdPWNvbXBvbmVudEhhbmRsZXIuZG93bmdyYWRlRWxlbWVudHM7d2luZG93LmNvbXBvbmVudEhhbmRsZXI9Y29tcG9uZW50SGFuZGxlcjt3aW5kb3dbXCJjb21wb25lbnRIYW5kbGVyXCJdPWNvbXBvbmVudEhhbmRsZXI7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe2lmKFwiY2xhc3NMaXN0XCJpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpJiZcInF1ZXJ5U2VsZWN0b3JcImluIGRvY3VtZW50JiZcImFkZEV2ZW50TGlzdGVuZXJcImluIHdpbmRvdyYmQXJyYXkucHJvdG90eXBlLmZvckVhY2gpe2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibWRsLWpzXCIpO2NvbXBvbmVudEhhbmRsZXIudXBncmFkZUFsbFJlZ2lzdGVyZWQoKX1lbHNle2NvbXBvbmVudEhhbmRsZXIudXBncmFkZUVsZW1lbnQ9ZnVuY3Rpb24oKXt9O2NvbXBvbmVudEhhbmRsZXIucmVnaXN0ZXI9ZnVuY3Rpb24oKXt9fX0pOyhmdW5jdGlvbigpe3ZhciBNYXRlcmlhbEJ1dHRvbj1mdW5jdGlvbiBNYXRlcmlhbEJ1dHRvbihlbGVtZW50KXt0aGlzLmVsZW1lbnRfPWVsZW1lbnQ7dGhpcy5pbml0KCl9O3dpbmRvd1tcIk1hdGVyaWFsQnV0dG9uXCJdPU1hdGVyaWFsQnV0dG9uO01hdGVyaWFsQnV0dG9uLnByb3RvdHlwZS5Db25zdGFudF89e307TWF0ZXJpYWxCdXR0b24ucHJvdG90eXBlLkNzc0NsYXNzZXNfPXtSSVBQTEVfRUZGRUNUOlwibWRsLWpzLXJpcHBsZS1lZmZlY3RcIixSSVBQTEVfQ09OVEFJTkVSOlwibWRsLWJ1dHRvbl9fcmlwcGxlLWNvbnRhaW5lclwiLFJJUFBMRTpcIm1kbC1yaXBwbGVcIn07TWF0ZXJpYWxCdXR0b24ucHJvdG90eXBlLmJsdXJIYW5kbGVyXz1mdW5jdGlvbihldmVudCl7aWYoZXZlbnQpdGhpcy5lbGVtZW50Xy5ibHVyKCl9O01hdGVyaWFsQnV0dG9uLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50Xy5kaXNhYmxlZD10cnVlfTtNYXRlcmlhbEJ1dHRvbi5wcm90b3R5cGVbXCJkaXNhYmxlXCJdPVxuTWF0ZXJpYWxCdXR0b24ucHJvdG90eXBlLmRpc2FibGU7TWF0ZXJpYWxCdXR0b24ucHJvdG90eXBlLmVuYWJsZT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudF8uZGlzYWJsZWQ9ZmFsc2V9O01hdGVyaWFsQnV0dG9uLnByb3RvdHlwZVtcImVuYWJsZVwiXT1NYXRlcmlhbEJ1dHRvbi5wcm90b3R5cGUuZW5hYmxlO01hdGVyaWFsQnV0dG9uLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7aWYodGhpcy5lbGVtZW50Xyl7aWYodGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QuY29udGFpbnModGhpcy5Dc3NDbGFzc2VzXy5SSVBQTEVfRUZGRUNUKSl7dmFyIHJpcHBsZUNvbnRhaW5lcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtyaXBwbGVDb250YWluZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNzc0NsYXNzZXNfLlJJUFBMRV9DT05UQUlORVIpO3RoaXMucmlwcGxlRWxlbWVudF89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7dGhpcy5yaXBwbGVFbGVtZW50Xy5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uUklQUExFKTtcbnJpcHBsZUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnJpcHBsZUVsZW1lbnRfKTt0aGlzLmJvdW5kUmlwcGxlQmx1ckhhbmRsZXI9dGhpcy5ibHVySGFuZGxlcl8uYmluZCh0aGlzKTt0aGlzLnJpcHBsZUVsZW1lbnRfLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5ib3VuZFJpcHBsZUJsdXJIYW5kbGVyKTt0aGlzLmVsZW1lbnRfLmFwcGVuZENoaWxkKHJpcHBsZUNvbnRhaW5lcil9dGhpcy5ib3VuZEJ1dHRvbkJsdXJIYW5kbGVyPXRoaXMuYmx1ckhhbmRsZXJfLmJpbmQodGhpcyk7dGhpcy5lbGVtZW50Xy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLHRoaXMuYm91bmRCdXR0b25CbHVySGFuZGxlcik7dGhpcy5lbGVtZW50Xy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHRoaXMuYm91bmRCdXR0b25CbHVySGFuZGxlcil9fTtjb21wb25lbnRIYW5kbGVyLnJlZ2lzdGVyKHtjb25zdHJ1Y3RvcjpNYXRlcmlhbEJ1dHRvbixjbGFzc0FzU3RyaW5nOlwiTWF0ZXJpYWxCdXR0b25cIixcbmNzc0NsYXNzOlwibWRsLWpzLWJ1dHRvblwiLHdpZGdldDp0cnVlfSl9KSgpOyhmdW5jdGlvbigpe3ZhciBNYXRlcmlhbFByb2dyZXNzPWZ1bmN0aW9uIE1hdGVyaWFsUHJvZ3Jlc3MoZWxlbWVudCl7dGhpcy5lbGVtZW50Xz1lbGVtZW50O3RoaXMuaW5pdCgpfTt3aW5kb3dbXCJNYXRlcmlhbFByb2dyZXNzXCJdPU1hdGVyaWFsUHJvZ3Jlc3M7TWF0ZXJpYWxQcm9ncmVzcy5wcm90b3R5cGUuQ29uc3RhbnRfPXt9O01hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlLkNzc0NsYXNzZXNfPXtJTkRFVEVSTUlOQVRFX0NMQVNTOlwibWRsLXByb2dyZXNzX19pbmRldGVybWluYXRlXCJ9O01hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlLnNldFByb2dyZXNzPWZ1bmN0aW9uKHApe2lmKHRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuQ3NzQ2xhc3Nlc18uSU5ERVRFUk1JTkFURV9DTEFTUykpcmV0dXJuO3RoaXMucHJvZ3Jlc3NiYXJfLnN0eWxlLndpZHRoPXArXCIlXCJ9O01hdGVyaWFsUHJvZ3Jlc3MucHJvdG90eXBlW1wic2V0UHJvZ3Jlc3NcIl09TWF0ZXJpYWxQcm9ncmVzcy5wcm90b3R5cGUuc2V0UHJvZ3Jlc3M7XG5NYXRlcmlhbFByb2dyZXNzLnByb3RvdHlwZS5zZXRCdWZmZXI9ZnVuY3Rpb24ocCl7dGhpcy5idWZmZXJiYXJfLnN0eWxlLndpZHRoPXArXCIlXCI7dGhpcy5hdXhiYXJfLnN0eWxlLndpZHRoPTEwMC1wK1wiJVwifTtNYXRlcmlhbFByb2dyZXNzLnByb3RvdHlwZVtcInNldEJ1ZmZlclwiXT1NYXRlcmlhbFByb2dyZXNzLnByb3RvdHlwZS5zZXRCdWZmZXI7TWF0ZXJpYWxQcm9ncmVzcy5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe2lmKHRoaXMuZWxlbWVudF8pe3ZhciBlbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2VsLmNsYXNzTmFtZT1cInByb2dyZXNzYmFyIGJhciBiYXIxXCI7dGhpcy5lbGVtZW50Xy5hcHBlbmRDaGlsZChlbCk7dGhpcy5wcm9ncmVzc2Jhcl89ZWw7ZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlbC5jbGFzc05hbWU9XCJidWZmZXJiYXIgYmFyIGJhcjJcIjt0aGlzLmVsZW1lbnRfLmFwcGVuZENoaWxkKGVsKTt0aGlzLmJ1ZmZlcmJhcl89ZWw7ZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmVsLmNsYXNzTmFtZT1cImF1eGJhciBiYXIgYmFyM1wiO3RoaXMuZWxlbWVudF8uYXBwZW5kQ2hpbGQoZWwpO3RoaXMuYXV4YmFyXz1lbDt0aGlzLnByb2dyZXNzYmFyXy5zdHlsZS53aWR0aD1cIjAlXCI7dGhpcy5idWZmZXJiYXJfLnN0eWxlLndpZHRoPVwiMTAwJVwiO3RoaXMuYXV4YmFyXy5zdHlsZS53aWR0aD1cIjAlXCI7dGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QuYWRkKFwiaXMtdXBncmFkZWRcIil9fTtjb21wb25lbnRIYW5kbGVyLnJlZ2lzdGVyKHtjb25zdHJ1Y3RvcjpNYXRlcmlhbFByb2dyZXNzLGNsYXNzQXNTdHJpbmc6XCJNYXRlcmlhbFByb2dyZXNzXCIsY3NzQ2xhc3M6XCJtZGwtanMtcHJvZ3Jlc3NcIix3aWRnZXQ6dHJ1ZX0pfSkoKTsoZnVuY3Rpb24oKXt2YXIgTWF0ZXJpYWxTcGlubmVyPWZ1bmN0aW9uIE1hdGVyaWFsU3Bpbm5lcihlbGVtZW50KXt0aGlzLmVsZW1lbnRfPWVsZW1lbnQ7dGhpcy5pbml0KCl9O3dpbmRvd1tcIk1hdGVyaWFsU3Bpbm5lclwiXT1NYXRlcmlhbFNwaW5uZXI7TWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZS5Db25zdGFudF89e01ETF9TUElOTkVSX0xBWUVSX0NPVU5UOjR9O01hdGVyaWFsU3Bpbm5lci5wcm90b3R5cGUuQ3NzQ2xhc3Nlc189e01ETF9TUElOTkVSX0xBWUVSOlwibWRsLXNwaW5uZXJfX2xheWVyXCIsTURMX1NQSU5ORVJfQ0lSQ0xFX0NMSVBQRVI6XCJtZGwtc3Bpbm5lcl9fY2lyY2xlLWNsaXBwZXJcIixNRExfU1BJTk5FUl9DSVJDTEU6XCJtZGwtc3Bpbm5lcl9fY2lyY2xlXCIsTURMX1NQSU5ORVJfR0FQX1BBVENIOlwibWRsLXNwaW5uZXJfX2dhcC1wYXRjaFwiLE1ETF9TUElOTkVSX0xFRlQ6XCJtZGwtc3Bpbm5lcl9fbGVmdFwiLE1ETF9TUElOTkVSX1JJR0hUOlwibWRsLXNwaW5uZXJfX3JpZ2h0XCJ9O1xuTWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZS5jcmVhdGVMYXllcj1mdW5jdGlvbihpbmRleCl7dmFyIGxheWVyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bGF5ZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNzc0NsYXNzZXNfLk1ETF9TUElOTkVSX0xBWUVSKTtsYXllci5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uTURMX1NQSU5ORVJfTEFZRVIrXCItXCIraW5kZXgpO3ZhciBsZWZ0Q2xpcHBlcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2xlZnRDbGlwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5Dc3NDbGFzc2VzXy5NRExfU1BJTk5FUl9DSVJDTEVfQ0xJUFBFUik7bGVmdENsaXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNzc0NsYXNzZXNfLk1ETF9TUElOTkVSX0xFRlQpO3ZhciBnYXBQYXRjaD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2dhcFBhdGNoLmNsYXNzTGlzdC5hZGQodGhpcy5Dc3NDbGFzc2VzXy5NRExfU1BJTk5FUl9HQVBfUEFUQ0gpO3ZhciByaWdodENsaXBwZXI9XG5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JpZ2h0Q2xpcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uTURMX1NQSU5ORVJfQ0lSQ0xFX0NMSVBQRVIpO3JpZ2h0Q2xpcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uTURMX1NQSU5ORVJfUklHSFQpO3ZhciBjaXJjbGVPd25lcnM9W2xlZnRDbGlwcGVyLGdhcFBhdGNoLHJpZ2h0Q2xpcHBlcl07Zm9yKHZhciBpPTA7aTxjaXJjbGVPd25lcnMubGVuZ3RoO2krKyl7dmFyIGNpcmNsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2NpcmNsZS5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uTURMX1NQSU5ORVJfQ0lSQ0xFKTtjaXJjbGVPd25lcnNbaV0uYXBwZW5kQ2hpbGQoY2lyY2xlKX1sYXllci5hcHBlbmRDaGlsZChsZWZ0Q2xpcHBlcik7bGF5ZXIuYXBwZW5kQ2hpbGQoZ2FwUGF0Y2gpO2xheWVyLmFwcGVuZENoaWxkKHJpZ2h0Q2xpcHBlcik7dGhpcy5lbGVtZW50Xy5hcHBlbmRDaGlsZChsYXllcil9O1xuTWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZVtcImNyZWF0ZUxheWVyXCJdPU1hdGVyaWFsU3Bpbm5lci5wcm90b3R5cGUuY3JlYXRlTGF5ZXI7TWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QucmVtb3ZlKFwiaXMtYWN0aXZlXCIpfTtNYXRlcmlhbFNwaW5uZXIucHJvdG90eXBlW1wic3RvcFwiXT1NYXRlcmlhbFNwaW5uZXIucHJvdG90eXBlLnN0b3A7TWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3RoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmFkZChcImlzLWFjdGl2ZVwiKX07TWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZVtcInN0YXJ0XCJdPU1hdGVyaWFsU3Bpbm5lci5wcm90b3R5cGUuc3RhcnQ7TWF0ZXJpYWxTcGlubmVyLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKCl7aWYodGhpcy5lbGVtZW50Xyl7Zm9yKHZhciBpPTE7aTw9dGhpcy5Db25zdGFudF8uTURMX1NQSU5ORVJfTEFZRVJfQ09VTlQ7aSsrKXRoaXMuY3JlYXRlTGF5ZXIoaSk7XG50aGlzLmVsZW1lbnRfLmNsYXNzTGlzdC5hZGQoXCJpcy11cGdyYWRlZFwiKX19O2NvbXBvbmVudEhhbmRsZXIucmVnaXN0ZXIoe2NvbnN0cnVjdG9yOk1hdGVyaWFsU3Bpbm5lcixjbGFzc0FzU3RyaW5nOlwiTWF0ZXJpYWxTcGlubmVyXCIsY3NzQ2xhc3M6XCJtZGwtanMtc3Bpbm5lclwiLHdpZGdldDp0cnVlfSl9KSgpOyhmdW5jdGlvbigpe3ZhciBNYXRlcmlhbFRleHRmaWVsZD1mdW5jdGlvbiBNYXRlcmlhbFRleHRmaWVsZChlbGVtZW50KXt0aGlzLmVsZW1lbnRfPWVsZW1lbnQ7dGhpcy5tYXhSb3dzPXRoaXMuQ29uc3RhbnRfLk5PX01BWF9ST1dTO3RoaXMuaW5pdCgpfTt3aW5kb3dbXCJNYXRlcmlhbFRleHRmaWVsZFwiXT1NYXRlcmlhbFRleHRmaWVsZDtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUuQ29uc3RhbnRfPXtOT19NQVhfUk9XUzotMSxNQVhfUk9XU19BVFRSSUJVVEU6XCJtYXhyb3dzXCJ9O01hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZS5Dc3NDbGFzc2VzXz17TEFCRUw6XCJtZGwtdGV4dGZpZWxkX19sYWJlbFwiLElOUFVUOlwibWRsLXRleHRmaWVsZF9faW5wdXRcIixJU19ESVJUWTpcImlzLWRpcnR5XCIsSVNfRk9DVVNFRDpcImlzLWZvY3VzZWRcIixJU19ESVNBQkxFRDpcImlzLWRpc2FibGVkXCIsSVNfSU5WQUxJRDpcImlzLWludmFsaWRcIixJU19VUEdSQURFRDpcImlzLXVwZ3JhZGVkXCIsSEFTX1BMQUNFSE9MREVSOlwiaGFzLXBsYWNlaG9sZGVyXCJ9O1xuTWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLm9uS2V5RG93bl89ZnVuY3Rpb24oZXZlbnQpe3ZhciBjdXJyZW50Um93Q291bnQ9ZXZlbnQudGFyZ2V0LnZhbHVlLnNwbGl0KFwiXFxuXCIpLmxlbmd0aDtpZihldmVudC5rZXlDb2RlPT09MTMpaWYoY3VycmVudFJvd0NvdW50Pj10aGlzLm1heFJvd3MpZXZlbnQucHJldmVudERlZmF1bHQoKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLm9uRm9jdXNfPWZ1bmN0aW9uKGV2ZW50KXt0aGlzLmVsZW1lbnRfLmNsYXNzTGlzdC5hZGQodGhpcy5Dc3NDbGFzc2VzXy5JU19GT0NVU0VEKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLm9uQmx1cl89ZnVuY3Rpb24oZXZlbnQpe3RoaXMuZWxlbWVudF8uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNzc0NsYXNzZXNfLklTX0ZPQ1VTRUQpfTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUub25SZXNldF89ZnVuY3Rpb24oZXZlbnQpe3RoaXMudXBkYXRlQ2xhc3Nlc18oKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLnVwZGF0ZUNsYXNzZXNfPVxuZnVuY3Rpb24oKXt0aGlzLmNoZWNrRGlzYWJsZWQoKTt0aGlzLmNoZWNrVmFsaWRpdHkoKTt0aGlzLmNoZWNrRGlydHkoKTt0aGlzLmNoZWNrRm9jdXMoKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLmNoZWNrRGlzYWJsZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLmlucHV0Xy5kaXNhYmxlZCl0aGlzLmVsZW1lbnRfLmNsYXNzTGlzdC5hZGQodGhpcy5Dc3NDbGFzc2VzXy5JU19ESVNBQkxFRCk7ZWxzZSB0aGlzLmVsZW1lbnRfLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5Dc3NDbGFzc2VzXy5JU19ESVNBQkxFRCl9O01hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZVtcImNoZWNrRGlzYWJsZWRcIl09TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLmNoZWNrRGlzYWJsZWQ7TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLmNoZWNrRm9jdXM9ZnVuY3Rpb24oKXtpZihCb29sZWFuKHRoaXMuZWxlbWVudF8ucXVlcnlTZWxlY3RvcihcIjpmb2N1c1wiKSkpdGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uSVNfRk9DVVNFRCk7XG5lbHNlIHRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNzc0NsYXNzZXNfLklTX0ZPQ1VTRUQpfTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGVbXCJjaGVja0ZvY3VzXCJdPU1hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZS5jaGVja0ZvY3VzO01hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZS5jaGVja1ZhbGlkaXR5PWZ1bmN0aW9uKCl7aWYodGhpcy5pbnB1dF8udmFsaWRpdHkpaWYodGhpcy5pbnB1dF8udmFsaWRpdHkudmFsaWQpdGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ3NzQ2xhc3Nlc18uSVNfSU5WQUxJRCk7ZWxzZSB0aGlzLmVsZW1lbnRfLmNsYXNzTGlzdC5hZGQodGhpcy5Dc3NDbGFzc2VzXy5JU19JTlZBTElEKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlW1wiY2hlY2tWYWxpZGl0eVwiXT1NYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUuY2hlY2tWYWxpZGl0eTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUuY2hlY2tEaXJ0eT1cbmZ1bmN0aW9uKCl7aWYodGhpcy5pbnB1dF8udmFsdWUmJnRoaXMuaW5wdXRfLnZhbHVlLmxlbmd0aD4wKXRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmFkZCh0aGlzLkNzc0NsYXNzZXNfLklTX0RJUlRZKTtlbHNlIHRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNzc0NsYXNzZXNfLklTX0RJUlRZKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlW1wiY2hlY2tEaXJ0eVwiXT1NYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUuY2hlY2tEaXJ0eTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuaW5wdXRfLmRpc2FibGVkPXRydWU7dGhpcy51cGRhdGVDbGFzc2VzXygpfTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGVbXCJkaXNhYmxlXCJdPU1hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZS5kaXNhYmxlO01hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLmlucHV0Xy5kaXNhYmxlZD1mYWxzZTtcbnRoaXMudXBkYXRlQ2xhc3Nlc18oKX07TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlW1wiZW5hYmxlXCJdPU1hdGVyaWFsVGV4dGZpZWxkLnByb3RvdHlwZS5lbmFibGU7TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLmNoYW5nZT1mdW5jdGlvbih2YWx1ZSl7dGhpcy5pbnB1dF8udmFsdWU9dmFsdWV8fFwiXCI7dGhpcy51cGRhdGVDbGFzc2VzXygpfTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGVbXCJjaGFuZ2VcIl09TWF0ZXJpYWxUZXh0ZmllbGQucHJvdG90eXBlLmNoYW5nZTtNYXRlcmlhbFRleHRmaWVsZC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe2lmKHRoaXMuZWxlbWVudF8pe3RoaXMubGFiZWxfPXRoaXMuZWxlbWVudF8ucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLkNzc0NsYXNzZXNfLkxBQkVMKTt0aGlzLmlucHV0Xz10aGlzLmVsZW1lbnRfLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrdGhpcy5Dc3NDbGFzc2VzXy5JTlBVVCk7aWYodGhpcy5pbnB1dF8pe2lmKHRoaXMuaW5wdXRfLmhhc0F0dHJpYnV0ZSh0aGlzLkNvbnN0YW50Xy5NQVhfUk9XU19BVFRSSUJVVEUpKXt0aGlzLm1heFJvd3M9XG5wYXJzZUludCh0aGlzLmlucHV0Xy5nZXRBdHRyaWJ1dGUodGhpcy5Db25zdGFudF8uTUFYX1JPV1NfQVRUUklCVVRFKSwxMCk7aWYoaXNOYU4odGhpcy5tYXhSb3dzKSl0aGlzLm1heFJvd3M9dGhpcy5Db25zdGFudF8uTk9fTUFYX1JPV1N9aWYodGhpcy5pbnB1dF8uaGFzQXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpdGhpcy5lbGVtZW50Xy5jbGFzc0xpc3QuYWRkKHRoaXMuQ3NzQ2xhc3Nlc18uSEFTX1BMQUNFSE9MREVSKTt0aGlzLmJvdW5kVXBkYXRlQ2xhc3Nlc0hhbmRsZXI9dGhpcy51cGRhdGVDbGFzc2VzXy5iaW5kKHRoaXMpO3RoaXMuYm91bmRGb2N1c0hhbmRsZXI9dGhpcy5vbkZvY3VzXy5iaW5kKHRoaXMpO3RoaXMuYm91bmRCbHVySGFuZGxlcj10aGlzLm9uQmx1cl8uYmluZCh0aGlzKTt0aGlzLmJvdW5kUmVzZXRIYW5kbGVyPXRoaXMub25SZXNldF8uYmluZCh0aGlzKTt0aGlzLmlucHV0Xy5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIix0aGlzLmJvdW5kVXBkYXRlQ2xhc3Nlc0hhbmRsZXIpO1xudGhpcy5pbnB1dF8uYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5ib3VuZEZvY3VzSGFuZGxlcik7dGhpcy5pbnB1dF8uYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIix0aGlzLmJvdW5kQmx1ckhhbmRsZXIpO3RoaXMuaW5wdXRfLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNldFwiLHRoaXMuYm91bmRSZXNldEhhbmRsZXIpO2lmKHRoaXMubWF4Um93cyE9PXRoaXMuQ29uc3RhbnRfLk5PX01BWF9ST1dTKXt0aGlzLmJvdW5kS2V5RG93bkhhbmRsZXI9dGhpcy5vbktleURvd25fLmJpbmQodGhpcyk7dGhpcy5pbnB1dF8uYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLmJvdW5kS2V5RG93bkhhbmRsZXIpfXZhciBpbnZhbGlkPXRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuQ3NzQ2xhc3Nlc18uSVNfSU5WQUxJRCk7dGhpcy51cGRhdGVDbGFzc2VzXygpO3RoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmFkZCh0aGlzLkNzc0NsYXNzZXNfLklTX1VQR1JBREVEKTtpZihpbnZhbGlkKXRoaXMuZWxlbWVudF8uY2xhc3NMaXN0LmFkZCh0aGlzLkNzc0NsYXNzZXNfLklTX0lOVkFMSUQpO1xuaWYodGhpcy5pbnB1dF8uaGFzQXR0cmlidXRlKFwiYXV0b2ZvY3VzXCIpKXt0aGlzLmVsZW1lbnRfLmZvY3VzKCk7dGhpcy5jaGVja0ZvY3VzKCl9fX19O2NvbXBvbmVudEhhbmRsZXIucmVnaXN0ZXIoe2NvbnN0cnVjdG9yOk1hdGVyaWFsVGV4dGZpZWxkLGNsYXNzQXNTdHJpbmc6XCJNYXRlcmlhbFRleHRmaWVsZFwiLGNzc0NsYXNzOlwibWRsLWpzLXRleHRmaWVsZFwiLHdpZGdldDp0cnVlfSl9KSgpOyhmdW5jdGlvbigpe3ZhciBsLGFhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5jcmVhdGU/T2JqZWN0LmNyZWF0ZTpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWIucHJvdG90eXBlPWE7cmV0dXJuIG5ldyBifSxiYTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YpYmE9T2JqZWN0LnNldFByb3RvdHlwZU9mO2Vsc2V7dmFyIGNhO2E6e3ZhciBkYT17eGI6ITB9LGVhPXt9O3RyeXtlYS5fX3Byb3RvX189ZGE7Y2E9ZWEueGI7YnJlYWsgYX1jYXRjaChhKXt9Y2E9ITF9YmE9Y2E/ZnVuY3Rpb24oYSxiKXthLl9fcHJvdG9fXz1iO2lmKGEuX19wcm90b19fIT09Yil0aHJvdyBuZXcgVHlwZUVycm9yKGErXCIgaXMgbm90IGV4dGVuc2libGVcIik7cmV0dXJuIGF9Om51bGx9dmFyIGZhPWJhO2Z1bmN0aW9uIG0oYSxiKXthLnByb3RvdHlwZT1hYShiLnByb3RvdHlwZSk7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTtpZihmYSlmYShhLGIpO2Vsc2UgZm9yKHZhciBjIGluIGIpaWYoXCJwcm90b3R5cGVcIiE9XG5jKWlmKE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKXt2YXIgZD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGIsYyk7ZCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYyxkKX1lbHNlIGFbY109YltjXTthLks9Yi5wcm90b3R5cGV9dmFyIGhhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihhLGIsYyl7YSE9QXJyYXkucHJvdG90eXBlJiZhIT1PYmplY3QucHJvdG90eXBlJiYoYVtiXT1jLnZhbHVlKX0saWE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93PT09dGhpcz90aGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJm51bGwhPWdsb2JhbD9nbG9iYWw6dGhpcztmdW5jdGlvbiBqYShhLGIpe2lmKGIpe3ZhciBjPWlhO2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aC0xO2QrKyl7dmFyIGU9YVtkXTtlIGluIGN8fChjW2VdPXt9KTtjPWNbZV19YT1hW2EubGVuZ3RoLVxuMV07ZD1jW2FdO2I9YihkKTtiIT1kJiZudWxsIT1iJiZoYShjLGEse2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpifSl9fWphKFwiT2JqZWN0LmlzXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGE/YTpmdW5jdGlvbihiLGMpe3JldHVybiBiPT09Yz8wIT09Ynx8MS9iPT09MS9jOmIhPT1iJiZjIT09Y319KTtqYShcIkFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1wiLGZ1bmN0aW9uKGEpe3JldHVybiBhP2E6ZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzO2QgaW5zdGFuY2VvZiBTdHJpbmcmJihkPVN0cmluZyhkKSk7dmFyIGU9ZC5sZW5ndGg7Yz1jfHwwO2ZvcigwPmMmJihjPU1hdGgubWF4KGMrZSwwKSk7YzxlO2MrKyl7dmFyIGY9ZFtjXTtpZihmPT09Ynx8T2JqZWN0LmlzKGYsYikpcmV0dXJuITB9cmV0dXJuITF9fSk7dmFyIG49dGhpcztmdW5jdGlvbiBrYShhKXtyZXR1cm4gdm9pZCAwIT09YX1mdW5jdGlvbiBxKGEpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBhfXZhciBsYT0vXltcXHcrL18tXStbPV17MCwyfSQvLFxubWE9bnVsbDtmdW5jdGlvbiBuYSgpe31mdW5jdGlvbiBvYShhKXthLlc9dm9pZCAwO2EuWGE9ZnVuY3Rpb24oKXtyZXR1cm4gYS5XP2EuVzphLlc9bmV3IGF9fWZ1bmN0aW9uIHBhKGEpe3ZhciBiPXR5cGVvZiBhO2lmKFwib2JqZWN0XCI9PWIpaWYoYSl7aWYoYSBpbnN0YW5jZW9mIEFycmF5KXJldHVyblwiYXJyYXlcIjtpZihhIGluc3RhbmNlb2YgT2JqZWN0KXJldHVybiBiO3ZhciBjPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKTtpZihcIltvYmplY3QgV2luZG93XVwiPT1jKXJldHVyblwib2JqZWN0XCI7aWYoXCJbb2JqZWN0IEFycmF5XVwiPT1jfHxcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGgmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnNwbGljZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUmJiFhLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwic3BsaWNlXCIpKXJldHVyblwiYXJyYXlcIjtpZihcIltvYmplY3QgRnVuY3Rpb25dXCI9PWN8fFwidW5kZWZpbmVkXCIhPVxudHlwZW9mIGEuY2FsbCYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEucHJvcGVydHlJc0VudW1lcmFibGUmJiFhLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwiY2FsbFwiKSlyZXR1cm5cImZ1bmN0aW9uXCJ9ZWxzZSByZXR1cm5cIm51bGxcIjtlbHNlIGlmKFwiZnVuY3Rpb25cIj09YiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuY2FsbClyZXR1cm5cIm9iamVjdFwiO3JldHVybiBifWZ1bmN0aW9uIHFhKGEpe3JldHVyblwiYXJyYXlcIj09cGEoYSl9ZnVuY3Rpb24gcmEoYSl7dmFyIGI9cGEoYSk7cmV0dXJuXCJhcnJheVwiPT1ifHxcIm9iamVjdFwiPT1iJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGh9ZnVuY3Rpb24gc2EoYSl7cmV0dXJuXCJmdW5jdGlvblwiPT1wYShhKX1mdW5jdGlvbiB0YShhKXt2YXIgYj10eXBlb2YgYTtyZXR1cm5cIm9iamVjdFwiPT1iJiZudWxsIT1hfHxcImZ1bmN0aW9uXCI9PWJ9dmFyIHVhPVwiY2xvc3VyZV91aWRfXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCksdmE9MDtmdW5jdGlvbiB3YShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsXG5hcmd1bWVudHMpfWZ1bmN0aW9uIHhhKGEsYixjKXtpZighYSl0aHJvdyBFcnJvcigpO2lmKDI8YXJndW1lbnRzLmxlbmd0aCl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoZSxkKTtyZXR1cm4gYS5hcHBseShiLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShiLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHIoYSxiLGMpe0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/cj13YTpyPXhhO3JldHVybiByLmFwcGx5KG51bGwsYXJndW1lbnRzKX1mdW5jdGlvbiB6YShhLGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1cbmMuc2xpY2UoKTtkLnB1c2guYXBwbHkoZCxhcmd1bWVudHMpO3JldHVybiBhLmFwcGx5KHRoaXMsZCl9fWZ1bmN0aW9uIHUoYSxiKXtmb3IodmFyIGMgaW4gYilhW2NdPWJbY119dmFyIEFhPURhdGUubm93fHxmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX07ZnVuY3Rpb24gdihhLGIpe2E9YS5zcGxpdChcIi5cIik7dmFyIGM9bjthWzBdaW4gY3x8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGMuZXhlY1NjcmlwdHx8Yy5leGVjU2NyaXB0KFwidmFyIFwiK2FbMF0pO2Zvcih2YXIgZDthLmxlbmd0aCYmKGQ9YS5zaGlmdCgpKTspIWEubGVuZ3RoJiZrYShiKT9jW2RdPWI6Y1tkXSYmY1tkXSE9PU9iamVjdC5wcm90b3R5cGVbZF0/Yz1jW2RdOmM9Y1tkXT17fX1mdW5jdGlvbiB3KGEsYil7ZnVuY3Rpb24gYygpe31jLnByb3RvdHlwZT1iLnByb3RvdHlwZTthLks9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YTthLnZjPWZ1bmN0aW9uKGQsZSxmKXtmb3IodmFyIGc9XG5BcnJheShhcmd1bWVudHMubGVuZ3RoLTIpLGg9MjtoPGFyZ3VtZW50cy5sZW5ndGg7aCsrKWdbaC0yXT1hcmd1bWVudHNbaF07cmV0dXJuIGIucHJvdG90eXBlW2VdLmFwcGx5KGQsZyl9fWZ1bmN0aW9uIEJhKGEpe2lmKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKUVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsQmEpO2Vsc2V7dmFyIGI9RXJyb3IoKS5zdGFjaztiJiYodGhpcy5zdGFjaz1iKX1hJiYodGhpcy5tZXNzYWdlPVN0cmluZyhhKSl9dyhCYSxFcnJvcik7QmEucHJvdG90eXBlLm5hbWU9XCJDdXN0b21FcnJvclwiO3ZhciBEYTtmdW5jdGlvbiBFYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTtCYS5jYWxsKHRoaXMsYythW2RdKX13KEVhLEJhKTtFYS5wcm90b3R5cGUubmFtZT1cIkFzc2VydGlvbkVycm9yXCI7ZnVuY3Rpb24gRmEoYSxiKXt0aHJvdyBuZXcgRWEoXCJGYWlsdXJlXCIrXG4oYT9cIjogXCIrYTpcIlwiKSxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpO312YXIgR2E9QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhLGIsdm9pZCAwKX06ZnVuY3Rpb24oYSxiKXtpZihxKGEpKXJldHVybiBxKGIpJiYxPT1iLmxlbmd0aD9hLmluZGV4T2YoYiwwKTotMTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylpZihjIGluIGEmJmFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSxIYT1BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1xKGEpP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxkO2YrKylmIGluIGUmJmIuY2FsbChjLGVbZl0sZixhKX07ZnVuY3Rpb24gSWEoYSxiKXtmb3IodmFyIGM9cShhKT9hLnNwbGl0KFwiXCIpOlxuYSxkPWEubGVuZ3RoLTE7MDw9ZDstLWQpZCBpbiBjJiZiLmNhbGwodm9pZCAwLGNbZF0sZCxhKX12YXIgSmE9QXJyYXkucHJvdG90eXBlLmZpbHRlcj9mdW5jdGlvbihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sZT0wLGY9cShhKT9hLnNwbGl0KFwiXCIpOmEsZz0wO2c8YztnKyspaWYoZyBpbiBmKXt2YXIgaD1mW2ddO2IuY2FsbCh2b2lkIDAsaCxnLGEpJiYoZFtlKytdPWgpfXJldHVybiBkfSxLYT1BcnJheS5wcm90b3R5cGUubWFwP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhLGIsdm9pZCAwKX06ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9YS5sZW5ndGgsZD1BcnJheShjKSxlPXEoYSk/YS5zcGxpdChcIlwiKTphLGY9MDtmPGM7ZisrKWYgaW4gZSYmKGRbZl09Yi5jYWxsKHZvaWQgMCxlW2ZdLGYsYSkpO3JldHVybiBkfSxMYT1BcnJheS5wcm90b3R5cGUuc29tZT9cbmZ1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9cShhKT9hLnNwbGl0KFwiXCIpOmEsZT0wO2U8YztlKyspaWYoZSBpbiBkJiZiLmNhbGwodm9pZCAwLGRbZV0sZSxhKSlyZXR1cm4hMDtyZXR1cm4hMX07ZnVuY3Rpb24gTWEoYSxiKXtyZXR1cm4gMDw9R2EoYSxiKX1mdW5jdGlvbiBOYShhLGIpe2I9R2EoYSxiKTt2YXIgYzsoYz0wPD1iKSYmT2EoYSxiKTtyZXR1cm4gY31mdW5jdGlvbiBPYShhLGIpe3JldHVybiAxPT1BcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYSxiLDEpLmxlbmd0aH1mdW5jdGlvbiBQYShhLGIpe2E6e2Zvcih2YXIgYz1hLmxlbmd0aCxkPXEoYSk/YS5zcGxpdChcIlwiKTphLGU9MDtlPGM7ZSsrKWlmKGUgaW4gZCYmYi5jYWxsKHZvaWQgMCxkW2VdLGUsYSkpe2I9ZTticmVhayBhfWI9LTF9MDw9YiYmT2EoYSxiKX1mdW5jdGlvbiBRYShhLGIpe3ZhciBjPVxuMDtJYShhLGZ1bmN0aW9uKGQsZSl7Yi5jYWxsKHZvaWQgMCxkLGUsYSkmJk9hKGEsZSkmJmMrK30pfWZ1bmN0aW9uIFJhKGEpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGFyZ3VtZW50cyl9ZnVuY3Rpb24gU2EoYSl7dmFyIGI9YS5sZW5ndGg7aWYoMDxiKXtmb3IodmFyIGM9QXJyYXkoYiksZD0wO2Q8YjtkKyspY1tkXT1hW2RdO3JldHVybiBjfXJldHVybltdfWZ1bmN0aW9uIFRhKGEsYixjKXtyZXR1cm4gMj49YXJndW1lbnRzLmxlbmd0aD9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhLGIpOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEsYixjKX12YXIgVWE9U3RyaW5nLnByb3RvdHlwZS50cmltP2Z1bmN0aW9uKGEpe3JldHVybiBhLnRyaW0oKX06ZnVuY3Rpb24oYSl7cmV0dXJuL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhhKVsxXX0sVmE9LyYvZyxXYT0vPC9nLFhhPS8+L2csWWE9L1wiL2csWmE9LycvZywkYT0vXFx4MDAvZyxcbmFiPS9bXFx4MDAmPD5cIiddLztmdW5jdGlvbiBiYihhLGIpe3JldHVybiBhPGI/LTE6YT5iPzE6MH1mdW5jdGlvbiBjYihhKXthYi50ZXN0KGEpJiYoLTEhPWEuaW5kZXhPZihcIiZcIikmJihhPWEucmVwbGFjZShWYSxcIiZhbXA7XCIpKSwtMSE9YS5pbmRleE9mKFwiPFwiKSYmKGE9YS5yZXBsYWNlKFdhLFwiJmx0O1wiKSksLTEhPWEuaW5kZXhPZihcIj5cIikmJihhPWEucmVwbGFjZShYYSxcIiZndDtcIikpLC0xIT1hLmluZGV4T2YoJ1wiJykmJihhPWEucmVwbGFjZShZYSxcIiZxdW90O1wiKSksLTEhPWEuaW5kZXhPZihcIidcIikmJihhPWEucmVwbGFjZShaYSxcIiYjMzk7XCIpKSwtMSE9YS5pbmRleE9mKFwiXFx4MDBcIikmJihhPWEucmVwbGFjZSgkYSxcIiYjMDtcIikpKTtyZXR1cm4gYX1mdW5jdGlvbiBkYihhLGIsYyl7Zm9yKHZhciBkIGluIGEpYi5jYWxsKGMsYVtkXSxkLGEpfWZ1bmN0aW9uIGViKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSliW2NdPWFbY107cmV0dXJuIGJ9dmFyIGZiPVwiY29uc3RydWN0b3IgaGFzT3duUHJvcGVydHkgaXNQcm90b3R5cGVPZiBwcm9wZXJ0eUlzRW51bWVyYWJsZSB0b0xvY2FsZVN0cmluZyB0b1N0cmluZyB2YWx1ZU9mXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZ2IoYSxiKXtmb3IodmFyIGMsZCxlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7ZD1hcmd1bWVudHNbZV07Zm9yKGMgaW4gZClhW2NdPWRbY107Zm9yKHZhciBmPTA7ZjxmYi5sZW5ndGg7ZisrKWM9ZmJbZl0sT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsYykmJihhW2NdPWRbY10pfX12YXIgaGI9XCJTdG9wSXRlcmF0aW9uXCJpbiBuP24uU3RvcEl0ZXJhdGlvbjp7bWVzc2FnZTpcIlN0b3BJdGVyYXRpb25cIixzdGFjazpcIlwifTtmdW5jdGlvbiBpYigpe31pYi5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3Rocm93IGhiO307aWIucHJvdG90eXBlLmhhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIGpiKGEpe2lmKGEgaW5zdGFuY2VvZiBpYilyZXR1cm4gYTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmhhKXJldHVybiBhLmhhKCExKTtpZihyYShhKSl7dmFyIGI9MCxjPW5ldyBpYjtjLm5leHQ9ZnVuY3Rpb24oKXtmb3IoOzspe2lmKGI+PVxuYS5sZW5ndGgpdGhyb3cgaGI7aWYoYiBpbiBhKXJldHVybiBhW2IrK107YisrfX07cmV0dXJuIGN9dGhyb3cgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7fWZ1bmN0aW9uIGtiKGEsYil7aWYocmEoYSkpdHJ5e0hhKGEsYix2b2lkIDApfWNhdGNoKGMpe2lmKGMhPT1oYil0aHJvdyBjO31lbHNle2E9amIoYSk7dHJ5e2Zvcig7OyliLmNhbGwodm9pZCAwLGEubmV4dCgpLHZvaWQgMCxhKX1jYXRjaChjJDEpe2lmKGMkMSE9PWhiKXRocm93IGMkMTt9fX1mdW5jdGlvbiBsYihhKXtpZihyYShhKSlyZXR1cm4gU2EoYSk7YT1qYihhKTt2YXIgYj1bXTtrYihhLGZ1bmN0aW9uKGMpe2IucHVzaChjKX0pO3JldHVybiBifWZ1bmN0aW9uIG1iKGEsYil7dGhpcy5nPXt9O3RoaXMuYT1bXTt0aGlzLmo9dGhpcy5oPTA7dmFyIGM9YXJndW1lbnRzLmxlbmd0aDtpZigxPGMpe2lmKGMlMil0aHJvdyBFcnJvcihcIlVuZXZlbiBudW1iZXIgb2YgYXJndW1lbnRzXCIpO2Zvcih2YXIgZD0wO2Q8YztkKz0yKXRoaXMuc2V0KGFyZ3VtZW50c1tkXSxcbmFyZ3VtZW50c1tkKzFdKX1lbHNlIGlmKGEpaWYoYSBpbnN0YW5jZW9mIG1iKWZvcihjPWEuamEoKSxkPTA7ZDxjLmxlbmd0aDtkKyspdGhpcy5zZXQoY1tkXSxhLmdldChjW2RdKSk7ZWxzZSBmb3IoZCBpbiBhKXRoaXMuc2V0KGQsYVtkXSl9bD1tYi5wcm90b3R5cGU7bC5sYT1mdW5jdGlvbigpe25iKHRoaXMpO2Zvcih2YXIgYT1bXSxiPTA7Yjx0aGlzLmEubGVuZ3RoO2IrKylhLnB1c2godGhpcy5nW3RoaXMuYVtiXV0pO3JldHVybiBhfTtsLmphPWZ1bmN0aW9uKCl7bmIodGhpcyk7cmV0dXJuIHRoaXMuYS5jb25jYXQoKX07bC5jbGVhcj1mdW5jdGlvbigpe3RoaXMuZz17fTt0aGlzLmo9dGhpcy5oPXRoaXMuYS5sZW5ndGg9MH07ZnVuY3Rpb24gbmIoYSl7aWYoYS5oIT1hLmEubGVuZ3RoKXtmb3IodmFyIGI9MCxjPTA7YjxhLmEubGVuZ3RoOyl7dmFyIGQ9YS5hW2JdO29iKGEuZyxkKSYmKGEuYVtjKytdPWQpO2IrK31hLmEubGVuZ3RoPWN9aWYoYS5oIT1hLmEubGVuZ3RoKXt2YXIgZT1cbnt9O2ZvcihjPWI9MDtiPGEuYS5sZW5ndGg7KWQ9YS5hW2JdLG9iKGUsZCl8fChhLmFbYysrXT1kLGVbZF09MSksYisrO2EuYS5sZW5ndGg9Y319bC5nZXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gb2IodGhpcy5nLGEpP3RoaXMuZ1thXTpifTtsLnNldD1mdW5jdGlvbihhLGIpe29iKHRoaXMuZyxhKXx8KHRoaXMuaCsrLHRoaXMuYS5wdXNoKGEpLHRoaXMuaisrKTt0aGlzLmdbYV09Yn07bC5mb3JFYWNoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuamEoKSxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj10aGlzLmdldChlKTthLmNhbGwoYixmLGUsdGhpcyl9fTtsLmhhPWZ1bmN0aW9uKGEpe25iKHRoaXMpO3ZhciBiPTAsYz10aGlzLmosZD10aGlzLGU9bmV3IGliO2UubmV4dD1mdW5jdGlvbigpe2lmKGMhPWQuail0aHJvdyBFcnJvcihcIlRoZSBtYXAgaGFzIGNoYW5nZWQgc2luY2UgdGhlIGl0ZXJhdG9yIHdhcyBjcmVhdGVkXCIpO2lmKGI+PWQuYS5sZW5ndGgpdGhyb3cgaGI7XG52YXIgZj1kLmFbYisrXTtyZXR1cm4gYT9mOmQuZ1tmXX07cmV0dXJuIGV9O2Z1bmN0aW9uIG9iKGEsYil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGIpfXZhciBwYj0vXig/OihbXjovPyMuXSspOik/KD86XFwvXFwvKD86KFteLz8jXSopQCk/KFteLyM/XSo/KSg/OjooWzAtOV0rKSk/KD89Wy8jP118JCkpPyhbXj8jXSspPyg/OlxcPyhbXiNdKikpPyg/OiMoW1xcc1xcU10qKSk/JC87ZnVuY3Rpb24gcWIoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKX1lbHNlIGY9YVtjXTtiKGYsZT9kZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpOlwiXCIpfX19ZnVuY3Rpb24gcmIoYSxiLGMsZCl7Zm9yKHZhciBlPWMubGVuZ3RoOzA8PShiPVxuYS5pbmRleE9mKGMsYikpJiZiPGQ7KXt2YXIgZj1hLmNoYXJDb2RlQXQoYi0xKTtpZigzOD09Znx8NjM9PWYpaWYoZj1hLmNoYXJDb2RlQXQoYitlKSwhZnx8NjE9PWZ8fDM4PT1mfHwzNT09ZilyZXR1cm4gYjtiKz1lKzF9cmV0dXJuLTF9dmFyIHNiPS8jfCQvO2Z1bmN0aW9uIHRiKGEsYil7dmFyIGM9YS5zZWFyY2goc2IpLGQ9cmIoYSwwLGIsYyk7aWYoMD5kKXJldHVybiBudWxsO3ZhciBlPWEuaW5kZXhPZihcIiZcIixkKTtpZigwPmV8fGU+YyllPWM7ZCs9Yi5sZW5ndGgrMTtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGEuc3Vic3RyKGQsZS1kKS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpfXZhciB1Yj0vWz8mXSgkfCMpLztmdW5jdGlvbiB2YihhLGIpe3RoaXMuaD10aGlzLkE9dGhpcy5qPVwiXCI7dGhpcy5DPW51bGw7dGhpcy5zPXRoaXMuZz1cIlwiO3RoaXMuaT0hMTt2YXIgYzthIGluc3RhbmNlb2YgdmI/KHRoaXMuaT1rYShiKT9iOmEuaSx3Yih0aGlzLGEuaiksdGhpcy5BPWEuQSx0aGlzLmg9XG5hLmgseGIodGhpcyxhLkMpLHRoaXMuZz1hLmcseWIodGhpcyx6YihhLmEpKSx0aGlzLnM9YS5zKTphJiYoYz1TdHJpbmcoYSkubWF0Y2gocGIpKT8odGhpcy5pPSEhYix3Yih0aGlzLGNbMV18fFwiXCIsITApLHRoaXMuQT1BYihjWzJdfHxcIlwiKSx0aGlzLmg9QWIoY1szXXx8XCJcIiwhMCkseGIodGhpcyxjWzRdKSx0aGlzLmc9QWIoY1s1XXx8XCJcIiwhMCkseWIodGhpcyxjWzZdfHxcIlwiLCEwKSx0aGlzLnM9QWIoY1s3XXx8XCJcIikpOih0aGlzLmk9ISFiLHRoaXMuYT1uZXcgQmIobnVsbCx0aGlzLmkpKX12Yi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgYT1bXSxiPXRoaXMuajtiJiZhLnB1c2goQ2IoYixEYiwhMCksXCI6XCIpO3ZhciBjPXRoaXMuaDtpZihjfHxcImZpbGVcIj09YilhLnB1c2goXCIvL1wiKSwoYj10aGlzLkEpJiZhLnB1c2goQ2IoYixEYiwhMCksXCJAXCIpLGEucHVzaChlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGMpKS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXG5cIiUkMVwiKSksYz10aGlzLkMsbnVsbCE9YyYmYS5wdXNoKFwiOlwiLFN0cmluZyhjKSk7aWYoYz10aGlzLmcpdGhpcy5oJiZcIi9cIiE9Yy5jaGFyQXQoMCkmJmEucHVzaChcIi9cIiksYS5wdXNoKENiKGMsXCIvXCI9PWMuY2hhckF0KDApP0ViOkZiLCEwKSk7KGM9dGhpcy5hLnRvU3RyaW5nKCkpJiZhLnB1c2goXCI/XCIsYyk7KGM9dGhpcy5zKSYmYS5wdXNoKFwiI1wiLENiKGMsR2IpKTtyZXR1cm4gYS5qb2luKFwiXCIpfTtmdW5jdGlvbiB3YihhLGIsYyl7YS5qPWM/QWIoYiwhMCk6YjthLmomJihhLmo9YS5qLnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24geGIoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2EuQz1ifWVsc2UgYS5DPW51bGx9ZnVuY3Rpb24geWIoYSxiLGMpe2IgaW5zdGFuY2VvZiBCYj8oYS5hPWIsSGIoYS5hLGEuaSkpOihjfHwoYj1DYihiLEliKSksYS5hPW5ldyBCYihiLGEuaSkpfWZ1bmN0aW9uIEpiKGEpe3JldHVybiBhIGluc3RhbmNlb2ZcbnZiP25ldyB2YihhKTpuZXcgdmIoYSx2b2lkIDApfWZ1bmN0aW9uIEFiKGEsYil7cmV0dXJuIGE/Yj9kZWNvZGVVUkkoYS5yZXBsYWNlKC8lMjUvZyxcIiUyNTI1XCIpKTpkZWNvZGVVUklDb21wb25lbnQoYSk6XCJcIn1mdW5jdGlvbiBDYihhLGIsYyl7cmV0dXJuIHEoYSk/KGE9ZW5jb2RlVVJJKGEpLnJlcGxhY2UoYixLYiksYyYmKGE9YS5yZXBsYWNlKC8lMjUoWzAtOWEtZkEtRl17Mn0pL2csXCIlJDFcIikpLGEpOm51bGx9ZnVuY3Rpb24gS2IoYSl7YT1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuXCIlXCIrKGE+PjQmMTUpLnRvU3RyaW5nKDE2KSsoYSYxNSkudG9TdHJpbmcoMTYpfXZhciBEYj0vWyNcXC9cXD9AXS9nLEZiPS9bI1xcPzpdL2csRWI9L1sjXFw/XS9nLEliPS9bI1xcP0BdL2csR2I9LyMvZztmdW5jdGlvbiBCYihhLGIpe3RoaXMuZz10aGlzLmE9bnVsbDt0aGlzLmg9YXx8bnVsbDt0aGlzLmo9ISFifWZ1bmN0aW9uIExiKGEpe2EuYXx8KGEuYT1uZXcgbWIsYS5nPTAsYS5oJiZxYihhLmgsZnVuY3Rpb24oYixcbmMpe2EuYWRkKGRlY29kZVVSSUNvbXBvbmVudChiLnJlcGxhY2UoL1xcKy9nLFwiIFwiKSksYyl9KSl9bD1CYi5wcm90b3R5cGU7bC5hZGQ9ZnVuY3Rpb24oYSxiKXtMYih0aGlzKTt0aGlzLmg9bnVsbDthPU1iKHRoaXMsYSk7dmFyIGM9dGhpcy5hLmdldChhKTtjfHx0aGlzLmEuc2V0KGEsYz1bXSk7Yy5wdXNoKGIpO3RoaXMuZys9MTtyZXR1cm4gdGhpc307ZnVuY3Rpb24gTmIoYSxiKXtMYihhKTtiPU1iKGEsYik7b2IoYS5hLmcsYikmJihhLmg9bnVsbCxhLmctPWEuYS5nZXQoYikubGVuZ3RoLGE9YS5hLG9iKGEuZyxiKSYmKGRlbGV0ZSBhLmdbYl0sYS5oLS0sYS5qKyssYS5hLmxlbmd0aD4yKmEuaCYmbmIoYSkpKX1sLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hPXRoaXMuaD1udWxsO3RoaXMuZz0wfTtmdW5jdGlvbiBPYihhLGIpe0xiKGEpO2I9TWIoYSxiKTtyZXR1cm4gb2IoYS5hLmcsYil9bC5mb3JFYWNoPWZ1bmN0aW9uKGEsYil7TGIodGhpcyk7dGhpcy5hLmZvckVhY2goZnVuY3Rpb24oYyxcbmQpe0hhKGMsZnVuY3Rpb24oZSl7YS5jYWxsKGIsZSxkLHRoaXMpfSx0aGlzKX0sdGhpcyl9O2wuamE9ZnVuY3Rpb24oKXtMYih0aGlzKTtmb3IodmFyIGE9dGhpcy5hLmxhKCksYj10aGlzLmEuamEoKSxjPVtdLGQ9MDtkPGIubGVuZ3RoO2QrKylmb3IodmFyIGU9YVtkXSxmPTA7ZjxlLmxlbmd0aDtmKyspYy5wdXNoKGJbZF0pO3JldHVybiBjfTtsLmxhPWZ1bmN0aW9uKGEpe0xiKHRoaXMpO3ZhciBiPVtdO2lmKHEoYSkpT2IodGhpcyxhKSYmKGI9UmEoYix0aGlzLmEuZ2V0KE1iKHRoaXMsYSkpKSk7ZWxzZXthPXRoaXMuYS5sYSgpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKWI9UmEoYixhW2NdKX1yZXR1cm4gYn07bC5zZXQ9ZnVuY3Rpb24oYSxiKXtMYih0aGlzKTt0aGlzLmg9bnVsbDthPU1iKHRoaXMsYSk7T2IodGhpcyxhKSYmKHRoaXMuZy09dGhpcy5hLmdldChhKS5sZW5ndGgpO3RoaXMuYS5zZXQoYSxbYl0pO3RoaXMuZys9MTtyZXR1cm4gdGhpc307bC5nZXQ9ZnVuY3Rpb24oYSxcbmIpe2lmKCFhKXJldHVybiBiO2E9dGhpcy5sYShhKTtyZXR1cm4gMDxhLmxlbmd0aD9TdHJpbmcoYVswXSk6Yn07bC50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMuaClyZXR1cm4gdGhpcy5oO2lmKCF0aGlzLmEpcmV0dXJuXCJcIjtmb3IodmFyIGE9W10sYj10aGlzLmEuamEoKSxjPTA7YzxiLmxlbmd0aDtjKyspe3ZhciBkPWJbY10sZT1lbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGQpKTtkPXRoaXMubGEoZCk7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciBnPWU7XCJcIiE9PWRbZl0mJihnKz1cIj1cIitlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGRbZl0pKSk7YS5wdXNoKGcpfX1yZXR1cm4gdGhpcy5oPWEuam9pbihcIiZcIil9O2Z1bmN0aW9uIHpiKGEpe3ZhciBiPW5ldyBCYjtiLmg9YS5oO2EuYSYmKGIuYT1uZXcgbWIoYS5hKSxiLmc9YS5nKTtyZXR1cm4gYn1mdW5jdGlvbiBNYihhLGIpe2I9U3RyaW5nKGIpO2EuaiYmKGI9Yi50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYn1mdW5jdGlvbiBIYihhLFxuYil7YiYmIWEuaiYmKExiKGEpLGEuaD1udWxsLGEuYS5mb3JFYWNoKGZ1bmN0aW9uKGMsZCl7dmFyIGU9ZC50b0xvd2VyQ2FzZSgpO2QhPWUmJihOYih0aGlzLGQpLE5iKHRoaXMsZSksMDxjLmxlbmd0aCYmKHRoaXMuaD1udWxsLHRoaXMuYS5zZXQoTWIodGhpcyxlKSxTYShjKSksdGhpcy5nKz1jLmxlbmd0aCkpfSxhKSk7YS5qPWJ9ZnVuY3Rpb24gUGIoYSl7dGhpcy5hPUpiKGEpfWZ1bmN0aW9uIFFiKGEsYil7Yj9hLmEuYS5zZXQoeC5TYSxiKTpOYihhLmEuYSx4LlNhKX1mdW5jdGlvbiBSYihhLGIpe251bGwhPT1iP2EuYS5hLnNldCh4LlFhLGI/XCIxXCI6XCIwXCIpOk5iKGEuYS5hLHguUWEpfWZ1bmN0aW9uIFNiKGEpe3JldHVybiBhLmEuYS5nZXQoeC5QYSl8fG51bGx9ZnVuY3Rpb24gVGIoYSxiKXtiP2EuYS5hLnNldCh4LlBST1ZJREVSX0lELGIpOk5iKGEuYS5hLHguUFJPVklERVJfSUQpfVBiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07XG52YXIgeD17UGE6XCJ1aV9hdWlkXCIsbGM6XCJhcGlLZXlcIixRYTpcInVpX3NkXCIsdWI6XCJtb2RlXCIsJGE6XCJvb2JDb2RlXCIsUFJPVklERVJfSUQ6XCJ1aV9waWRcIixTYTpcInVpX3NpZFwiLHZiOlwidGVuYW50SWRcIn07dmFyIFViO2E6e3ZhciBWYj1uLm5hdmlnYXRvcjtpZihWYil7dmFyIFdiPVZiLnVzZXJBZ2VudDtpZihXYil7VWI9V2I7YnJlYWsgYX19VWI9XCJcIn1mdW5jdGlvbiB5KGEpe3JldHVybi0xIT1VYi5pbmRleE9mKGEpfWZ1bmN0aW9uIFhiKCl7cmV0dXJuKHkoXCJDaHJvbWVcIil8fHkoXCJDcmlPU1wiKSkmJiF5KFwiRWRnZVwiKX1mdW5jdGlvbiBZYihhKXtZYltcIiBcIl0oYSk7cmV0dXJuIGF9WWJbXCIgXCJdPW5hO2Z1bmN0aW9uIFpiKGEsYil7dmFyIGM9JGI7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjLGEpP2NbYV06Y1thXT1iKGEpfXZhciBhYz15KFwiT3BlcmFcIiksej15KFwiVHJpZGVudFwiKXx8eShcIk1TSUVcIiksYmM9eShcIkVkZ2VcIiksY2M9YmN8fHosZGM9eShcIkdlY2tvXCIpJiZcbiEoLTEhPVViLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIndlYmtpdFwiKSYmIXkoXCJFZGdlXCIpKSYmISh5KFwiVHJpZGVudFwiKXx8eShcIk1TSUVcIikpJiYheShcIkVkZ2VcIiksZWM9LTEhPVViLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcIndlYmtpdFwiKSYmIXkoXCJFZGdlXCIpLGZjPWVjJiZ5KFwiTW9iaWxlXCIpLGdjPXkoXCJNYWNpbnRvc2hcIik7ZnVuY3Rpb24gaGMoKXt2YXIgYT1uLmRvY3VtZW50O3JldHVybiBhP2EuZG9jdW1lbnRNb2RlOnZvaWQgMH12YXIgaWM7YTp7dmFyIGpjPVwiXCIsa2M9ZnVuY3Rpb24oKXt2YXIgYT1VYjtpZihkYylyZXR1cm4vcnY6KFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoYmMpcmV0dXJuL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZih6KXJldHVybi9cXGIoPzpNU0lFfHJ2KVs6IF0oW15cXCk7XSspKFxcKXw7KS8uZXhlYyhhKTtpZihlYylyZXR1cm4vV2ViS2l0XFwvKFxcUyspLy5leGVjKGEpO2lmKGFjKXJldHVybi8oPzpWZXJzaW9uKVsgXFwvXT8oXFxTKykvLmV4ZWMoYSl9KCk7XG5rYyYmKGpjPWtjP2tjWzFdOlwiXCIpO2lmKHope3ZhciBsYz1oYygpO2lmKG51bGwhPWxjJiZsYz5wYXJzZUZsb2F0KGpjKSl7aWM9U3RyaW5nKGxjKTticmVhayBhfX1pYz1qY312YXIgJGI9e307ZnVuY3Rpb24gbWMoYSl7cmV0dXJuIFpiKGEsZnVuY3Rpb24oKXtmb3IodmFyIGI9MCxjPVVhKFN0cmluZyhpYykpLnNwbGl0KFwiLlwiKSxkPVVhKFN0cmluZyhhKSkuc3BsaXQoXCIuXCIpLGU9TWF0aC5tYXgoYy5sZW5ndGgsZC5sZW5ndGgpLGY9MDswPT1iJiZmPGU7ZisrKXt2YXIgZz1jW2ZdfHxcIlwiLGg9ZFtmXXx8XCJcIjtkb3tnPS8oXFxkKikoXFxEKikoLiopLy5leGVjKGcpfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07aD0vKFxcZCopKFxcRCopKC4qKS8uZXhlYyhoKXx8W1wiXCIsXCJcIixcIlwiLFwiXCJdO2lmKDA9PWdbMF0ubGVuZ3RoJiYwPT1oWzBdLmxlbmd0aClicmVhaztiPWJiKDA9PWdbMV0ubGVuZ3RoPzA6cGFyc2VJbnQoZ1sxXSwxMCksMD09aFsxXS5sZW5ndGg/MDpwYXJzZUludChoWzFdLDEwKSl8fGJiKDA9PWdbMl0ubGVuZ3RoLFxuMD09aFsyXS5sZW5ndGgpfHxiYihnWzJdLGhbMl0pO2c9Z1szXTtoPWhbM119d2hpbGUoMD09Yil9cmV0dXJuIDA8PWJ9KX12YXIgbmM7dmFyIG9jPW4uZG9jdW1lbnQ7bmM9b2MmJno/aGMoKXx8KFwiQ1NTMUNvbXBhdFwiPT1vYy5jb21wYXRNb2RlP3BhcnNlSW50KGljLDEwKTo1KTp2b2lkIDA7ZnVuY3Rpb24gcGMoYSxiKXt0aGlzLmE9YT09PXFjJiZifHxcIlwiO3RoaXMuZz1yY31wYy5wcm90b3R5cGUubWE9ITA7cGMucHJvdG90eXBlLmthPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07cGMucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJDb25zdHtcIit0aGlzLmErXCJ9XCJ9O3ZhciByYz17fSxxYz17fTtmdW5jdGlvbiBzYygpe3RoaXMuYT1cIlwiO3RoaXMuaD10Y31zYy5wcm90b3R5cGUubWE9ITA7c2MucHJvdG90eXBlLmthPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYS50b1N0cmluZygpfTtzYy5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3JldHVybiAxfTtzYy5wcm90b3R5cGUudG9TdHJpbmc9XG5mdW5jdGlvbigpe3JldHVyblwiVHJ1c3RlZFJlc291cmNlVXJse1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24gdWMoYSl7aWYoYSBpbnN0YW5jZW9mIHNjJiZhLmNvbnN0cnVjdG9yPT09c2MmJmEuaD09PXRjKXJldHVybiBhLmE7RmEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBUcnVzdGVkUmVzb3VyY2VVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitwYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlRydXN0ZWRSZXNvdXJjZVVybFwifWZ1bmN0aW9uIHZjKCl7dmFyIGE9d2M7YSBpbnN0YW5jZW9mIHBjJiZhLmNvbnN0cnVjdG9yPT09cGMmJmEuZz09PXJjP2E9YS5hOihGYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIENvbnN0LCBnb3QgJ1wiK2ErXCInXCIpLGE9XCJ0eXBlX2Vycm9yOkNvbnN0XCIpO3ZhciBiPW5ldyBzYztiLmE9YTtyZXR1cm4gYn12YXIgdGM9e307ZnVuY3Rpb24geGMoKXt0aGlzLmE9XCJcIjt0aGlzLmg9eWN9eGMucHJvdG90eXBlLm1hPSEwO3hjLnByb3RvdHlwZS5rYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07XG54Yy5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3JldHVybiAxfTt4Yy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIlNhZmVVcmx7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiB6YyhhKXtpZihhIGluc3RhbmNlb2YgeGMmJmEuY29uc3RydWN0b3I9PT14YyYmYS5oPT09eWMpcmV0dXJuIGEuYTtGYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitwYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVVcmxcIn12YXIgQWM9L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cCk6fFteOi8/I10qKD86Wy8/I118JCkpL2k7ZnVuY3Rpb24gQmMoYSl7aWYoYSBpbnN0YW5jZW9mIHhjKXJldHVybiBhO2E9XCJvYmplY3RcIj09dHlwZW9mIGEmJmEubWE/YS5rYSgpOlN0cmluZyhhKTtBYy50ZXN0KGEpfHwoYT1cImFib3V0OmludmFsaWQjekNsb3N1cmV6XCIpO3JldHVybiBDYyhhKX1mdW5jdGlvbiBEYyhhKXtpZihhIGluc3RhbmNlb2YgeGMpcmV0dXJuIGE7XG5hPVwib2JqZWN0XCI9PXR5cGVvZiBhJiZhLm1hP2Eua2EoKTpTdHJpbmcoYSk7QWMudGVzdChhKXx8KGE9XCJhYm91dDppbnZhbGlkI3pDbG9zdXJlelwiKTtyZXR1cm4gQ2MoYSl9dmFyIHljPXt9O2Z1bmN0aW9uIENjKGEpe3ZhciBiPW5ldyB4YztiLmE9YTtyZXR1cm4gYn1DYyhcImFib3V0OmJsYW5rXCIpO2Z1bmN0aW9uIEVjKCl7dGhpcy5hPVwiXCI7dGhpcy5nPUZjfUVjLnByb3RvdHlwZS5tYT0hMDt2YXIgRmM9e307RWMucHJvdG90eXBlLmthPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07RWMucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJTYWZlU3R5bGV7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiBHYygpe3RoaXMuYT1cIlwiO3RoaXMuaj1IYzt0aGlzLmg9bnVsbH1HYy5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh9O0djLnByb3RvdHlwZS5tYT0hMDtHYy5wcm90b3R5cGUua2E9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O0djLnByb3RvdHlwZS50b1N0cmluZz1cbmZ1bmN0aW9uKCl7cmV0dXJuXCJTYWZlSHRtbHtcIit0aGlzLmErXCJ9XCJ9O2Z1bmN0aW9uIEljKGEpe2lmKGEgaW5zdGFuY2VvZiBHYyYmYS5jb25zdHJ1Y3Rvcj09PUdjJiZhLmo9PT1IYylyZXR1cm4gYS5hO0ZhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZUh0bWwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitwYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlNhZmVIdG1sXCJ9dmFyIEhjPXt9O2Z1bmN0aW9uIEpjKGEsYil7dmFyIGM9bmV3IEdjO2MuYT1hO2MuaD1iO3JldHVybiBjfUpjKFwiPCFET0NUWVBFIGh0bWw+XCIsMCk7dmFyIEtjPUpjKFwiXCIsMCk7SmMoXCI8YnI+XCIsMCk7dmFyIExjPWZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7cmV0dXJuIGZ1bmN0aW9uKCl7Ynx8KGM9YSgpLGI9ITApO3JldHVybiBjfX0oZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGRvY3VtZW50KXJldHVybiExO3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuYi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTthLmFwcGVuZENoaWxkKGIpO2lmKCFhLmZpcnN0Q2hpbGQpcmV0dXJuITE7Yj1hLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZDthLmlubmVySFRNTD1JYyhLYyk7cmV0dXJuIWIucGFyZW50RWxlbWVudH0pO2Z1bmN0aW9uIE1jKGEsYil7YS5zcmM9dWMoYik7aWYobnVsbD09PW1hKWI6e2I9bi5kb2N1bWVudDtpZigoYj1iLnF1ZXJ5U2VsZWN0b3ImJmIucXVlcnlTZWxlY3RvcihcInNjcmlwdFtub25jZV1cIikpJiYoYj1iLm5vbmNlfHxiLmdldEF0dHJpYnV0ZShcIm5vbmNlXCIpKSYmbGEudGVzdChiKSl7bWE9YjticmVhayBifW1hPVwiXCJ9Yj1tYTtiJiZhLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsYil9ZnVuY3Rpb24gTmMoYSxiKXtiPWIgaW5zdGFuY2VvZiB4Yz9iOkRjKGIpO2EuYXNzaWduKHpjKGIpKX1mdW5jdGlvbiBPYyhhLGIpe3RoaXMuYT1rYShhKT9hOjA7dGhpcy5nPWthKGIpP2I6MH1PYy5wcm90b3R5cGUudG9TdHJpbmc9XG5mdW5jdGlvbigpe3JldHVyblwiKFwiK3RoaXMuYStcIiwgXCIrdGhpcy5nK1wiKVwifTtPYy5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbigpe3RoaXMuYT1NYXRoLmNlaWwodGhpcy5hKTt0aGlzLmc9TWF0aC5jZWlsKHRoaXMuZyk7cmV0dXJuIHRoaXN9O09jLnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbigpe3RoaXMuYT1NYXRoLmZsb29yKHRoaXMuYSk7dGhpcy5nPU1hdGguZmxvb3IodGhpcy5nKTtyZXR1cm4gdGhpc307T2MucHJvdG90eXBlLnJvdW5kPWZ1bmN0aW9uKCl7dGhpcy5hPU1hdGgucm91bmQodGhpcy5hKTt0aGlzLmc9TWF0aC5yb3VuZCh0aGlzLmcpO3JldHVybiB0aGlzfTtmdW5jdGlvbiBQYyhhLGIpe3RoaXMud2lkdGg9YTt0aGlzLmhlaWdodD1ifWw9UGMucHJvdG90eXBlO2wudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIihcIit0aGlzLndpZHRoK1wiIHggXCIrdGhpcy5oZWlnaHQrXCIpXCJ9O2wuYXNwZWN0UmF0aW89ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53aWR0aC90aGlzLmhlaWdodH07XG5sLmNlaWw9ZnVuY3Rpb24oKXt0aGlzLndpZHRoPU1hdGguY2VpbCh0aGlzLndpZHRoKTt0aGlzLmhlaWdodD1NYXRoLmNlaWwodGhpcy5oZWlnaHQpO3JldHVybiB0aGlzfTtsLmZsb29yPWZ1bmN0aW9uKCl7dGhpcy53aWR0aD1NYXRoLmZsb29yKHRoaXMud2lkdGgpO3RoaXMuaGVpZ2h0PU1hdGguZmxvb3IodGhpcy5oZWlnaHQpO3JldHVybiB0aGlzfTtsLnJvdW5kPWZ1bmN0aW9uKCl7dGhpcy53aWR0aD1NYXRoLnJvdW5kKHRoaXMud2lkdGgpO3RoaXMuaGVpZ2h0PU1hdGgucm91bmQodGhpcy5oZWlnaHQpO3JldHVybiB0aGlzfTtmdW5jdGlvbiBRYyhhKXtyZXR1cm4gYT9uZXcgUmMoU2MoYSkpOkRhfHwoRGE9bmV3IFJjKX1mdW5jdGlvbiBUYyhhLGIpe3ZhciBjPWJ8fGRvY3VtZW50O3JldHVybiBjLnF1ZXJ5U2VsZWN0b3JBbGwmJmMucXVlcnlTZWxlY3Rvcj9jLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrYSk6VWMoZG9jdW1lbnQsYSxiKX1mdW5jdGlvbiBWYyhhLGIpe3ZhciBjPVxuYnx8ZG9jdW1lbnQ7aWYoYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKWE9Yy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpWzBdO2Vsc2V7Yz1kb2N1bWVudDt2YXIgZD1ifHxjO2E9ZC5xdWVyeVNlbGVjdG9yQWxsJiZkLnF1ZXJ5U2VsZWN0b3ImJmE/ZC5xdWVyeVNlbGVjdG9yKGE/XCIuXCIrYTpcIlwiKTpVYyhjLGEsYilbMF18fG51bGx9cmV0dXJuIGF8fG51bGx9ZnVuY3Rpb24gVWMoYSxiLGMpe3ZhciBkO2E9Y3x8YTtpZihhLnF1ZXJ5U2VsZWN0b3JBbGwmJmEucXVlcnlTZWxlY3RvciYmYilyZXR1cm4gYS5xdWVyeVNlbGVjdG9yQWxsKGI/XCIuXCIrYjpcIlwiKTtpZihiJiZhLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpe3ZhciBlPWEuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShiKTtyZXR1cm4gZX1lPWEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpO2lmKGIpe3ZhciBmPXt9O2ZvcihjPWQ9MDthPWVbY107YysrKXt2YXIgZz1hLmNsYXNzTmFtZTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBnLnNwbGl0JiZcbk1hKGcuc3BsaXQoL1xccysvKSxiKSYmKGZbZCsrXT1hKX1mLmxlbmd0aD1kO3JldHVybiBmfXJldHVybiBlfWZ1bmN0aW9uIFdjKGEsYil7ZGIoYixmdW5jdGlvbihjLGQpe2MmJlwib2JqZWN0XCI9PXR5cGVvZiBjJiZjLm1hJiYoYz1jLmthKCkpO1wic3R5bGVcIj09ZD9hLnN0eWxlLmNzc1RleHQ9YzpcImNsYXNzXCI9PWQ/YS5jbGFzc05hbWU9YzpcImZvclwiPT1kP2EuaHRtbEZvcj1jOlhjLmhhc093blByb3BlcnR5KGQpP2Euc2V0QXR0cmlidXRlKFhjW2RdLGMpOjA9PWQubGFzdEluZGV4T2YoXCJhcmlhLVwiLDApfHwwPT1kLmxhc3RJbmRleE9mKFwiZGF0YS1cIiwwKT9hLnNldEF0dHJpYnV0ZShkLGMpOmFbZF09Y30pfXZhciBYYz17Y2VsbHBhZGRpbmc6XCJjZWxsUGFkZGluZ1wiLGNlbGxzcGFjaW5nOlwiY2VsbFNwYWNpbmdcIixjb2xzcGFuOlwiY29sU3BhblwiLGZyYW1lYm9yZGVyOlwiZnJhbWVCb3JkZXJcIixoZWlnaHQ6XCJoZWlnaHRcIixtYXhsZW5ndGg6XCJtYXhMZW5ndGhcIixub25jZTpcIm5vbmNlXCIscm9sZTpcInJvbGVcIixcbnJvd3NwYW46XCJyb3dTcGFuXCIsdHlwZTpcInR5cGVcIix1c2VtYXA6XCJ1c2VNYXBcIix2YWxpZ246XCJ2QWxpZ25cIix3aWR0aDpcIndpZHRoXCJ9O2Z1bmN0aW9uIFljKGEpe3JldHVybiBhLnNjcm9sbGluZ0VsZW1lbnQ/YS5zY3JvbGxpbmdFbGVtZW50OmVjfHxcIkNTUzFDb21wYXRcIiE9YS5jb21wYXRNb2RlP2EuYm9keXx8YS5kb2N1bWVudEVsZW1lbnQ6YS5kb2N1bWVudEVsZW1lbnR9ZnVuY3Rpb24gWmMoYSl7YSYmYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSl9ZnVuY3Rpb24gU2MoYSl7cmV0dXJuIDk9PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnR8fGEuZG9jdW1lbnR9ZnVuY3Rpb24gJGMoYSxiKXtpZihcInRleHRDb250ZW50XCJpbiBhKWEudGV4dENvbnRlbnQ9YjtlbHNlIGlmKDM9PWEubm9kZVR5cGUpYS5kYXRhPVN0cmluZyhiKTtlbHNlIGlmKGEuZmlyc3RDaGlsZCYmMz09YS5maXJzdENoaWxkLm5vZGVUeXBlKXtmb3IoO2EubGFzdENoaWxkIT1hLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5sYXN0Q2hpbGQpO1xuYS5maXJzdENoaWxkLmRhdGE9U3RyaW5nKGIpfWVsc2V7Zm9yKHZhciBjO2M9YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO2EuYXBwZW5kQ2hpbGQoU2MoYSkuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGIpKSl9fWZ1bmN0aW9uIGFkKGEsYil7cmV0dXJuIGI/YmQoYSxmdW5jdGlvbihjKXtyZXR1cm4hYnx8cShjLmNsYXNzTmFtZSkmJk1hKGMuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyksYil9KTpudWxsfWZ1bmN0aW9uIGJkKGEsYil7Zm9yKHZhciBjPTA7YTspe2lmKGIoYSkpcmV0dXJuIGE7YT1hLnBhcmVudE5vZGU7YysrfXJldHVybiBudWxsfWZ1bmN0aW9uIFJjKGEpe3RoaXMuYT1hfHxuLmRvY3VtZW50fHxkb2N1bWVudH1SYy5wcm90b3R5cGUuTj1mdW5jdGlvbigpe3JldHVybiBxKHZvaWQgMCk/dGhpcy5hLmdldEVsZW1lbnRCeUlkKHZvaWQgMCk6dm9pZCAwfTt2YXIgY2Q9e0ZjOiEwfSxkZD17SGM6ITB9LGVkPXtFYzohMH0sZmQ9e0djOiEwfTtmdW5jdGlvbiBnZCgpe3Rocm93IEVycm9yKFwiRG8gbm90IGluc3RhbnRpYXRlIGRpcmVjdGx5XCIpO1xufWdkLnByb3RvdHlwZS52YT1udWxsO2dkLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRlbnR9O2Z1bmN0aW9uIGhkKGEsYixjLGQpe2E9YShifHxpZCx2b2lkIDAsYyk7ZD0oZHx8UWMoKSkuYS5jcmVhdGVFbGVtZW50KFwiRElWXCIpO2E9amQoYSk7YS5tYXRjaChrZCk7YT1KYyhhLG51bGwpO2lmKExjKCkpZm9yKDtkLmxhc3RDaGlsZDspZC5yZW1vdmVDaGlsZChkLmxhc3RDaGlsZCk7ZC5pbm5lckhUTUw9SWMoYSk7MT09ZC5jaGlsZE5vZGVzLmxlbmd0aCYmKGE9ZC5maXJzdENoaWxkLDE9PWEubm9kZVR5cGUmJihkPWEpKTtyZXR1cm4gZH1mdW5jdGlvbiBqZChhKXtpZighdGEoYSkpcmV0dXJuIGNiKFN0cmluZyhhKSk7aWYoYSBpbnN0YW5jZW9mIGdkKXtpZihhLmZhPT09Y2QpcmV0dXJuIGEuY29udGVudDtpZihhLmZhPT09ZmQpcmV0dXJuIGNiKGEuY29udGVudCl9RmEoXCJTb3kgdGVtcGxhdGUgb3V0cHV0IGlzIHVuc2FmZSBmb3IgdXNlIGFzIEhUTUw6IFwiK1xuYSk7cmV0dXJuXCJ6U295elwifXZhciBrZD0vXjwoYm9keXxjYXB0aW9ufGNvbHxjb2xncm91cHxoZWFkfGh0bWx8dHJ8dGR8dGh8dGJvZHl8dGhlYWR8dGZvb3QpPi9pLGlkPXt9O2Z1bmN0aW9uIG5kKGEpe2lmKG51bGwhPWEpc3dpdGNoKGEudmEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIC0xOnJldHVybi0xO2Nhc2UgMDpyZXR1cm4gMH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBvZCgpe2dkLmNhbGwodGhpcyl9dyhvZCxnZCk7b2QucHJvdG90eXBlLmZhPWNkO2Z1bmN0aW9uIEEoYSl7cmV0dXJuIG51bGwhPWEmJmEuZmE9PT1jZD9hOmEgaW5zdGFuY2VvZiBHYz9CKEljKGEpLnRvU3RyaW5nKCksYS5nKCkpOkIoY2IoU3RyaW5nKFN0cmluZyhhKSkpLG5kKGEpKX1mdW5jdGlvbiBwZCgpe2dkLmNhbGwodGhpcyl9dyhwZCxnZCk7cGQucHJvdG90eXBlLmZhPWRkO3BkLnByb3RvdHlwZS52YT0xO2Z1bmN0aW9uIHFkKGEsYil7dGhpcy5jb250ZW50PVN0cmluZyhhKTt0aGlzLnZhPW51bGwhPWI/XG5iOm51bGx9dyhxZCxnZCk7cWQucHJvdG90eXBlLmZhPWZkO2Z1bmN0aW9uIEMoYSl7cmV0dXJuIG5ldyBxZChhLHZvaWQgMCl9dmFyIEI9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjKXt0aGlzLmNvbnRlbnQ9Y31iLnByb3RvdHlwZT1hLnByb3RvdHlwZTtyZXR1cm4gZnVuY3Rpb24oYyxkKXtjPW5ldyBiKFN0cmluZyhjKSk7dm9pZCAwIT09ZCYmKGMudmE9ZCk7cmV0dXJuIGN9fShvZCkscmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihjKXt0aGlzLmNvbnRlbnQ9Y31iLnByb3RvdHlwZT1hLnByb3RvdHlwZTtyZXR1cm4gZnVuY3Rpb24oYyl7cmV0dXJuIG5ldyBiKFN0cmluZyhjKSl9fShwZCk7ZnVuY3Rpb24gc2QoYSl7ZnVuY3Rpb24gYigpe312YXIgYz17bGFiZWw6RChcIk5ldyBwYXNzd29yZFwiKX07Yi5wcm90b3R5cGU9YTthPW5ldyBiO2Zvcih2YXIgZCBpbiBjKWFbZF09Y1tkXTtyZXR1cm4gYX1mdW5jdGlvbiBEKGEpe3JldHVybihhPVN0cmluZyhhKSk/bmV3IHFkKGEsdm9pZCAwKTpcblwiXCJ9dmFyIHRkPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYyl7dGhpcy5jb250ZW50PWN9Yi5wcm90b3R5cGU9YS5wcm90b3R5cGU7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7Yz1TdHJpbmcoYyk7aWYoIWMpcmV0dXJuXCJcIjtjPW5ldyBiKGMpO3ZvaWQgMCE9PWQmJihjLnZhPWQpO3JldHVybiBjfX0ob2QpO2Z1bmN0aW9uIHVkKGEpe3JldHVybiBudWxsIT1hJiZhLmZhPT09Y2Q/U3RyaW5nKFN0cmluZyhhLmNvbnRlbnQpLnJlcGxhY2UodmQsXCJcIikucmVwbGFjZSh3ZCxcIiZsdDtcIikpLnJlcGxhY2UoeGQseWQpOmNiKFN0cmluZyhhKSl9ZnVuY3Rpb24gemQoYSl7bnVsbCE9YSYmYS5mYT09PWRkP2E9U3RyaW5nKGEpLnJlcGxhY2UoQWQsQmQpOmEgaW5zdGFuY2VvZiB4Yz9hPVN0cmluZyh6YyhhKS50b1N0cmluZygpKS5yZXBsYWNlKEFkLEJkKTooYT1TdHJpbmcoYSksQ2QudGVzdChhKT9hPWEucmVwbGFjZShBZCxCZCk6KEZhKFwiQmFkIHZhbHVlIGAlc2AgZm9yIHxmaWx0ZXJOb3JtYWxpemVVcmlcIixcblthXSksYT1cIiN6U295elwiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gRGQoYSl7bnVsbCE9YSYmYS5mYT09PWVkP2E9YS5jb250ZW50Om51bGw9PWE/YT1cIlwiOmEgaW5zdGFuY2VvZiBFYz9hIGluc3RhbmNlb2YgRWMmJmEuY29uc3RydWN0b3I9PT1FYyYmYS5nPT09RmM/YT1hLmE6KEZhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgU2FmZVN0eWxlLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrcGEoYSkpLGE9XCJ0eXBlX2Vycm9yOlNhZmVTdHlsZVwiKTooYT1TdHJpbmcoYSksRWQudGVzdChhKXx8KEZhKFwiQmFkIHZhbHVlIGAlc2AgZm9yIHxmaWx0ZXJDc3NWYWx1ZVwiLFthXSksYT1cInpTb3l6XCIpKTtyZXR1cm4gYX12YXIgRmQ9e1wiXFx4MDBcIjpcIiYjMDtcIixcIlxcdFwiOlwiJiM5O1wiLFwiXFxuXCI6XCImIzEwO1wiLFwiXFx4MEJcIjpcIiYjMTE7XCIsXCJcXGZcIjpcIiYjMTI7XCIsXCJcXHJcIjpcIiYjMTM7XCIsXCIgXCI6XCImIzMyO1wiLCdcIic6XCImcXVvdDtcIixcIiZcIjpcIiZhbXA7XCIsXCInXCI6XCImIzM5O1wiLFwiLVwiOlwiJiM0NTtcIixcIi9cIjpcIiYjNDc7XCIsXG5cIjxcIjpcIiZsdDtcIixcIj1cIjpcIiYjNjE7XCIsXCI+XCI6XCImZ3Q7XCIsXCJgXCI6XCImIzk2O1wiLFwiXFx1MDA4NVwiOlwiJiMxMzM7XCIsXCJcXHUwMGEwXCI6XCImIzE2MDtcIixcIlxcdTIwMjhcIjpcIiYjODIzMjtcIixcIlxcdTIwMjlcIjpcIiYjODIzMztcIn07ZnVuY3Rpb24geWQoYSl7cmV0dXJuIEZkW2FdfXZhciBHZD17XCJcXHgwMFwiOlwiJTAwXCIsXCJcXHUwMDAxXCI6XCIlMDFcIixcIlxcdTAwMDJcIjpcIiUwMlwiLFwiXFx1MDAwM1wiOlwiJTAzXCIsXCJcXHUwMDA0XCI6XCIlMDRcIixcIlxcdTAwMDVcIjpcIiUwNVwiLFwiXFx1MDAwNlwiOlwiJTA2XCIsXCJcXHUwMDA3XCI6XCIlMDdcIixcIlxcYlwiOlwiJTA4XCIsXCJcXHRcIjpcIiUwOVwiLFwiXFxuXCI6XCIlMEFcIixcIlxceDBCXCI6XCIlMEJcIixcIlxcZlwiOlwiJTBDXCIsXCJcXHJcIjpcIiUwRFwiLFwiXFx1MDAwZVwiOlwiJTBFXCIsXCJcXHUwMDBmXCI6XCIlMEZcIixcIlxcdTAwMTBcIjpcIiUxMFwiLFwiXFx1MDAxMVwiOlwiJTExXCIsXCJcXHUwMDEyXCI6XCIlMTJcIixcIlxcdTAwMTNcIjpcIiUxM1wiLFwiXFx1MDAxNFwiOlwiJTE0XCIsXCJcXHUwMDE1XCI6XCIlMTVcIixcIlxcdTAwMTZcIjpcIiUxNlwiLFwiXFx1MDAxN1wiOlwiJTE3XCIsXCJcXHUwMDE4XCI6XCIlMThcIixcblwiXFx1MDAxOVwiOlwiJTE5XCIsXCJcXHUwMDFhXCI6XCIlMUFcIixcIlxcdTAwMWJcIjpcIiUxQlwiLFwiXFx1MDAxY1wiOlwiJTFDXCIsXCJcXHUwMDFkXCI6XCIlMURcIixcIlxcdTAwMWVcIjpcIiUxRVwiLFwiXFx1MDAxZlwiOlwiJTFGXCIsXCIgXCI6XCIlMjBcIiwnXCInOlwiJTIyXCIsXCInXCI6XCIlMjdcIixcIihcIjpcIiUyOFwiLFwiKVwiOlwiJTI5XCIsXCI8XCI6XCIlM0NcIixcIj5cIjpcIiUzRVwiLFwiXFxcXFwiOlwiJTVDXCIsXCJ7XCI6XCIlN0JcIixcIn1cIjpcIiU3RFwiLFwiXFx1MDA3ZlwiOlwiJTdGXCIsXCJcXHUwMDg1XCI6XCIlQzIlODVcIixcIlxcdTAwYTBcIjpcIiVDMiVBMFwiLFwiXFx1MjAyOFwiOlwiJUUyJTgwJUE4XCIsXCJcXHUyMDI5XCI6XCIlRTIlODAlQTlcIixcIlxcdWZmMDFcIjpcIiVFRiVCQyU4MVwiLFwiXFx1ZmYwM1wiOlwiJUVGJUJDJTgzXCIsXCJcXHVmZjA0XCI6XCIlRUYlQkMlODRcIixcIlxcdWZmMDZcIjpcIiVFRiVCQyU4NlwiLFwiXFx1ZmYwN1wiOlwiJUVGJUJDJTg3XCIsXCJcXHVmZjA4XCI6XCIlRUYlQkMlODhcIixcIlxcdWZmMDlcIjpcIiVFRiVCQyU4OVwiLFwiXFx1ZmYwYVwiOlwiJUVGJUJDJThBXCIsXCJcXHVmZjBiXCI6XCIlRUYlQkMlOEJcIixcIlxcdWZmMGNcIjpcIiVFRiVCQyU4Q1wiLFxuXCJcXHVmZjBmXCI6XCIlRUYlQkMlOEZcIixcIlxcdWZmMWFcIjpcIiVFRiVCQyU5QVwiLFwiXFx1ZmYxYlwiOlwiJUVGJUJDJTlCXCIsXCJcXHVmZjFkXCI6XCIlRUYlQkMlOURcIixcIlxcdWZmMWZcIjpcIiVFRiVCQyU5RlwiLFwiXFx1ZmYyMFwiOlwiJUVGJUJDJUEwXCIsXCJcXHVmZjNiXCI6XCIlRUYlQkMlQkJcIixcIlxcdWZmM2RcIjpcIiVFRiVCQyVCRFwifTtmdW5jdGlvbiBCZChhKXtyZXR1cm4gR2RbYV19dmFyIHhkPS9bXFx4MDBcXHgyMlxceDI3XFx4M2NcXHgzZV0vZyxBZD0vW1xceDAwLSBcXHgyMlxceDI3LVxceDI5XFx4M2NcXHgzZVxcXFxcXHg3YlxceDdkXFx4N2ZcXHg4NVxceGEwXFx1MjAyOFxcdTIwMjlcXHVmZjAxXFx1ZmYwM1xcdWZmMDRcXHVmZjA2LVxcdWZmMGNcXHVmZjBmXFx1ZmYxYVxcdWZmMWJcXHVmZjFkXFx1ZmYxZlxcdWZmMjBcXHVmZjNiXFx1ZmYzZF0vZyxFZD0vXig/IS0qKD86ZXhwcmVzc2lvbnwoPzptb3otKT9iaW5kaW5nKSkoPzpbLiNdPy0/KD86W19hLXowLTktXSspKD86LVtfYS16MC05LV0rKSotP3wtPyg/OlswLTldKyg/OlxcLlswLTldKik/fFxcLlswLTldKykoPzpbYS16XXsxLDJ9fCUpP3whaW1wb3J0YW50fCkkL2ksXG5DZD0vXig/IVteIz9dKlxcLyg/OlxcLnwlMkUpezJ9KD86W1xcLz8jXXwkKSkoPzooPzpodHRwcz98bWFpbHRvKTp8W14mOlxcLz8jXSooPzpbXFwvPyNdfCQpKS9pLHZkPS88KD86IXxcXC8/KFthLXpBLVpdW2EtekEtWjAtOTpcXC1dKikpKD86W14+J1wiXXxcIlteXCJdKlwifCdbXiddKicpKj4vZyx3ZD0vPC9nO2Z1bmN0aW9uIEhkKCl7cmV0dXJuIEMoXCJFbnRlciBhIHZhbGlkIHBob25lIG51bWJlclwiKX1mdW5jdGlvbiBJZCgpe3JldHVybiBDKFwiVW5hYmxlIHRvIHNlbmQgcGFzc3dvcmQgcmVzZXQgY29kZSB0byBzcGVjaWZpZWQgZW1haWxcIil9ZnVuY3Rpb24gSmQoKXtyZXR1cm4gQyhcIlNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluLlwiKX1mdW5jdGlvbiBLZCgpe3JldHVybiBDKFwiVGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cyB3aXRob3V0IGFueSBtZWFucyBvZiBzaWduLWluLiBQbGVhc2UgcmVzZXQgdGhlIHBhc3N3b3JkIHRvIHJlY292ZXIuXCIpfWZ1bmN0aW9uIExkKGEpe2E9XG5hfHx7fTt2YXIgYj1cIlwiO3N3aXRjaChhLmNvZGUpe2Nhc2UgXCJpbnZhbGlkLWFyZ3VtZW50XCI6Yis9XCJDbGllbnQgc3BlY2lmaWVkIGFuIGludmFsaWQgYXJndW1lbnQuXCI7YnJlYWs7Y2FzZSBcImludmFsaWQtY29uZmlndXJhdGlvblwiOmIrPVwiQ2xpZW50IHNwZWNpZmllZCBhbiBpbnZhbGlkIHByb2plY3QgY29uZmlndXJhdGlvbi5cIjticmVhaztjYXNlIFwiZmFpbGVkLXByZWNvbmRpdGlvblwiOmIrPVwiUmVxdWVzdCBjYW4gbm90IGJlIGV4ZWN1dGVkIGluIHRoZSBjdXJyZW50IHN5c3RlbSBzdGF0ZS5cIjticmVhaztjYXNlIFwib3V0LW9mLXJhbmdlXCI6Yis9XCJDbGllbnQgc3BlY2lmaWVkIGFuIGludmFsaWQgcmFuZ2UuXCI7YnJlYWs7Y2FzZSBcInVuYXV0aGVudGljYXRlZFwiOmIrPVwiUmVxdWVzdCBub3QgYXV0aGVudGljYXRlZCBkdWUgdG8gbWlzc2luZywgaW52YWxpZCwgb3IgZXhwaXJlZCBPQXV0aCB0b2tlbi5cIjticmVhaztjYXNlIFwicGVybWlzc2lvbi1kZW5pZWRcIjpiKz1cIkNsaWVudCBkb2VzIG5vdCBoYXZlIHN1ZmZpY2llbnQgcGVybWlzc2lvbi5cIjtcbmJyZWFrO2Nhc2UgXCJub3QtZm91bmRcIjpiKz1cIlNwZWNpZmllZCByZXNvdXJjZSBpcyBub3QgZm91bmQuXCI7YnJlYWs7Y2FzZSBcImFib3J0ZWRcIjpiKz1cIkNvbmN1cnJlbmN5IGNvbmZsaWN0LCBzdWNoIGFzIHJlYWQtbW9kaWZ5LXdyaXRlIGNvbmZsaWN0LlwiO2JyZWFrO2Nhc2UgXCJhbHJlYWR5LWV4aXN0c1wiOmIrPVwiVGhlIHJlc291cmNlIHRoYXQgYSBjbGllbnQgdHJpZWQgdG8gY3JlYXRlIGFscmVhZHkgZXhpc3RzLlwiO2JyZWFrO2Nhc2UgXCJyZXNvdXJjZS1leGhhdXN0ZWRcIjpiKz1cIkVpdGhlciBvdXQgb2YgcmVzb3VyY2UgcXVvdGEgb3IgcmVhY2hpbmcgcmF0ZSBsaW1pdGluZy5cIjticmVhaztjYXNlIFwiY2FuY2VsbGVkXCI6Yis9XCJSZXF1ZXN0IGNhbmNlbGxlZCBieSB0aGUgY2xpZW50LlwiO2JyZWFrO2Nhc2UgXCJkYXRhLWxvc3NcIjpiKz1cIlVucmVjb3ZlcmFibGUgZGF0YSBsb3NzIG9yIGRhdGEgY29ycnVwdGlvbi5cIjticmVhaztjYXNlIFwidW5rbm93blwiOmIrPVwiVW5rbm93biBzZXJ2ZXIgZXJyb3IuXCI7XG5icmVhaztjYXNlIFwiaW50ZXJuYWxcIjpiKz1cIkludGVybmFsIHNlcnZlciBlcnJvci5cIjticmVhaztjYXNlIFwibm90LWltcGxlbWVudGVkXCI6Yis9XCJBUEkgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZCBieSB0aGUgc2VydmVyLlwiO2JyZWFrO2Nhc2UgXCJ1bmF2YWlsYWJsZVwiOmIrPVwiU2VydmljZSB1bmF2YWlsYWJsZS5cIjticmVhaztjYXNlIFwiZGVhZGxpbmUtZXhjZWVkZWRcIjpiKz1cIlJlcXVlc3QgZGVhZGxpbmUgZXhjZWVkZWQuXCI7YnJlYWs7Y2FzZSBcImF1dGgvdXNlci1kaXNhYmxlZFwiOmIrPVwiVGhlIHVzZXIgYWNjb3VudCBoYXMgYmVlbiBkaXNhYmxlZCBieSBhbiBhZG1pbmlzdHJhdG9yLlwiO2JyZWFrO2Nhc2UgXCJhdXRoL3RpbWVvdXRcIjpiKz1cIlRoZSBvcGVyYXRpb24gaGFzIHRpbWVkIG91dC5cIjticmVhaztjYXNlIFwiYXV0aC90b28tbWFueS1yZXF1ZXN0c1wiOmIrPVwiV2UgaGF2ZSBibG9ja2VkIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgZGV2aWNlIGR1ZSB0byB1bnVzdWFsIGFjdGl2aXR5LiBUcnkgYWdhaW4gbGF0ZXIuXCI7XG5icmVhaztjYXNlIFwiYXV0aC9xdW90YS1leGNlZWRlZFwiOmIrPVwiVGhlIHF1b3RhIGZvciB0aGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBleGNlZWRlZC4gVHJ5IGFnYWluIGxhdGVyLlwiO2JyZWFrO2Nhc2UgXCJhdXRoL25ldHdvcmstcmVxdWVzdC1mYWlsZWRcIjpiKz1cIkEgbmV0d29yayBlcnJvciBoYXMgb2NjdXJyZWQuIFRyeSBhZ2FpbiBsYXRlci5cIjticmVhaztjYXNlIFwicmVzdGFydC1wcm9jZXNzXCI6Yis9XCJBbiBpc3N1ZSB3YXMgZW5jb3VudGVyZWQgd2hlbiBhdXRoZW50aWNhdGluZyB5b3VyIHJlcXVlc3QuIFBsZWFzZSB2aXNpdCB0aGUgVVJMIHRoYXQgcmVkaXJlY3RlZCB5b3UgdG8gdGhpcyBwYWdlIGFnYWluIHRvIHJlc3RhcnQgdGhlIGF1dGhlbnRpY2F0aW9uIHByb2Nlc3MuXCI7YnJlYWs7Y2FzZSBcIm5vLW1hdGNoaW5nLXRlbmFudC1mb3ItZW1haWxcIjpiKz1cIk5vIHNpZ24taW4gcHJvdmlkZXIgaXMgYXZhaWxhYmxlIGZvciB0aGUgZ2l2ZW4gZW1haWwsIHBsZWFzZSB0cnkgd2l0aCBhIGRpZmZlcmVudCBlbWFpbC5cIn1yZXR1cm4gQyhiKX1cbmZ1bmN0aW9uIE1kKCl7cmV0dXJuIEMoXCJQbGVhc2UgbG9naW4gYWdhaW4gdG8gcGVyZm9ybSB0aGlzIG9wZXJhdGlvblwiKX1mdW5jdGlvbiBOZChhLGIsYyl7dmFyIGQ9RXJyb3IuY2FsbCh0aGlzKTt0aGlzLm1lc3NhZ2U9ZC5tZXNzYWdlO1wic3RhY2tcImluIGQmJih0aGlzLnN0YWNrPWQuc3RhY2spO3RoaXMuY29kZT1PZCthO2lmKCEoYT1iKSl7YT1cIlwiO3N3aXRjaCh0aGlzLmNvZGUpe2Nhc2UgXCJmaXJlYmFzZXVpL21lcmdlLWNvbmZsaWN0XCI6YSs9XCJUaGUgY3VycmVudCBhbm9ueW1vdXMgdXNlciBmYWlsZWQgdG8gdXBncmFkZS4gVGhlIG5vbi1hbm9ueW1vdXMgY3JlZGVudGlhbCBpcyBhbHJlYWR5IGFzc29jaWF0ZWQgd2l0aCBhIGRpZmZlcmVudCB1c2VyIGFjY291bnQuXCI7YnJlYWs7ZGVmYXVsdDphKz1KZCgpfWE9QyhhKS50b1N0cmluZygpfXRoaXMubWVzc2FnZT1hfHxcIlwiO3RoaXMuY3JlZGVudGlhbD1jfHxudWxsfW0oTmQsRXJyb3IpO05kLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57Y29kZTp0aGlzLmNvZGUsXG5tZXNzYWdlOnRoaXMubWVzc2FnZX19O3ZhciBPZD1cImZpcmViYXNldWkvXCI7ZnVuY3Rpb24gUGQoKXswIT1RZCYmKFJkW3RoaXNbdWFdfHwodGhpc1t1YV09Kyt2YSldPXRoaXMpO3RoaXMuVD10aGlzLlQ7dGhpcy5DPXRoaXMuQ312YXIgUWQ9MCxSZD17fTtQZC5wcm90b3R5cGUuVD0hMTtQZC5wcm90b3R5cGUubT1mdW5jdGlvbigpe2lmKCF0aGlzLlQmJih0aGlzLlQ9ITAsdGhpcy5vKCksMCE9UWQpKXt2YXIgYT10aGlzW3VhXXx8KHRoaXNbdWFdPSsrdmEpO2lmKDAhPVFkJiZ0aGlzLkMmJjA8dGhpcy5DLmxlbmd0aCl0aHJvdyBFcnJvcih0aGlzK1wiIGRpZCBub3QgZW1wdHkgaXRzIG9uRGlzcG9zZUNhbGxiYWNrcyBxdWV1ZS4gVGhpcyBwcm9iYWJseSBtZWFucyBpdCBvdmVycm9kZSBkaXNwb3NlKCkgb3IgZGlzcG9zZUludGVybmFsKCkgd2l0aG91dCBjYWxsaW5nIHRoZSBzdXBlcmNsYXNzJyBtZXRob2QuXCIpO2RlbGV0ZSBSZFthXX19O2Z1bmN0aW9uIFNkKGEsYil7YS5UP2thKHZvaWQgMCk/XG5iLmNhbGwodm9pZCAwKTpiKCk6KGEuQ3x8KGEuQz1bXSksYS5DLnB1c2goa2Eodm9pZCAwKT9yKGIsdm9pZCAwKTpiKSl9UGQucHJvdG90eXBlLm89ZnVuY3Rpb24oKXtpZih0aGlzLkMpZm9yKDt0aGlzLkMubGVuZ3RoOyl0aGlzLkMuc2hpZnQoKSgpfTtmdW5jdGlvbiBUZChhKXthJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLm0mJmEubSgpfXZhciBVZD1PYmplY3QuZnJlZXplfHxmdW5jdGlvbihhKXtyZXR1cm4gYX07dmFyIFZkPSF6fHw5PD1OdW1iZXIobmMpLFdkPXomJiFtYyhcIjlcIiksWGQ9ZnVuY3Rpb24oKXtpZighbi5hZGRFdmVudExpc3RlbmVyfHwhT2JqZWN0LmRlZmluZVByb3BlcnR5KXJldHVybiExO3ZhciBhPSExLGI9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXthPSEwfX0pO3RyeXtuLmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsbmEsYiksbi5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLG5hLGIpfWNhdGNoKGMpe31yZXR1cm4gYX0oKTtcbmZ1bmN0aW9uIFlkKGEsYil7dGhpcy50eXBlPWE7dGhpcy5nPXRoaXMudGFyZ2V0PWI7dGhpcy5oPSExO3RoaXMucWI9ITB9WWQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbj1mdW5jdGlvbigpe3RoaXMuaD0hMH07WWQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKCl7dGhpcy5xYj0hMX07ZnVuY3Rpb24gWmQoYSxiKXtZZC5jYWxsKHRoaXMsYT9hLnR5cGU6XCJcIik7dGhpcy5yZWxhdGVkVGFyZ2V0PXRoaXMuZz10aGlzLnRhcmdldD1udWxsO3RoaXMuYnV0dG9uPXRoaXMuc2NyZWVuWT10aGlzLnNjcmVlblg9dGhpcy5jbGllbnRZPXRoaXMuY2xpZW50WD0wO3RoaXMua2V5PVwiXCI7dGhpcy5qPXRoaXMua2V5Q29kZT0wO3RoaXMubWV0YUtleT10aGlzLnNoaWZ0S2V5PXRoaXMuYWx0S2V5PXRoaXMuY3RybEtleT0hMTt0aGlzLnBvaW50ZXJJZD0wO3RoaXMucG9pbnRlclR5cGU9XCJcIjt0aGlzLmE9bnVsbDtpZihhKXt2YXIgYz10aGlzLnR5cGU9YS50eXBlLGQ9YS5jaGFuZ2VkVG91Y2hlcyYmXG5hLmNoYW5nZWRUb3VjaGVzLmxlbmd0aD9hLmNoYW5nZWRUb3VjaGVzWzBdOm51bGw7dGhpcy50YXJnZXQ9YS50YXJnZXR8fGEuc3JjRWxlbWVudDt0aGlzLmc9YjtpZihiPWEucmVsYXRlZFRhcmdldCl7aWYoZGMpe2E6e3RyeXtZYihiLm5vZGVOYW1lKTt2YXIgZT0hMDticmVhayBhfWNhdGNoKGYpe31lPSExfWV8fChiPW51bGwpfX1lbHNlXCJtb3VzZW92ZXJcIj09Yz9iPWEuZnJvbUVsZW1lbnQ6XCJtb3VzZW91dFwiPT1jJiYoYj1hLnRvRWxlbWVudCk7dGhpcy5yZWxhdGVkVGFyZ2V0PWI7ZD8odGhpcy5jbGllbnRYPXZvaWQgMCE9PWQuY2xpZW50WD9kLmNsaWVudFg6ZC5wYWdlWCx0aGlzLmNsaWVudFk9dm9pZCAwIT09ZC5jbGllbnRZP2QuY2xpZW50WTpkLnBhZ2VZLHRoaXMuc2NyZWVuWD1kLnNjcmVlblh8fDAsdGhpcy5zY3JlZW5ZPWQuc2NyZWVuWXx8MCk6KHRoaXMuY2xpZW50WD12b2lkIDAhPT1hLmNsaWVudFg/YS5jbGllbnRYOmEucGFnZVgsdGhpcy5jbGllbnRZPXZvaWQgMCE9PVxuYS5jbGllbnRZP2EuY2xpZW50WTphLnBhZ2VZLHRoaXMuc2NyZWVuWD1hLnNjcmVlblh8fDAsdGhpcy5zY3JlZW5ZPWEuc2NyZWVuWXx8MCk7dGhpcy5idXR0b249YS5idXR0b247dGhpcy5rZXlDb2RlPWEua2V5Q29kZXx8MDt0aGlzLmtleT1hLmtleXx8XCJcIjt0aGlzLmo9YS5jaGFyQ29kZXx8KFwia2V5cHJlc3NcIj09Yz9hLmtleUNvZGU6MCk7dGhpcy5jdHJsS2V5PWEuY3RybEtleTt0aGlzLmFsdEtleT1hLmFsdEtleTt0aGlzLnNoaWZ0S2V5PWEuc2hpZnRLZXk7dGhpcy5tZXRhS2V5PWEubWV0YUtleTt0aGlzLnBvaW50ZXJJZD1hLnBvaW50ZXJJZHx8MDt0aGlzLnBvaW50ZXJUeXBlPXEoYS5wb2ludGVyVHlwZSk/YS5wb2ludGVyVHlwZTokZFthLnBvaW50ZXJUeXBlXXx8XCJcIjt0aGlzLmE9YTthLmRlZmF1bHRQcmV2ZW50ZWQmJnRoaXMucHJldmVudERlZmF1bHQoKX19dyhaZCxZZCk7dmFyICRkPVVkKHsyOlwidG91Y2hcIiwzOlwicGVuXCIsNDpcIm1vdXNlXCJ9KTtaZC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uPVxuZnVuY3Rpb24oKXtaZC5LLnN0b3BQcm9wYWdhdGlvbi5jYWxsKHRoaXMpO3RoaXMuYS5zdG9wUHJvcGFnYXRpb24/dGhpcy5hLnN0b3BQcm9wYWdhdGlvbigpOnRoaXMuYS5jYW5jZWxCdWJibGU9ITB9O1pkLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe1pkLksucHJldmVudERlZmF1bHQuY2FsbCh0aGlzKTt2YXIgYT10aGlzLmE7aWYoYS5wcmV2ZW50RGVmYXVsdClhLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBpZihhLnJldHVyblZhbHVlPSExLFdkKXRyeXtpZihhLmN0cmxLZXl8fDExMjw9YS5rZXlDb2RlJiYxMjM+PWEua2V5Q29kZSlhLmtleUNvZGU9LTF9Y2F0Y2goYil7fX07dmFyIGFlPVwiY2xvc3VyZV9saXN0ZW5hYmxlX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKSxiZT0wO2Z1bmN0aW9uIGNlKGEsYixjLGQsZSl7dGhpcy5saXN0ZW5lcj1hO3RoaXMucHJveHk9bnVsbDt0aGlzLnNyYz1iO3RoaXMudHlwZT1jO3RoaXMuY2FwdHVyZT0hIWQ7dGhpcy5MYT1lO3RoaXMua2V5PVxuKytiZTt0aGlzLnNhPXRoaXMuSWE9ITF9ZnVuY3Rpb24gZGUoYSl7YS5zYT0hMDthLmxpc3RlbmVyPW51bGw7YS5wcm94eT1udWxsO2Euc3JjPW51bGw7YS5MYT1udWxsfWZ1bmN0aW9uIGVlKGEpe3RoaXMuc3JjPWE7dGhpcy5hPXt9O3RoaXMuZz0wfWVlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnRvU3RyaW5nKCk7YT10aGlzLmFbZl07YXx8KGE9dGhpcy5hW2ZdPVtdLHRoaXMuZysrKTt2YXIgZz1mZShhLGIsZCxlKTstMTxnPyhiPWFbZ10sY3x8KGIuSWE9ITEpKTooYj1uZXcgY2UoYix0aGlzLnNyYyxmLCEhZCxlKSxiLklhPWMsYS5wdXNoKGIpKTtyZXR1cm4gYn07ZnVuY3Rpb24gZ2UoYSxiKXt2YXIgYz1iLnR5cGU7YyBpbiBhLmEmJk5hKGEuYVtjXSxiKSYmKGRlKGIpLDA9PWEuYVtjXS5sZW5ndGgmJihkZWxldGUgYS5hW2NdLGEuZy0tKSl9ZnVuY3Rpb24gZmUoYSxiLGMsZCl7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDsrK2Upe3ZhciBmPWFbZV07XG5pZighZi5zYSYmZi5saXN0ZW5lcj09YiYmZi5jYXB0dXJlPT0hIWMmJmYuTGE9PWQpcmV0dXJuIGV9cmV0dXJuLTF9dmFyIGhlPVwiY2xvc3VyZV9sbV9cIisoMUU2Kk1hdGgucmFuZG9tKCl8MCksaWU9e30samU9MDtmdW5jdGlvbiBrZShhLGIsYyxkLGUpe2lmKGQmJmQub25jZSlyZXR1cm4gbGUoYSxiLGMsZCxlKTtpZihxYShiKSl7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspa2UoYSxiW2ZdLGMsZCxlKTtyZXR1cm4gbnVsbH1jPW1lKGMpO3JldHVybiBhJiZhW2FlXT9hLkouYWRkKFN0cmluZyhiKSxjLCExLHRhKGQpPyEhZC5jYXB0dXJlOiEhZCxlKTpuZShhLGIsYywhMSxkLGUpfWZ1bmN0aW9uIG5lKGEsYixjLGQsZSxmKXtpZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgZXZlbnQgdHlwZVwiKTt2YXIgZz10YShlKT8hIWUuY2FwdHVyZTohIWUsaD1vZShhKTtofHwoYVtoZV09aD1uZXcgZWUoYSkpO2M9aC5hZGQoYixjLGQsZyxmKTtpZihjLnByb3h5KXJldHVybiBjO2Q9cGUoKTtcbmMucHJveHk9ZDtkLnNyYz1hO2QubGlzdGVuZXI9YztpZihhLmFkZEV2ZW50TGlzdGVuZXIpWGR8fChlPWcpLHZvaWQgMD09PWUmJihlPSExKSxhLmFkZEV2ZW50TGlzdGVuZXIoYi50b1N0cmluZygpLGQsZSk7ZWxzZSBpZihhLmF0dGFjaEV2ZW50KWEuYXR0YWNoRXZlbnQocWUoYi50b1N0cmluZygpKSxkKTtlbHNlIGlmKGEuYWRkTGlzdGVuZXImJmEucmVtb3ZlTGlzdGVuZXIpYS5hZGRMaXN0ZW5lcihkKTtlbHNlIHRocm93IEVycm9yKFwiYWRkRXZlbnRMaXN0ZW5lciBhbmQgYXR0YWNoRXZlbnQgYXJlIHVuYXZhaWxhYmxlLlwiKTtqZSsrO3JldHVybiBjfWZ1bmN0aW9uIHBlKCl7dmFyIGE9cmUsYj1WZD9mdW5jdGlvbihjKXtyZXR1cm4gYS5jYWxsKGIuc3JjLGIubGlzdGVuZXIsYyl9OmZ1bmN0aW9uKGMpe2M9YS5jYWxsKGIuc3JjLGIubGlzdGVuZXIsYyk7aWYoIWMpcmV0dXJuIGN9O3JldHVybiBifWZ1bmN0aW9uIGxlKGEsYixjLGQsZSl7aWYocWEoYikpe2Zvcih2YXIgZj0wO2Y8XG5iLmxlbmd0aDtmKyspbGUoYSxiW2ZdLGMsZCxlKTtyZXR1cm4gbnVsbH1jPW1lKGMpO3JldHVybiBhJiZhW2FlXT9hLkouYWRkKFN0cmluZyhiKSxjLCEwLHRhKGQpPyEhZC5jYXB0dXJlOiEhZCxlKTpuZShhLGIsYywhMCxkLGUpfWZ1bmN0aW9uIHNlKGEsYixjLGQsZSl7aWYocWEoYikpZm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKyspc2UoYSxiW2ZdLGMsZCxlKTtlbHNlKGQ9dGEoZCk/ISFkLmNhcHR1cmU6ISFkLGM9bWUoYyksYSYmYVthZV0pPyhhPWEuSixiPVN0cmluZyhiKS50b1N0cmluZygpLGIgaW4gYS5hJiYoZj1hLmFbYl0sYz1mZShmLGMsZCxlKSwtMTxjJiYoZGUoZltjXSksT2EoZixjKSwwPT1mLmxlbmd0aCYmKGRlbGV0ZSBhLmFbYl0sYS5nLS0pKSkpOmEmJihhPW9lKGEpKSYmKGI9YS5hW2IudG9TdHJpbmcoKV0sYT0tMSxiJiYoYT1mZShiLGMsZCxlKSksKGM9LTE8YT9iW2FdOm51bGwpJiZ0ZShjKSl9ZnVuY3Rpb24gdGUoYSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGEmJlxuYSYmIWEuc2Epe3ZhciBiPWEuc3JjO2lmKGImJmJbYWVdKWdlKGIuSixhKTtlbHNle3ZhciBjPWEudHlwZSxkPWEucHJveHk7Yi5yZW1vdmVFdmVudExpc3RlbmVyP2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLGQsYS5jYXB0dXJlKTpiLmRldGFjaEV2ZW50P2IuZGV0YWNoRXZlbnQocWUoYyksZCk6Yi5hZGRMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lciYmYi5yZW1vdmVMaXN0ZW5lcihkKTtqZS0tOyhjPW9lKGIpKT8oZ2UoYyxhKSwwPT1jLmcmJihjLnNyYz1udWxsLGJbaGVdPW51bGwpKTpkZShhKX19fWZ1bmN0aW9uIHFlKGEpe3JldHVybiBhIGluIGllP2llW2FdOmllW2FdPVwib25cIithfWZ1bmN0aW9uIHVlKGEsYixjLGQpe3ZhciBlPSEwO2lmKGE9b2UoYSkpaWYoYj1hLmFbYi50b1N0cmluZygpXSlmb3IoYj1iLmNvbmNhdCgpLGE9MDthPGIubGVuZ3RoO2ErKyl7dmFyIGY9YlthXTtmJiZmLmNhcHR1cmU9PWMmJiFmLnNhJiYoZj12ZShmLGQpLGU9ZSYmITEhPT1mKX1yZXR1cm4gZX1cbmZ1bmN0aW9uIHZlKGEsYil7dmFyIGM9YS5saXN0ZW5lcixkPWEuTGF8fGEuc3JjO2EuSWEmJnRlKGEpO3JldHVybiBjLmNhbGwoZCxiKX1mdW5jdGlvbiByZShhLGIpe2lmKGEuc2EpcmV0dXJuITA7aWYoIVZkKXtpZighYilhOntiPVtcIndpbmRvd1wiLFwiZXZlbnRcIl07Zm9yKHZhciBjPW4sZD0wO2Q8Yi5sZW5ndGg7ZCsrKWlmKGM9Y1tiW2RdXSxudWxsPT1jKXtiPW51bGw7YnJlYWsgYX1iPWN9ZD1iO2I9bmV3IFpkKGQsdGhpcyk7Yz0hMDtpZighKDA+ZC5rZXlDb2RlfHx2b2lkIDAhPWQucmV0dXJuVmFsdWUpKXthOnt2YXIgZT0hMTtpZigwPT1kLmtleUNvZGUpdHJ5e2Qua2V5Q29kZT0tMTticmVhayBhfWNhdGNoKGcpe2U9ITB9aWYoZXx8dm9pZCAwPT1kLnJldHVyblZhbHVlKWQucmV0dXJuVmFsdWU9ITB9ZD1bXTtmb3IoZT1iLmc7ZTtlPWUucGFyZW50Tm9kZSlkLnB1c2goZSk7YT1hLnR5cGU7Zm9yKGU9ZC5sZW5ndGgtMTshYi5oJiYwPD1lO2UtLSl7Yi5nPWRbZV07dmFyIGY9XG51ZShkW2VdLGEsITAsYik7Yz1jJiZmfWZvcihlPTA7IWIuaCYmZTxkLmxlbmd0aDtlKyspYi5nPWRbZV0sZj11ZShkW2VdLGEsITEsYiksYz1jJiZmfXJldHVybiBjfXJldHVybiB2ZShhLG5ldyBaZChiLHRoaXMpKX1mdW5jdGlvbiBvZShhKXthPWFbaGVdO3JldHVybiBhIGluc3RhbmNlb2YgZWU/YTpudWxsfXZhciB3ZT1cIl9fY2xvc3VyZV9ldmVudHNfZm5fXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCk7ZnVuY3Rpb24gbWUoYSl7aWYoc2EoYSkpcmV0dXJuIGE7YVt3ZV18fChhW3dlXT1mdW5jdGlvbihiKXtyZXR1cm4gYS5oYW5kbGVFdmVudChiKX0pO3JldHVybiBhW3dlXX1mdW5jdGlvbiBFKCl7UGQuY2FsbCh0aGlzKTt0aGlzLko9bmV3IGVlKHRoaXMpO3RoaXMud2I9dGhpczt0aGlzLkhhPW51bGx9dyhFLFBkKTtFLnByb3RvdHlwZVthZV09ITA7RS5wcm90b3R5cGUuWmE9ZnVuY3Rpb24oYSl7dGhpcy5IYT1hfTtFLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKGEsXG5iLGMsZCl7c2UodGhpcyxhLGIsYyxkKX07ZnVuY3Rpb24geGUoYSxiKXt2YXIgYyxkPWEuSGE7aWYoZClmb3IoYz1bXTtkO2Q9ZC5IYSljLnB1c2goZCk7YT1hLndiO2Q9Yi50eXBlfHxiO2lmKHEoYikpYj1uZXcgWWQoYixhKTtlbHNlIGlmKGIgaW5zdGFuY2VvZiBZZCliLnRhcmdldD1iLnRhcmdldHx8YTtlbHNle3ZhciBlPWI7Yj1uZXcgWWQoZCxhKTtnYihiLGUpfWU9ITA7aWYoYylmb3IodmFyIGY9Yy5sZW5ndGgtMTshYi5oJiYwPD1mO2YtLSl7dmFyIGc9Yi5nPWNbZl07ZT15ZShnLGQsITAsYikmJmV9Yi5ofHwoZz1iLmc9YSxlPXllKGcsZCwhMCxiKSYmZSxiLmh8fChlPXllKGcsZCwhMSxiKSYmZSkpO2lmKGMpZm9yKGY9MDshYi5oJiZmPGMubGVuZ3RoO2YrKylnPWIuZz1jW2ZdLGU9eWUoZyxkLCExLGIpJiZlO3JldHVybiBlfUUucHJvdG90eXBlLm89ZnVuY3Rpb24oKXtFLksuby5jYWxsKHRoaXMpO2lmKHRoaXMuSil7dmFyIGE9dGhpcy5KLGI9MCxjO2ZvcihjIGluIGEuYSl7Zm9yKHZhciBkPVxuYS5hW2NdLGU9MDtlPGQubGVuZ3RoO2UrKykrK2IsZGUoZFtlXSk7ZGVsZXRlIGEuYVtjXTthLmctLX19dGhpcy5IYT1udWxsfTtmdW5jdGlvbiB5ZShhLGIsYyxkKXtiPWEuSi5hW1N0cmluZyhiKV07aWYoIWIpcmV0dXJuITA7Yj1iLmNvbmNhdCgpO2Zvcih2YXIgZT0hMCxmPTA7ZjxiLmxlbmd0aDsrK2Ype3ZhciBnPWJbZl07aWYoZyYmIWcuc2EmJmcuY2FwdHVyZT09Yyl7dmFyIGg9Zy5saXN0ZW5lcixrPWcuTGF8fGcuc3JjO2cuSWEmJmdlKGEuSixnKTtlPSExIT09aC5jYWxsKGssZCkmJmV9fXJldHVybiBlJiYwIT1kLnFifXZhciB6ZT17fSxBZT0wO2Z1bmN0aW9uIEJlKGEsYil7aWYoIWEpdGhyb3cgRXJyb3IoXCJFdmVudCB0YXJnZXQgZWxlbWVudCBtdXN0IGJlIHByb3ZpZGVkIVwiKTthPUNlKGEpO2lmKHplW2FdJiZ6ZVthXS5sZW5ndGgpZm9yKHZhciBjPTA7Yzx6ZVthXS5sZW5ndGg7YysrKXhlKHplW2FdW2NdLGIpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPUNlKGEuTigpKTtcbnplW2JdJiZ6ZVtiXS5sZW5ndGgmJihQYSh6ZVtiXSxmdW5jdGlvbihjKXtyZXR1cm4gYz09YX0pLHplW2JdLmxlbmd0aHx8ZGVsZXRlIHplW2JdKX1mdW5jdGlvbiBDZShhKXtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEuYSYmKGEuYT1BZSxBZSsrKTtyZXR1cm4gYS5hfWZ1bmN0aW9uIEVlKGEpe2lmKCFhKXRocm93IEVycm9yKFwiRXZlbnQgdGFyZ2V0IGVsZW1lbnQgbXVzdCBiZSBwcm92aWRlZCFcIik7RS5jYWxsKHRoaXMpO3RoaXMuYT1hfW0oRWUsRSk7RWUucHJvdG90eXBlLk49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtFZS5wcm90b3R5cGUucmVnaXN0ZXI9ZnVuY3Rpb24oKXt2YXIgYT1DZSh0aGlzLk4oKSk7emVbYV0/TWEoemVbYV0sdGhpcyl8fHplW2FdLnB1c2godGhpcyk6emVbYV09W3RoaXNdfTtmdW5jdGlvbiBGZShhKXtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuISFhLiRnb29nX1RoZW5hYmxlfWNhdGNoKGIpe3JldHVybiExfX1mdW5jdGlvbiBHZShhLGIpe3RoaXMuaD1cbmE7dGhpcy5qPWI7dGhpcy5nPTA7dGhpcy5hPW51bGx9R2UucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe2lmKDA8dGhpcy5nKXt0aGlzLmctLTt2YXIgYT10aGlzLmE7dGhpcy5hPWEubmV4dDthLm5leHQ9bnVsbH1lbHNlIGE9dGhpcy5oKCk7cmV0dXJuIGF9O2Z1bmN0aW9uIEhlKGEsYil7YS5qKGIpOzEwMD5hLmcmJihhLmcrKyxiLm5leHQ9YS5hLGEuYT1iKX1mdW5jdGlvbiBJZSgpe3RoaXMuZz10aGlzLmE9bnVsbH12YXIgS2U9bmV3IEdlKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBKZX0sZnVuY3Rpb24oYSl7YS5yZXNldCgpfSk7SWUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhLGIpe3ZhciBjPUtlLmdldCgpO2Muc2V0KGEsYik7dGhpcy5nP3RoaXMuZy5uZXh0PWM6dGhpcy5hPWM7dGhpcy5nPWN9O2Z1bmN0aW9uIExlKCl7dmFyIGE9TWUsYj1udWxsO2EuYSYmKGI9YS5hLGEuYT1hLmEubmV4dCxhLmF8fChhLmc9bnVsbCksYi5uZXh0PW51bGwpO3JldHVybiBifWZ1bmN0aW9uIEplKCl7dGhpcy5uZXh0PVxudGhpcy5nPXRoaXMuYT1udWxsfUplLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9YTt0aGlzLmc9Yjt0aGlzLm5leHQ9bnVsbH07SmUucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5uZXh0PXRoaXMuZz10aGlzLmE9bnVsbH07ZnVuY3Rpb24gTmUoYSl7bi5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9LDApfXZhciBPZTtmdW5jdGlvbiBQZSgpe3ZhciBhPW4uTWVzc2FnZUNoYW5uZWw7XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmd2luZG93LnBvc3RNZXNzYWdlJiZ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciYmIXkoXCJQcmVzdG9cIikmJihhPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIklGUkFNRVwiKTtlLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7ZS5zcmM9XCJcIjtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7dmFyIGY9ZS5jb250ZW50V2luZG93O2U9XG5mLmRvY3VtZW50O2Uub3BlbigpO2Uud3JpdGUoXCJcIik7ZS5jbG9zZSgpO3ZhciBnPVwiY2FsbEltbWVkaWF0ZVwiK01hdGgucmFuZG9tKCksaD1cImZpbGU6XCI9PWYubG9jYXRpb24ucHJvdG9jb2w/XCIqXCI6Zi5sb2NhdGlvbi5wcm90b2NvbCtcIi8vXCIrZi5sb2NhdGlvbi5ob3N0O2U9cihmdW5jdGlvbihrKXtpZigoXCIqXCI9PWh8fGsub3JpZ2luPT1oKSYmay5kYXRhPT1nKXRoaXMucG9ydDEub25tZXNzYWdlKCl9LHRoaXMpO2YuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixlLCExKTt0aGlzLnBvcnQxPXt9O3RoaXMucG9ydDI9e3Bvc3RNZXNzYWdlOmZ1bmN0aW9uKCl7Zi5wb3N0TWVzc2FnZShnLGgpfX19KTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEmJiF5KFwiVHJpZGVudFwiKSYmIXkoXCJNU0lFXCIpKXt2YXIgYj1uZXcgYSxjPXt9LGQ9YztiLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKGthKGMubmV4dCkpe2M9Yy5uZXh0O3ZhciBlPWMuZ2I7Yy5nYj1udWxsO2UoKX19O3JldHVybiBmdW5jdGlvbihlKXtkLm5leHQ9XG57Z2I6ZX07ZD1kLm5leHQ7Yi5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudCYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTQ1JJUFRcIik/ZnVuY3Rpb24oZSl7dmFyIGY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIlNDUklQVFwiKTtmLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2Yub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGYpO2Y9bnVsbDtlKCk7ZT1udWxsfTtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoZil9OmZ1bmN0aW9uKGUpe24uc2V0VGltZW91dChlLDApfX1mdW5jdGlvbiBRZShhLGIpe1JlfHxTZSgpO1RlfHwoUmUoKSxUZT0hMCk7TWUuYWRkKGEsYil9dmFyIFJlO2Z1bmN0aW9uIFNlKCl7aWYobi5Qcm9taXNlJiZuLlByb21pc2UucmVzb2x2ZSl7dmFyIGE9bi5Qcm9taXNlLnJlc29sdmUodm9pZCAwKTtcblJlPWZ1bmN0aW9uKCl7YS50aGVuKFVlKX19ZWxzZSBSZT1mdW5jdGlvbigpe3ZhciBiPVVlOyFzYShuLnNldEltbWVkaWF0ZSl8fG4uV2luZG93JiZuLldpbmRvdy5wcm90b3R5cGUmJiF5KFwiRWRnZVwiKSYmbi5XaW5kb3cucHJvdG90eXBlLnNldEltbWVkaWF0ZT09bi5zZXRJbW1lZGlhdGU/KE9lfHwoT2U9UGUoKSksT2UoYikpOm4uc2V0SW1tZWRpYXRlKGIpfX12YXIgVGU9ITEsTWU9bmV3IEllO2Z1bmN0aW9uIFVlKCl7Zm9yKHZhciBhO2E9TGUoKTspe3RyeXthLmEuY2FsbChhLmcpfWNhdGNoKGIpe05lKGIpfUhlKEtlLGEpfVRlPSExfWZ1bmN0aW9uIFZlKGEpe3RoaXMuYT1XZTt0aGlzLkE9dm9pZCAwO3RoaXMuaj10aGlzLmc9dGhpcy5oPW51bGw7dGhpcy5zPXRoaXMuaT0hMTtpZihhIT1uYSl0cnl7dmFyIGI9dGhpczthLmNhbGwodm9pZCAwLGZ1bmN0aW9uKGMpe1hlKGIsWWUsYyl9LGZ1bmN0aW9uKGMpe2lmKCEoYyBpbnN0YW5jZW9mIFplKSl0cnl7aWYoYyBpbnN0YW5jZW9mXG5FcnJvcil0aHJvdyBjO3Rocm93IEVycm9yKFwiUHJvbWlzZSByZWplY3RlZC5cIik7fWNhdGNoKGQpe31YZShiLCRlLGMpfSl9Y2F0Y2goYyl7WGUodGhpcywkZSxjKX19dmFyIFdlPTAsWWU9MiwkZT0zO2Z1bmN0aW9uIGFmKCl7dGhpcy5uZXh0PXRoaXMuaj10aGlzLmc9dGhpcy5zPXRoaXMuYT1udWxsO3RoaXMuaD0hMX1hZi5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmo9dGhpcy5nPXRoaXMucz10aGlzLmE9bnVsbDt0aGlzLmg9ITF9O3ZhciBiZj1uZXcgR2UoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IGFmfSxmdW5jdGlvbihhKXthLnJlc2V0KCl9KTtmdW5jdGlvbiBjZihhLGIsYyl7dmFyIGQ9YmYuZ2V0KCk7ZC5zPWE7ZC5nPWI7ZC5qPWM7cmV0dXJuIGR9ZnVuY3Rpb24gRihhKXtpZihhIGluc3RhbmNlb2YgVmUpcmV0dXJuIGE7dmFyIGI9bmV3IFZlKG5hKTtYZShiLFllLGEpO3JldHVybiBifWZ1bmN0aW9uIGRmKGEpe3JldHVybiBuZXcgVmUoZnVuY3Rpb24oYixjKXtjKGEpfSl9XG5WZS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGVmKHRoaXMsc2EoYSk/YTpudWxsLHNhKGIpP2I6bnVsbCxjKX07VmUucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlPSEwO2w9VmUucHJvdG90eXBlO2wuZmM9ZnVuY3Rpb24oYSxiKXthPWNmKGEsYSxiKTthLmg9ITA7ZmYodGhpcyxhKTtyZXR1cm4gdGhpc307bC5DYT1mdW5jdGlvbihhLGIpe3JldHVybiBlZih0aGlzLG51bGwsYSxiKX07bC5jYW5jZWw9ZnVuY3Rpb24oYSl7dGhpcy5hPT1XZSYmUWUoZnVuY3Rpb24oKXt2YXIgYj1uZXcgWmUoYSk7Z2YodGhpcyxiKX0sdGhpcyl9O2Z1bmN0aW9uIGdmKGEsYil7aWYoYS5hPT1XZSlpZihhLmgpe3ZhciBjPWEuaDtpZihjLmcpe2Zvcih2YXIgZD0wLGU9bnVsbCxmPW51bGwsZz1jLmc7ZyYmKGcuaHx8KGQrKyxnLmE9PWEmJihlPWcpLCEoZSYmMTxkKSkpO2c9Zy5uZXh0KWV8fChmPWcpO2UmJihjLmE9PVdlJiYxPT1kP2dmKGMsYik6KGY/KGQ9ZixkLm5leHQ9PWMuaiYmXG4oYy5qPWQpLGQubmV4dD1kLm5leHQubmV4dCk6aGYoYyksamYoYyxlLCRlLGIpKSl9YS5oPW51bGx9ZWxzZSBYZShhLCRlLGIpfWZ1bmN0aW9uIGZmKGEsYil7YS5nfHxhLmEhPVllJiZhLmEhPSRlfHxrZihhKTthLmo/YS5qLm5leHQ9YjphLmc9YjthLmo9Yn1mdW5jdGlvbiBlZihhLGIsYyxkKXt2YXIgZT1jZihudWxsLG51bGwsbnVsbCk7ZS5hPW5ldyBWZShmdW5jdGlvbihmLGcpe2Uucz1iP2Z1bmN0aW9uKGgpe3RyeXt2YXIgaz1iLmNhbGwoZCxoKTtmKGspfWNhdGNoKHApe2cocCl9fTpmO2UuZz1jP2Z1bmN0aW9uKGgpe3RyeXt2YXIgaz1jLmNhbGwoZCxoKTsha2EoaykmJmggaW5zdGFuY2VvZiBaZT9nKGgpOmYoayl9Y2F0Y2gocCl7ZyhwKX19Omd9KTtlLmEuaD1hO2ZmKGEsZSk7cmV0dXJuIGUuYX1sLmhjPWZ1bmN0aW9uKGEpe3RoaXMuYT1XZTtYZSh0aGlzLFllLGEpfTtsLmljPWZ1bmN0aW9uKGEpe3RoaXMuYT1XZTtYZSh0aGlzLCRlLGEpfTtmdW5jdGlvbiBYZShhLGIsXG5jKXtpZihhLmE9PVdlKXthPT09YyYmKGI9JGUsYz1uZXcgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW5ub3QgcmVzb2x2ZSB0byBpdHNlbGZcIikpO2EuYT0xO2E6e3ZhciBkPWMsZT1hLmhjLGY9YS5pYztpZihkIGluc3RhbmNlb2YgVmUpe2ZmKGQsY2YoZXx8bmEsZnx8bnVsbCxhKSk7dmFyIGc9ITB9ZWxzZSBpZihGZShkKSlkLnRoZW4oZSxmLGEpLGc9ITA7ZWxzZXtpZih0YShkKSl0cnl7dmFyIGg9ZC50aGVuO2lmKHNhKGgpKXtsZihkLGgsZSxmLGEpO2c9ITA7YnJlYWsgYX19Y2F0Y2goayl7Zi5jYWxsKGEsayk7Zz0hMDticmVhayBhfWc9ITF9fWd8fChhLkE9YyxhLmE9YixhLmg9bnVsbCxrZihhKSxiIT0kZXx8YyBpbnN0YW5jZW9mIFplfHxtZihhLGMpKX19ZnVuY3Rpb24gbGYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGspe2h8fChoPSEwLGQuY2FsbChlLGspKX1mdW5jdGlvbiBnKGspe2h8fChoPSEwLGMuY2FsbChlLGspKX12YXIgaD0hMTt0cnl7Yi5jYWxsKGEsZyxmKX1jYXRjaChrKXtmKGspfX1cbmZ1bmN0aW9uIGtmKGEpe2EuaXx8KGEuaT0hMCxRZShhLkhiLGEpKX1mdW5jdGlvbiBoZihhKXt2YXIgYj1udWxsO2EuZyYmKGI9YS5nLGEuZz1iLm5leHQsYi5uZXh0PW51bGwpO2EuZ3x8KGEuaj1udWxsKTtyZXR1cm4gYn1sLkhiPWZ1bmN0aW9uKCl7Zm9yKHZhciBhO2E9aGYodGhpcyk7KWpmKHRoaXMsYSx0aGlzLmEsdGhpcy5BKTt0aGlzLmk9ITF9O2Z1bmN0aW9uIGpmKGEsYixjLGQpe2lmKGM9PSRlJiZiLmcmJiFiLmgpZm9yKDthJiZhLnM7YT1hLmgpYS5zPSExO2lmKGIuYSliLmEuaD1udWxsLG5mKGIsYyxkKTtlbHNlIHRyeXtiLmg/Yi5zLmNhbGwoYi5qKTpuZihiLGMsZCl9Y2F0Y2goZSl7b2YuY2FsbChudWxsLGUpfUhlKGJmLGIpfWZ1bmN0aW9uIG5mKGEsYixjKXtiPT1ZZT9hLnMuY2FsbChhLmosYyk6YS5nJiZhLmcuY2FsbChhLmosYyl9ZnVuY3Rpb24gbWYoYSxiKXthLnM9ITA7UWUoZnVuY3Rpb24oKXthLnMmJm9mLmNhbGwobnVsbCxiKX0pfXZhciBvZj1OZTtmdW5jdGlvbiBaZShhKXtCYS5jYWxsKHRoaXMsXG5hKX13KFplLEJhKTtaZS5wcm90b3R5cGUubmFtZT1cImNhbmNlbFwiO2Z1bmN0aW9uIHBmKGEsYixjKXtifHwoYj17fSk7Yz1jfHx3aW5kb3c7dmFyIGQ9YSBpbnN0YW5jZW9mIHhjP2E6QmMoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuaHJlZj9hLmhyZWY6U3RyaW5nKGEpKTthPWIudGFyZ2V0fHxhLnRhcmdldDt2YXIgZT1bXTtmb3IoZiBpbiBiKXN3aXRjaChmKXtjYXNlIFwid2lkdGhcIjpjYXNlIFwiaGVpZ2h0XCI6Y2FzZSBcInRvcFwiOmNhc2UgXCJsZWZ0XCI6ZS5wdXNoKGYrXCI9XCIrYltmXSk7YnJlYWs7Y2FzZSBcInRhcmdldFwiOmNhc2UgXCJub29wZW5lclwiOmNhc2UgXCJub3JlZmVycmVyXCI6YnJlYWs7ZGVmYXVsdDplLnB1c2goZitcIj1cIisoYltmXT8xOjApKX12YXIgZj1lLmpvaW4oXCIsXCIpOyh5KFwiaVBob25lXCIpJiYheShcImlQb2RcIikmJiF5KFwiaVBhZFwiKXx8eShcImlQYWRcIil8fHkoXCJpUG9kXCIpKSYmYy5uYXZpZ2F0b3ImJmMubmF2aWdhdG9yLnN0YW5kYWxvbmUmJmEmJlwiX3NlbGZcIiE9YT8oZj1jLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJBXCIpLFxuZD1kIGluc3RhbmNlb2YgeGM/ZDpEYyhkKSxmLmhyZWY9emMoZCksZi5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIixhKSxiLm5vcmVmZXJyZXImJmYuc2V0QXR0cmlidXRlKFwicmVsXCIsXCJub3JlZmVycmVyXCIpLGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50XCIpLGIuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLGMsMSksZi5kaXNwYXRjaEV2ZW50KGIpLGM9e30pOmIubm9yZWZlcnJlcj8oYz1jLm9wZW4oXCJcIixhLGYpLGI9emMoZCkudG9TdHJpbmcoKSxjJiYoY2MmJi0xIT1iLmluZGV4T2YoXCI7XCIpJiYoYj1cIidcIitiLnJlcGxhY2UoLycvZyxcIiUyN1wiKStcIidcIiksYy5vcGVuZXI9bnVsbCxiPUpjKCc8bWV0YSBuYW1lPVwicmVmZXJyZXJcIiBjb250ZW50PVwibm8tcmVmZXJyZXJcIj48bWV0YSBodHRwLWVxdWl2PVwicmVmcmVzaFwiIGNvbnRlbnQ9XCIwOyB1cmw9JytjYihiKSsnXCI+JyxudWxsKSxjLmRvY3VtZW50LndyaXRlKEljKGIpKSxjLmRvY3VtZW50LmNsb3NlKCkpKTooYz1jLm9wZW4oemMoZCkudG9TdHJpbmcoKSxcbmEsZikpJiZiLm5vb3BlbmVyJiYoYy5vcGVuZXI9bnVsbCk7cmV0dXJuIGN9ZnVuY3Rpb24gcWYoKXt0cnl7cmV0dXJuISghd2luZG93Lm9wZW5lcnx8IXdpbmRvdy5vcGVuZXIubG9jYXRpb258fHdpbmRvdy5vcGVuZXIubG9jYXRpb24uaG9zdG5hbWUhPT13aW5kb3cubG9jYXRpb24uaG9zdG5hbWV8fHdpbmRvdy5vcGVuZXIubG9jYXRpb24ucHJvdG9jb2whPT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpfWNhdGNoKGEkMil7fXJldHVybiExfWZ1bmN0aW9uIHJmKGEpe3BmKGEse3RhcmdldDp3aW5kb3cuY29yZG92YSYmd2luZG93LmNvcmRvdmEuSW5BcHBCcm93c2VyP1wiX3N5c3RlbVwiOlwiX2JsYW5rXCJ9LHZvaWQgMCl9ZnVuY3Rpb24gc2YoYSxiKXthPXRhKGEpJiYxPT1hLm5vZGVUeXBlP2E6ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTdHJpbmcoYSkpO2lmKG51bGw9PWEpdGhyb3cgRXJyb3IoYnx8XCJDYW5ub3QgZmluZCBlbGVtZW50LlwiKTtyZXR1cm4gYX1mdW5jdGlvbiB0Zigpe3JldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZn1cbmZ1bmN0aW9uIHVmKCl7dmFyIGE9bnVsbDtyZXR1cm4obmV3IFZlKGZ1bmN0aW9uKGIpe1wiY29tcGxldGVcIj09bi5kb2N1bWVudC5yZWFkeVN0YXRlP2IoKTooYT1mdW5jdGlvbigpe2IoKX0sbGUod2luZG93LFwibG9hZFwiLGEpKX0pKS5DYShmdW5jdGlvbihiKXtzZSh3aW5kb3csXCJsb2FkXCIsYSk7dGhyb3cgYjt9KX1mdW5jdGlvbiB2Zigpe2Zvcih2YXIgYT0zMixiPVtdOzA8YTspYi5wdXNoKFwiMTIzNDU2Nzg5MGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIi5jaGFyQXQoTWF0aC5mbG9vcig2MipNYXRoLnJhbmRvbSgpKSkpLGEtLTtyZXR1cm4gYi5qb2luKFwiXCIpfWZ1bmN0aW9uIHdmKGEsYixjKXtjPXZvaWQgMD09PWM/e306YztyZXR1cm4gT2JqZWN0LmtleXMoYSkuZmlsdGVyKGZ1bmN0aW9uKGQpe3JldHVybiBiLmluY2x1ZGVzKGQpfSkucmVkdWNlKGZ1bmN0aW9uKGQsZSl7ZFtlXT1hW2VdO3JldHVybiBkfSxjKX1mdW5jdGlvbiB4ZihhKXt2YXIgYj1cbnlmO3RoaXMucz1bXTt0aGlzLlQ9Yjt0aGlzLk89YXx8bnVsbDt0aGlzLmo9dGhpcy5hPSExO3RoaXMuaD12b2lkIDA7dGhpcy5KPXRoaXMubD10aGlzLkE9ITE7dGhpcy5pPTA7dGhpcy5nPW51bGw7dGhpcy5DPTB9eGYucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbihhKXtpZih0aGlzLmEpdGhpcy5oIGluc3RhbmNlb2YgeGYmJnRoaXMuaC5jYW5jZWwoKTtlbHNle2lmKHRoaXMuZyl7dmFyIGI9dGhpcy5nO2RlbGV0ZSB0aGlzLmc7YT9iLmNhbmNlbChhKTooYi5DLS0sMD49Yi5DJiZiLmNhbmNlbCgpKX10aGlzLlQ/dGhpcy5ULmNhbGwodGhpcy5PLHRoaXMpOnRoaXMuSj0hMDt0aGlzLmF8fChhPW5ldyB6Zih0aGlzKSxBZih0aGlzKSxCZih0aGlzLCExLGEpKX19O3hmLnByb3RvdHlwZS5MPWZ1bmN0aW9uKGEsYil7dGhpcy5BPSExO0JmKHRoaXMsYSxiKX07ZnVuY3Rpb24gQmYoYSxiLGMpe2EuYT0hMDthLmg9YzthLmo9IWI7Q2YoYSl9ZnVuY3Rpb24gQWYoYSl7aWYoYS5hKXtpZighYS5KKXRocm93IG5ldyBEZihhKTtcbmEuSj0hMX19eGYucHJvdG90eXBlLmNhbGxiYWNrPWZ1bmN0aW9uKGEpe0FmKHRoaXMpO0JmKHRoaXMsITAsYSl9O2Z1bmN0aW9uIEVmKGEsYixjKXthLnMucHVzaChbYixjLHZvaWQgMF0pO2EuYSYmQ2YoYSl9eGYucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1uZXcgVmUoZnVuY3Rpb24oZyxoKXtkPWc7ZT1ofSk7RWYodGhpcyxkLGZ1bmN0aW9uKGcpe2cgaW5zdGFuY2VvZiB6Zj9mLmNhbmNlbCgpOmUoZyl9KTtyZXR1cm4gZi50aGVuKGEsYixjKX07eGYucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlPSEwO2Z1bmN0aW9uIEZmKGEpe3JldHVybiBMYShhLnMsZnVuY3Rpb24oYil7cmV0dXJuIHNhKGJbMV0pfSl9ZnVuY3Rpb24gQ2YoYSl7aWYoYS5pJiZhLmEmJkZmKGEpKXt2YXIgYj1hLmksYz1HZltiXTtjJiYobi5jbGVhclRpbWVvdXQoYy5hKSxkZWxldGUgR2ZbYl0pO2EuaT0wfWEuZyYmKGEuZy5DLS0sZGVsZXRlIGEuZyk7Yj1hLmg7Zm9yKHZhciBkPVxuYz0hMTthLnMubGVuZ3RoJiYhYS5BOyl7dmFyIGU9YS5zLnNoaWZ0KCksZj1lWzBdLGc9ZVsxXTtlPWVbMl07aWYoZj1hLmo/ZzpmKXRyeXt2YXIgaD1mLmNhbGwoZXx8YS5PLGIpO2thKGgpJiYoYS5qPWEuaiYmKGg9PWJ8fGggaW5zdGFuY2VvZiBFcnJvciksYS5oPWI9aCk7aWYoRmUoYil8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLlByb21pc2UmJmIgaW5zdGFuY2VvZiBuLlByb21pc2UpZD0hMCxhLkE9ITB9Y2F0Y2goayl7Yj1rLGEuaj0hMCxGZihhKXx8KGM9ITApfX1hLmg9YjtkJiYoaD1yKGEuTCxhLCEwKSxkPXIoYS5MLGEsITEpLGIgaW5zdGFuY2VvZiB4Zj8oRWYoYixoLGQpLGIubD0hMCk6Yi50aGVuKGgsZCkpO2MmJihiPW5ldyBIZihiKSxHZltiLmFdPWIsYS5pPWIuYSl9ZnVuY3Rpb24gRGYoKXtCYS5jYWxsKHRoaXMpfXcoRGYsQmEpO0RmLnByb3RvdHlwZS5tZXNzYWdlPVwiRGVmZXJyZWQgaGFzIGFscmVhZHkgZmlyZWRcIjtEZi5wcm90b3R5cGUubmFtZT1cIkFscmVhZHlDYWxsZWRFcnJvclwiO1xuZnVuY3Rpb24gemYoKXtCYS5jYWxsKHRoaXMpfXcoemYsQmEpO3pmLnByb3RvdHlwZS5tZXNzYWdlPVwiRGVmZXJyZWQgd2FzIGNhbmNlbGVkXCI7emYucHJvdG90eXBlLm5hbWU9XCJDYW5jZWxlZEVycm9yXCI7ZnVuY3Rpb24gSGYoYSl7dGhpcy5hPW4uc2V0VGltZW91dChyKHRoaXMuaCx0aGlzKSwwKTt0aGlzLmc9YX1IZi5wcm90b3R5cGUuaD1mdW5jdGlvbigpe2RlbGV0ZSBHZlt0aGlzLmFdO3Rocm93IHRoaXMuZzt9O3ZhciBHZj17fTtmdW5jdGlvbiBJZihhKXt2YXIgYj17fSxjPWIuZG9jdW1lbnR8fGRvY3VtZW50LGQ9dWMoYSkudG9TdHJpbmcoKSxlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJTQ1JJUFRcIiksZj17cmI6ZSxzYjp2b2lkIDB9LGc9bmV3IHhmKGYpLGg9bnVsbCxrPW51bGwhPWIudGltZW91dD9iLnRpbWVvdXQ6NUUzOzA8ayYmKGg9d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtKZihlLCEwKTt2YXIgcD1uZXcgS2YoTGYsXCJUaW1lb3V0IHJlYWNoZWQgZm9yIGxvYWRpbmcgc2NyaXB0IFwiK1xuZCk7QWYoZyk7QmYoZywhMSxwKX0sayksZi5zYj1oKTtlLm9ubG9hZD1lLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2UucmVhZHlTdGF0ZSYmXCJsb2FkZWRcIiE9ZS5yZWFkeVN0YXRlJiZcImNvbXBsZXRlXCIhPWUucmVhZHlTdGF0ZXx8KEpmKGUsYi54Y3x8ITEsaCksZy5jYWxsYmFjayhudWxsKSl9O2Uub25lcnJvcj1mdW5jdGlvbigpe0pmKGUsITAsaCk7dmFyIHA9bmV3IEtmKE1mLFwiRXJyb3Igd2hpbGUgbG9hZGluZyBzY3JpcHQgXCIrZCk7QWYoZyk7QmYoZywhMSxwKX07Zj1iLmF0dHJpYnV0ZXN8fHt9O2diKGYse3R5cGU6XCJ0ZXh0L2phdmFzY3JpcHRcIixjaGFyc2V0OlwiVVRGLThcIn0pO1djKGUsZik7TWMoZSxhKTtOZihjKS5hcHBlbmRDaGlsZChlKTtyZXR1cm4gZ31mdW5jdGlvbiBOZihhKXt2YXIgYj0oYXx8ZG9jdW1lbnQpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiSEVBRFwiKTtyZXR1cm4gYiYmMCE9Yi5sZW5ndGg/YlswXTphLmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiB5Zigpe2lmKHRoaXMmJlxudGhpcy5yYil7dmFyIGE9dGhpcy5yYjthJiZcIlNDUklQVFwiPT1hLnRhZ05hbWUmJkpmKGEsITAsdGhpcy5zYil9fWZ1bmN0aW9uIEpmKGEsYixjKXtudWxsIT1jJiZuLmNsZWFyVGltZW91dChjKTthLm9ubG9hZD1uYTthLm9uZXJyb3I9bmE7YS5vbnJlYWR5c3RhdGVjaGFuZ2U9bmE7YiYmd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtaYyhhKX0sMCl9dmFyIE1mPTAsTGY9MTtmdW5jdGlvbiBLZihhLGIpe3ZhciBjPVwiSnNsb2FkZXIgZXJyb3IgKGNvZGUgI1wiK2ErXCIpXCI7YiYmKGMrPVwiOiBcIitiKTtCYS5jYWxsKHRoaXMsYyk7dGhpcy5jb2RlPWF9dyhLZixCYSk7ZnVuY3Rpb24gT2YoKXtyZXR1cm4gbi5nb29nbGUmJm4uZ29vZ2xlLmFjY291bnRzJiZuLmdvb2dsZS5hY2NvdW50cy5pZHx8bnVsbH1mdW5jdGlvbiBQZihhKXt0aGlzLmE9YXx8T2YoKTt0aGlzLmg9ITE7dGhpcy5nPW51bGx9UGYucHJvdG90eXBlLmNhbmNlbD1mdW5jdGlvbigpe3RoaXMuYSYmdGhpcy5oJiYodGhpcy5nJiZcbnRoaXMuZyhudWxsKSx0aGlzLmEuY2FuY2VsKCkpfTtmdW5jdGlvbiBRZihhLGIsYyl7aWYoYS5hJiZiKXJldHVybiBmdW5jdGlvbigpe2EuaD0hMDtyZXR1cm4gbmV3IFZlKGZ1bmN0aW9uKGUpe2EuZz1lO2EuYS5pbml0aWFsaXplKHtjbGllbnRfaWQ6YixjYWxsYmFjazplLGF1dG9fc2VsZWN0OiFjfSk7YS5hLnByb21wdCgpfSl9KCk7aWYoYil7dmFyIGQ9UmYuWGEoKS5sb2FkKCkudGhlbihmdW5jdGlvbigpe2EuYT1PZigpO3JldHVybiBRZihhLGIsYyl9KS5DYShmdW5jdGlvbigpe3JldHVybiBudWxsfSk7cmV0dXJuIEYoZCl9cmV0dXJuIEYobnVsbCl9b2EoUGYpO3ZhciB3Yz1uZXcgcGMocWMsXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vZ3NpL2NsaWVudFwiKTtmdW5jdGlvbiBSZigpe3RoaXMuYT1udWxsfVJmLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztpZih0aGlzLmEpcmV0dXJuIHRoaXMuYTt2YXIgYj12YygpO3JldHVybiBPZigpP0YoKTp0aGlzLmE9XG51ZigpLnRoZW4oZnVuY3Rpb24oKXtpZighT2YoKSlyZXR1cm4gbmV3IFZlKGZ1bmN0aW9uKGMsZCl7dmFyIGU9c2V0VGltZW91dChmdW5jdGlvbigpe2EuYT1udWxsO2QoRXJyb3IoXCJOZXR3b3JrIGVycm9yIVwiKSl9LDFFNCk7bi5vbkdvb2dsZUxpYnJhcnlMb2FkPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGUpO2MoKX07RihJZihiKSkudGhlbihmdW5jdGlvbigpe09mKCkmJmMoKX0pLkNhKGZ1bmN0aW9uKGYpe2NsZWFyVGltZW91dChlKTthLmE9bnVsbDtkKGYpfSl9KX0pfTtvYShSZik7ZnVuY3Rpb24gU2YoYSxiKXt0aGlzLmE9YTt0aGlzLmc9Ynx8ZnVuY3Rpb24oYyl7dGhyb3cgYzt9fVNmLnByb3RvdHlwZS5jb25maXJtPWZ1bmN0aW9uKGEpe3JldHVybiBGKHRoaXMuYS5jb25maXJtKGEpKS5DYSh0aGlzLmcpfTtmdW5jdGlvbiBUZihhLGIsYyl7dGhpcy5yZXNldChhLGIsYyx2b2lkIDAsdm9pZCAwKX1UZi5wcm90b3R5cGUuYT1udWxsO3ZhciBVZj0wO1RmLnByb3RvdHlwZS5yZXNldD1cbmZ1bmN0aW9uKGEsYixjLGQsZSl7XCJudW1iZXJcIj09dHlwZW9mIGV8fFVmKys7dGhpcy5oPWR8fEFhKCk7dGhpcy5qPWE7dGhpcy5zPWI7dGhpcy5nPWM7ZGVsZXRlIHRoaXMuYX07ZnVuY3Rpb24gVmYoYSl7dGhpcy5zPWE7dGhpcy5hPXRoaXMuaD10aGlzLmo9dGhpcy5nPW51bGx9ZnVuY3Rpb24gV2YoYSxiKXt0aGlzLm5hbWU9YTt0aGlzLnZhbHVlPWJ9V2YucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZX07dmFyIFhmPW5ldyBXZihcIlNFVkVSRVwiLDFFMyksWWY9bmV3IFdmKFwiV0FSTklOR1wiLDkwMCksWmY9bmV3IFdmKFwiQ09ORklHXCIsNzAwKTtmdW5jdGlvbiAkZihhKXtpZihhLmopcmV0dXJuIGEuajtpZihhLmcpcmV0dXJuICRmKGEuZyk7RmEoXCJSb290IGxvZ2dlciBoYXMgbm8gbGV2ZWwgc2V0LlwiKTtyZXR1cm4gbnVsbH1WZi5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKGEsYixjKXtpZihhLnZhbHVlPj0kZih0aGlzKS52YWx1ZSlmb3Ioc2EoYikmJlxuKGI9YigpKSxhPW5ldyBUZihhLFN0cmluZyhiKSx0aGlzLnMpLGMmJihhLmE9YyksYz10aGlzO2M7KXt2YXIgZD1jLGU9YTtpZihkLmEpZm9yKHZhciBmPTA7Yj1kLmFbZl07ZisrKWIoZSk7Yz1jLmd9fTt2YXIgYWc9e30sYmc9bnVsbDtmdW5jdGlvbiBjZygpe2JnfHwoYmc9bmV3IFZmKFwiXCIpLGFnW1wiXCJdPWJnLGJnLmo9WmYpfWZ1bmN0aW9uIGRnKGEpe2NnKCk7dmFyIGI7aWYoIShiPWFnW2FdKSl7Yj1uZXcgVmYoYSk7dmFyIGM9YS5sYXN0SW5kZXhPZihcIi5cIiksZD1hLnN1YnN0cihjKzEpO2M9ZGcoYS5zdWJzdHIoMCxjKSk7Yy5ofHwoYy5oPXt9KTtjLmhbZF09YjtiLmc9YzthZ1thXT1ifXJldHVybiBifWZ1bmN0aW9uIGVnKCl7dGhpcy5hPUFhKCl9dmFyIGZnPW51bGw7ZWcucHJvdG90eXBlLnNldD1mdW5jdGlvbihhKXt0aGlzLmE9YX07ZWcucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5zZXQoQWEoKSl9O2VnLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hfTtcbmZ1bmN0aW9uIGdnKGEpe3RoaXMuaj1hfHxcIlwiO2ZnfHwoZmc9bmV3IGVnKTt0aGlzLnM9Zmd9Z2cucHJvdG90eXBlLmE9ITA7Z2cucHJvdG90eXBlLmc9ITA7Z2cucHJvdG90eXBlLmg9ITE7ZnVuY3Rpb24gaGcoYSl7cmV0dXJuIDEwPmE/XCIwXCIrYTpTdHJpbmcoYSl9ZnVuY3Rpb24gaWcoYSxiKXthPShhLmgtYikvMUUzO2I9YS50b0ZpeGVkKDMpO3ZhciBjPTA7aWYoMT5hKWM9MjtlbHNlIGZvcig7MTAwPmE7KWMrKyxhKj0xMDtmb3IoOzA8Yy0tOyliPVwiIFwiK2I7cmV0dXJuIGJ9ZnVuY3Rpb24gamcoYSl7Z2cuY2FsbCh0aGlzLGEpfXcoamcsZ2cpO2Z1bmN0aW9uIGtnKGEsYil7dmFyIGM9W107Yy5wdXNoKGEuaixcIiBcIik7aWYoYS5nKXt2YXIgZD1uZXcgRGF0ZShiLmgpO2MucHVzaChcIltcIixoZyhkLmdldEZ1bGxZZWFyKCktMkUzKStoZyhkLmdldE1vbnRoKCkrMSkraGcoZC5nZXREYXRlKCkpK1wiIFwiK2hnKGQuZ2V0SG91cnMoKSkrXCI6XCIraGcoZC5nZXRNaW51dGVzKCkpK1wiOlwiK2hnKGQuZ2V0U2Vjb25kcygpKStcblwiLlwiK2hnKE1hdGguZmxvb3IoZC5nZXRNaWxsaXNlY29uZHMoKS8xMCkpLFwiXSBcIil9Yy5wdXNoKFwiW1wiLGlnKGIsYS5zLmdldCgpKSxcInNdIFwiKTtjLnB1c2goXCJbXCIsYi5nLFwiXSBcIik7Yy5wdXNoKGIucyk7YS5oJiYoYj1iLmEpJiZjLnB1c2goXCJcXG5cIixiIGluc3RhbmNlb2YgRXJyb3I/Yi5tZXNzYWdlOmIudG9TdHJpbmcoKSk7YS5hJiZjLnB1c2goXCJcXG5cIik7cmV0dXJuIGMuam9pbihcIlwiKX1mdW5jdGlvbiBsZygpe3RoaXMucz1yKHRoaXMuaCx0aGlzKTt0aGlzLmE9bmV3IGpnO3RoaXMuYS5nPSExO3RoaXMuYS5oPSExO3RoaXMuZz10aGlzLmEuYT0hMTt0aGlzLmo9e319bGcucHJvdG90eXBlLmg9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihmKXtpZihmKXtpZihmLnZhbHVlPj1YZi52YWx1ZSlyZXR1cm5cImVycm9yXCI7aWYoZi52YWx1ZT49WWYudmFsdWUpcmV0dXJuXCJ3YXJuXCI7aWYoZi52YWx1ZT49WmYudmFsdWUpcmV0dXJuXCJsb2dcIn1yZXR1cm5cImRlYnVnXCJ9aWYoIXRoaXMualthLmddKXt2YXIgYz1cbmtnKHRoaXMuYSxhKSxkPW1nO2lmKGQpe3ZhciBlPWIoYS5qKTtuZyhkLGUsYyxhLmEpfX19O3ZhciBtZz1uLmNvbnNvbGU7ZnVuY3Rpb24gbmcoYSxiLGMsZCl7aWYoYVtiXSlhW2JdKGMsZHx8XCJcIik7ZWxzZSBhLmxvZyhjLGR8fFwiXCIpfWZ1bmN0aW9uIG9nKGEsYil7dmFyIGM9cGc7YyYmYy5sb2coWGYsYSxiKX12YXIgcGc7cGc9ZGcoXCJmaXJlYmFzZXVpXCIpO3ZhciBxZz1uZXcgbGc7aWYoMSE9cWcuZyl7dmFyIHJnO2NnKCk7cmc9Ymc7dmFyIHNnPXFnLnM7cmcuYXx8KHJnLmE9W10pO3JnLmEucHVzaChzZyk7cWcuZz0hMH1mdW5jdGlvbiB0ZyhhKXt2YXIgYj1wZztiJiZiLmxvZyhZZixhLHZvaWQgMCl9ZnVuY3Rpb24gdWcoKXt0aGlzLmE9KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudD9udWxsOmRvY3VtZW50KXx8e2Nvb2tpZTpcIlwifX1sPXVnLnByb3RvdHlwZTtsLnNldD1mdW5jdGlvbihhLGIsYyxkLGUsZil7aWYoL1s7PVxcc10vLnRlc3QoYSkpdGhyb3cgRXJyb3IoJ0ludmFsaWQgY29va2llIG5hbWUgXCInK1xuYSsnXCInKTtpZigvWztcXHJcXG5dLy50ZXN0KGIpKXRocm93IEVycm9yKCdJbnZhbGlkIGNvb2tpZSB2YWx1ZSBcIicrYisnXCInKTtrYShjKXx8KGM9LTEpO2U9ZT9cIjtkb21haW49XCIrZTpcIlwiO2Q9ZD9cIjtwYXRoPVwiK2Q6XCJcIjtmPWY/XCI7c2VjdXJlXCI6XCJcIjtjPTA+Yz9cIlwiOjA9PWM/XCI7ZXhwaXJlcz1cIisobmV3IERhdGUoMTk3MCwxLDEpKS50b1VUQ1N0cmluZygpOlwiO2V4cGlyZXM9XCIrKG5ldyBEYXRlKEFhKCkrMUUzKmMpKS50b1VUQ1N0cmluZygpO3RoaXMuYS5jb29raWU9YStcIj1cIitiK2UrZCtjK2Z9O2wuZ2V0PWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWErXCI9XCIsZD0odGhpcy5hLmNvb2tpZXx8XCJcIikuc3BsaXQoXCI7XCIpLGU9MCxmO2U8ZC5sZW5ndGg7ZSsrKXtmPVVhKGRbZV0pO2lmKDA9PWYubGFzdEluZGV4T2YoYywwKSlyZXR1cm4gZi5zdWJzdHIoYy5sZW5ndGgpO2lmKGY9PWEpcmV0dXJuXCJcIn1yZXR1cm4gYn07bC5qYT1mdW5jdGlvbigpe3JldHVybiB2Zyh0aGlzKS5rZXlzfTtsLmxhPVxuZnVuY3Rpb24oKXtyZXR1cm4gdmcodGhpcykudmFsdWVzfTtsLmNsZWFyPWZ1bmN0aW9uKCl7Zm9yKHZhciBhPXZnKHRoaXMpLmtleXMsYj1hLmxlbmd0aC0xOzA8PWI7Yi0tKXt2YXIgYz1hW2JdO3RoaXMuZ2V0KGMpO3RoaXMuc2V0KGMsXCJcIiwwLHZvaWQgMCx2b2lkIDApfX07ZnVuY3Rpb24gdmcoYSl7YT0oYS5hLmNvb2tpZXx8XCJcIikuc3BsaXQoXCI7XCIpO2Zvcih2YXIgYj1bXSxjPVtdLGQsZSxmPTA7ZjxhLmxlbmd0aDtmKyspZT1VYShhW2ZdKSxkPWUuaW5kZXhPZihcIj1cIiksLTE9PWQ/KGIucHVzaChcIlwiKSxjLnB1c2goZSkpOihiLnB1c2goZS5zdWJzdHJpbmcoMCxkKSksYy5wdXNoKGUuc3Vic3RyaW5nKGQrMSkpKTtyZXR1cm57a2V5czpiLHZhbHVlczpjfX12YXIgeGc9bmV3IHVnO2Z1bmN0aW9uIHlnKCl7fWZ1bmN0aW9uIHpnKGEsYixjLGQpe3RoaXMuaD1cInVuZGVmaW5lZFwiIT09dHlwZW9mIGEmJm51bGwhPT1hP2E6LTE7dGhpcy5nPWJ8fG51bGw7dGhpcy5hPWN8fG51bGw7XG50aGlzLmo9ISFkfW0oemcseWcpO3pnLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt4Zy5zZXQoYSxiLHRoaXMuaCx0aGlzLmcsdGhpcy5hLHRoaXMuail9O3pnLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHhnLmdldChhKXx8bnVsbH07emcucHJvdG90eXBlLnJhPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZyxjPXRoaXMuYTt4Zy5nZXQoYSk7eGcuc2V0KGEsXCJcIiwwLGIsYyl9O2Z1bmN0aW9uIEFnKGEsYil7dGhpcy5nPWE7dGhpcy5hPWJ8fG51bGx9ZnVuY3Rpb24gQmcoYSl7cmV0dXJue2VtYWlsOmEuZyxjcmVkZW50aWFsOmEuYSYmYS5hLnRvSlNPTigpfX1mdW5jdGlvbiBDZyhhKXtpZihhJiZhLmVtYWlsKXt2YXIgYj1hLmNyZWRlbnRpYWwmJmZpcmViYXNlLmF1dGguQXV0aENyZWRlbnRpYWwuZnJvbUpTT04oYS5jcmVkZW50aWFsKTtyZXR1cm4gbmV3IEFnKGEuZW1haWwsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gRGcoYSl7dGhpcy5hPWF8fG51bGx9ZnVuY3Rpb24gRWcoYSl7Zm9yKHZhciBiPVxuW10sYz0wLGQ9MDtkPGEubGVuZ3RoO2QrKyl7dmFyIGU9YS5jaGFyQ29kZUF0KGQpOzI1NTxlJiYoYltjKytdPWUmMjU1LGU+Pj04KTtiW2MrK109ZX1yZXR1cm4gYn1mdW5jdGlvbiBGZyhhKXtyZXR1cm4gS2EoYSxmdW5jdGlvbihiKXtiPWIudG9TdHJpbmcoMTYpO3JldHVybiAxPGIubGVuZ3RoP2I6XCIwXCIrYn0pLmpvaW4oXCJcIil9ZnVuY3Rpb24gR2coYSl7dGhpcy5pPWE7dGhpcy5nPXRoaXMuaS5sZW5ndGgvNDt0aGlzLmo9dGhpcy5nKzY7dGhpcy5oPVtbXSxbXSxbXSxbXV07dGhpcy5zPVtbXSxbXSxbXSxbXV07dGhpcy5hPUFycmF5KEhnKih0aGlzLmorMSkpO2ZvcihhPTA7YTx0aGlzLmc7YSsrKXRoaXMuYVthXT1bdGhpcy5pWzQqYV0sdGhpcy5pWzQqYSsxXSx0aGlzLmlbNCphKzJdLHRoaXMuaVs0KmErM11dO3ZhciBiPUFycmF5KDQpO2ZvcihhPXRoaXMuZzthPEhnKih0aGlzLmorMSk7YSsrKXtiWzBdPXRoaXMuYVthLTFdWzBdO2JbMV09dGhpcy5hW2EtMV1bMV07YlsyXT1cbnRoaXMuYVthLTFdWzJdO2JbM109dGhpcy5hW2EtMV1bM107aWYoMD09YSV0aGlzLmcpe3ZhciBjPWIsZD1jWzBdO2NbMF09Y1sxXTtjWzFdPWNbMl07Y1syXT1jWzNdO2NbM109ZDtJZyhiKTtiWzBdXj1KZ1thL3RoaXMuZ11bMF07YlsxXV49SmdbYS90aGlzLmddWzFdO2JbMl1ePUpnW2EvdGhpcy5nXVsyXTtiWzNdXj1KZ1thL3RoaXMuZ11bM119ZWxzZSA2PHRoaXMuZyYmND09YSV0aGlzLmcmJklnKGIpO3RoaXMuYVthXT1BcnJheSg0KTt0aGlzLmFbYV1bMF09dGhpcy5hW2EtdGhpcy5nXVswXV5iWzBdO3RoaXMuYVthXVsxXT10aGlzLmFbYS10aGlzLmddWzFdXmJbMV07dGhpcy5hW2FdWzJdPXRoaXMuYVthLXRoaXMuZ11bMl1eYlsyXTt0aGlzLmFbYV1bM109dGhpcy5hW2EtdGhpcy5nXVszXV5iWzNdfX1HZy5wcm90b3R5cGUuQT0xNjt2YXIgSGc9R2cucHJvdG90eXBlLkEvNDtmdW5jdGlvbiBLZyhhLGIpe2Zvcih2YXIgYyxkPTA7ZDxIZztkKyspZm9yKHZhciBlPTA7ND5lO2UrKyljPVxuNCplK2QsYz1iW2NdLGEuaFtkXVtlXT1jfWZ1bmN0aW9uIExnKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxIZztjKyspZm9yKHZhciBkPTA7ND5kO2QrKyliWzQqZCtjXT1hLmhbY11bZF07cmV0dXJuIGJ9ZnVuY3Rpb24gTWcoYSxiKXtmb3IodmFyIGM9MDs0PmM7YysrKWZvcih2YXIgZD0wOzQ+ZDtkKyspYS5oW2NdW2RdXj1hLmFbNCpiK2RdW2NdfWZ1bmN0aW9uIE5nKGEsYil7Zm9yKHZhciBjPTA7ND5jO2MrKylmb3IodmFyIGQ9MDs0PmQ7ZCsrKWEuaFtjXVtkXT1iW2EuaFtjXVtkXV19ZnVuY3Rpb24gT2coYSl7Zm9yKHZhciBiPTE7ND5iO2IrKylmb3IodmFyIGM9MDs0PmM7YysrKWEuc1tiXVtjXT1hLmhbYl1bY107Zm9yKGI9MTs0PmI7YisrKWZvcihjPTA7ND5jO2MrKylhLmhbYl1bY109YS5zW2JdWyhjK2IpJUhnXX1mdW5jdGlvbiBQZyhhKXtmb3IodmFyIGI9MTs0PmI7YisrKWZvcih2YXIgYz0wOzQ+YztjKyspYS5zW2JdWyhjK2IpJUhnXT1hLmhbYl1bY107Zm9yKGI9MTs0PlxuYjtiKyspZm9yKGM9MDs0PmM7YysrKWEuaFtiXVtjXT1hLnNbYl1bY119ZnVuY3Rpb24gSWcoYSl7YVswXT1RZ1thWzBdXTthWzFdPVFnW2FbMV1dO2FbMl09UWdbYVsyXV07YVszXT1RZ1thWzNdXX12YXIgUWc9Wzk5LDEyNCwxMTksMTIzLDI0MiwxMDcsMTExLDE5Nyw0OCwxLDEwMyw0MywyNTQsMjE1LDE3MSwxMTgsMjAyLDEzMCwyMDEsMTI1LDI1MCw4OSw3MSwyNDAsMTczLDIxMiwxNjIsMTc1LDE1NiwxNjQsMTE0LDE5MiwxODMsMjUzLDE0NywzOCw1NCw2MywyNDcsMjA0LDUyLDE2NSwyMjksMjQxLDExMywyMTYsNDksMjEsNCwxOTksMzUsMTk1LDI0LDE1MCw1LDE1NCw3LDE4LDEyOCwyMjYsMjM1LDM5LDE3OCwxMTcsOSwxMzEsNDQsMjYsMjcsMTEwLDkwLDE2MCw4Miw1OSwyMTQsMTc5LDQxLDIyNyw0NywxMzIsODMsMjA5LDAsMjM3LDMyLDI1MiwxNzcsOTEsMTA2LDIwMywxOTAsNTcsNzQsNzYsODgsMjA3LDIwOCwyMzksMTcwLDI1MSw2Nyw3Nyw1MSwxMzMsNjksMjQ5LDIsXG4xMjcsODAsNjAsMTU5LDE2OCw4MSwxNjMsNjQsMTQzLDE0NiwxNTcsNTYsMjQ1LDE4OCwxODIsMjE4LDMzLDE2LDI1NSwyNDMsMjEwLDIwNSwxMiwxOSwyMzYsOTUsMTUxLDY4LDIzLDE5NiwxNjcsMTI2LDYxLDEwMCw5MywyNSwxMTUsOTYsMTI5LDc5LDIyMCwzNCw0MiwxNDQsMTM2LDcwLDIzOCwxODQsMjAsMjIyLDk0LDExLDIxOSwyMjQsNTAsNTgsMTAsNzMsNiwzNiw5MiwxOTQsMjExLDE3Miw5OCwxNDUsMTQ5LDIyOCwxMjEsMjMxLDIwMCw1NSwxMDksMTQxLDIxMyw3OCwxNjksMTA4LDg2LDI0NCwyMzQsMTAxLDEyMiwxNzQsOCwxODYsMTIwLDM3LDQ2LDI4LDE2NiwxODAsMTk4LDIzMiwyMjEsMTE2LDMxLDc1LDE4OSwxMzksMTM4LDExMiw2MiwxODEsMTAyLDcyLDMsMjQ2LDE0LDk3LDUzLDg3LDE4NSwxMzQsMTkzLDI5LDE1OCwyMjUsMjQ4LDE1MiwxNywxMDUsMjE3LDE0MiwxNDgsMTU1LDMwLDEzNSwyMzMsMjA2LDg1LDQwLDIyMywxNDAsMTYxLDEzNywxMywxOTEsMjMwLDY2LFxuMTA0LDY1LDE1Myw0NSwxNSwxNzYsODQsMTg3LDIyXSxSZz1bODIsOSwxMDYsMjEzLDQ4LDU0LDE2NSw1NiwxOTEsNjQsMTYzLDE1OCwxMjksMjQzLDIxNSwyNTEsMTI0LDIyNyw1NywxMzAsMTU1LDQ3LDI1NSwxMzUsNTIsMTQyLDY3LDY4LDE5NiwyMjIsMjMzLDIwMyw4NCwxMjMsMTQ4LDUwLDE2NiwxOTQsMzUsNjEsMjM4LDc2LDE0OSwxMSw2NiwyNTAsMTk1LDc4LDgsNDYsMTYxLDEwMiw0MCwyMTcsMzYsMTc4LDExOCw5MSwxNjIsNzMsMTA5LDEzOSwyMDksMzcsMTE0LDI0OCwyNDYsMTAwLDEzNCwxMDQsMTUyLDIyLDIxMiwxNjQsOTIsMjA0LDkzLDEwMSwxODIsMTQ2LDEwOCwxMTIsNzIsODAsMjUzLDIzNywxODUsMjE4LDk0LDIxLDcwLDg3LDE2NywxNDEsMTU3LDEzMiwxNDQsMjE2LDE3MSwwLDE0MCwxODgsMjExLDEwLDI0NywyMjgsODgsNSwxODQsMTc5LDY5LDYsMjA4LDQ0LDMwLDE0MywyMDIsNjMsMTUsMiwxOTMsMTc1LDE4OSwzLDEsMTksMTM4LDEwNyw1OCwxNDUsMTcsXG42NSw3OSwxMDMsMjIwLDIzNCwxNTEsMjQyLDIwNywyMDYsMjQwLDE4MCwyMzAsMTE1LDE1MCwxNzIsMTE2LDM0LDIzMSwxNzMsNTMsMTMzLDIyNiwyNDksNTUsMjMyLDI4LDExNywyMjMsMTEwLDcxLDI0MSwyNiwxMTMsMjksNDEsMTk3LDEzNywxMTEsMTgzLDk4LDE0LDE3MCwyNCwxOTAsMjcsMjUyLDg2LDYyLDc1LDE5OCwyMTAsMTIxLDMyLDE1NCwyMTksMTkyLDI1NCwxMjAsMjA1LDkwLDI0NCwzMSwyMjEsMTY4LDUxLDEzNiw3LDE5OSw0OSwxNzcsMTgsMTYsODksMzksMTI4LDIzNiw5NSw5Niw4MSwxMjcsMTY5LDI1LDE4MSw3NCwxMyw0NSwyMjksMTIyLDE1OSwxNDcsMjAxLDE1NiwyMzksMTYwLDIyNCw1OSw3NywxNzQsNDIsMjQ1LDE3NiwyMDAsMjM1LDE4Nyw2MCwxMzEsODMsMTUzLDk3LDIzLDQzLDQsMTI2LDE4NiwxMTksMjE0LDM4LDIyNSwxMDUsMjAsOTksODUsMzMsMTIsMTI1XSxKZz1bWzAsMCwwLDBdLFsxLDAsMCwwXSxbMiwwLDAsMF0sWzQsMCwwLDBdLFs4LDAsMCxcbjBdLFsxNiwwLDAsMF0sWzMyLDAsMCwwXSxbNjQsMCwwLDBdLFsxMjgsMCwwLDBdLFsyNywwLDAsMF0sWzU0LDAsMCwwXV0sU2c9WzAsMiw0LDYsOCwxMCwxMiwxNCwxNiwxOCwyMCwyMiwyNCwyNiwyOCwzMCwzMiwzNCwzNiwzOCw0MCw0Miw0NCw0Niw0OCw1MCw1Miw1NCw1Niw1OCw2MCw2Miw2NCw2Niw2OCw3MCw3Miw3NCw3Niw3OCw4MCw4Miw4NCw4Niw4OCw5MCw5Miw5NCw5Niw5OCwxMDAsMTAyLDEwNCwxMDYsMTA4LDExMCwxMTIsMTE0LDExNiwxMTgsMTIwLDEyMiwxMjQsMTI2LDEyOCwxMzAsMTMyLDEzNCwxMzYsMTM4LDE0MCwxNDIsMTQ0LDE0NiwxNDgsMTUwLDE1MiwxNTQsMTU2LDE1OCwxNjAsMTYyLDE2NCwxNjYsMTY4LDE3MCwxNzIsMTc0LDE3NiwxNzgsMTgwLDE4MiwxODQsMTg2LDE4OCwxOTAsMTkyLDE5NCwxOTYsMTk4LDIwMCwyMDIsMjA0LDIwNiwyMDgsMjEwLDIxMiwyMTQsMjE2LDIxOCwyMjAsMjIyLDIyNCwyMjYsMjI4LDIzMCwyMzIsMjM0LDIzNiwyMzgsMjQwLFxuMjQyLDI0NCwyNDYsMjQ4LDI1MCwyNTIsMjU0LDI3LDI1LDMxLDI5LDE5LDE3LDIzLDIxLDExLDksMTUsMTMsMywxLDcsNSw1OSw1Nyw2Myw2MSw1MSw0OSw1NSw1Myw0Myw0MSw0Nyw0NSwzNSwzMywzOSwzNyw5MSw4OSw5NSw5Myw4Myw4MSw4Nyw4NSw3NSw3Myw3OSw3Nyw2Nyw2NSw3MSw2OSwxMjMsMTIxLDEyNywxMjUsMTE1LDExMywxMTksMTE3LDEwNywxMDUsMTExLDEwOSw5OSw5NywxMDMsMTAxLDE1NSwxNTMsMTU5LDE1NywxNDcsMTQ1LDE1MSwxNDksMTM5LDEzNywxNDMsMTQxLDEzMSwxMjksMTM1LDEzMywxODcsMTg1LDE5MSwxODksMTc5LDE3NywxODMsMTgxLDE3MSwxNjksMTc1LDE3MywxNjMsMTYxLDE2NywxNjUsMjE5LDIxNywyMjMsMjIxLDIxMSwyMDksMjE1LDIxMywyMDMsMjAxLDIwNywyMDUsMTk1LDE5MywxOTksMTk3LDI1MSwyNDksMjU1LDI1MywyNDMsMjQxLDI0NywyNDUsMjM1LDIzMywyMzksMjM3LDIyNywyMjUsMjMxLDIyOV0sVGc9WzAsMyw2LDUsMTIsXG4xNSwxMCw5LDI0LDI3LDMwLDI5LDIwLDIzLDE4LDE3LDQ4LDUxLDU0LDUzLDYwLDYzLDU4LDU3LDQwLDQzLDQ2LDQ1LDM2LDM5LDM0LDMzLDk2LDk5LDEwMiwxMDEsMTA4LDExMSwxMDYsMTA1LDEyMCwxMjMsMTI2LDEyNSwxMTYsMTE5LDExNCwxMTMsODAsODMsODYsODUsOTIsOTUsOTAsODksNzIsNzUsNzgsNzcsNjgsNzEsNjYsNjUsMTkyLDE5NSwxOTgsMTk3LDIwNCwyMDcsMjAyLDIwMSwyMTYsMjE5LDIyMiwyMjEsMjEyLDIxNSwyMTAsMjA5LDI0MCwyNDMsMjQ2LDI0NSwyNTIsMjU1LDI1MCwyNDksMjMyLDIzNSwyMzgsMjM3LDIyOCwyMzEsMjI2LDIyNSwxNjAsMTYzLDE2NiwxNjUsMTcyLDE3NSwxNzAsMTY5LDE4NCwxODcsMTkwLDE4OSwxODAsMTgzLDE3OCwxNzcsMTQ0LDE0NywxNTAsMTQ5LDE1NiwxNTksMTU0LDE1MywxMzYsMTM5LDE0MiwxNDEsMTMyLDEzNSwxMzAsMTI5LDE1NSwxNTIsMTU3LDE1OCwxNTEsMTQ4LDE0NSwxNDYsMTMxLDEyOCwxMzMsMTM0LDE0MywxNDAsXG4xMzcsMTM4LDE3MSwxNjgsMTczLDE3NCwxNjcsMTY0LDE2MSwxNjIsMTc5LDE3NiwxODEsMTgyLDE5MSwxODgsMTg1LDE4NiwyNTEsMjQ4LDI1MywyNTQsMjQ3LDI0NCwyNDEsMjQyLDIyNywyMjQsMjI5LDIzMCwyMzksMjM2LDIzMywyMzQsMjAzLDIwMCwyMDUsMjA2LDE5OSwxOTYsMTkzLDE5NCwyMTEsMjA4LDIxMywyMTQsMjIzLDIyMCwyMTcsMjE4LDkxLDg4LDkzLDk0LDg3LDg0LDgxLDgyLDY3LDY0LDY5LDcwLDc5LDc2LDczLDc0LDEwNywxMDQsMTA5LDExMCwxMDMsMTAwLDk3LDk4LDExNSwxMTIsMTE3LDExOCwxMjcsMTI0LDEyMSwxMjIsNTksNTYsNjEsNjIsNTUsNTIsNDksNTAsMzUsMzIsMzcsMzgsNDcsNDQsNDEsNDIsMTEsOCwxMywxNCw3LDQsMSwyLDE5LDE2LDIxLDIyLDMxLDI4LDI1LDI2XSxVZz1bMCw5LDE4LDI3LDM2LDQ1LDU0LDYzLDcyLDY1LDkwLDgzLDEwOCwxMDEsMTI2LDExOSwxNDQsMTUzLDEzMCwxMzksMTgwLDE4OSwxNjYsMTc1LDIxNiwyMDksMjAyLDE5NSxcbjI1MiwyNDUsMjM4LDIzMSw1OSw1MCw0MSwzMiwzMSwyMiwxMyw0LDExNSwxMjIsOTcsMTA0LDg3LDk0LDY5LDc2LDE3MSwxNjIsMTg1LDE3NiwxNDMsMTM0LDE1NywxNDgsMjI3LDIzNCwyNDEsMjQ4LDE5OSwyMDYsMjEzLDIyMCwxMTgsMTI3LDEwMCwxMDksODIsOTEsNjQsNzMsNjIsNTUsNDQsMzcsMjYsMTksOCwxLDIzMCwyMzksMjQ0LDI1MywxOTQsMjAzLDIwOCwyMTcsMTc0LDE2NywxODgsMTgxLDEzOCwxMzEsMTUyLDE0NSw3Nyw2OCw5NSw4NiwxMDUsOTYsMTIzLDExNCw1LDEyLDIzLDMwLDMzLDQwLDUxLDU4LDIyMSwyMTIsMjA3LDE5OCwyNDksMjQwLDIzNSwyMjYsMTQ5LDE1NiwxMzUsMTQyLDE3NywxODQsMTYzLDE3MCwyMzYsMjI5LDI1NCwyNDcsMjAwLDE5MywyMTgsMjExLDE2NCwxNzMsMTgyLDE5MSwxMjgsMTM3LDE0NiwxNTUsMTI0LDExNywxMTAsMTAzLDg4LDgxLDc0LDY3LDUyLDYxLDM4LDQ3LDE2LDI1LDIsMTEsMjE1LDIyMiwxOTcsMjA0LDI0MywyNTAsMjI1LFxuMjMyLDE1OSwxNTAsMTQxLDEzMiwxODcsMTc4LDE2OSwxNjAsNzEsNzgsODUsOTIsOTksMTA2LDExMywxMjAsMTUsNiwyOSwyMCw0MywzNCw1Nyw0OCwxNTQsMTQ3LDEzNiwxMjksMTkwLDE4MywxNzIsMTY1LDIxMCwyMTksMTkyLDIwMSwyNDYsMjU1LDIyOCwyMzcsMTAsMywyNCwxNyw0NiwzOSw2MCw1Myw2Niw3NSw4MCw4OSwxMDIsMTExLDExNiwxMjUsMTYxLDE2OCwxNzksMTg2LDEzMywxNDAsMTUxLDE1OCwyMzMsMjI0LDI1MSwyNDIsMjA1LDE5NiwyMjMsMjE0LDQ5LDU2LDM1LDQyLDIxLDI4LDcsMTQsMTIxLDExMiwxMDcsOTgsOTMsODQsNzksNzBdLFZnPVswLDExLDIyLDI5LDQ0LDM5LDU4LDQ5LDg4LDgzLDc4LDY5LDExNiwxMjcsOTgsMTA1LDE3NiwxODcsMTY2LDE3MywxNTYsMTUxLDEzOCwxMjksMjMyLDIyNywyNTQsMjQ1LDE5NiwyMDcsMjEwLDIxNywxMjMsMTEyLDEwOSwxMDIsODcsOTIsNjUsNzQsMzUsNDAsNTMsNjIsMTUsNCwyNSwxOCwyMDMsMTkyLDIyMSwyMTQsXG4yMzEsMjM2LDI0MSwyNTAsMTQ3LDE1MiwxMzMsMTQyLDE5MSwxODAsMTY5LDE2MiwyNDYsMjUzLDIyNCwyMzUsMjE4LDIwOSwyMDQsMTk5LDE3NCwxNjUsMTg0LDE3OSwxMzAsMTM3LDE0OCwxNTksNzAsNzcsODAsOTEsMTA2LDk3LDEyNCwxMTksMzAsMjEsOCwzLDUwLDU3LDM2LDQ3LDE0MSwxMzQsMTU1LDE0NCwxNjEsMTcwLDE4MywxODgsMjEzLDIyMiwxOTUsMjAwLDI0OSwyNDIsMjM5LDIyOCw2MSw1NCw0MywzMiwxNywyNiw3LDEyLDEwMSwxMTAsMTE1LDEyMCw3Myw2Niw5NSw4NCwyNDcsMjUyLDIyNSwyMzQsMjE5LDIwOCwyMDUsMTk4LDE3NSwxNjQsMTg1LDE3OCwxMzEsMTM2LDE0OSwxNTgsNzEsNzYsODEsOTAsMTA3LDk2LDEyNSwxMTgsMzEsMjAsOSwyLDUxLDU2LDM3LDQ2LDE0MCwxMzUsMTU0LDE0NSwxNjAsMTcxLDE4MiwxODksMjEyLDIyMywxOTQsMjAxLDI0OCwyNDMsMjM4LDIyOSw2MCw1NSw0MiwzMywxNiwyNyw2LDEzLDEwMCwxMTEsMTE0LDEyMSw3Miw2Nyw5NCxcbjg1LDEsMTAsMjMsMjgsNDUsMzgsNTksNDgsODksODIsNzksNjgsMTE3LDEyNiw5OSwxMDQsMTc3LDE4NiwxNjcsMTcyLDE1NywxNTAsMTM5LDEyOCwyMzMsMjI2LDI1NSwyNDQsMTk3LDIwNiwyMTEsMjE2LDEyMiwxMTMsMTA4LDEwMyw4Niw5Myw2NCw3NSwzNCw0MSw1Miw2MywxNCw1LDI0LDE5LDIwMiwxOTMsMjIwLDIxNSwyMzAsMjM3LDI0MCwyNTEsMTQ2LDE1MywxMzIsMTQzLDE5MCwxODEsMTY4LDE2M10sV2c9WzAsMTMsMjYsMjMsNTIsNTcsNDYsMzUsMTA0LDEwMSwxMTQsMTI3LDkyLDgxLDcwLDc1LDIwOCwyMjEsMjAyLDE5OSwyMjgsMjMzLDI1NCwyNDMsMTg0LDE4MSwxNjIsMTc1LDE0MCwxMjksMTUwLDE1NSwxODcsMTgyLDE2MSwxNzIsMTQzLDEzMCwxNDksMTUyLDIxMSwyMjIsMjAxLDE5NiwyMzEsMjM0LDI1MywyNDAsMTA3LDEwMiwxMTMsMTI0LDk1LDgyLDY5LDcyLDMsMTQsMjUsMjAsNTUsNTgsNDUsMzIsMTA5LDk2LDExOSwxMjIsODksODQsNjcsNzgsNSw4LDMxLFxuMTgsNDksNjAsNDMsMzgsMTg5LDE3NiwxNjcsMTcwLDEzNywxMzIsMTQ3LDE1OCwyMTMsMjE2LDIwNywxOTQsMjI1LDIzNiwyNTEsMjQ2LDIxNCwyMTksMjA0LDE5MywyMjYsMjM5LDI0OCwyNDUsMTkwLDE3OSwxNjQsMTY5LDEzOCwxMzUsMTQ0LDE1Nyw2LDExLDI4LDE3LDUwLDYzLDQwLDM3LDExMCw5OSwxMTYsMTIxLDkwLDg3LDY0LDc3LDIxOCwyMTUsMTkyLDIwNSwyMzgsMjI3LDI0NCwyNDksMTc4LDE5MSwxNjgsMTY1LDEzNCwxMzksMTU2LDE0NSwxMCw3LDE2LDI5LDYyLDUxLDM2LDQxLDk4LDExMSwxMjAsMTE3LDg2LDkxLDc2LDY1LDk3LDEwOCwxMjMsMTE4LDg1LDg4LDc5LDY2LDksNCwxOSwzMCw2MSw0OCwzOSw0MiwxNzcsMTg4LDE3MSwxNjYsMTMzLDEzNiwxNTksMTQ2LDIxNywyMTIsMTk1LDIwNiwyMzcsMjI0LDI0NywyNTAsMTgzLDE4NiwxNzMsMTYwLDEzMSwxNDIsMTUzLDE0OCwyMjMsMjEwLDE5NywyMDAsMjM1LDIzMCwyNDEsMjUyLDEwMywxMDYsMTI1LDExMiw4Myxcbjk0LDczLDY4LDE1LDIsMjEsMjQsNTksNTQsMzMsNDQsMTIsMSwyMiwyNyw1Niw1MywzNCw0NywxMDAsMTA1LDEyNiwxMTUsODAsOTMsNzQsNzEsMjIwLDIwOSwxOTgsMjAzLDIzMiwyMjksMjQyLDI1NSwxODAsMTg1LDE3NCwxNjMsMTI4LDE0MSwxNTQsMTUxXSxYZz1bMCwxNCwyOCwxOCw1Niw1NCwzNiw0MiwxMTIsMTI2LDEwOCw5OCw3Miw3MCw4NCw5MCwyMjQsMjM4LDI1MiwyNDIsMjE2LDIxNCwxOTYsMjAyLDE0NCwxNTgsMTQwLDEzMCwxNjgsMTY2LDE4MCwxODYsMjE5LDIxMywxOTksMjAxLDIyNywyMzcsMjU1LDI0MSwxNzEsMTY1LDE4MywxODUsMTQ3LDE1NywxNDMsMTI5LDU5LDUzLDM5LDQxLDMsMTMsMzEsMTcsNzUsNjksODcsODksMTE1LDEyNSwxMTEsOTcsMTczLDE2MywxNzcsMTkxLDE0OSwxNTUsMTM3LDEzNSwyMjEsMjExLDE5MywyMDcsMjI5LDIzNSwyNDksMjQ3LDc3LDY3LDgxLDk1LDExNywxMjMsMTA1LDEwMyw2MSw1MSwzMyw0Nyw1LDExLDI1LDIzLDExOCwxMjAsXG4xMDYsMTAwLDc4LDY0LDgyLDkyLDYsOCwyNiwyMCw2Miw0OCwzNCw0NCwxNTAsMTUyLDEzOCwxMzIsMTc0LDE2MCwxNzgsMTg4LDIzMCwyMzIsMjUwLDI0NCwyMjIsMjA4LDE5NCwyMDQsNjUsNzksOTMsODMsMTIxLDExOSwxMDEsMTA3LDQ5LDYzLDQ1LDM1LDksNywyMSwyNywxNjEsMTc1LDE4OSwxNzksMTUzLDE1MSwxMzMsMTM5LDIwOSwyMjMsMjA1LDE5NSwyMzMsMjMxLDI0NSwyNTEsMTU0LDE0OCwxMzQsMTM2LDE2MiwxNzIsMTkwLDE3NiwyMzQsMjI4LDI0NiwyNDgsMjEwLDIyMCwyMDYsMTkyLDEyMiwxMTYsMTAyLDEwNCw2Niw3Niw5NCw4MCwxMCw0LDIyLDI0LDUwLDYwLDQ2LDMyLDIzNiwyMjYsMjQwLDI1NCwyMTIsMjE4LDIwMCwxOTgsMTU2LDE0NiwxMjgsMTQyLDE2NCwxNzAsMTg0LDE4MiwxMiwyLDE2LDMwLDUyLDU4LDQwLDM4LDEyNCwxMTQsOTYsMTEwLDY4LDc0LDg4LDg2LDU1LDU3LDQzLDM3LDE1LDEsMTksMjksNzEsNzMsOTEsODUsMTI3LDExMyw5OSwxMDksMjE1LFxuMjE3LDIwMywxOTcsMjM5LDIyNSwyNDMsMjUzLDE2NywxNjksMTg3LDE4MSwxNTksMTQ1LDEzMSwxNDFdO2Z1bmN0aW9uIFlnKGEsYil7YT1uZXcgR2coWmcoYSkpO2I9RWcoYik7Zm9yKHZhciBjPWIuc3BsaWNlKDAsMTYpLGQ9XCJcIixlO2MubGVuZ3RoOyl7ZT0xNi1jLmxlbmd0aDtmb3IodmFyIGY9MDtmPGU7ZisrKWMucHVzaCgwKTtlPWE7S2coZSxjKTtNZyhlLDApO2ZvcihjPTE7YzxlLmo7KytjKXtOZyhlLFFnKTtPZyhlKTtmPWUuaDtmb3IodmFyIGc9ZS5zWzBdLGg9MDs0Pmg7aCsrKWdbMF09ZlswXVtoXSxnWzFdPWZbMV1baF0sZ1syXT1mWzJdW2hdLGdbM109ZlszXVtoXSxmWzBdW2hdPVNnW2dbMF1dXlRnW2dbMV1dXmdbMl1eZ1szXSxmWzFdW2hdPWdbMF1eU2dbZ1sxXV1eVGdbZ1syXV1eZ1szXSxmWzJdW2hdPWdbMF1eZ1sxXV5TZ1tnWzJdXV5UZ1tnWzNdXSxmWzNdW2hdPVRnW2dbMF1dXmdbMV1eZ1syXV5TZ1tnWzNdXTtNZyhlLGMpfU5nKGUsUWcpO09nKGUpO01nKGUsXG5lLmopO2QrPUZnKExnKGUpKTtjPWIuc3BsaWNlKDAsMTYpfXJldHVybiBkfWZ1bmN0aW9uICRnKGEsYil7YT1uZXcgR2coWmcoYSkpO2Zvcih2YXIgYz1bXSxkPTA7ZDxiLmxlbmd0aDtkKz0yKWMucHVzaChwYXJzZUludChiLnN1YnN0cmluZyhkLGQrMiksMTYpKTt2YXIgZT1jLnNwbGljZSgwLDE2KTtmb3IoYj1cIlwiO2UubGVuZ3RoOyl7ZD1hO0tnKGQsZSk7TWcoZCxkLmopO2ZvcihlPTE7ZTxkLmo7KytlKXtQZyhkKTtOZyhkLFJnKTtNZyhkLGQuai1lKTtmb3IodmFyIGY9ZC5oLGc9ZC5zWzBdLGg9MDs0Pmg7aCsrKWdbMF09ZlswXVtoXSxnWzFdPWZbMV1baF0sZ1syXT1mWzJdW2hdLGdbM109ZlszXVtoXSxmWzBdW2hdPVhnW2dbMF1dXlZnW2dbMV1dXldnW2dbMl1dXlVnW2dbM11dLGZbMV1baF09VWdbZ1swXV1eWGdbZ1sxXV1eVmdbZ1syXV1eV2dbZ1szXV0sZlsyXVtoXT1XZ1tnWzBdXV5VZ1tnWzFdXV5YZ1tnWzJdXV5WZ1tnWzNdXSxmWzNdW2hdPVZnW2dbMF1dXldnW2dbMV1dXlxuVWdbZ1syXV1eWGdbZ1szXV19UGcoZCk7TmcoZCxSZyk7TWcoZCwwKTtkPUxnKGQpO2lmKDgxOTI+PWQubGVuZ3RoKWQ9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGQpO2Vsc2V7ZT1cIlwiO2ZvcihmPTA7ZjxkLmxlbmd0aDtmKz04MTkyKWUrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxUYShkLGYsZis4MTkyKSk7ZD1lfWIrPWQ7ZT1jLnNwbGljZSgwLDE2KX1yZXR1cm4gYi5yZXBsYWNlKC8oXFx4MDApKyQvLFwiXCIpfWZ1bmN0aW9uIFpnKGEpe2E9RWcoYS5zdWJzdHJpbmcoMCwzMikpO2Zvcih2YXIgYj0zMi1hLmxlbmd0aCxjPTA7YzxiO2MrKylhLnB1c2goMCk7cmV0dXJuIGF9ZnVuY3Rpb24gYWgoYSl7dmFyIGI9W107YmgobmV3IGNoLGEsYik7cmV0dXJuIGIuam9pbihcIlwiKX1mdW5jdGlvbiBjaCgpe31mdW5jdGlvbiBiaChhLGIsYyl7aWYobnVsbD09YiljLnB1c2goXCJudWxsXCIpO2Vsc2V7aWYoXCJvYmplY3RcIj09dHlwZW9mIGIpe2lmKHFhKGIpKXt2YXIgZD1cbmI7Yj1kLmxlbmd0aDtjLnB1c2goXCJbXCIpO2Zvcih2YXIgZT1cIlwiLGY9MDtmPGI7ZisrKWMucHVzaChlKSxiaChhLGRbZl0sYyksZT1cIixcIjtjLnB1c2goXCJdXCIpO3JldHVybn1pZihiIGluc3RhbmNlb2YgU3RyaW5nfHxiIGluc3RhbmNlb2YgTnVtYmVyfHxiIGluc3RhbmNlb2YgQm9vbGVhbiliPWIudmFsdWVPZigpO2Vsc2V7Yy5wdXNoKFwie1wiKTtlPVwiXCI7Zm9yKGQgaW4gYilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYixkKSYmKGY9YltkXSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmJiYoYy5wdXNoKGUpLGRoKGQsYyksYy5wdXNoKFwiOlwiKSxiaChhLGYsYyksZT1cIixcIikpO2MucHVzaChcIn1cIik7cmV0dXJufX1zd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJzdHJpbmdcIjpkaChiLGMpO2JyZWFrO2Nhc2UgXCJudW1iZXJcIjpjLnB1c2goaXNGaW5pdGUoYikmJiFpc05hTihiKT9TdHJpbmcoYik6XCJudWxsXCIpO2JyZWFrO2Nhc2UgXCJib29sZWFuXCI6Yy5wdXNoKFN0cmluZyhiKSk7YnJlYWs7XG5jYXNlIFwiZnVuY3Rpb25cIjpjLnB1c2goXCJudWxsXCIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiK3R5cGVvZiBiKTt9fX12YXIgZWg9eydcIic6J1xcXFxcIicsXCJcXFxcXCI6XCJcXFxcXFxcXFwiLFwiL1wiOlwiXFxcXC9cIixcIlxcYlwiOlwiXFxcXGJcIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcclwiOlwiXFxcXHJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxceDBCXCI6XCJcXFxcdTAwMGJcIn0sZmg9L1xcdWZmZmYvLnRlc3QoXCJcXHVmZmZmXCIpPy9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHVmZmZmXS9nOi9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHhmZl0vZztmdW5jdGlvbiBkaChhLGIpe2IucHVzaCgnXCInLGEucmVwbGFjZShmaCxmdW5jdGlvbihjKXt2YXIgZD1laFtjXTtkfHwoZD1cIlxcXFx1XCIrKGMuY2hhckNvZGVBdCgwKXw2NTUzNikudG9TdHJpbmcoMTYpLnN1YnN0cigxKSxlaFtjXT1kKTtyZXR1cm4gZH0pLCdcIicpfWZ1bmN0aW9uIGdoKGEpe3RoaXMuYT1hfWdoLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXtrYShiKT90aGlzLmEuc2V0KGEsXG5haChiKSk6dGhpcy5hLnJhKGEpfTtnaC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGEpe3RyeXt2YXIgYj10aGlzLmEuZ2V0KGEpfWNhdGNoKGMpe3JldHVybn1pZihudWxsIT09Yil0cnl7cmV0dXJuIEpTT04ucGFyc2UoYil9Y2F0Y2goYyQzKXt0aHJvd1wiU3RvcmFnZTogSW52YWxpZCB2YWx1ZSB3YXMgZW5jb3VudGVyZWRcIjt9fTtmdW5jdGlvbiBoaCgpe313KGhoLHlnKTtoaC5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt2YXIgYT1sYih0aGlzLmhhKCEwKSksYj10aGlzO0hhKGEsZnVuY3Rpb24oYyl7Yi5yYShjKX0pfTtmdW5jdGlvbiBpaChhKXt0aGlzLmE9YX13KGloLGhoKTtmdW5jdGlvbiBqaChhKXtpZighYS5hKXJldHVybiExO3RyeXtyZXR1cm4gYS5hLnNldEl0ZW0oXCJfX3Nha1wiLFwiMVwiKSxhLmEucmVtb3ZlSXRlbShcIl9fc2FrXCIpLCEwfWNhdGNoKGIpe3JldHVybiExfX1sPWloLnByb3RvdHlwZTtsLnNldD1mdW5jdGlvbihhLGIpe3RyeXt0aGlzLmEuc2V0SXRlbShhLFxuYil9Y2F0Y2goYyl7aWYoMD09dGhpcy5hLmxlbmd0aCl0aHJvd1wiU3RvcmFnZSBtZWNoYW5pc206IFN0b3JhZ2UgZGlzYWJsZWRcIjt0aHJvd1wiU3RvcmFnZSBtZWNoYW5pc206IFF1b3RhIGV4Y2VlZGVkXCI7fX07bC5nZXQ9ZnVuY3Rpb24oYSl7YT10aGlzLmEuZ2V0SXRlbShhKTtpZighcShhKSYmbnVsbCE9PWEpdGhyb3dcIlN0b3JhZ2UgbWVjaGFuaXNtOiBJbnZhbGlkIHZhbHVlIHdhcyBlbmNvdW50ZXJlZFwiO3JldHVybiBhfTtsLnJhPWZ1bmN0aW9uKGEpe3RoaXMuYS5yZW1vdmVJdGVtKGEpfTtsLmhhPWZ1bmN0aW9uKGEpe3ZhciBiPTAsYz10aGlzLmEsZD1uZXcgaWI7ZC5uZXh0PWZ1bmN0aW9uKCl7aWYoYj49Yy5sZW5ndGgpdGhyb3cgaGI7dmFyIGU9Yy5rZXkoYisrKTtpZihhKXJldHVybiBlO2U9Yy5nZXRJdGVtKGUpO2lmKCFxKGUpKXRocm93XCJTdG9yYWdlIG1lY2hhbmlzbTogSW52YWxpZCB2YWx1ZSB3YXMgZW5jb3VudGVyZWRcIjtyZXR1cm4gZX07cmV0dXJuIGR9O2wuY2xlYXI9XG5mdW5jdGlvbigpe3RoaXMuYS5jbGVhcigpfTtsLmtleT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hLmtleShhKX07ZnVuY3Rpb24ga2goKXt2YXIgYT1udWxsO3RyeXthPXdpbmRvdy5sb2NhbFN0b3JhZ2V8fG51bGx9Y2F0Y2goYil7fXRoaXMuYT1hfXcoa2gsaWgpO2Z1bmN0aW9uIGxoKCl7dmFyIGE9bnVsbDt0cnl7YT13aW5kb3cuc2Vzc2lvblN0b3JhZ2V8fG51bGx9Y2F0Y2goYil7fXRoaXMuYT1hfXcobGgsaWgpO2Z1bmN0aW9uIG1oKGEsYil7dGhpcy5nPWE7dGhpcy5hPWIrXCI6OlwifXcobWgsaGgpO21oLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmcuc2V0KHRoaXMuYSthLGIpfTttaC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmcuZ2V0KHRoaXMuYSthKX07bWgucHJvdG90eXBlLnJhPWZ1bmN0aW9uKGEpe3RoaXMuZy5yYSh0aGlzLmErYSl9O21oLnByb3RvdHlwZS5oYT1mdW5jdGlvbihhKXt2YXIgYj10aGlzLmcuaGEoITApLGM9dGhpcyxcbmQ9bmV3IGliO2QubmV4dD1mdW5jdGlvbigpe2Zvcih2YXIgZT1iLm5leHQoKTtlLnN1YnN0cigwLGMuYS5sZW5ndGgpIT1jLmE7KWU9Yi5uZXh0KCk7cmV0dXJuIGE/ZS5zdWJzdHIoYy5hLmxlbmd0aCk6Yy5nLmdldChlKX07cmV0dXJuIGR9O2poKG5ldyBraCk7dmFyIG5oLG9oPW5ldyBsaDtuaD1qaChvaCk/bmV3IG1oKG9oLFwiZmlyZWJhc2V1aVwiKTpudWxsO3ZhciBwaD1uZXcgZ2gobmgpLHFoPXtuYW1lOlwicGVuZGluZ0VtYWlsQ3JlZGVudGlhbFwiLHN0b3JhZ2U6cGh9LHJoPXtuYW1lOlwicmVkaXJlY3RTdGF0dXNcIixzdG9yYWdlOnBofSxzaD17bmFtZTpcInJlZGlyZWN0VXJsXCIsc3RvcmFnZTpwaH0sdGg9e25hbWU6XCJlbWFpbEZvclNpZ25JblwiLHN0b3JhZ2U6bmV3IGdoKG5ldyB6ZygzNjAwLFwiL1wiKSl9LHVoPXtuYW1lOlwicGVuZGluZ0VuY3J5cHRlZENyZWRlbnRpYWxcIixzdG9yYWdlOm5ldyBnaChuZXcgemcoMzYwMCxcIi9cIikpfTtmdW5jdGlvbiB2aChhLGIpe3JldHVybiBhLnN0b3JhZ2UuZ2V0KGI/XG5hLm5hbWUrXCI6XCIrYjphLm5hbWUpfWZ1bmN0aW9uIHdoKGEsYil7YS5zdG9yYWdlLmEucmEoYj9hLm5hbWUrXCI6XCIrYjphLm5hbWUpfWZ1bmN0aW9uIHhoKGEsYixjKXthLnN0b3JhZ2Uuc2V0KGM/YS5uYW1lK1wiOlwiK2M6YS5uYW1lLGIpfWZ1bmN0aW9uIHloKGEpe3JldHVybiB2aChzaCxhKXx8bnVsbH1mdW5jdGlvbiB6aChhKXthPXZoKHFoLGEpfHxudWxsO3JldHVybiBDZyhhKX1mdW5jdGlvbiBBaChhKXt3aChxaCxhKX1mdW5jdGlvbiBCaChhLGIpe3hoKHFoLEJnKGEpLGIpfWZ1bmN0aW9uIENoKGEpe3JldHVybihhPXZoKHJoLGEpfHxudWxsKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLnRlbmFudElkP25ldyBEZyhhLnRlbmFudElkKTpudWxsfWZ1bmN0aW9uIERoKGEsYil7eGgocmgse3RlbmFudElkOmEuYX0sYil9ZnVuY3Rpb24gRWgoYSxiKXtiPXZoKHRoLGIpO3ZhciBjPW51bGw7aWYoYil0cnl7dmFyIGQ9JGcoYSxiKSxlPUpTT04ucGFyc2UoZCk7Yz1lJiZlLmVtYWlsfHxcbm51bGx9Y2F0Y2goZil7fXJldHVybiBjfWZ1bmN0aW9uIEZoKGEsYil7Yj12aCh1aCxiKTt2YXIgYz1udWxsO2lmKGIpdHJ5e3ZhciBkPSRnKGEsYik7Yz1KU09OLnBhcnNlKGQpfWNhdGNoKGUpe31yZXR1cm4gQ2coY3x8bnVsbCl9ZnVuY3Rpb24gR2goYSxiLGMpe3hoKHVoLFlnKGEsSlNPTi5zdHJpbmdpZnkoQmcoYikpKSxjKX1mdW5jdGlvbiBIaCgpe3RoaXMuVz17fX1mdW5jdGlvbiBHKGEsYixjKXtpZihiLnRvTG93ZXJDYXNlKClpbiBhLlcpdGhyb3cgRXJyb3IoXCJDb25maWd1cmF0aW9uIFwiK2IrXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTthLldbYi50b0xvd2VyQ2FzZSgpXT1jfWZ1bmN0aW9uIEloKGEsYixjKXtpZighKGIudG9Mb3dlckNhc2UoKWluIGEuVykpdGhyb3cgRXJyb3IoXCJDb25maWd1cmF0aW9uIFwiK2IrXCIgaXMgbm90IGRlZmluZWQuXCIpO2EuV1tiLnRvTG93ZXJDYXNlKCldPWN9SGgucHJvdG90eXBlLmdldD1mdW5jdGlvbihhKXtpZighKGEudG9Mb3dlckNhc2UoKWluXG50aGlzLlcpKXRocm93IEVycm9yKFwiQ29uZmlndXJhdGlvbiBcIithK1wiIGlzIG5vdCBkZWZpbmVkLlwiKTtyZXR1cm4gdGhpcy5XW2EudG9Mb3dlckNhc2UoKV19O2Z1bmN0aW9uIEpoKGEsYil7YT1hLmdldChiKTtpZighYSl0aHJvdyBFcnJvcihcIkNvbmZpZ3VyYXRpb24gXCIrYitcIiBpcyByZXF1aXJlZC5cIik7cmV0dXJuIGF9ZnVuY3Rpb24gS2goKXt0aGlzLmc9dm9pZCAwO3RoaXMuYT17fX1sPUtoLnByb3RvdHlwZTtsLnNldD1mdW5jdGlvbihhLGIpe0xoKHRoaXMsYSxiLCExKX07bC5hZGQ9ZnVuY3Rpb24oYSxiKXtMaCh0aGlzLGEsYiwhMCl9O2Z1bmN0aW9uIExoKGEsYixjLGQpe2Zvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKXt2YXIgZj1iLmNoYXJBdChlKTthLmFbZl18fChhLmFbZl09bmV3IEtoKTthPWEuYVtmXX1pZihkJiZ2b2lkIDAhPT1hLmcpdGhyb3cgRXJyb3IoJ1RoZSBjb2xsZWN0aW9uIGFscmVhZHkgY29udGFpbnMgdGhlIGtleSBcIicrYisnXCInKTthLmc9Y31sLmdldD1cbmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj10aGlzLGM9MDtjPGEubGVuZ3RoO2MrKylpZihiPWIuYVthLmNoYXJBdChjKV0sIWIpe2E9dm9pZCAwO2JyZWFrIGF9YT1ifXJldHVybiBhP2EuZzp2b2lkIDB9O2wubGE9ZnVuY3Rpb24oKXt2YXIgYT1bXTtNaCh0aGlzLGEpO3JldHVybiBhfTtmdW5jdGlvbiBNaChhLGIpe3ZvaWQgMCE9PWEuZyYmYi5wdXNoKGEuZyk7Zm9yKHZhciBjIGluIGEuYSlNaChhLmFbY10sYil9bC5qYT1mdW5jdGlvbigpe3ZhciBhPVtdO05oKHRoaXMsXCJcIixhKTtyZXR1cm4gYX07ZnVuY3Rpb24gTmgoYSxiLGMpe3ZvaWQgMCE9PWEuZyYmYy5wdXNoKGIpO2Zvcih2YXIgZCBpbiBhLmEpTmgoYS5hW2RdLGIrZCxjKX1sLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5hPXt9O3RoaXMuZz12b2lkIDB9O2Z1bmN0aW9uIE9oKGEpe3RoaXMuYT1hO3RoaXMuZz1uZXcgS2g7Zm9yKGE9MDthPHRoaXMuYS5sZW5ndGg7YSsrKXt2YXIgYj10aGlzLmcuZ2V0KFwiK1wiK3RoaXMuYVthXS5iKTtcbmI/Yi5wdXNoKHRoaXMuYVthXSk6dGhpcy5nLmFkZChcIitcIit0aGlzLmFbYV0uYixbdGhpcy5hW2FdXSl9fWZ1bmN0aW9uIFBoKGEsYil7YT1hLmc7dmFyIGM9e30sZD0wO3ZvaWQgMCE9PWEuZyYmKGNbZF09YS5nKTtmb3IoO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iLmNoYXJBdChkKTtpZighKGUgaW4gYS5hKSlicmVhazthPWEuYVtlXTt2b2lkIDAhPT1hLmcmJihjW2RdPWEuZyl9Zm9yKHZhciBmIGluIGMpaWYoYy5oYXNPd25Qcm9wZXJ0eShmKSlyZXR1cm4gY1tmXTtyZXR1cm5bXX1mdW5jdGlvbiBRaChhKXtmb3IodmFyIGI9MDtiPFJoLmxlbmd0aDtiKyspaWYoUmhbYl0uYz09PWEpcmV0dXJuIFJoW2JdO3JldHVybiBudWxsfWZ1bmN0aW9uIFNoKGEpe2E9YS50b1VwcGVyQ2FzZSgpO2Zvcih2YXIgYj1bXSxjPTA7YzxSaC5sZW5ndGg7YysrKVJoW2NdLmY9PT1hJiZiLnB1c2goUmhbY10pO3JldHVybiBifWZ1bmN0aW9uIFRoKGEpe2lmKDA8YS5sZW5ndGgmJlwiK1wiPT1hLmNoYXJBdCgwKSl7YT1cbmEuc3Vic3RyaW5nKDEpO2Zvcih2YXIgYj1bXSxjPTA7YzxSaC5sZW5ndGg7YysrKVJoW2NdLmI9PWEmJmIucHVzaChSaFtjXSk7YT1ifWVsc2UgYT1TaChhKTtyZXR1cm4gYX1mdW5jdGlvbiBVaChhKXthLnNvcnQoZnVuY3Rpb24oYixjKXtyZXR1cm4gYi5uYW1lLmxvY2FsZUNvbXBhcmUoYy5uYW1lLFwiZW5cIil9KX12YXIgUmg9W3tuYW1lOlwiQWZnaGFuaXN0YW5cIixjOlwiOTMtQUYtMFwiLGI6XCI5M1wiLGY6XCJBRlwifSx7bmFtZTpcIlxcdTAwYzVsYW5kIElzbGFuZHNcIixjOlwiMzU4LUFYLTBcIixiOlwiMzU4XCIsZjpcIkFYXCJ9LHtuYW1lOlwiQWxiYW5pYVwiLGM6XCIzNTUtQUwtMFwiLGI6XCIzNTVcIixmOlwiQUxcIn0se25hbWU6XCJBbGdlcmlhXCIsYzpcIjIxMy1EWi0wXCIsYjpcIjIxM1wiLGY6XCJEWlwifSx7bmFtZTpcIkFtZXJpY2FuIFNhbW9hXCIsYzpcIjEtQVMtMFwiLGI6XCIxXCIsZjpcIkFTXCJ9LHtuYW1lOlwiQW5kb3JyYVwiLGM6XCIzNzYtQUQtMFwiLGI6XCIzNzZcIixmOlwiQURcIn0se25hbWU6XCJBbmdvbGFcIixjOlwiMjQ0LUFPLTBcIixcbmI6XCIyNDRcIixmOlwiQU9cIn0se25hbWU6XCJBbmd1aWxsYVwiLGM6XCIxLUFJLTBcIixiOlwiMVwiLGY6XCJBSVwifSx7bmFtZTpcIkFudGlndWEgYW5kIEJhcmJ1ZGFcIixjOlwiMS1BRy0wXCIsYjpcIjFcIixmOlwiQUdcIn0se25hbWU6XCJBcmdlbnRpbmFcIixjOlwiNTQtQVItMFwiLGI6XCI1NFwiLGY6XCJBUlwifSx7bmFtZTpcIkFybWVuaWFcIixjOlwiMzc0LUFNLTBcIixiOlwiMzc0XCIsZjpcIkFNXCJ9LHtuYW1lOlwiQXJ1YmFcIixjOlwiMjk3LUFXLTBcIixiOlwiMjk3XCIsZjpcIkFXXCJ9LHtuYW1lOlwiQXNjZW5zaW9uIElzbGFuZFwiLGM6XCIyNDctQUMtMFwiLGI6XCIyNDdcIixmOlwiQUNcIn0se25hbWU6XCJBdXN0cmFsaWFcIixjOlwiNjEtQVUtMFwiLGI6XCI2MVwiLGY6XCJBVVwifSx7bmFtZTpcIkF1c3RyaWFcIixjOlwiNDMtQVQtMFwiLGI6XCI0M1wiLGY6XCJBVFwifSx7bmFtZTpcIkF6ZXJiYWlqYW5cIixjOlwiOTk0LUFaLTBcIixiOlwiOTk0XCIsZjpcIkFaXCJ9LHtuYW1lOlwiQmFoYW1hc1wiLGM6XCIxLUJTLTBcIixiOlwiMVwiLGY6XCJCU1wifSx7bmFtZTpcIkJhaHJhaW5cIixjOlwiOTczLUJILTBcIixcbmI6XCI5NzNcIixmOlwiQkhcIn0se25hbWU6XCJCYW5nbGFkZXNoXCIsYzpcIjg4MC1CRC0wXCIsYjpcIjg4MFwiLGY6XCJCRFwifSx7bmFtZTpcIkJhcmJhZG9zXCIsYzpcIjEtQkItMFwiLGI6XCIxXCIsZjpcIkJCXCJ9LHtuYW1lOlwiQmVsYXJ1c1wiLGM6XCIzNzUtQlktMFwiLGI6XCIzNzVcIixmOlwiQllcIn0se25hbWU6XCJCZWxnaXVtXCIsYzpcIjMyLUJFLTBcIixiOlwiMzJcIixmOlwiQkVcIn0se25hbWU6XCJCZWxpemVcIixjOlwiNTAxLUJaLTBcIixiOlwiNTAxXCIsZjpcIkJaXCJ9LHtuYW1lOlwiQmVuaW5cIixjOlwiMjI5LUJKLTBcIixiOlwiMjI5XCIsZjpcIkJKXCJ9LHtuYW1lOlwiQmVybXVkYVwiLGM6XCIxLUJNLTBcIixiOlwiMVwiLGY6XCJCTVwifSx7bmFtZTpcIkJodXRhblwiLGM6XCI5NzUtQlQtMFwiLGI6XCI5NzVcIixmOlwiQlRcIn0se25hbWU6XCJCb2xpdmlhXCIsYzpcIjU5MS1CTy0wXCIsYjpcIjU5MVwiLGY6XCJCT1wifSx7bmFtZTpcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIixjOlwiMzg3LUJBLTBcIixiOlwiMzg3XCIsZjpcIkJBXCJ9LHtuYW1lOlwiQm90c3dhbmFcIixjOlwiMjY3LUJXLTBcIixcbmI6XCIyNjdcIixmOlwiQldcIn0se25hbWU6XCJCcmF6aWxcIixjOlwiNTUtQlItMFwiLGI6XCI1NVwiLGY6XCJCUlwifSx7bmFtZTpcIkJyaXRpc2ggSW5kaWFuIE9jZWFuIFRlcnJpdG9yeVwiLGM6XCIyNDYtSU8tMFwiLGI6XCIyNDZcIixmOlwiSU9cIn0se25hbWU6XCJCcml0aXNoIFZpcmdpbiBJc2xhbmRzXCIsYzpcIjEtVkctMFwiLGI6XCIxXCIsZjpcIlZHXCJ9LHtuYW1lOlwiQnJ1bmVpXCIsYzpcIjY3My1CTi0wXCIsYjpcIjY3M1wiLGY6XCJCTlwifSx7bmFtZTpcIkJ1bGdhcmlhXCIsYzpcIjM1OS1CRy0wXCIsYjpcIjM1OVwiLGY6XCJCR1wifSx7bmFtZTpcIkJ1cmtpbmEgRmFzb1wiLGM6XCIyMjYtQkYtMFwiLGI6XCIyMjZcIixmOlwiQkZcIn0se25hbWU6XCJCdXJ1bmRpXCIsYzpcIjI1Ny1CSS0wXCIsYjpcIjI1N1wiLGY6XCJCSVwifSx7bmFtZTpcIkNhbWJvZGlhXCIsYzpcIjg1NS1LSC0wXCIsYjpcIjg1NVwiLGY6XCJLSFwifSx7bmFtZTpcIkNhbWVyb29uXCIsYzpcIjIzNy1DTS0wXCIsYjpcIjIzN1wiLGY6XCJDTVwifSx7bmFtZTpcIkNhbmFkYVwiLGM6XCIxLUNBLTBcIixiOlwiMVwiLGY6XCJDQVwifSx7bmFtZTpcIkNhcGUgVmVyZGVcIixcbmM6XCIyMzgtQ1YtMFwiLGI6XCIyMzhcIixmOlwiQ1ZcIn0se25hbWU6XCJDYXJpYmJlYW4gTmV0aGVybGFuZHNcIixjOlwiNTk5LUJRLTBcIixiOlwiNTk5XCIsZjpcIkJRXCJ9LHtuYW1lOlwiQ2F5bWFuIElzbGFuZHNcIixjOlwiMS1LWS0wXCIsYjpcIjFcIixmOlwiS1lcIn0se25hbWU6XCJDZW50cmFsIEFmcmljYW4gUmVwdWJsaWNcIixjOlwiMjM2LUNGLTBcIixiOlwiMjM2XCIsZjpcIkNGXCJ9LHtuYW1lOlwiQ2hhZFwiLGM6XCIyMzUtVEQtMFwiLGI6XCIyMzVcIixmOlwiVERcIn0se25hbWU6XCJDaGlsZVwiLGM6XCI1Ni1DTC0wXCIsYjpcIjU2XCIsZjpcIkNMXCJ9LHtuYW1lOlwiQ2hpbmFcIixjOlwiODYtQ04tMFwiLGI6XCI4NlwiLGY6XCJDTlwifSx7bmFtZTpcIkNocmlzdG1hcyBJc2xhbmRcIixjOlwiNjEtQ1gtMFwiLGI6XCI2MVwiLGY6XCJDWFwifSx7bmFtZTpcIkNvY29zIFtLZWVsaW5nXSBJc2xhbmRzXCIsYzpcIjYxLUNDLTBcIixiOlwiNjFcIixmOlwiQ0NcIn0se25hbWU6XCJDb2xvbWJpYVwiLGM6XCI1Ny1DTy0wXCIsYjpcIjU3XCIsZjpcIkNPXCJ9LHtuYW1lOlwiQ29tb3Jvc1wiLGM6XCIyNjktS00tMFwiLFxuYjpcIjI2OVwiLGY6XCJLTVwifSx7bmFtZTpcIkRlbW9jcmF0aWMgUmVwdWJsaWMgQ29uZ29cIixjOlwiMjQzLUNELTBcIixiOlwiMjQzXCIsZjpcIkNEXCJ9LHtuYW1lOlwiUmVwdWJsaWMgb2YgQ29uZ29cIixjOlwiMjQyLUNHLTBcIixiOlwiMjQyXCIsZjpcIkNHXCJ9LHtuYW1lOlwiQ29vayBJc2xhbmRzXCIsYzpcIjY4Mi1DSy0wXCIsYjpcIjY4MlwiLGY6XCJDS1wifSx7bmFtZTpcIkNvc3RhIFJpY2FcIixjOlwiNTA2LUNSLTBcIixiOlwiNTA2XCIsZjpcIkNSXCJ9LHtuYW1lOlwiQ1xcdTAwZjR0ZSBkJ0l2b2lyZVwiLGM6XCIyMjUtQ0ktMFwiLGI6XCIyMjVcIixmOlwiQ0lcIn0se25hbWU6XCJDcm9hdGlhXCIsYzpcIjM4NS1IUi0wXCIsYjpcIjM4NVwiLGY6XCJIUlwifSx7bmFtZTpcIkN1YmFcIixjOlwiNTMtQ1UtMFwiLGI6XCI1M1wiLGY6XCJDVVwifSx7bmFtZTpcIkN1cmFcXHUwMGU3YW9cIixjOlwiNTk5LUNXLTBcIixiOlwiNTk5XCIsZjpcIkNXXCJ9LHtuYW1lOlwiQ3lwcnVzXCIsYzpcIjM1Ny1DWS0wXCIsYjpcIjM1N1wiLGY6XCJDWVwifSx7bmFtZTpcIkN6ZWNoIFJlcHVibGljXCIsYzpcIjQyMC1DWi0wXCIsXG5iOlwiNDIwXCIsZjpcIkNaXCJ9LHtuYW1lOlwiRGVubWFya1wiLGM6XCI0NS1ESy0wXCIsYjpcIjQ1XCIsZjpcIkRLXCJ9LHtuYW1lOlwiRGppYm91dGlcIixjOlwiMjUzLURKLTBcIixiOlwiMjUzXCIsZjpcIkRKXCJ9LHtuYW1lOlwiRG9taW5pY2FcIixjOlwiMS1ETS0wXCIsYjpcIjFcIixmOlwiRE1cIn0se25hbWU6XCJEb21pbmljYW4gUmVwdWJsaWNcIixjOlwiMS1ETy0wXCIsYjpcIjFcIixmOlwiRE9cIn0se25hbWU6XCJFYXN0IFRpbW9yXCIsYzpcIjY3MC1UTC0wXCIsYjpcIjY3MFwiLGY6XCJUTFwifSx7bmFtZTpcIkVjdWFkb3JcIixjOlwiNTkzLUVDLTBcIixiOlwiNTkzXCIsZjpcIkVDXCJ9LHtuYW1lOlwiRWd5cHRcIixjOlwiMjAtRUctMFwiLGI6XCIyMFwiLGY6XCJFR1wifSx7bmFtZTpcIkVsIFNhbHZhZG9yXCIsYzpcIjUwMy1TVi0wXCIsYjpcIjUwM1wiLGY6XCJTVlwifSx7bmFtZTpcIkVxdWF0b3JpYWwgR3VpbmVhXCIsYzpcIjI0MC1HUS0wXCIsYjpcIjI0MFwiLGY6XCJHUVwifSx7bmFtZTpcIkVyaXRyZWFcIixjOlwiMjkxLUVSLTBcIixiOlwiMjkxXCIsZjpcIkVSXCJ9LHtuYW1lOlwiRXN0b25pYVwiLGM6XCIzNzItRUUtMFwiLFxuYjpcIjM3MlwiLGY6XCJFRVwifSx7bmFtZTpcIkV0aGlvcGlhXCIsYzpcIjI1MS1FVC0wXCIsYjpcIjI1MVwiLGY6XCJFVFwifSx7bmFtZTpcIkZhbGtsYW5kIElzbGFuZHMgW0lzbGFzIE1hbHZpbmFzXVwiLGM6XCI1MDAtRkstMFwiLGI6XCI1MDBcIixmOlwiRktcIn0se25hbWU6XCJGYXJvZSBJc2xhbmRzXCIsYzpcIjI5OC1GTy0wXCIsYjpcIjI5OFwiLGY6XCJGT1wifSx7bmFtZTpcIkZpamlcIixjOlwiNjc5LUZKLTBcIixiOlwiNjc5XCIsZjpcIkZKXCJ9LHtuYW1lOlwiRmlubGFuZFwiLGM6XCIzNTgtRkktMFwiLGI6XCIzNThcIixmOlwiRklcIn0se25hbWU6XCJGcmFuY2VcIixjOlwiMzMtRlItMFwiLGI6XCIzM1wiLGY6XCJGUlwifSx7bmFtZTpcIkZyZW5jaCBHdWlhbmFcIixjOlwiNTk0LUdGLTBcIixiOlwiNTk0XCIsZjpcIkdGXCJ9LHtuYW1lOlwiRnJlbmNoIFBvbHluZXNpYVwiLGM6XCI2ODktUEYtMFwiLGI6XCI2ODlcIixmOlwiUEZcIn0se25hbWU6XCJHYWJvblwiLGM6XCIyNDEtR0EtMFwiLGI6XCIyNDFcIixmOlwiR0FcIn0se25hbWU6XCJHYW1iaWFcIixjOlwiMjIwLUdNLTBcIixiOlwiMjIwXCIsZjpcIkdNXCJ9LFxue25hbWU6XCJHZW9yZ2lhXCIsYzpcIjk5NS1HRS0wXCIsYjpcIjk5NVwiLGY6XCJHRVwifSx7bmFtZTpcIkdlcm1hbnlcIixjOlwiNDktREUtMFwiLGI6XCI0OVwiLGY6XCJERVwifSx7bmFtZTpcIkdoYW5hXCIsYzpcIjIzMy1HSC0wXCIsYjpcIjIzM1wiLGY6XCJHSFwifSx7bmFtZTpcIkdpYnJhbHRhclwiLGM6XCIzNTAtR0ktMFwiLGI6XCIzNTBcIixmOlwiR0lcIn0se25hbWU6XCJHcmVlY2VcIixjOlwiMzAtR1ItMFwiLGI6XCIzMFwiLGY6XCJHUlwifSx7bmFtZTpcIkdyZWVubGFuZFwiLGM6XCIyOTktR0wtMFwiLGI6XCIyOTlcIixmOlwiR0xcIn0se25hbWU6XCJHcmVuYWRhXCIsYzpcIjEtR0QtMFwiLGI6XCIxXCIsZjpcIkdEXCJ9LHtuYW1lOlwiR3VhZGVsb3VwZVwiLGM6XCI1OTAtR1AtMFwiLGI6XCI1OTBcIixmOlwiR1BcIn0se25hbWU6XCJHdWFtXCIsYzpcIjEtR1UtMFwiLGI6XCIxXCIsZjpcIkdVXCJ9LHtuYW1lOlwiR3VhdGVtYWxhXCIsYzpcIjUwMi1HVC0wXCIsYjpcIjUwMlwiLGY6XCJHVFwifSx7bmFtZTpcIkd1ZXJuc2V5XCIsYzpcIjQ0LUdHLTBcIixiOlwiNDRcIixmOlwiR0dcIn0se25hbWU6XCJHdWluZWEgQ29uYWtyeVwiLFxuYzpcIjIyNC1HTi0wXCIsYjpcIjIyNFwiLGY6XCJHTlwifSx7bmFtZTpcIkd1aW5lYS1CaXNzYXVcIixjOlwiMjQ1LUdXLTBcIixiOlwiMjQ1XCIsZjpcIkdXXCJ9LHtuYW1lOlwiR3V5YW5hXCIsYzpcIjU5Mi1HWS0wXCIsYjpcIjU5MlwiLGY6XCJHWVwifSx7bmFtZTpcIkhhaXRpXCIsYzpcIjUwOS1IVC0wXCIsYjpcIjUwOVwiLGY6XCJIVFwifSx7bmFtZTpcIkhlYXJkIElzbGFuZCBhbmQgTWNEb25hbGQgSXNsYW5kc1wiLGM6XCI2NzItSE0tMFwiLGI6XCI2NzJcIixmOlwiSE1cIn0se25hbWU6XCJIb25kdXJhc1wiLGM6XCI1MDQtSE4tMFwiLGI6XCI1MDRcIixmOlwiSE5cIn0se25hbWU6XCJIb25nIEtvbmdcIixjOlwiODUyLUhLLTBcIixiOlwiODUyXCIsZjpcIkhLXCJ9LHtuYW1lOlwiSHVuZ2FyeVwiLGM6XCIzNi1IVS0wXCIsYjpcIjM2XCIsZjpcIkhVXCJ9LHtuYW1lOlwiSWNlbGFuZFwiLGM6XCIzNTQtSVMtMFwiLGI6XCIzNTRcIixmOlwiSVNcIn0se25hbWU6XCJJbmRpYVwiLGM6XCI5MS1JTi0wXCIsYjpcIjkxXCIsZjpcIklOXCJ9LHtuYW1lOlwiSW5kb25lc2lhXCIsYzpcIjYyLUlELTBcIixiOlwiNjJcIixmOlwiSURcIn0sXG57bmFtZTpcIklyYW5cIixjOlwiOTgtSVItMFwiLGI6XCI5OFwiLGY6XCJJUlwifSx7bmFtZTpcIklyYXFcIixjOlwiOTY0LUlRLTBcIixiOlwiOTY0XCIsZjpcIklRXCJ9LHtuYW1lOlwiSXJlbGFuZFwiLGM6XCIzNTMtSUUtMFwiLGI6XCIzNTNcIixmOlwiSUVcIn0se25hbWU6XCJJc2xlIG9mIE1hblwiLGM6XCI0NC1JTS0wXCIsYjpcIjQ0XCIsZjpcIklNXCJ9LHtuYW1lOlwiSXNyYWVsXCIsYzpcIjk3Mi1JTC0wXCIsYjpcIjk3MlwiLGY6XCJJTFwifSx7bmFtZTpcIkl0YWx5XCIsYzpcIjM5LUlULTBcIixiOlwiMzlcIixmOlwiSVRcIn0se25hbWU6XCJKYW1haWNhXCIsYzpcIjEtSk0tMFwiLGI6XCIxXCIsZjpcIkpNXCJ9LHtuYW1lOlwiSmFwYW5cIixjOlwiODEtSlAtMFwiLGI6XCI4MVwiLGY6XCJKUFwifSx7bmFtZTpcIkplcnNleVwiLGM6XCI0NC1KRS0wXCIsYjpcIjQ0XCIsZjpcIkpFXCJ9LHtuYW1lOlwiSm9yZGFuXCIsYzpcIjk2Mi1KTy0wXCIsYjpcIjk2MlwiLGY6XCJKT1wifSx7bmFtZTpcIkthemFraHN0YW5cIixjOlwiNy1LWi0wXCIsYjpcIjdcIixmOlwiS1pcIn0se25hbWU6XCJLZW55YVwiLGM6XCIyNTQtS0UtMFwiLGI6XCIyNTRcIixcbmY6XCJLRVwifSx7bmFtZTpcIktpcmliYXRpXCIsYzpcIjY4Ni1LSS0wXCIsYjpcIjY4NlwiLGY6XCJLSVwifSx7bmFtZTpcIktvc292b1wiLGM6XCIzNzctWEstMFwiLGI6XCIzNzdcIixmOlwiWEtcIn0se25hbWU6XCJLb3Nvdm9cIixjOlwiMzgxLVhLLTBcIixiOlwiMzgxXCIsZjpcIlhLXCJ9LHtuYW1lOlwiS29zb3ZvXCIsYzpcIjM4Ni1YSy0wXCIsYjpcIjM4NlwiLGY6XCJYS1wifSx7bmFtZTpcIkt1d2FpdFwiLGM6XCI5NjUtS1ctMFwiLGI6XCI5NjVcIixmOlwiS1dcIn0se25hbWU6XCJLeXJneXpzdGFuXCIsYzpcIjk5Ni1LRy0wXCIsYjpcIjk5NlwiLGY6XCJLR1wifSx7bmFtZTpcIkxhb3NcIixjOlwiODU2LUxBLTBcIixiOlwiODU2XCIsZjpcIkxBXCJ9LHtuYW1lOlwiTGF0dmlhXCIsYzpcIjM3MS1MVi0wXCIsYjpcIjM3MVwiLGY6XCJMVlwifSx7bmFtZTpcIkxlYmFub25cIixjOlwiOTYxLUxCLTBcIixiOlwiOTYxXCIsZjpcIkxCXCJ9LHtuYW1lOlwiTGVzb3Rob1wiLGM6XCIyNjYtTFMtMFwiLGI6XCIyNjZcIixmOlwiTFNcIn0se25hbWU6XCJMaWJlcmlhXCIsYzpcIjIzMS1MUi0wXCIsYjpcIjIzMVwiLGY6XCJMUlwifSx7bmFtZTpcIkxpYnlhXCIsXG5jOlwiMjE4LUxZLTBcIixiOlwiMjE4XCIsZjpcIkxZXCJ9LHtuYW1lOlwiTGllY2h0ZW5zdGVpblwiLGM6XCI0MjMtTEktMFwiLGI6XCI0MjNcIixmOlwiTElcIn0se25hbWU6XCJMaXRodWFuaWFcIixjOlwiMzcwLUxULTBcIixiOlwiMzcwXCIsZjpcIkxUXCJ9LHtuYW1lOlwiTHV4ZW1ib3VyZ1wiLGM6XCIzNTItTFUtMFwiLGI6XCIzNTJcIixmOlwiTFVcIn0se25hbWU6XCJNYWNhdVwiLGM6XCI4NTMtTU8tMFwiLGI6XCI4NTNcIixmOlwiTU9cIn0se25hbWU6XCJNYWNlZG9uaWFcIixjOlwiMzg5LU1LLTBcIixiOlwiMzg5XCIsZjpcIk1LXCJ9LHtuYW1lOlwiTWFkYWdhc2NhclwiLGM6XCIyNjEtTUctMFwiLGI6XCIyNjFcIixmOlwiTUdcIn0se25hbWU6XCJNYWxhd2lcIixjOlwiMjY1LU1XLTBcIixiOlwiMjY1XCIsZjpcIk1XXCJ9LHtuYW1lOlwiTWFsYXlzaWFcIixjOlwiNjAtTVktMFwiLGI6XCI2MFwiLGY6XCJNWVwifSx7bmFtZTpcIk1hbGRpdmVzXCIsYzpcIjk2MC1NVi0wXCIsYjpcIjk2MFwiLGY6XCJNVlwifSx7bmFtZTpcIk1hbGlcIixjOlwiMjIzLU1MLTBcIixiOlwiMjIzXCIsZjpcIk1MXCJ9LHtuYW1lOlwiTWFsdGFcIixcbmM6XCIzNTYtTVQtMFwiLGI6XCIzNTZcIixmOlwiTVRcIn0se25hbWU6XCJNYXJzaGFsbCBJc2xhbmRzXCIsYzpcIjY5Mi1NSC0wXCIsYjpcIjY5MlwiLGY6XCJNSFwifSx7bmFtZTpcIk1hcnRpbmlxdWVcIixjOlwiNTk2LU1RLTBcIixiOlwiNTk2XCIsZjpcIk1RXCJ9LHtuYW1lOlwiTWF1cml0YW5pYVwiLGM6XCIyMjItTVItMFwiLGI6XCIyMjJcIixmOlwiTVJcIn0se25hbWU6XCJNYXVyaXRpdXNcIixjOlwiMjMwLU1VLTBcIixiOlwiMjMwXCIsZjpcIk1VXCJ9LHtuYW1lOlwiTWF5b3R0ZVwiLGM6XCIyNjItWVQtMFwiLGI6XCIyNjJcIixmOlwiWVRcIn0se25hbWU6XCJNZXhpY29cIixjOlwiNTItTVgtMFwiLGI6XCI1MlwiLGY6XCJNWFwifSx7bmFtZTpcIk1pY3JvbmVzaWFcIixjOlwiNjkxLUZNLTBcIixiOlwiNjkxXCIsZjpcIkZNXCJ9LHtuYW1lOlwiTW9sZG92YVwiLGM6XCIzNzMtTUQtMFwiLGI6XCIzNzNcIixmOlwiTURcIn0se25hbWU6XCJNb25hY29cIixjOlwiMzc3LU1DLTBcIixiOlwiMzc3XCIsZjpcIk1DXCJ9LHtuYW1lOlwiTW9uZ29saWFcIixjOlwiOTc2LU1OLTBcIixiOlwiOTc2XCIsZjpcIk1OXCJ9LHtuYW1lOlwiTW9udGVuZWdyb1wiLFxuYzpcIjM4Mi1NRS0wXCIsYjpcIjM4MlwiLGY6XCJNRVwifSx7bmFtZTpcIk1vbnRzZXJyYXRcIixjOlwiMS1NUy0wXCIsYjpcIjFcIixmOlwiTVNcIn0se25hbWU6XCJNb3JvY2NvXCIsYzpcIjIxMi1NQS0wXCIsYjpcIjIxMlwiLGY6XCJNQVwifSx7bmFtZTpcIk1vemFtYmlxdWVcIixjOlwiMjU4LU1aLTBcIixiOlwiMjU4XCIsZjpcIk1aXCJ9LHtuYW1lOlwiTXlhbm1hciBbQnVybWFdXCIsYzpcIjk1LU1NLTBcIixiOlwiOTVcIixmOlwiTU1cIn0se25hbWU6XCJOYW1pYmlhXCIsYzpcIjI2NC1OQS0wXCIsYjpcIjI2NFwiLGY6XCJOQVwifSx7bmFtZTpcIk5hdXJ1XCIsYzpcIjY3NC1OUi0wXCIsYjpcIjY3NFwiLGY6XCJOUlwifSx7bmFtZTpcIk5lcGFsXCIsYzpcIjk3Ny1OUC0wXCIsYjpcIjk3N1wiLGY6XCJOUFwifSx7bmFtZTpcIk5ldGhlcmxhbmRzXCIsYzpcIjMxLU5MLTBcIixiOlwiMzFcIixmOlwiTkxcIn0se25hbWU6XCJOZXcgQ2FsZWRvbmlhXCIsYzpcIjY4Ny1OQy0wXCIsYjpcIjY4N1wiLGY6XCJOQ1wifSx7bmFtZTpcIk5ldyBaZWFsYW5kXCIsYzpcIjY0LU5aLTBcIixiOlwiNjRcIixmOlwiTlpcIn0se25hbWU6XCJOaWNhcmFndWFcIixcbmM6XCI1MDUtTkktMFwiLGI6XCI1MDVcIixmOlwiTklcIn0se25hbWU6XCJOaWdlclwiLGM6XCIyMjctTkUtMFwiLGI6XCIyMjdcIixmOlwiTkVcIn0se25hbWU6XCJOaWdlcmlhXCIsYzpcIjIzNC1ORy0wXCIsYjpcIjIzNFwiLGY6XCJOR1wifSx7bmFtZTpcIk5pdWVcIixjOlwiNjgzLU5VLTBcIixiOlwiNjgzXCIsZjpcIk5VXCJ9LHtuYW1lOlwiTm9yZm9sayBJc2xhbmRcIixjOlwiNjcyLU5GLTBcIixiOlwiNjcyXCIsZjpcIk5GXCJ9LHtuYW1lOlwiTm9ydGggS29yZWFcIixjOlwiODUwLUtQLTBcIixiOlwiODUwXCIsZjpcIktQXCJ9LHtuYW1lOlwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsYzpcIjEtTVAtMFwiLGI6XCIxXCIsZjpcIk1QXCJ9LHtuYW1lOlwiTm9yd2F5XCIsYzpcIjQ3LU5PLTBcIixiOlwiNDdcIixmOlwiTk9cIn0se25hbWU6XCJPbWFuXCIsYzpcIjk2OC1PTS0wXCIsYjpcIjk2OFwiLGY6XCJPTVwifSx7bmFtZTpcIlBha2lzdGFuXCIsYzpcIjkyLVBLLTBcIixiOlwiOTJcIixmOlwiUEtcIn0se25hbWU6XCJQYWxhdVwiLGM6XCI2ODAtUFctMFwiLGI6XCI2ODBcIixmOlwiUFdcIn0se25hbWU6XCJQYWxlc3RpbmlhbiBUZXJyaXRvcmllc1wiLFxuYzpcIjk3MC1QUy0wXCIsYjpcIjk3MFwiLGY6XCJQU1wifSx7bmFtZTpcIlBhbmFtYVwiLGM6XCI1MDctUEEtMFwiLGI6XCI1MDdcIixmOlwiUEFcIn0se25hbWU6XCJQYXB1YSBOZXcgR3VpbmVhXCIsYzpcIjY3NS1QRy0wXCIsYjpcIjY3NVwiLGY6XCJQR1wifSx7bmFtZTpcIlBhcmFndWF5XCIsYzpcIjU5NS1QWS0wXCIsYjpcIjU5NVwiLGY6XCJQWVwifSx7bmFtZTpcIlBlcnVcIixjOlwiNTEtUEUtMFwiLGI6XCI1MVwiLGY6XCJQRVwifSx7bmFtZTpcIlBoaWxpcHBpbmVzXCIsYzpcIjYzLVBILTBcIixiOlwiNjNcIixmOlwiUEhcIn0se25hbWU6XCJQb2xhbmRcIixjOlwiNDgtUEwtMFwiLGI6XCI0OFwiLGY6XCJQTFwifSx7bmFtZTpcIlBvcnR1Z2FsXCIsYzpcIjM1MS1QVC0wXCIsYjpcIjM1MVwiLGY6XCJQVFwifSx7bmFtZTpcIlB1ZXJ0byBSaWNvXCIsYzpcIjEtUFItMFwiLGI6XCIxXCIsZjpcIlBSXCJ9LHtuYW1lOlwiUWF0YXJcIixjOlwiOTc0LVFBLTBcIixiOlwiOTc0XCIsZjpcIlFBXCJ9LHtuYW1lOlwiUlxcdTAwZTl1bmlvblwiLGM6XCIyNjItUkUtMFwiLGI6XCIyNjJcIixmOlwiUkVcIn0se25hbWU6XCJSb21hbmlhXCIsXG5jOlwiNDAtUk8tMFwiLGI6XCI0MFwiLGY6XCJST1wifSx7bmFtZTpcIlJ1c3NpYVwiLGM6XCI3LVJVLTBcIixiOlwiN1wiLGY6XCJSVVwifSx7bmFtZTpcIlJ3YW5kYVwiLGM6XCIyNTAtUlctMFwiLGI6XCIyNTBcIixmOlwiUldcIn0se25hbWU6XCJTYWludCBCYXJ0aFxcdTAwZTlsZW15XCIsYzpcIjU5MC1CTC0wXCIsYjpcIjU5MFwiLGY6XCJCTFwifSx7bmFtZTpcIlNhaW50IEhlbGVuYVwiLGM6XCIyOTAtU0gtMFwiLGI6XCIyOTBcIixmOlwiU0hcIn0se25hbWU6XCJTdC4gS2l0dHNcIixjOlwiMS1LTi0wXCIsYjpcIjFcIixmOlwiS05cIn0se25hbWU6XCJTdC4gTHVjaWFcIixjOlwiMS1MQy0wXCIsYjpcIjFcIixmOlwiTENcIn0se25hbWU6XCJTYWludCBNYXJ0aW5cIixjOlwiNTkwLU1GLTBcIixiOlwiNTkwXCIsZjpcIk1GXCJ9LHtuYW1lOlwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLGM6XCI1MDgtUE0tMFwiLGI6XCI1MDhcIixmOlwiUE1cIn0se25hbWU6XCJTdC4gVmluY2VudFwiLGM6XCIxLVZDLTBcIixiOlwiMVwiLGY6XCJWQ1wifSx7bmFtZTpcIlNhbW9hXCIsYzpcIjY4NS1XUy0wXCIsYjpcIjY4NVwiLGY6XCJXU1wifSxcbntuYW1lOlwiU2FuIE1hcmlub1wiLGM6XCIzNzgtU00tMFwiLGI6XCIzNzhcIixmOlwiU01cIn0se25hbWU6XCJTXFx1MDBlM28gVG9tXFx1MDBlOSBhbmQgUHJcXHUwMGVkbmNpcGVcIixjOlwiMjM5LVNULTBcIixiOlwiMjM5XCIsZjpcIlNUXCJ9LHtuYW1lOlwiU2F1ZGkgQXJhYmlhXCIsYzpcIjk2Ni1TQS0wXCIsYjpcIjk2NlwiLGY6XCJTQVwifSx7bmFtZTpcIlNlbmVnYWxcIixjOlwiMjIxLVNOLTBcIixiOlwiMjIxXCIsZjpcIlNOXCJ9LHtuYW1lOlwiU2VyYmlhXCIsYzpcIjM4MS1SUy0wXCIsYjpcIjM4MVwiLGY6XCJSU1wifSx7bmFtZTpcIlNleWNoZWxsZXNcIixjOlwiMjQ4LVNDLTBcIixiOlwiMjQ4XCIsZjpcIlNDXCJ9LHtuYW1lOlwiU2llcnJhIExlb25lXCIsYzpcIjIzMi1TTC0wXCIsYjpcIjIzMlwiLGY6XCJTTFwifSx7bmFtZTpcIlNpbmdhcG9yZVwiLGM6XCI2NS1TRy0wXCIsYjpcIjY1XCIsZjpcIlNHXCJ9LHtuYW1lOlwiU2ludCBNYWFydGVuXCIsYzpcIjEtU1gtMFwiLGI6XCIxXCIsZjpcIlNYXCJ9LHtuYW1lOlwiU2xvdmFraWFcIixjOlwiNDIxLVNLLTBcIixiOlwiNDIxXCIsZjpcIlNLXCJ9LHtuYW1lOlwiU2xvdmVuaWFcIixcbmM6XCIzODYtU0ktMFwiLGI6XCIzODZcIixmOlwiU0lcIn0se25hbWU6XCJTb2xvbW9uIElzbGFuZHNcIixjOlwiNjc3LVNCLTBcIixiOlwiNjc3XCIsZjpcIlNCXCJ9LHtuYW1lOlwiU29tYWxpYVwiLGM6XCIyNTItU08tMFwiLGI6XCIyNTJcIixmOlwiU09cIn0se25hbWU6XCJTb3V0aCBBZnJpY2FcIixjOlwiMjctWkEtMFwiLGI6XCIyN1wiLGY6XCJaQVwifSx7bmFtZTpcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsYzpcIjUwMC1HUy0wXCIsYjpcIjUwMFwiLGY6XCJHU1wifSx7bmFtZTpcIlNvdXRoIEtvcmVhXCIsYzpcIjgyLUtSLTBcIixiOlwiODJcIixmOlwiS1JcIn0se25hbWU6XCJTb3V0aCBTdWRhblwiLGM6XCIyMTEtU1MtMFwiLGI6XCIyMTFcIixmOlwiU1NcIn0se25hbWU6XCJTcGFpblwiLGM6XCIzNC1FUy0wXCIsYjpcIjM0XCIsZjpcIkVTXCJ9LHtuYW1lOlwiU3JpIExhbmthXCIsYzpcIjk0LUxLLTBcIixiOlwiOTRcIixmOlwiTEtcIn0se25hbWU6XCJTdWRhblwiLGM6XCIyNDktU0QtMFwiLGI6XCIyNDlcIixmOlwiU0RcIn0se25hbWU6XCJTdXJpbmFtZVwiLGM6XCI1OTctU1ItMFwiLFxuYjpcIjU5N1wiLGY6XCJTUlwifSx7bmFtZTpcIlN2YWxiYXJkIGFuZCBKYW4gTWF5ZW5cIixjOlwiNDctU0otMFwiLGI6XCI0N1wiLGY6XCJTSlwifSx7bmFtZTpcIlN3YXppbGFuZFwiLGM6XCIyNjgtU1otMFwiLGI6XCIyNjhcIixmOlwiU1pcIn0se25hbWU6XCJTd2VkZW5cIixjOlwiNDYtU0UtMFwiLGI6XCI0NlwiLGY6XCJTRVwifSx7bmFtZTpcIlN3aXR6ZXJsYW5kXCIsYzpcIjQxLUNILTBcIixiOlwiNDFcIixmOlwiQ0hcIn0se25hbWU6XCJTeXJpYVwiLGM6XCI5NjMtU1ktMFwiLGI6XCI5NjNcIixmOlwiU1lcIn0se25hbWU6XCJUYWl3YW5cIixjOlwiODg2LVRXLTBcIixiOlwiODg2XCIsZjpcIlRXXCJ9LHtuYW1lOlwiVGFqaWtpc3RhblwiLGM6XCI5OTItVEotMFwiLGI6XCI5OTJcIixmOlwiVEpcIn0se25hbWU6XCJUYW56YW5pYVwiLGM6XCIyNTUtVFotMFwiLGI6XCIyNTVcIixmOlwiVFpcIn0se25hbWU6XCJUaGFpbGFuZFwiLGM6XCI2Ni1USC0wXCIsYjpcIjY2XCIsZjpcIlRIXCJ9LHtuYW1lOlwiVG9nb1wiLGM6XCIyMjgtVEctMFwiLGI6XCIyMjhcIixmOlwiVEdcIn0se25hbWU6XCJUb2tlbGF1XCIsYzpcIjY5MC1USy0wXCIsXG5iOlwiNjkwXCIsZjpcIlRLXCJ9LHtuYW1lOlwiVG9uZ2FcIixjOlwiNjc2LVRPLTBcIixiOlwiNjc2XCIsZjpcIlRPXCJ9LHtuYW1lOlwiVHJpbmlkYWQvVG9iYWdvXCIsYzpcIjEtVFQtMFwiLGI6XCIxXCIsZjpcIlRUXCJ9LHtuYW1lOlwiVHVuaXNpYVwiLGM6XCIyMTYtVE4tMFwiLGI6XCIyMTZcIixmOlwiVE5cIn0se25hbWU6XCJUdXJrZXlcIixjOlwiOTAtVFItMFwiLGI6XCI5MFwiLGY6XCJUUlwifSx7bmFtZTpcIlR1cmttZW5pc3RhblwiLGM6XCI5OTMtVE0tMFwiLGI6XCI5OTNcIixmOlwiVE1cIn0se25hbWU6XCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIixjOlwiMS1UQy0wXCIsYjpcIjFcIixmOlwiVENcIn0se25hbWU6XCJUdXZhbHVcIixjOlwiNjg4LVRWLTBcIixiOlwiNjg4XCIsZjpcIlRWXCJ9LHtuYW1lOlwiVS5TLiBWaXJnaW4gSXNsYW5kc1wiLGM6XCIxLVZJLTBcIixiOlwiMVwiLGY6XCJWSVwifSx7bmFtZTpcIlVnYW5kYVwiLGM6XCIyNTYtVUctMFwiLGI6XCIyNTZcIixmOlwiVUdcIn0se25hbWU6XCJVa3JhaW5lXCIsYzpcIjM4MC1VQS0wXCIsYjpcIjM4MFwiLGY6XCJVQVwifSx7bmFtZTpcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsXG5jOlwiOTcxLUFFLTBcIixiOlwiOTcxXCIsZjpcIkFFXCJ9LHtuYW1lOlwiVW5pdGVkIEtpbmdkb21cIixjOlwiNDQtR0ItMFwiLGI6XCI0NFwiLGY6XCJHQlwifSx7bmFtZTpcIlVuaXRlZCBTdGF0ZXNcIixjOlwiMS1VUy0wXCIsYjpcIjFcIixmOlwiVVNcIn0se25hbWU6XCJVcnVndWF5XCIsYzpcIjU5OC1VWS0wXCIsYjpcIjU5OFwiLGY6XCJVWVwifSx7bmFtZTpcIlV6YmVraXN0YW5cIixjOlwiOTk4LVVaLTBcIixiOlwiOTk4XCIsZjpcIlVaXCJ9LHtuYW1lOlwiVmFudWF0dVwiLGM6XCI2NzgtVlUtMFwiLGI6XCI2NzhcIixmOlwiVlVcIn0se25hbWU6XCJWYXRpY2FuIENpdHlcIixjOlwiMzc5LVZBLTBcIixiOlwiMzc5XCIsZjpcIlZBXCJ9LHtuYW1lOlwiVmVuZXp1ZWxhXCIsYzpcIjU4LVZFLTBcIixiOlwiNThcIixmOlwiVkVcIn0se25hbWU6XCJWaWV0bmFtXCIsYzpcIjg0LVZOLTBcIixiOlwiODRcIixmOlwiVk5cIn0se25hbWU6XCJXYWxsaXMgYW5kIEZ1dHVuYVwiLGM6XCI2ODEtV0YtMFwiLGI6XCI2ODFcIixmOlwiV0ZcIn0se25hbWU6XCJXZXN0ZXJuIFNhaGFyYVwiLGM6XCIyMTItRUgtMFwiLGI6XCIyMTJcIixcbmY6XCJFSFwifSx7bmFtZTpcIlllbWVuXCIsYzpcIjk2Ny1ZRS0wXCIsYjpcIjk2N1wiLGY6XCJZRVwifSx7bmFtZTpcIlphbWJpYVwiLGM6XCIyNjAtWk0tMFwiLGI6XCIyNjBcIixmOlwiWk1cIn0se25hbWU6XCJaaW1iYWJ3ZVwiLGM6XCIyNjMtWlctMFwiLGI6XCIyNjNcIixmOlwiWldcIn1dO1VoKFJoKTt2YXIgVmg9bmV3IE9oKFJoKTtmdW5jdGlvbiBXaChhLGIpe3RoaXMuYT1hO3RoaXMuQWE9Yn1mdW5jdGlvbiBYaChhKXthPVVhKGEpO3ZhciBiPVBoKFZoLGEpO3JldHVybiAwPGIubGVuZ3RoP25ldyBXaChcIjFcIj09YlswXS5iP1wiMS1VUy0wXCI6YlswXS5jLFVhKGEuc3Vic3RyKGJbMF0uYi5sZW5ndGgrMSkpKTpudWxsfWZ1bmN0aW9uIFloKGEpe3ZhciBiPVFoKGEuYSk7aWYoIWIpdGhyb3cgRXJyb3IoXCJDb3VudHJ5IElEIFwiK2EuYStcIiBub3QgZm91bmQuXCIpO3JldHVyblwiK1wiK2IuYithLkFhfWZ1bmN0aW9uIFpoKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoIU1hKCRoLGFbY10pJiYobnVsbCE9PWFpJiZcbmFbY11pbiBhaXx8TWEoYixhW2NdKSkpcmV0dXJuIGFbY107cmV0dXJuIG51bGx9dmFyICRoPVtcImVtYWlsTGlua1wiLFwicGFzc3dvcmRcIixcInBob25lXCJdLGFpPXtcImZhY2Vib29rLmNvbVwiOlwiRmFjZWJvb2tBdXRoUHJvdmlkZXJcIixcImdpdGh1Yi5jb21cIjpcIkdpdGh1YkF1dGhQcm92aWRlclwiLFwiZ29vZ2xlLmNvbVwiOlwiR29vZ2xlQXV0aFByb3ZpZGVyXCIscGFzc3dvcmQ6XCJFbWFpbEF1dGhQcm92aWRlclwiLFwidHdpdHRlci5jb21cIjpcIlR3aXR0ZXJBdXRoUHJvdmlkZXJcIixwaG9uZTpcIlBob25lQXV0aFByb3ZpZGVyXCJ9O2Z1bmN0aW9uIGJpKCl7dGhpcy5hPW5ldyBIaDtHKHRoaXMuYSxcImF1dG9VcGdyYWRlQW5vbnltb3VzVXNlcnNcIik7Ryh0aGlzLmEsXCJjYWxsYmFja3NcIik7Ryh0aGlzLmEsXCJjcmVkZW50aWFsSGVscGVyXCIsY2kpO0codGhpcy5hLFwiaW1tZWRpYXRlRmVkZXJhdGVkUmVkaXJlY3RcIiwhMSk7Ryh0aGlzLmEsXCJwb3B1cE1vZGVcIiwhMSk7Ryh0aGlzLmEsXCJwcml2YWN5UG9saWN5VXJsXCIpO1xuRyh0aGlzLmEsXCJxdWVyeVBhcmFtZXRlckZvclNpZ25JblN1Y2Nlc3NVcmxcIixcInNpZ25JblN1Y2Nlc3NVcmxcIik7Ryh0aGlzLmEsXCJxdWVyeVBhcmFtZXRlckZvcldpZGdldE1vZGVcIixcIm1vZGVcIik7Ryh0aGlzLmEsXCJzaWduSW5GbG93XCIpO0codGhpcy5hLFwic2lnbkluT3B0aW9uc1wiKTtHKHRoaXMuYSxcInNpZ25JblN1Y2Nlc3NVcmxcIik7Ryh0aGlzLmEsXCJzaXRlTmFtZVwiKTtHKHRoaXMuYSxcInRvc1VybFwiKTtHKHRoaXMuYSxcIndpZGdldFVybFwiKTtHKHRoaXMuYSxcImFkbWluUmVzdHJpY3RlZE9wZXJhdGlvblwiKX1mdW5jdGlvbiBkaShhKXt2YXIgYj0hIWEuYS5nZXQoXCJhdXRvVXBncmFkZUFub255bW91c1VzZXJzXCIpO2ImJiFlaShhKSYmb2coJ01pc3NpbmcgXCJzaWduSW5GYWlsdXJlXCIgY2FsbGJhY2s6IFwic2lnbkluRmFpbHVyZVwiIGNhbGxiYWNrIG5lZWRzIHRvIGJlIHByb3ZpZGVkIHdoZW4gXCJhdXRvVXBncmFkZUFub255bW91c1VzZXJzXCIgaXMgc2V0IHRvIHRydWUuJyx2b2lkIDApO1xucmV0dXJuIGJ9ZnVuY3Rpb24gZmkoYSl7YT1hLmEuZ2V0KFwic2lnbkluT3B0aW9uc1wiKXx8W107Zm9yKHZhciBiPVtdLGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXTtkPXRhKGQpP2Q6e3Byb3ZpZGVyOmR9O2QucHJvdmlkZXImJmIucHVzaChkKX1yZXR1cm4gYn1mdW5jdGlvbiBnaShhLGIpe2E9ZmkoYSk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYVtjXS5wcm92aWRlcj09PWIpcmV0dXJuIGFbY107cmV0dXJuIG51bGx9ZnVuY3Rpb24gaGkoYSl7cmV0dXJuIGZpKGEpLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYi5wcm92aWRlcn0pfWZ1bmN0aW9uIGlpKGEsYil7YT1qaShhKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylpZihhW2NdLnByb3ZpZGVySWQ9PT1iKXJldHVybiBhW2NdO3JldHVybiBudWxsfWZ1bmN0aW9uIGppKGEpe3JldHVybiBmaShhKS5tYXAoZnVuY3Rpb24oYil7aWYoYWlbYi5wcm92aWRlcl18fE1hKGtpLGIucHJvdmlkZXIpKXtiPXtwcm92aWRlcklkOmIucHJvdmlkZXIsXG5TOmIucHJvdmlkZXJOYW1lfHxudWxsLFY6Yi5mdWxsTGFiZWx8fG51bGwsdGE6Yi5idXR0b25Db2xvcnx8bnVsbCx6YTpiLmljb25Vcmw/emMoQmMoYi5pY29uVXJsKSkudG9TdHJpbmcoKTpudWxsfTtmb3IodmFyIGMgaW4gYiludWxsPT09YltjXSYmZGVsZXRlIGJbY107cmV0dXJuIGJ9cmV0dXJue3Byb3ZpZGVySWQ6Yi5wcm92aWRlcixTOmIucHJvdmlkZXJOYW1lfHxudWxsLFY6Yi5mdWxsTGFiZWx8fG51bGwsdGE6Yi5idXR0b25Db2xvcnx8bnVsbCx6YTpiLmljb25Vcmw/emMoQmMoYi5pY29uVXJsKSkudG9TdHJpbmcoKTpudWxsLE9iOmIubG9naW5IaW50S2V5fHxudWxsfX0pfWZ1bmN0aW9uIGxpKGEpe3ZhciBiPWdpKGEsZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpLGM7aWYoYz1iJiZiLmNsaWVudElkKXthOntpZihcImh0dHA6XCI9PT0od2luZG93LmxvY2F0aW9uJiZ3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpfHxcImh0dHBzOlwiPT09KHdpbmRvdy5sb2NhdGlvbiYmXG53aW5kb3cubG9jYXRpb24ucHJvdG9jb2wpKWZvcihkIGluIGE9YS5hLmdldChcImNyZWRlbnRpYWxIZWxwZXJcIiksbWkpaWYobWlbZF09PT1hKXt2YXIgZD1taVtkXTticmVhayBhfWQ9Y2l9Yz1kPT09bml9cmV0dXJuIGM/Yi5jbGllbnRJZHx8bnVsbDpudWxsfWZ1bmN0aW9uIG9pKGEpe2E9Z2koYSxmaXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKTtyZXR1cm4hIShhJiZhLmRpc2FibGVTaWduVXAmJmEuZGlzYWJsZVNpZ25VcC5zdGF0dXMpfWZ1bmN0aW9uIHBpKGEpe2E9YS5hLmdldChcImFkbWluUmVzdHJpY3RlZE9wZXJhdGlvblwiKXx8bnVsbDtyZXR1cm4hKCFhfHwhYS5zdGF0dXMpfWZ1bmN0aW9uIHFpKGEpe3ZhciBiPW51bGw7ZmkoYSkuZm9yRWFjaChmdW5jdGlvbihkKXtkLnByb3ZpZGVyPT1maXJlYmFzZS5hdXRoLlBob25lQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEJiZ0YShkLnJlY2FwdGNoYVBhcmFtZXRlcnMpJiYhQXJyYXkuaXNBcnJheShkLnJlY2FwdGNoYVBhcmFtZXRlcnMpJiZcbihiPWViKGQucmVjYXB0Y2hhUGFyYW1ldGVycykpfSk7aWYoYil7dmFyIGM9W107cmkuZm9yRWFjaChmdW5jdGlvbihkKXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGJbZF0mJihjLnB1c2goZCksZGVsZXRlIGJbZF0pfSk7Yy5sZW5ndGgmJnRnKCdUaGUgZm9sbG93aW5nIHByb3ZpZGVkIFwicmVjYXB0Y2hhUGFyYW1ldGVyc1wiIGtleXMgYXJlIG5vdCBhbGxvd2VkOiAnK2Muam9pbihcIiwgXCIpKX1yZXR1cm4gYn1mdW5jdGlvbiBzaShhKXtyZXR1cm4oYT1hLmEuZ2V0KFwiYWRtaW5SZXN0cmljdGVkT3BlcmF0aW9uXCIpKSYmYS5hZG1pbkVtYWlsP2EuYWRtaW5FbWFpbDpudWxsfWZ1bmN0aW9uIHRpKGEpe2lmKGE9YS5hLmdldChcImFkbWluUmVzdHJpY3RlZE9wZXJhdGlvblwiKXx8bnVsbCl7dmFyIGI9YS5oZWxwTGlua3x8bnVsbDtpZihiJiZcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGZ1bmN0aW9uKCl7cmYoYil9fXJldHVybiBudWxsfWZ1bmN0aW9uIHVpKGEpe3JldHVybihhPWdpKGEsZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkpJiZcbmEuZGlzYWJsZVNpZ25VcCYmYS5kaXNhYmxlU2lnblVwLmFkbWluRW1haWx8fG51bGx9ZnVuY3Rpb24gdmkoYSl7aWYoKGE9Z2koYSxmaXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSkmJmEuZGlzYWJsZVNpZ25VcCl7dmFyIGI9YS5kaXNhYmxlU2lnblVwLmhlbHBMaW5rfHxudWxsO2lmKGImJlwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gZnVuY3Rpb24oKXtyZihiKX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gd2koYSxiKXthPShhPWdpKGEsYikpJiZhLnNjb3BlcztyZXR1cm4gQXJyYXkuaXNBcnJheShhKT9hOltdfWZ1bmN0aW9uIHhpKGEsYil7YT0oYT1naShhLGIpKSYmYS5jdXN0b21QYXJhbWV0ZXJzO3JldHVybiB0YShhKT8oYT1lYihhKSxiPT09ZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQmJmRlbGV0ZSBhLmxvZ2luX2hpbnQsYj09PWZpcmViYXNlLmF1dGguR2l0aHViQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEJiZcbmRlbGV0ZSBhLmxvZ2luLGEpOm51bGx9ZnVuY3Rpb24geWkoYSl7YT1naShhLGZpcmViYXNlLmF1dGguUGhvbmVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpO3ZhciBiPW51bGw7YSYmXCJzdHJpbmdcIj09PXR5cGVvZiBhLmxvZ2luSGludCYmKGI9WGgoYS5sb2dpbkhpbnQpKTtyZXR1cm4gYSYmYS5kZWZhdWx0TmF0aW9uYWxOdW1iZXJ8fGImJmIuQWF8fG51bGx9ZnVuY3Rpb24gemkoYSl7dmFyIGI9KGE9Z2koYSxmaXJlYmFzZS5hdXRoLlBob25lQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSkmJmEuZGVmYXVsdENvdW50cnl8fG51bGw7Yj1iJiZTaChiKTt2YXIgYz1udWxsO2EmJlwic3RyaW5nXCI9PT10eXBlb2YgYS5sb2dpbkhpbnQmJihjPVhoKGEubG9naW5IaW50KSk7cmV0dXJuIGImJmJbMF18fGMmJlFoKGMuYSl8fG51bGx9ZnVuY3Rpb24gQWkoYSl7YT1naShhLGZpcmViYXNlLmF1dGguUGhvbmVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpO2lmKCFhKXJldHVybiBudWxsO3ZhciBiPVxuYS53aGl0ZWxpc3RlZENvdW50cmllcyxjPWEuYmxhY2tsaXN0ZWRDb3VudHJpZXM7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBiJiYoIUFycmF5LmlzQXJyYXkoYil8fDA9PWIubGVuZ3RoKSl0aHJvdyBFcnJvcihcIldoaXRlbGlzdGVkQ291bnRyaWVzIG11c3QgYmUgYSBub24tZW1wdHkgYXJyYXkuXCIpO2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmIUFycmF5LmlzQXJyYXkoYykpdGhyb3cgRXJyb3IoXCJCbGFja2xpc3RlZENvdW50cmllcyBtdXN0IGJlIGFuIGFycmF5LlwiKTtpZihiJiZjKXRocm93IEVycm9yKFwiQm90aCB3aGl0ZWxpc3RlZENvdW50cmllcyBhbmQgYmxhY2tsaXN0ZWRDb3VudHJpZXMgYXJlIHByb3ZpZGVkLlwiKTtpZighYiYmIWMpcmV0dXJuIFJoO2E9W107aWYoYil7Yz17fTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9VGgoYltkXSk7Zm9yKHZhciBmPTA7ZjxlLmxlbmd0aDtmKyspY1tlW2ZdLmNdPWVbZl19Zm9yKHZhciBnIGluIGMpYy5oYXNPd25Qcm9wZXJ0eShnKSYmXG5hLnB1c2goY1tnXSl9ZWxzZXtnPXt9O2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspZm9yKGU9VGgoY1tiXSksZD0wO2Q8ZS5sZW5ndGg7ZCsrKWdbZVtkXS5jXT1lW2RdO2ZvcihlPTA7ZTxSaC5sZW5ndGg7ZSsrKW51bGwhPT1nJiZSaFtlXS5jIGluIGd8fGEucHVzaChSaFtlXSl9cmV0dXJuIGF9ZnVuY3Rpb24gQmkoYSl7cmV0dXJuIEpoKGEuYSxcInF1ZXJ5UGFyYW1ldGVyRm9yV2lkZ2V0TW9kZVwiKX1mdW5jdGlvbiBIKGEpe3ZhciBiPWEuYS5nZXQoXCJ0b3NVcmxcIil8fG51bGw7YT1hLmEuZ2V0KFwicHJpdmFjeVBvbGljeVVybFwiKXx8bnVsbDtiJiYhYSYmdGcoXCJQcml2YWN5IFBvbGljeSBVUkwgaXMgbWlzc2luZywgdGhlIGxpbmsgd2lsbCBub3QgYmUgZGlzcGxheWVkLlwiKTtpZihiJiZhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYjtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGZ1bmN0aW9uKCl7cmYoYil9fXJldHVybiBudWxsfWZ1bmN0aW9uIEooYSl7dmFyIGI9XG5hLmEuZ2V0KFwidG9zVXJsXCIpfHxudWxsLGM9YS5hLmdldChcInByaXZhY3lQb2xpY3lVcmxcIil8fG51bGw7YyYmIWImJnRnKFwiVGVybSBvZiBTZXJ2aWNlIFVSTCBpcyBtaXNzaW5nLCB0aGUgbGluayB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQuXCIpO2lmKGImJmMpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXJldHVybiBjO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYylyZXR1cm4gZnVuY3Rpb24oKXtyZihjKX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2koYSl7cmV0dXJuKGE9Z2koYSxmaXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKSkmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYS5yZXF1aXJlRGlzcGxheU5hbWU/ISFhLnJlcXVpcmVEaXNwbGF5TmFtZTohMH1mdW5jdGlvbiBEaShhKXthPWdpKGEsZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCk7cmV0dXJuISghYXx8YS5zaWduSW5NZXRob2QhPT1maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0QpfVxuZnVuY3Rpb24gRWkoYSl7YT1naShhLGZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpO3JldHVybiEoIWF8fCFhLmZvcmNlU2FtZURldmljZSl9ZnVuY3Rpb24gRmkoYSl7aWYoRGkoYSkpe3ZhciBiPXt1cmw6dGYoKSxoYW5kbGVDb2RlSW5BcHA6ITB9OyhhPWdpKGEsZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5lbWFpbExpbmtTaWduSW4mJmdiKGIsYS5lbWFpbExpbmtTaWduSW4oKSk7YT1iLnVybDt2YXIgYz10ZigpO2MgaW5zdGFuY2VvZiB2Ynx8KGM9SmIoYykpO2EgaW5zdGFuY2VvZiB2Ynx8KGE9SmIoYSkpO3ZhciBkPWM7Yz1uZXcgdmIoZCk7dmFyIGU9ISFhLmo7ZT93YihjLGEuaik6ZT0hIWEuQTtlP2MuQT1hLkE6ZT0hIWEuaDtlP2MuaD1hLmg6ZT1udWxsIT1hLkM7dmFyIGY9YS5nO2lmKGUpeGIoYyxhLkMpO2Vsc2UgaWYoZT0hIWEuZylpZihcIi9cIiE9Zi5jaGFyQXQoMCkmJlxuKGQuaCYmIWQuZz9mPVwiL1wiK2Y6KGQ9Yy5nLmxhc3RJbmRleE9mKFwiL1wiKSwtMSE9ZCYmKGY9Yy5nLnN1YnN0cigwLGQrMSkrZikpKSxcIi4uXCI9PWZ8fFwiLlwiPT1mKWY9XCJcIjtlbHNlIGlmKC0xIT1mLmluZGV4T2YoXCIuL1wiKXx8LTEhPWYuaW5kZXhPZihcIi8uXCIpKXtkPTA9PWYubGFzdEluZGV4T2YoXCIvXCIsMCk7Zj1mLnNwbGl0KFwiL1wiKTtmb3IodmFyIGc9W10saD0wO2g8Zi5sZW5ndGg7KXt2YXIgaz1mW2grK107XCIuXCI9PWs/ZCYmaD09Zi5sZW5ndGgmJmcucHVzaChcIlwiKTpcIi4uXCI9PWs/KCgxPGcubGVuZ3RofHwxPT1nLmxlbmd0aCYmXCJcIiE9Z1swXSkmJmcucG9wKCksZCYmaD09Zi5sZW5ndGgmJmcucHVzaChcIlwiKSk6KGcucHVzaChrKSxkPSEwKX1mPWcuam9pbihcIi9cIil9ZT9jLmc9ZjplPVwiXCIhPT1hLmEudG9TdHJpbmcoKTtlP3liKGMsemIoYS5hKSk6ZT0hIWEucztlJiYoYy5zPWEucyk7Yi51cmw9Yy50b1N0cmluZygpO3JldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEdpKGEpe3ZhciBiPVxuISFhLmEuZ2V0KFwiaW1tZWRpYXRlRmVkZXJhdGVkUmVkaXJlY3RcIiksYz1oaShhKTthPUhpKGEpO3JldHVybiBiJiYxPT1jLmxlbmd0aCYmIU1hKCRoLGNbMF0pJiZhPT1JaX1mdW5jdGlvbiBIaShhKXthPWEuYS5nZXQoXCJzaWduSW5GbG93XCIpO2Zvcih2YXIgYiBpbiBKaSlpZihKaVtiXT09YSlyZXR1cm4gSmlbYl07cmV0dXJuIElpfWZ1bmN0aW9uIEtpKGEpe3JldHVybiBMaShhKS5zaWduSW5TdWNjZXNzfHxudWxsfWZ1bmN0aW9uIE1pKGEpe3JldHVybiBMaShhKS5zaWduSW5TdWNjZXNzV2l0aEF1dGhSZXN1bHR8fG51bGx9ZnVuY3Rpb24gZWkoYSl7cmV0dXJuIExpKGEpLnNpZ25JbkZhaWx1cmV8fG51bGx9ZnVuY3Rpb24gTGkoYSl7cmV0dXJuIGEuYS5nZXQoXCJjYWxsYmFja3NcIil8fHt9fXZhciBuaT1cImdvb2dsZXlvbG9cIixjaT1cIm5vbmVcIixtaT17bmM6bmksTk9ORTpjaX0sSWk9XCJyZWRpcmVjdFwiLEppPXtxYzpcInBvcHVwXCIscmM6SWl9LE5pPXttYzpcImNhbGxiYWNrXCIsUkVDT1ZFUl9FTUFJTDpcInJlY292ZXJFbWFpbFwiLFxuc2M6XCJyZXNldFBhc3N3b3JkXCIsUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT046XCJyZXZlcnRTZWNvbmRGYWN0b3JBZGRpdGlvblwiLHRjOlwic2VsZWN0XCIsdWM6XCJzaWduSW5cIixWRVJJRllfQU5EX0NIQU5HRV9FTUFJTDpcInZlcmlmeUFuZENoYW5nZUVtYWlsXCIsVkVSSUZZX0VNQUlMOlwidmVyaWZ5RW1haWxcIn0sa2k9W1wiYW5vbnltb3VzXCJdLHJpPVtcInNpdGVrZXlcIixcInRhYmluZGV4XCIsXCJjYWxsYmFja1wiLFwiZXhwaXJlZC1jYWxsYmFja1wiXTt2YXIgT2ksUGksUWksUmksSz17fTtmdW5jdGlvbiBMKGEsYixjLGQpe0tbYV0uYXBwbHkobnVsbCxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpfWZ1bmN0aW9uIFNpKGEpe2lmKGEuY2xhc3NMaXN0KXJldHVybiBhLmNsYXNzTGlzdDthPWEuY2xhc3NOYW1lO3JldHVybiBxKGEpJiZhLm1hdGNoKC9cXFMrL2cpfHxbXX1mdW5jdGlvbiBUaShhLGIpe3JldHVybiBhLmNsYXNzTGlzdD9hLmNsYXNzTGlzdC5jb250YWlucyhiKTpcbk1hKFNpKGEpLGIpfWZ1bmN0aW9uIFVpKGEsYil7YS5jbGFzc0xpc3Q/YS5jbGFzc0xpc3QuYWRkKGIpOlRpKGEsYil8fChhLmNsYXNzTmFtZSs9MDxhLmNsYXNzTmFtZS5sZW5ndGg/XCIgXCIrYjpiKX1mdW5jdGlvbiBWaShhLGIpe2EuY2xhc3NMaXN0P2EuY2xhc3NMaXN0LnJlbW92ZShiKTpUaShhLGIpJiYoYS5jbGFzc05hbWU9SmEoU2koYSksZnVuY3Rpb24oYyl7cmV0dXJuIGMhPWJ9KS5qb2luKFwiIFwiKSl9ZnVuY3Rpb24gV2koYSl7dmFyIGI9YS50eXBlO3N3aXRjaChxKGIpJiZiLnRvTG93ZXJDYXNlKCkpe2Nhc2UgXCJjaGVja2JveFwiOmNhc2UgXCJyYWRpb1wiOnJldHVybiBhLmNoZWNrZWQ/YS52YWx1ZTpudWxsO2Nhc2UgXCJzZWxlY3Qtb25lXCI6cmV0dXJuIGI9YS5zZWxlY3RlZEluZGV4LDA8PWI/YS5vcHRpb25zW2JdLnZhbHVlOm51bGw7Y2FzZSBcInNlbGVjdC1tdWx0aXBsZVwiOmI9W107Zm9yKHZhciBjLGQ9MDtjPWEub3B0aW9uc1tkXTtkKyspYy5zZWxlY3RlZCYmYi5wdXNoKGMudmFsdWUpO1xucmV0dXJuIGIubGVuZ3RoP2I6bnVsbDtkZWZhdWx0OnJldHVybiBudWxsIT1hLnZhbHVlP2EudmFsdWU6bnVsbH19ZnVuY3Rpb24gWGkoYSxiKXt2YXIgYz1hLnR5cGU7c3dpdGNoKHEoYykmJmMudG9Mb3dlckNhc2UoKSl7Y2FzZSBcImNoZWNrYm94XCI6Y2FzZSBcInJhZGlvXCI6YS5jaGVja2VkPWI7YnJlYWs7Y2FzZSBcInNlbGVjdC1vbmVcIjphLnNlbGVjdGVkSW5kZXg9LTE7aWYocShiKSlmb3IodmFyIGQ9MDtjPWEub3B0aW9uc1tkXTtkKyspaWYoYy52YWx1ZT09Yil7Yy5zZWxlY3RlZD0hMDticmVha31icmVhaztjYXNlIFwic2VsZWN0LW11bHRpcGxlXCI6cShiKSYmKGI9W2JdKTtmb3IoZD0wO2M9YS5vcHRpb25zW2RdO2QrKylpZihjLnNlbGVjdGVkPSExLGIpZm9yKHZhciBlLGY9MDtlPWJbZl07ZisrKWMudmFsdWU9PWUmJihjLnNlbGVjdGVkPSEwKTticmVhaztkZWZhdWx0OmEudmFsdWU9bnVsbCE9Yj9iOlwiXCJ9fWZ1bmN0aW9uIFlpKGEpe2lmKGEuYWx0S2V5JiYhYS5jdHJsS2V5fHxcbmEubWV0YUtleXx8MTEyPD1hLmtleUNvZGUmJjEyMz49YS5rZXlDb2RlKXJldHVybiExO2lmKFppKGEua2V5Q29kZSkpcmV0dXJuITA7c3dpdGNoKGEua2V5Q29kZSl7Y2FzZSAxODpjYXNlIDIwOmNhc2UgOTM6Y2FzZSAxNzpjYXNlIDQwOmNhc2UgMzU6Y2FzZSAyNzpjYXNlIDM2OmNhc2UgNDU6Y2FzZSAzNzpjYXNlIDIyNDpjYXNlIDkxOmNhc2UgMTQ0OmNhc2UgMTI6Y2FzZSAzNDpjYXNlIDMzOmNhc2UgMTk6Y2FzZSAyNTU6Y2FzZSA0NDpjYXNlIDM5OmNhc2UgMTQ1OmNhc2UgMTY6Y2FzZSAzODpjYXNlIDI1MjpjYXNlIDIyNDpjYXNlIDkyOnJldHVybiExO2Nhc2UgMDpyZXR1cm4hZGM7ZGVmYXVsdDpyZXR1cm4gMTY2PmEua2V5Q29kZXx8MTgzPGEua2V5Q29kZX19ZnVuY3Rpb24gJGkoYSxiLGMsZCxlLGYpe2lmKGVjJiYhbWMoXCI1MjVcIikpcmV0dXJuITA7aWYoZ2MmJmUpcmV0dXJuIFppKGEpO2lmKGUmJiFkKXJldHVybiExO2lmKCFkYyl7XCJudW1iZXJcIj09dHlwZW9mIGImJihiPVxuYWooYikpO3ZhciBnPTE3PT1ifHwxOD09Ynx8Z2MmJjkxPT1iO2lmKCghY3x8Z2MpJiZnfHxnYyYmMTY9PWImJihkfHxmKSlyZXR1cm4hMX1pZigoZWN8fGJjKSYmZCYmYylzd2l0Y2goYSl7Y2FzZSAyMjA6Y2FzZSAyMTk6Y2FzZSAyMjE6Y2FzZSAxOTI6Y2FzZSAxODY6Y2FzZSAxODk6Y2FzZSAxODc6Y2FzZSAxODg6Y2FzZSAxOTA6Y2FzZSAxOTE6Y2FzZSAxOTI6Y2FzZSAyMjI6cmV0dXJuITF9aWYoeiYmZCYmYj09YSlyZXR1cm4hMTtzd2l0Y2goYSl7Y2FzZSAxMzpyZXR1cm4gZGM/Znx8ZT8hMTohKGMmJmQpOiEwO2Nhc2UgMjc6cmV0dXJuIShlY3x8YmN8fGRjKX1yZXR1cm4gZGMmJihkfHxlfHxmKT8hMTpaaShhKX1mdW5jdGlvbiBaaShhKXtpZig0ODw9YSYmNTc+PWF8fDk2PD1hJiYxMDY+PWF8fDY1PD1hJiY5MD49YXx8KGVjfHxiYykmJjA9PWEpcmV0dXJuITA7c3dpdGNoKGEpe2Nhc2UgMzI6Y2FzZSA0MzpjYXNlIDYzOmNhc2UgNjQ6Y2FzZSAxMDc6Y2FzZSAxMDk6Y2FzZSAxMTA6Y2FzZSAxMTE6Y2FzZSAxODY6Y2FzZSA1OTpjYXNlIDE4OTpjYXNlIDE4NzpjYXNlIDYxOmNhc2UgMTg4OmNhc2UgMTkwOmNhc2UgMTkxOmNhc2UgMTkyOmNhc2UgMjIyOmNhc2UgMjE5OmNhc2UgMjIwOmNhc2UgMjIxOmNhc2UgMTYzOnJldHVybiEwO1xuY2FzZSAxNzM6cmV0dXJuIGRjO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGFqKGEpe2lmKGRjKWE9YmooYSk7ZWxzZSBpZihnYyYmZWMpc3dpdGNoKGEpe2Nhc2UgOTM6YT05MX1yZXR1cm4gYX1mdW5jdGlvbiBiaihhKXtzd2l0Y2goYSl7Y2FzZSA2MTpyZXR1cm4gMTg3O2Nhc2UgNTk6cmV0dXJuIDE4NjtjYXNlIDE3MzpyZXR1cm4gMTg5O2Nhc2UgMjI0OnJldHVybiA5MTtjYXNlIDA6cmV0dXJuIDIyNDtkZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiBjaihhKXtFLmNhbGwodGhpcyk7dGhpcy5hPWE7a2UoYSxcImtleWRvd25cIix0aGlzLmcsITEsdGhpcyk7a2UoYSxcImNsaWNrXCIsdGhpcy5oLCExLHRoaXMpfXcoY2osRSk7Y2oucHJvdG90eXBlLmc9ZnVuY3Rpb24oYSl7KDEzPT1hLmtleUNvZGV8fGVjJiYzPT1hLmtleUNvZGUpJiZkaih0aGlzLGEpfTtjai5wcm90b3R5cGUuaD1mdW5jdGlvbihhKXtkaih0aGlzLGEpfTtmdW5jdGlvbiBkaihhLGIpe3ZhciBjPW5ldyBlaihiKTtcbmlmKHhlKGEsYykpe2M9bmV3IGZqKGIpO3RyeXt4ZShhLGMpfWZpbmFsbHl7Yi5zdG9wUHJvcGFnYXRpb24oKX19fWNqLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7Y2ouSy5vLmNhbGwodGhpcyk7c2UodGhpcy5hLFwia2V5ZG93blwiLHRoaXMuZywhMSx0aGlzKTtzZSh0aGlzLmEsXCJjbGlja1wiLHRoaXMuaCwhMSx0aGlzKTtkZWxldGUgdGhpcy5hfTtmdW5jdGlvbiBmaihhKXtaZC5jYWxsKHRoaXMsYS5hKTt0aGlzLnR5cGU9XCJhY3Rpb25cIn13KGZqLFpkKTtmdW5jdGlvbiBlaihhKXtaZC5jYWxsKHRoaXMsYS5hKTt0aGlzLnR5cGU9XCJiZWZvcmVhY3Rpb25cIn13KGVqLFpkKTtmdW5jdGlvbiBnaihhKXtFLmNhbGwodGhpcyk7dGhpcy5hPWE7YT16P1wiZm9jdXNvdXRcIjpcImJsdXJcIjt0aGlzLmc9a2UodGhpcy5hLHo/XCJmb2N1c2luXCI6XCJmb2N1c1wiLHRoaXMsIXopO3RoaXMuaD1rZSh0aGlzLmEsYSx0aGlzLCF6KX13KGdqLEUpO2dqLnByb3RvdHlwZS5oYW5kbGVFdmVudD1mdW5jdGlvbihhKXt2YXIgYj1cbm5ldyBaZChhLmEpO2IudHlwZT1cImZvY3VzaW5cIj09YS50eXBlfHxcImZvY3VzXCI9PWEudHlwZT9cImZvY3VzaW5cIjpcImZvY3Vzb3V0XCI7eGUodGhpcyxiKX07Z2oucHJvdG90eXBlLm89ZnVuY3Rpb24oKXtnai5LLm8uY2FsbCh0aGlzKTt0ZSh0aGlzLmcpO3RlKHRoaXMuaCk7ZGVsZXRlIHRoaXMuYX07ZnVuY3Rpb24gaGooYSxiKXtFLmNhbGwodGhpcyk7dGhpcy5nPWF8fDE7dGhpcy5hPWJ8fG47dGhpcy5oPXIodGhpcy5nYyx0aGlzKTt0aGlzLmo9QWEoKX13KGhqLEUpO2w9aGoucHJvdG90eXBlO2wuS2E9ITE7bC5hYT1udWxsO2wuZ2M9ZnVuY3Rpb24oKXtpZih0aGlzLkthKXt2YXIgYT1BYSgpLXRoaXMuajswPGEmJmE8LjgqdGhpcy5nP3RoaXMuYWE9dGhpcy5hLnNldFRpbWVvdXQodGhpcy5oLHRoaXMuZy1hKToodGhpcy5hYSYmKHRoaXMuYS5jbGVhclRpbWVvdXQodGhpcy5hYSksdGhpcy5hYT1udWxsKSx4ZSh0aGlzLFwidGlja1wiKSx0aGlzLkthJiYoaWoodGhpcyksdGhpcy5zdGFydCgpKSl9fTtcbmwuc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLkthPSEwO3RoaXMuYWF8fCh0aGlzLmFhPXRoaXMuYS5zZXRUaW1lb3V0KHRoaXMuaCx0aGlzLmcpLHRoaXMuaj1BYSgpKX07ZnVuY3Rpb24gaWooYSl7YS5LYT0hMTthLmFhJiYoYS5hLmNsZWFyVGltZW91dChhLmFhKSxhLmFhPW51bGwpfWwubz1mdW5jdGlvbigpe2hqLksuby5jYWxsKHRoaXMpO2lqKHRoaXMpO2RlbGV0ZSB0aGlzLmF9O2Z1bmN0aW9uIGpqKGEsYil7aWYoc2EoYSkpYiYmKGE9cihhLGIpKTtlbHNlIGlmKGEmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaGFuZGxlRXZlbnQpYT1yKGEuaGFuZGxlRXZlbnQsYSk7ZWxzZSB0aHJvdyBFcnJvcihcIkludmFsaWQgbGlzdGVuZXIgYXJndW1lbnRcIik7cmV0dXJuIDIxNDc0ODM2NDc8TnVtYmVyKDApPy0xOm4uc2V0VGltZW91dChhLDApfWZ1bmN0aW9uIGtqKGEpe1BkLmNhbGwodGhpcyk7dGhpcy5nPWE7dGhpcy5hPXt9fXcoa2osUGQpO3ZhciBsaj1bXTtmdW5jdGlvbiBtaihhLGIsYyxcbmQpe3FhKGMpfHwoYyYmKGxqWzBdPWMudG9TdHJpbmcoKSksYz1saik7Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspe3ZhciBmPWtlKGIsY1tlXSxkfHxhLmhhbmRsZUV2ZW50LCExLGEuZ3x8YSk7aWYoIWYpYnJlYWs7YS5hW2Yua2V5XT1mfX1mdW5jdGlvbiBuaihhKXtkYihhLmEsZnVuY3Rpb24oYixjKXt0aGlzLmEuaGFzT3duUHJvcGVydHkoYykmJnRlKGIpfSxhKTthLmE9e319a2oucHJvdG90eXBlLm89ZnVuY3Rpb24oKXtrai5LLm8uY2FsbCh0aGlzKTtuaih0aGlzKX07a2oucHJvdG90eXBlLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJFdmVudEhhbmRsZXIuaGFuZGxlRXZlbnQgbm90IGltcGxlbWVudGVkXCIpO307ZnVuY3Rpb24gb2ooYSl7RS5jYWxsKHRoaXMpO3RoaXMuYT1udWxsO3RoaXMuZz1hO2E9enx8YmN8fGVjJiYhbWMoXCI1MzFcIikmJlwiVEVYVEFSRUFcIj09YS50YWdOYW1lO3RoaXMuaD1uZXcga2oodGhpcyk7bWoodGhpcy5oLHRoaXMuZyxhP1xuW1wia2V5ZG93blwiLFwicGFzdGVcIixcImN1dFwiLFwiZHJvcFwiLFwiaW5wdXRcIl06XCJpbnB1dFwiLHRoaXMpfXcob2osRSk7b2oucHJvdG90eXBlLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKGEpe2lmKFwiaW5wdXRcIj09YS50eXBlKXomJm1jKDEwKSYmMD09YS5rZXlDb2RlJiYwPT1hLmp8fChwaih0aGlzKSx4ZSh0aGlzLHFqKGEpKSk7ZWxzZSBpZihcImtleWRvd25cIiE9YS50eXBlfHxZaShhKSl7dmFyIGI9XCJrZXlkb3duXCI9PWEudHlwZT90aGlzLmcudmFsdWU6bnVsbDt6JiYyMjk9PWEua2V5Q29kZSYmKGI9bnVsbCk7dmFyIGM9cWooYSk7cGoodGhpcyk7dGhpcy5hPWpqKGZ1bmN0aW9uKCl7dGhpcy5hPW51bGw7dGhpcy5nLnZhbHVlIT1iJiZ4ZSh0aGlzLGMpfSx0aGlzKX19O2Z1bmN0aW9uIHBqKGEpe251bGwhPWEuYSYmKG4uY2xlYXJUaW1lb3V0KGEuYSksYS5hPW51bGwpfWZ1bmN0aW9uIHFqKGEpe2E9bmV3IFpkKGEuYSk7YS50eXBlPVwiaW5wdXRcIjtyZXR1cm4gYX1vai5wcm90b3R5cGUubz1mdW5jdGlvbigpe29qLksuby5jYWxsKHRoaXMpO1xudGhpcy5oLm0oKTtwaih0aGlzKTtkZWxldGUgdGhpcy5nfTtmdW5jdGlvbiByaihhLGIpe0UuY2FsbCh0aGlzKTthJiYodGhpcy5PYSYmc2oodGhpcyksdGhpcy5xYT1hLHRoaXMuTmE9a2UodGhpcy5xYSxcImtleXByZXNzXCIsdGhpcyxiKSx0aGlzLllhPWtlKHRoaXMucWEsXCJrZXlkb3duXCIsdGhpcy5KYixiLHRoaXMpLHRoaXMuT2E9a2UodGhpcy5xYSxcImtleXVwXCIsdGhpcy5LYixiLHRoaXMpKX13KHJqLEUpO2w9cmoucHJvdG90eXBlO2wucWE9bnVsbDtsLk5hPW51bGw7bC5ZYT1udWxsO2wuT2E9bnVsbDtsLlI9LTE7bC5YPS0xO2wuVWE9ITE7dmFyIHRqPXszOjEzLDEyOjE0NCw2MzIzMjozOCw2MzIzMzo0MCw2MzIzNDozNyw2MzIzNTozOSw2MzIzNjoxMTIsNjMyMzc6MTEzLDYzMjM4OjExNCw2MzIzOToxMTUsNjMyNDA6MTE2LDYzMjQxOjExNyw2MzI0MjoxMTgsNjMyNDM6MTE5LDYzMjQ0OjEyMCw2MzI0NToxMjEsNjMyNDY6MTIyLDYzMjQ3OjEyMyw2MzI0ODo0NCw2MzI3Mjo0NixcbjYzMjczOjM2LDYzMjc1OjM1LDYzMjc2OjMzLDYzMjc3OjM0LDYzMjg5OjE0NCw2MzMwMjo0NX0sdWo9e1VwOjM4LERvd246NDAsTGVmdDozNyxSaWdodDozOSxFbnRlcjoxMyxGMToxMTIsRjI6MTEzLEYzOjExNCxGNDoxMTUsRjU6MTE2LEY2OjExNyxGNzoxMTgsRjg6MTE5LEY5OjEyMCxGMTA6MTIxLEYxMToxMjIsRjEyOjEyMyxcIlUrMDA3RlwiOjQ2LEhvbWU6MzYsRW5kOjM1LFBhZ2VVcDozMyxQYWdlRG93bjozNCxJbnNlcnQ6NDV9LHZqPSFlY3x8bWMoXCI1MjVcIiksd2o9Z2MmJmRjO2w9cmoucHJvdG90eXBlO2wuSmI9ZnVuY3Rpb24oYSl7aWYoZWN8fGJjKWlmKDE3PT10aGlzLlImJiFhLmN0cmxLZXl8fDE4PT10aGlzLlImJiFhLmFsdEtleXx8Z2MmJjkxPT10aGlzLlImJiFhLm1ldGFLZXkpdGhpcy5YPXRoaXMuUj0tMTstMT09dGhpcy5SJiYoYS5jdHJsS2V5JiYxNyE9YS5rZXlDb2RlP3RoaXMuUj0xNzphLmFsdEtleSYmMTghPWEua2V5Q29kZT90aGlzLlI9MTg6YS5tZXRhS2V5JiZcbjkxIT1hLmtleUNvZGUmJih0aGlzLlI9OTEpKTt2aiYmISRpKGEua2V5Q29kZSx0aGlzLlIsYS5zaGlmdEtleSxhLmN0cmxLZXksYS5hbHRLZXksYS5tZXRhS2V5KT90aGlzLmhhbmRsZUV2ZW50KGEpOih0aGlzLlg9YWooYS5rZXlDb2RlKSx3aiYmKHRoaXMuVWE9YS5hbHRLZXkpKX07bC5LYj1mdW5jdGlvbihhKXt0aGlzLlg9dGhpcy5SPS0xO3RoaXMuVWE9YS5hbHRLZXl9O2wuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5hLGM9Yi5hbHRLZXk7aWYoeiYmXCJrZXlwcmVzc1wiPT1hLnR5cGUpe3ZhciBkPXRoaXMuWDt2YXIgZT0xMyE9ZCYmMjchPWQ/Yi5rZXlDb2RlOjB9ZWxzZShlY3x8YmMpJiZcImtleXByZXNzXCI9PWEudHlwZT8oZD10aGlzLlgsZT0wPD1iLmNoYXJDb2RlJiY2MzIzMj5iLmNoYXJDb2RlJiZaaShkKT9iLmNoYXJDb2RlOjApOmFjJiYhZWM/KGQ9dGhpcy5YLGU9WmkoZCk/Yi5rZXlDb2RlOjApOihcImtleXByZXNzXCI9PWEudHlwZT8od2omJihjPXRoaXMuVWEpLFxuYi5rZXlDb2RlPT1iLmNoYXJDb2RlPzMyPmIua2V5Q29kZT8oZD1iLmtleUNvZGUsZT0wKTooZD10aGlzLlgsZT1iLmNoYXJDb2RlKTooZD1iLmtleUNvZGV8fHRoaXMuWCxlPWIuY2hhckNvZGV8fDApKTooZD1iLmtleUNvZGV8fHRoaXMuWCxlPWIuY2hhckNvZGV8fDApLGdjJiY2Mz09ZSYmMjI0PT1kJiYoZD0xOTEpKTt2YXIgZj1kPWFqKGQpO2Q/NjMyMzI8PWQmJmQgaW4gdGo/Zj10altkXToyNT09ZCYmYS5zaGlmdEtleSYmKGY9OSk6Yi5rZXlJZGVudGlmaWVyJiZiLmtleUlkZW50aWZpZXIgaW4gdWomJihmPXVqW2Iua2V5SWRlbnRpZmllcl0pO2RjJiZ2aiYmXCJrZXlwcmVzc1wiPT1hLnR5cGUmJiEkaShmLHRoaXMuUixhLnNoaWZ0S2V5LGEuY3RybEtleSxjLGEubWV0YUtleSl8fChhPWY9PXRoaXMuUix0aGlzLlI9ZixiPW5ldyB4aihmLGUsYSxiKSxiLmFsdEtleT1jLHhlKHRoaXMsYikpfTtsLk49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5xYX07ZnVuY3Rpb24gc2ooYSl7YS5OYSYmXG4odGUoYS5OYSksdGUoYS5ZYSksdGUoYS5PYSksYS5OYT1udWxsLGEuWWE9bnVsbCxhLk9hPW51bGwpO2EucWE9bnVsbDthLlI9LTE7YS5YPS0xfWwubz1mdW5jdGlvbigpe3JqLksuby5jYWxsKHRoaXMpO3NqKHRoaXMpfTtmdW5jdGlvbiB4aihhLGIsYyxkKXtaZC5jYWxsKHRoaXMsZCk7dGhpcy50eXBlPVwia2V5XCI7dGhpcy5rZXlDb2RlPWE7dGhpcy5qPWI7dGhpcy5yZXBlYXQ9Y313KHhqLFpkKTtmdW5jdGlvbiB5aihhLGIsYyxkKXt0aGlzLnRvcD1hO3RoaXMucmlnaHQ9Yjt0aGlzLmJvdHRvbT1jO3RoaXMubGVmdD1kfXlqLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiKFwiK3RoaXMudG9wK1widCwgXCIrdGhpcy5yaWdodCtcInIsIFwiK3RoaXMuYm90dG9tK1wiYiwgXCIrdGhpcy5sZWZ0K1wibClcIn07eWoucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24oKXt0aGlzLnRvcD1NYXRoLmNlaWwodGhpcy50b3ApO3RoaXMucmlnaHQ9TWF0aC5jZWlsKHRoaXMucmlnaHQpO3RoaXMuYm90dG9tPVxuTWF0aC5jZWlsKHRoaXMuYm90dG9tKTt0aGlzLmxlZnQ9TWF0aC5jZWlsKHRoaXMubGVmdCk7cmV0dXJuIHRoaXN9O3lqLnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbigpe3RoaXMudG9wPU1hdGguZmxvb3IodGhpcy50b3ApO3RoaXMucmlnaHQ9TWF0aC5mbG9vcih0aGlzLnJpZ2h0KTt0aGlzLmJvdHRvbT1NYXRoLmZsb29yKHRoaXMuYm90dG9tKTt0aGlzLmxlZnQ9TWF0aC5mbG9vcih0aGlzLmxlZnQpO3JldHVybiB0aGlzfTt5ai5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24oKXt0aGlzLnRvcD1NYXRoLnJvdW5kKHRoaXMudG9wKTt0aGlzLnJpZ2h0PU1hdGgucm91bmQodGhpcy5yaWdodCk7dGhpcy5ib3R0b209TWF0aC5yb3VuZCh0aGlzLmJvdHRvbSk7dGhpcy5sZWZ0PU1hdGgucm91bmQodGhpcy5sZWZ0KTtyZXR1cm4gdGhpc307ZnVuY3Rpb24gemooYSxiKXt2YXIgYz1TYyhhKTtyZXR1cm4gYy5kZWZhdWx0VmlldyYmYy5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlJiYoYT1cbmMuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShhLG51bGwpKT9hW2JdfHxhLmdldFByb3BlcnR5VmFsdWUoYil8fFwiXCI6XCJcIn1mdW5jdGlvbiBBaihhKXt0cnl7dmFyIGI9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKX1jYXRjaChjKXtyZXR1cm57bGVmdDowLHRvcDowLHJpZ2h0OjAsYm90dG9tOjB9fXomJmEub3duZXJEb2N1bWVudC5ib2R5JiYoYT1hLm93bmVyRG9jdW1lbnQsYi5sZWZ0LT1hLmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0K2EuYm9keS5jbGllbnRMZWZ0LGIudG9wLT1hLmRvY3VtZW50RWxlbWVudC5jbGllbnRUb3ArYS5ib2R5LmNsaWVudFRvcCk7cmV0dXJuIGJ9ZnVuY3Rpb24gQmooYSxiKXtiPWJ8fFljKGRvY3VtZW50KTt2YXIgYz1ifHxZYyhkb2N1bWVudCk7dmFyIGQ9Q2ooYSksZT1DaihjKTtpZighenx8OTw9TnVtYmVyKG5jKSl7Zz16aihjLFwiYm9yZGVyTGVmdFdpZHRoXCIpO3ZhciBmPXpqKGMsXCJib3JkZXJSaWdodFdpZHRoXCIpO2g9emooYyxcImJvcmRlclRvcFdpZHRoXCIpO1xuaz16aihjLFwiYm9yZGVyQm90dG9tV2lkdGhcIik7Zj1uZXcgeWoocGFyc2VGbG9hdChoKSxwYXJzZUZsb2F0KGYpLHBhcnNlRmxvYXQoaykscGFyc2VGbG9hdChnKSl9ZWxzZXt2YXIgZz1EaihjLFwiYm9yZGVyTGVmdFwiKTtmPURqKGMsXCJib3JkZXJSaWdodFwiKTt2YXIgaD1EaihjLFwiYm9yZGVyVG9wXCIpLGs9RGooYyxcImJvcmRlckJvdHRvbVwiKTtmPW5ldyB5aihoLGYsayxnKX1jPT1ZYyhkb2N1bWVudCk/KGc9ZC5hLWMuc2Nyb2xsTGVmdCxkPWQuZy1jLnNjcm9sbFRvcCwhenx8MTA8PU51bWJlcihuYyl8fChnKz1mLmxlZnQsZCs9Zi50b3ApKTooZz1kLmEtZS5hLWYubGVmdCxkPWQuZy1lLmctZi50b3ApO2U9YS5vZmZzZXRXaWR0aDtmPWEub2Zmc2V0SGVpZ2h0O2g9ZWMmJiFlJiYhZjtrYShlKSYmIWh8fCFhLmdldEJvdW5kaW5nQ2xpZW50UmVjdD9hPW5ldyBQYyhlLGYpOihhPUFqKGEpLGE9bmV3IFBjKGEucmlnaHQtYS5sZWZ0LGEuYm90dG9tLWEudG9wKSk7ZT1jLmNsaWVudEhlaWdodC1cbmEuaGVpZ2h0O2Y9Yy5zY3JvbGxMZWZ0O2g9Yy5zY3JvbGxUb3A7Zis9TWF0aC5taW4oZyxNYXRoLm1heChnLShjLmNsaWVudFdpZHRoLWEud2lkdGgpLDApKTtoKz1NYXRoLm1pbihkLE1hdGgubWF4KGQtZSwwKSk7Yz1uZXcgT2MoZixoKTtiLnNjcm9sbExlZnQ9Yy5hO2Iuc2Nyb2xsVG9wPWMuZ31mdW5jdGlvbiBDaihhKXt2YXIgYj1TYyhhKSxjPW5ldyBPYygwLDApO3ZhciBkPWI/U2MoYik6ZG9jdW1lbnQ7ZD0henx8OTw9TnVtYmVyKG5jKXx8XCJDU1MxQ29tcGF0XCI9PVFjKGQpLmEuY29tcGF0TW9kZT9kLmRvY3VtZW50RWxlbWVudDpkLmJvZHk7aWYoYT09ZClyZXR1cm4gYzthPUFqKGEpO2Q9UWMoYikuYTtiPVljKGQpO2Q9ZC5wYXJlbnRXaW5kb3d8fGQuZGVmYXVsdFZpZXc7Yj16JiZtYyhcIjEwXCIpJiZkLnBhZ2VZT2Zmc2V0IT1iLnNjcm9sbFRvcD9uZXcgT2MoYi5zY3JvbGxMZWZ0LGIuc2Nyb2xsVG9wKTpuZXcgT2MoZC5wYWdlWE9mZnNldHx8Yi5zY3JvbGxMZWZ0LGQucGFnZVlPZmZzZXR8fFxuYi5zY3JvbGxUb3ApO2MuYT1hLmxlZnQrYi5hO2MuZz1hLnRvcCtiLmc7cmV0dXJuIGN9dmFyIEVqPXt0aGluOjIsbWVkaXVtOjQsdGhpY2s6Nn07ZnVuY3Rpb24gRGooYSxiKXtpZihcIm5vbmVcIj09KGEuY3VycmVudFN0eWxlP2EuY3VycmVudFN0eWxlW2IrXCJTdHlsZVwiXTpudWxsKSlyZXR1cm4gMDt2YXIgYz1hLmN1cnJlbnRTdHlsZT9hLmN1cnJlbnRTdHlsZVtiK1wiV2lkdGhcIl06bnVsbDtpZihjIGluIEVqKWE9RWpbY107ZWxzZSBpZigvXlxcZCtweD8kLy50ZXN0KGMpKWE9cGFyc2VJbnQoYywxMCk7ZWxzZXtiPWEuc3R5bGUubGVmdDt2YXIgZD1hLnJ1bnRpbWVTdHlsZS5sZWZ0O2EucnVudGltZVN0eWxlLmxlZnQ9YS5jdXJyZW50U3R5bGUubGVmdDthLnN0eWxlLmxlZnQ9YztjPWEuc3R5bGUucGl4ZWxMZWZ0O2Euc3R5bGUubGVmdD1iO2EucnVudGltZVN0eWxlLmxlZnQ9ZDthPStjfXJldHVybiBhfWZ1bmN0aW9uIEZqKCl7fW9hKEZqKTtGai5wcm90b3R5cGUuYT0wO2Z1bmN0aW9uIEdqKGEpe0UuY2FsbCh0aGlzKTtcbnRoaXMucz1hfHxRYygpO3RoaXMuY2I9bnVsbDt0aGlzLm5hPSExO3RoaXMuZz1udWxsO3RoaXMuTD12b2lkIDA7dGhpcy5vYT10aGlzLkVhPXRoaXMuWT1udWxsfXcoR2osRSk7bD1Hai5wcm90b3R5cGU7bC5MYj1Gai5YYSgpO2wuTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmd9O2Z1bmN0aW9uIE0oYSxiKXtyZXR1cm4gYS5nP1ZjKGIsYS5nfHxhLnMuYSk6bnVsbH1mdW5jdGlvbiBIaihhKXthLkx8fChhLkw9bmV3IGtqKGEpKTtyZXR1cm4gYS5MfWwuWmE9ZnVuY3Rpb24oYSl7aWYodGhpcy5ZJiZ0aGlzLlkhPWEpdGhyb3cgRXJyb3IoXCJNZXRob2Qgbm90IHN1cHBvcnRlZFwiKTtHai5LLlphLmNhbGwodGhpcyxhKX07bC5rYj1mdW5jdGlvbigpe3RoaXMuZz10aGlzLnMuYS5jcmVhdGVFbGVtZW50KFwiRElWXCIpfTtsLnJlbmRlcj1mdW5jdGlvbihhKXtpZih0aGlzLm5hKXRocm93IEVycm9yKFwiQ29tcG9uZW50IGFscmVhZHkgcmVuZGVyZWRcIik7dGhpcy5nfHx0aGlzLmtiKCk7YT9hLmluc2VydEJlZm9yZSh0aGlzLmcsXG5udWxsKTp0aGlzLnMuYS5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZyk7dGhpcy5ZJiYhdGhpcy5ZLm5hfHx0aGlzLnYoKX07bC52PWZ1bmN0aW9uKCl7dGhpcy5uYT0hMDtJaih0aGlzLGZ1bmN0aW9uKGEpeyFhLm5hJiZhLk4oKSYmYS52KCl9KX07bC55YT1mdW5jdGlvbigpe0lqKHRoaXMsZnVuY3Rpb24oYSl7YS5uYSYmYS55YSgpfSk7dGhpcy5MJiZuaih0aGlzLkwpO3RoaXMubmE9ITF9O2wubz1mdW5jdGlvbigpe3RoaXMubmEmJnRoaXMueWEoKTt0aGlzLkwmJih0aGlzLkwubSgpLGRlbGV0ZSB0aGlzLkwpO0lqKHRoaXMsZnVuY3Rpb24oYSl7YS5tKCl9KTt0aGlzLmcmJlpjKHRoaXMuZyk7dGhpcy5ZPXRoaXMuZz10aGlzLm9hPXRoaXMuRWE9bnVsbDtHai5LLm8uY2FsbCh0aGlzKX07ZnVuY3Rpb24gSWooYSxiKXthLkVhJiZIYShhLkVhLGIsdm9pZCAwKX1sLnJlbW92ZUNoaWxkPWZ1bmN0aW9uKGEsYil7aWYoYSl7dmFyIGM9cShhKT9hOmEuY2J8fChhLmNiPVwiOlwiKyhhLkxiLmErKykudG9TdHJpbmcoMzYpKTtcbnRoaXMub2EmJmM/KGE9dGhpcy5vYSxhPShudWxsIT09YSYmYyBpbiBhP2FbY106dm9pZCAwKXx8bnVsbCk6YT1udWxsO2lmKGMmJmEpe3ZhciBkPXRoaXMub2E7YyBpbiBkJiZkZWxldGUgZFtjXTtOYSh0aGlzLkVhLGEpO2ImJihhLnlhKCksYS5nJiZaYyhhLmcpKTtiPWE7aWYobnVsbD09Yil0aHJvdyBFcnJvcihcIlVuYWJsZSB0byBzZXQgcGFyZW50IGNvbXBvbmVudFwiKTtiLlk9bnVsbDtHai5LLlphLmNhbGwoYixudWxsKX19aWYoIWEpdGhyb3cgRXJyb3IoXCJDaGlsZCBpcyBub3QgaW4gcGFyZW50IGNvbXBvbmVudFwiKTtyZXR1cm4gYX07ZnVuY3Rpb24gTihhLGIpe3ZhciBjPWFkKGEsXCJmaXJlYmFzZXVpLXRleHRmaWVsZFwiKTtiPyhWaShhLFwiZmlyZWJhc2V1aS1pbnB1dC1pbnZhbGlkXCIpLFVpKGEsXCJmaXJlYmFzZXVpLWlucHV0XCIpLGMmJlZpKGMsXCJmaXJlYmFzZXVpLXRleHRmaWVsZC1pbnZhbGlkXCIpKTooVmkoYSxcImZpcmViYXNldWktaW5wdXRcIiksVWkoYSxcImZpcmViYXNldWktaW5wdXQtaW52YWxpZFwiKSxcbmMmJlVpKGMsXCJmaXJlYmFzZXVpLXRleHRmaWVsZC1pbnZhbGlkXCIpKX1mdW5jdGlvbiBKaihhLGIsYyl7Yj1uZXcgb2ooYik7U2QoYSx6YShUZCxiKSk7bWooSGooYSksYixcImlucHV0XCIsYyl9ZnVuY3Rpb24gS2ooYSxiLGMpe2I9bmV3IHJqKGIpO1NkKGEsemEoVGQsYikpO21qKEhqKGEpLGIsXCJrZXlcIixmdW5jdGlvbihkKXsxMz09ZC5rZXlDb2RlJiYoZC5zdG9wUHJvcGFnYXRpb24oKSxkLnByZXZlbnREZWZhdWx0KCksYyhkKSl9KX1mdW5jdGlvbiBMaihhLGIsYyl7Yj1uZXcgZ2ooYik7U2QoYSx6YShUZCxiKSk7bWooSGooYSksYixcImZvY3VzaW5cIixjKX1mdW5jdGlvbiBNaihhLGIsYyl7Yj1uZXcgZ2ooYik7U2QoYSx6YShUZCxiKSk7bWooSGooYSksYixcImZvY3Vzb3V0XCIsYyl9ZnVuY3Rpb24gTyhhLGIsYyl7Yj1uZXcgY2ooYik7U2QoYSx6YShUZCxiKSk7bWooSGooYSksYixcImFjdGlvblwiLGZ1bmN0aW9uKGQpe2Quc3RvcFByb3BhZ2F0aW9uKCk7ZC5wcmV2ZW50RGVmYXVsdCgpO1xuYyhkKX0pfWZ1bmN0aW9uIE5qKGEpe1VpKGEsXCJmaXJlYmFzZXVpLWhpZGRlblwiKX1mdW5jdGlvbiBPaihhLGIpe2ImJiRjKGEsYik7VmkoYSxcImZpcmViYXNldWktaGlkZGVuXCIpfWZ1bmN0aW9uIFBqKGEpe3JldHVybiFUaShhLFwiZmlyZWJhc2V1aS1oaWRkZW5cIikmJlwibm9uZVwiIT1hLnN0eWxlLmRpc3BsYXl9ZnVuY3Rpb24gUWooYSl7YT1hfHx7fTt2YXIgYj1hLmVtYWlsLGM9YS5kaXNhYmxlZCxkPSc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+PGxhYmVsIGNsYXNzPVwibWRsLXRleHRmaWVsZF9fbGFiZWwgZmlyZWJhc2V1aS1sYWJlbFwiIGZvcj1cInVpLXNpZ24taW4tZW1haWwtaW5wdXRcIj4nO2Q9YS53Yz9kK1wiRW50ZXIgbmV3IGVtYWlsIGFkZHJlc3NcIjpkK1wiRW1haWxcIjtkKz0nPC9sYWJlbD48aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImVtYWlsXCIgaWQ9XCJ1aS1zaWduLWluLWVtYWlsLWlucHV0XCIgYXV0b2NvbXBsZXRlPVwidXNlcm5hbWVcIiBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0IGZpcmViYXNldWktaW5wdXQgZmlyZWJhc2V1aS1pZC1lbWFpbFwiIHZhbHVlPVwiJytcbnVkKG51bGwhPWI/YjpcIlwiKSsnXCInKyhjP1wiZGlzYWJsZWRcIjpcIlwiKSsnPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWVycm9yLXdyYXBwZXJcIj48cCBjbGFzcz1cImZpcmViYXNldWktZXJyb3IgZmlyZWJhc2V1aS10ZXh0LWlucHV0LWVycm9yIGZpcmViYXNldWktaGlkZGVuIGZpcmViYXNldWktaWQtZW1haWwtZXJyb3JcIj48L3A+PC9kaXY+JztyZXR1cm4gQihkKX1mdW5jdGlvbiBSaihhKXthPWF8fHt9O2E9YS5sYWJlbDt2YXIgYj0nPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJmaXJlYmFzZXVpLWlkLXN1Ym1pdCBmaXJlYmFzZXVpLWJ1dHRvbiBtZGwtYnV0dG9uIG1kbC1qcy1idXR0b24gbWRsLWJ1dHRvbi0tcmFpc2VkIG1kbC1idXR0b24tLWNvbG9yZWRcIj4nO2I9YT9iK0EoYSk6YitcIk5leHRcIjtyZXR1cm4gQihiK1wiPC9idXR0b24+XCIpfWZ1bmN0aW9uIFNqKCl7dmFyIGE9XCJcIitSaih7bGFiZWw6RChcIlNpZ24gSW5cIil9KTtyZXR1cm4gQihhKX1mdW5jdGlvbiBUaigpe3ZhciBhPVxuXCJcIitSaih7bGFiZWw6RChcIlNhdmVcIil9KTtyZXR1cm4gQihhKX1mdW5jdGlvbiBVaigpe3ZhciBhPVwiXCIrUmooe2xhYmVsOkQoXCJDb250aW51ZVwiKX0pO3JldHVybiBCKGEpfWZ1bmN0aW9uIFZqKGEpe2E9YXx8e307YT1hLmxhYmVsO3ZhciBiPSc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1uZXctcGFzc3dvcmQtY29tcG9uZW50XCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQgbWRsLWpzLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiPjxsYWJlbCBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2xhYmVsIGZpcmViYXNldWktbGFiZWxcIiBmb3I9XCJ1aS1zaWduLWluLW5ldy1wYXNzd29yZC1pbnB1dFwiPic7Yj1hP2IrQShhKTpiK1wiQ2hvb3NlIHBhc3N3b3JkXCI7cmV0dXJuIEIoYisnPC9sYWJlbD48aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cIm5ld1Bhc3N3b3JkXCIgaWQ9XCJ1aS1zaWduLWluLW5ldy1wYXNzd29yZC1pbnB1dFwiIGF1dG9jb21wbGV0ZT1cIm5ldy1wYXNzd29yZFwiIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXQgZmlyZWJhc2V1aS1pbnB1dCBmaXJlYmFzZXVpLWlkLW5ldy1wYXNzd29yZFwiPjwvZGl2PjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cImZpcmViYXNldWktaW5wdXQtZmxvYXRpbmctYnV0dG9uIGZpcmViYXNldWktaWQtcGFzc3dvcmQtdG9nZ2xlIGZpcmViYXNldWktaW5wdXQtdG9nZ2xlLW9uIGZpcmViYXNldWktaW5wdXQtdG9nZ2xlLWJsdXJcIj48L2E+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZXJyb3Itd3JhcHBlclwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS1lcnJvciBmaXJlYmFzZXVpLXRleHQtaW5wdXQtZXJyb3IgZmlyZWJhc2V1aS1oaWRkZW4gZmlyZWJhc2V1aS1pZC1uZXctcGFzc3dvcmQtZXJyb3JcIj48L3A+PC9kaXY+PC9kaXY+Jyl9XG5mdW5jdGlvbiBXaigpe3ZhciBhPXt9O3ZhciBiPSc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZCBtZGwtanMtdGV4dGZpZWxkIG1kbC10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI+PGxhYmVsIGNsYXNzPVwibWRsLXRleHRmaWVsZF9fbGFiZWwgZmlyZWJhc2V1aS1sYWJlbFwiIGZvcj1cInVpLXNpZ24taW4tcGFzc3dvcmQtaW5wdXRcIj4nO2I9YS5jdXJyZW50P2IrXCJDdXJyZW50IHBhc3N3b3JkXCI6YitcIlBhc3N3b3JkXCI7cmV0dXJuIEIoYisnPC9sYWJlbD48aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cInBhc3N3b3JkXCIgaWQ9XCJ1aS1zaWduLWluLXBhc3N3b3JkLWlucHV0XCIgYXV0b2NvbXBsZXRlPVwiY3VycmVudC1wYXNzd29yZFwiIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXQgZmlyZWJhc2V1aS1pbnB1dCBmaXJlYmFzZXVpLWlkLXBhc3N3b3JkXCI+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZXJyb3Itd3JhcHBlclwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS1lcnJvciBmaXJlYmFzZXVpLXRleHQtaW5wdXQtZXJyb3IgZmlyZWJhc2V1aS1oaWRkZW4gZmlyZWJhc2V1aS1pZC1wYXNzd29yZC1lcnJvclwiPjwvcD48L2Rpdj4nKX1cbmZ1bmN0aW9uIFhqKCl7cmV0dXJuIEIoJzxhIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktaWQtc2Vjb25kYXJ5LWxpbmtcIiBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+VHJvdWJsZSBzaWduaW5nIGluPzwvYT4nKX1mdW5jdGlvbiBZaihhKXthPWF8fHt9O2E9YS5sYWJlbDt2YXIgYj0nPGJ1dHRvbiBjbGFzcz1cImZpcmViYXNldWktaWQtc2Vjb25kYXJ5LWxpbmsgZmlyZWJhc2V1aS1idXR0b24gbWRsLWJ1dHRvbiBtZGwtanMtYnV0dG9uIG1kbC1idXR0b24tLXByaW1hcnlcIj4nO2I9YT9iK0EoYSk6YitcIkNhbmNlbFwiO3JldHVybiBCKGIrXCI8L2J1dHRvbj5cIil9ZnVuY3Rpb24gWmooYSl7dmFyIGI9XCJcIjthLkYmJmEuRCYmKGIrPSc8dWwgY2xhc3M9XCJmaXJlYmFzZXVpLXRvcy1saXN0IGZpcmViYXNldWktdG9zXCI+PGxpIGNsYXNzPVwiZmlyZWJhc2V1aS1pbmxpbmUtbGlzdC1pdGVtXCI+PGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktdG9zLWxpbmtcIiB0YXJnZXQ9XCJfYmxhbmtcIj5UZXJtcyBvZiBTZXJ2aWNlPC9hPjwvbGk+PGxpIGNsYXNzPVwiZmlyZWJhc2V1aS1pbmxpbmUtbGlzdC1pdGVtXCI+PGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktcHAtbGlua1wiIHRhcmdldD1cIl9ibGFua1wiPlByaXZhY3kgUG9saWN5PC9hPjwvbGk+PC91bD4nKTtcbnJldHVybiBCKGIpfWZ1bmN0aW9uIGFrKGEpe3ZhciBiPVwiXCI7YS5GJiZhLkQmJihiKz0nPHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRvcyBmaXJlYmFzZXVpLXRvc3BwLWZ1bGwtbWVzc2FnZVwiPkJ5IGNvbnRpbnVpbmcsIHlvdSBhcmUgaW5kaWNhdGluZyB0aGF0IHlvdSBhY2NlcHQgb3VyIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cImZpcmViYXNldWktbGluayBmaXJlYmFzZXVpLXRvcy1saW5rXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VGVybXMgb2YgU2VydmljZTwvYT4gYW5kIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cImZpcmViYXNldWktbGluayBmaXJlYmFzZXVpLXBwLWxpbmtcIiB0YXJnZXQ9XCJfYmxhbmtcIj5Qcml2YWN5IFBvbGljeTwvYT4uPC9wPicpO3JldHVybiBCKGIpfWZ1bmN0aW9uIGJrKGEpe2E9JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWluZm8tYmFyIGZpcmViYXNldWktaWQtaW5mby1iYXJcIj48cCBjbGFzcz1cImZpcmViYXNldWktaW5mby1iYXItbWVzc2FnZVwiPicrXG5BKGEubWVzc2FnZSkrJyZuYnNwOyZuYnNwOzxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIiBjbGFzcz1cImZpcmViYXNldWktbGluayBmaXJlYmFzZXVpLWlkLWRpc21pc3MtaW5mby1iYXJcIj5EaXNtaXNzPC9hPjwvcD48L2Rpdj4nO3JldHVybiBCKGEpfWJrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5lbGVtZW50LmluZm9CYXJcIjtmdW5jdGlvbiBjayhhKXt2YXIgYj1hLmNvbnRlbnQ7YT1hLkFiO3JldHVybiBCKCc8ZGlhbG9nIGNsYXNzPVwibWRsLWRpYWxvZyBmaXJlYmFzZXVpLWRpYWxvZyBmaXJlYmFzZXVpLWlkLWRpYWxvZycrKGE/XCIgXCIrdWQoYSk6XCJcIikrJ1wiPicrQShiKStcIjwvZGlhbG9nPlwiKX1mdW5jdGlvbiBkayhhKXt2YXIgYj1hLm1lc3NhZ2U7cmV0dXJuIEIoY2soe2NvbnRlbnQ6dGQoJzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWRpYWxvZy1pY29uLXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwiJyt1ZChhLk1hKSsnIGZpcmViYXNldWktZGlhbG9nLWljb25cIj48L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1wcm9ncmVzcy1kaWFsb2ctbWVzc2FnZVwiPicrXG5BKGIpK1wiPC9kaXY+XCIpfSkpfWRrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5lbGVtZW50LnByb2dyZXNzRGlhbG9nXCI7ZnVuY3Rpb24gZWsoYSl7dmFyIGI9JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWxpc3QtYm94LWFjdGlvbnNcIj4nO2E9YS5pdGVtcztmb3IodmFyIGM9YS5sZW5ndGgsZD0wO2Q8YztkKyspe3ZhciBlPWFbZF07Yis9JzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbGlzdGJveGlkPVwiJyt1ZChlLmlkKSsnXCIgY2xhc3M9XCJtZGwtYnV0dG9uIGZpcmViYXNldWktaWQtbGlzdC1ib3gtZGlhbG9nLWJ1dHRvbiBmaXJlYmFzZXVpLWxpc3QtYm94LWRpYWxvZy1idXR0b25cIj4nKyhlLk1hPyc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1saXN0LWJveC1pY29uLXdyYXBwZXJcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1saXN0LWJveC1pY29uICcrdWQoZS5NYSkrJ1wiPjwvZGl2PjwvZGl2Pic6XCJcIikrJzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWxpc3QtYm94LWxhYmVsLXdyYXBwZXJcIj4nK1xuQShlLmxhYmVsKStcIjwvZGl2PjwvYnV0dG9uPlwifWI9XCJcIitjayh7QWI6RChcImZpcmViYXNldWktbGlzdC1ib3gtZGlhbG9nXCIpLGNvbnRlbnQ6dGQoYitcIjwvZGl2PlwiKX0pO3JldHVybiBCKGIpfWVrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5lbGVtZW50Lmxpc3RCb3hEaWFsb2dcIjtmdW5jdGlvbiBmayhhKXthPWF8fHt9O3JldHVybiBCKGEudGI/JzxkaXYgY2xhc3M9XCJtZGwtc3Bpbm5lciBtZGwtc3Bpbm5lci0tc2luZ2xlLWNvbG9yIG1kbC1qcy1zcGlubmVyIGlzLWFjdGl2ZSBmaXJlYmFzZXVpLWJ1c3ktaW5kaWNhdG9yIGZpcmViYXNldWktaWQtYnVzeS1pbmRpY2F0b3JcIj48L2Rpdj4nOic8ZGl2IGNsYXNzPVwibWRsLXByb2dyZXNzIG1kbC1qcy1wcm9ncmVzcyBtZGwtcHJvZ3Jlc3NfX2luZGV0ZXJtaW5hdGUgZmlyZWJhc2V1aS1idXN5LWluZGljYXRvciBmaXJlYmFzZXVpLWlkLWJ1c3ktaW5kaWNhdG9yXCI+PC9kaXY+Jyl9ZmsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLmVsZW1lbnQuYnVzeUluZGljYXRvclwiO1xuZnVuY3Rpb24gZ2soYSxiKXthPWF8fHt9O2E9YS5nYTtyZXR1cm4gQyhhLlM/YS5TOmIuaGJbYS5wcm92aWRlcklkXT9cIlwiK2IuaGJbYS5wcm92aWRlcklkXTphLnByb3ZpZGVySWQmJjA9PWEucHJvdmlkZXJJZC5pbmRleE9mKFwic2FtbC5cIik/YS5wcm92aWRlcklkLnN1YnN0cmluZyg1KTphLnByb3ZpZGVySWQmJjA9PWEucHJvdmlkZXJJZC5pbmRleE9mKFwib2lkYy5cIik/YS5wcm92aWRlcklkLnN1YnN0cmluZyg1KTpcIlwiK2EucHJvdmlkZXJJZCl9ZnVuY3Rpb24gaGsoYSl7aWsoYSxcInVwZ3JhZGVFbGVtZW50XCIpfWZ1bmN0aW9uIGprKGEpe2lrKGEsXCJkb3duZ3JhZGVFbGVtZW50c1wiKX12YXIga2s9W1wibWRsLWpzLXRleHRmaWVsZFwiLFwibWRsLWpzLXByb2dyZXNzXCIsXCJtZGwtanMtc3Bpbm5lclwiLFwibWRsLWpzLWJ1dHRvblwiXTtmdW5jdGlvbiBpayhhLGIpe2EmJndpbmRvdy5jb21wb25lbnRIYW5kbGVyJiZ3aW5kb3cuY29tcG9uZW50SGFuZGxlcltiXSYma2suZm9yRWFjaChmdW5jdGlvbihjKXtpZihUaShhLFxuYykpd2luZG93LmNvbXBvbmVudEhhbmRsZXJbYl0oYSk7SGEoVGMoYyxhKSxmdW5jdGlvbihkKXt3aW5kb3cuY29tcG9uZW50SGFuZGxlcltiXShkKX0pfSl9ZnVuY3Rpb24gbGsoYSxiLGMpe21rLmNhbGwodGhpcyk7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTthLnNob3dNb2RhbHx8d2luZG93LmRpYWxvZ1BvbHlmaWxsLnJlZ2lzdGVyRGlhbG9nKGEpO2Euc2hvd01vZGFsKCk7aGsoYSk7YiYmTyh0aGlzLGEsZnVuY3Rpb24oZil7dmFyIGc9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsoZi5jbGllbnRYPGcubGVmdHx8Zy5sZWZ0K2cud2lkdGg8Zi5jbGllbnRYfHxmLmNsaWVudFk8Zy50b3B8fGcudG9wK2cuaGVpZ2h0PGYuY2xpZW50WSkmJm1rLmNhbGwodGhpcyl9KTtpZighYyl7dmFyIGQ9dGhpcy5OKCkucGFyZW50RWxlbWVudHx8dGhpcy5OKCkucGFyZW50Tm9kZTtpZihkKXt2YXIgZT10aGlzO3RoaXMuZGE9ZnVuY3Rpb24oKXtpZihhLm9wZW4pe3ZhciBmPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LFxuZz1kLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCxoPWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wLGs9ZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxwPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsdD1kLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO2Euc3R5bGUudG9wPShoKyhnLWYpLzIpLnRvU3RyaW5nKCkrXCJweFwiO2Y9aysodC1wKS8yO2Euc3R5bGUubGVmdD1mLnRvU3RyaW5nKCkrXCJweFwiO2Euc3R5bGUucmlnaHQ9KGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgtZi1wKS50b1N0cmluZygpK1wicHhcIn1lbHNlIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsZS5kYSl9O3RoaXMuZGEoKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLFxudGhpcy5kYSwhMSl9fX1mdW5jdGlvbiBtaygpe3ZhciBhPW5rLmNhbGwodGhpcyk7YSYmKGprKGEpLGEub3BlbiYmYS5jbG9zZSgpLFpjKGEpLHRoaXMuZGEmJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5kYSkpfWZ1bmN0aW9uIG5rKCl7cmV0dXJuIFZjKFwiZmlyZWJhc2V1aS1pZC1kaWFsb2dcIil9ZnVuY3Rpb24gb2soKXtaYyhway5jYWxsKHRoaXMpKX1mdW5jdGlvbiBwaygpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLWluZm8tYmFyXCIpfWZ1bmN0aW9uIHFrKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtZGlzbWlzcy1pbmZvLWJhclwiKX12YXIgcms9e3hhOntcImdvb2dsZS5jb21cIjpcImh0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2ZpcmViYXNlanMvdWkvMi4wLjAvaW1hZ2VzL2F1dGgvZ29vZ2xlLnN2Z1wiLFwiZ2l0aHViLmNvbVwiOlwiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy91aS8yLjAuMC9pbWFnZXMvYXV0aC9naXRodWIuc3ZnXCIsXG5cImZhY2Vib29rLmNvbVwiOlwiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy91aS8yLjAuMC9pbWFnZXMvYXV0aC9mYWNlYm9vay5zdmdcIixcInR3aXR0ZXIuY29tXCI6XCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzL3VpLzIuMC4wL2ltYWdlcy9hdXRoL3R3aXR0ZXIuc3ZnXCIscGFzc3dvcmQ6XCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzL3VpLzIuMC4wL2ltYWdlcy9hdXRoL21haWwuc3ZnXCIscGhvbmU6XCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzL3VpLzIuMC4wL2ltYWdlcy9hdXRoL3Bob25lLnN2Z1wiLGFub255bW91czpcImh0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2ZpcmViYXNlanMvdWkvMi4wLjAvaW1hZ2VzL2F1dGgvYW5vbnltb3VzLnBuZ1wiLFwibWljcm9zb2Z0LmNvbVwiOlwiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy91aS8yLjAuMC9pbWFnZXMvYXV0aC9taWNyb3NvZnQuc3ZnXCIsXCJ5YWhvby5jb21cIjpcImh0dHBzOi8vd3d3LmdzdGF0aWMuY29tL2ZpcmViYXNlanMvdWkvMi4wLjAvaW1hZ2VzL2F1dGgveWFob28uc3ZnXCIsXG5cImFwcGxlLmNvbVwiOlwiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy91aS8yLjAuMC9pbWFnZXMvYXV0aC9hcHBsZS5wbmdcIixzYW1sOlwiaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZmlyZWJhc2Vqcy91aS8yLjAuMC9pbWFnZXMvYXV0aC9zYW1sLnN2Z1wiLG9pZGM6XCJodHRwczovL3d3dy5nc3RhdGljLmNvbS9maXJlYmFzZWpzL3VpLzIuMC4wL2ltYWdlcy9hdXRoL29pZGMuc3ZnXCJ9LHdhOntcImdvb2dsZS5jb21cIjpcIiNmZmZmZmZcIixcImdpdGh1Yi5jb21cIjpcIiMzMzMzMzNcIixcImZhY2Vib29rLmNvbVwiOlwiIzNiNTk5OFwiLFwidHdpdHRlci5jb21cIjpcIiM1NWFjZWVcIixwYXNzd29yZDpcIiNkYjQ0MzdcIixwaG9uZTpcIiMwMmJkN2VcIixhbm9ueW1vdXM6XCIjZjRiNDAwXCIsXCJtaWNyb3NvZnQuY29tXCI6XCIjMkYyRjJGXCIsXCJ5YWhvby5jb21cIjpcIiM3MjBFOUVcIixcImFwcGxlLmNvbVwiOlwiIzAwMDAwMFwiLHNhbWw6XCIjMDA3YmZmXCIsb2lkYzpcIiMwMDdiZmZcIn0saGI6e1wiZ29vZ2xlLmNvbVwiOlwiR29vZ2xlXCIsXG5cImdpdGh1Yi5jb21cIjpcIkdpdEh1YlwiLFwiZmFjZWJvb2suY29tXCI6XCJGYWNlYm9va1wiLFwidHdpdHRlci5jb21cIjpcIlR3aXR0ZXJcIixwYXNzd29yZDpcIlBhc3N3b3JkXCIscGhvbmU6XCJQaG9uZVwiLGFub255bW91czpcIkd1ZXN0XCIsXCJtaWNyb3NvZnQuY29tXCI6XCJNaWNyb3NvZnRcIixcInlhaG9vLmNvbVwiOlwiWWFob29cIixcImFwcGxlLmNvbVwiOlwiQXBwbGVcIn19O2Z1bmN0aW9uIHNrKGEsYixjKXtZZC5jYWxsKHRoaXMsYSxiKTtmb3IodmFyIGQgaW4gYyl0aGlzW2RdPWNbZF19dyhzayxZZCk7ZnVuY3Rpb24gUChhLGIsYyxkLGUpe0dqLmNhbGwodGhpcyxjKTt0aGlzLmZiPWE7dGhpcy5lYj1iO3RoaXMuRmE9ITE7dGhpcy5HYT1kfHxudWxsO3RoaXMuQT10aGlzLmNhPW51bGw7dGhpcy5aPWViKHJrKTtnYih0aGlzLlosZXx8e30pfXcoUCxHaik7bD1QLnByb3RvdHlwZTtsLmtiPWZ1bmN0aW9uKCl7dmFyIGE9aGQodGhpcy5mYix0aGlzLmViLHRoaXMuWix0aGlzLnMpO2hrKGEpO3RoaXMuZz1hfTtsLnY9XG5mdW5jdGlvbigpe1AuSy52LmNhbGwodGhpcyk7QmUoUSh0aGlzKSxuZXcgc2soXCJwYWdlRW50ZXJcIixRKHRoaXMpLHtwYWdlSWQ6dGhpcy5HYX0pKTtpZih0aGlzLmJiKCkmJnRoaXMuWi5GKXt2YXIgYT10aGlzLlouRjtPKHRoaXMsdGhpcy5iYigpLGZ1bmN0aW9uKCl7YSgpfSl9aWYodGhpcy5hYigpJiZ0aGlzLlouRCl7dmFyIGI9dGhpcy5aLkQ7Tyh0aGlzLHRoaXMuYWIoKSxmdW5jdGlvbigpe2IoKX0pfX07bC55YT1mdW5jdGlvbigpe0JlKFEodGhpcyksbmV3IHNrKFwicGFnZUV4aXRcIixRKHRoaXMpLHtwYWdlSWQ6dGhpcy5HYX0pKTtQLksueWEuY2FsbCh0aGlzKX07bC5vPWZ1bmN0aW9uKCl7d2luZG93LmNsZWFyVGltZW91dCh0aGlzLmNhKTt0aGlzLmViPXRoaXMuZmI9dGhpcy5jYT1udWxsO3RoaXMuRmE9ITE7dGhpcy5BPW51bGw7amsodGhpcy5OKCkpO1AuSy5vLmNhbGwodGhpcyl9O2Z1bmN0aW9uIHRrKGEpe2EuRmE9ITA7dmFyIGI9VGkoYS5OKCksXCJmaXJlYmFzZXVpLXVzZS1zcGlubmVyXCIpO1xuYS5jYT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2EuTigpJiZudWxsPT09YS5BJiYoYS5BPWhkKGZrLHt0YjpifSxudWxsLGEucyksYS5OKCkuYXBwZW5kQ2hpbGQoYS5BKSxoayhhLkEpKX0sNTAwKX1sLkk9ZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZSgpe2lmKGYuVClyZXR1cm4gbnVsbDtmLkZhPSExO3dpbmRvdy5jbGVhclRpbWVvdXQoZi5jYSk7Zi5jYT1udWxsO2YuQSYmKGprKGYuQSksWmMoZi5BKSxmLkE9bnVsbCl9dmFyIGY9dGhpcztpZihmLkZhKXJldHVybiBudWxsO3RrKGYpO3JldHVybiBhLmFwcGx5KG51bGwsYikudGhlbihjLGQpLnRoZW4oZSxlKX07ZnVuY3Rpb24gUShhKXtyZXR1cm4gYS5OKCkucGFyZW50RWxlbWVudHx8YS5OKCkucGFyZW50Tm9kZX1mdW5jdGlvbiB1ayhhLGIsYyl7S2ooYSxiLGZ1bmN0aW9uKCl7Yy5mb2N1cygpfSl9ZnVuY3Rpb24gdmsoYSxiLGMpe0tqKGEsYixmdW5jdGlvbigpe2MoKX0pfXUoUC5wcm90b3R5cGUse2E6ZnVuY3Rpb24oYSl7b2suY2FsbCh0aGlzKTtcbnZhciBiPWhkKGJrLHttZXNzYWdlOmF9LG51bGwsdGhpcy5zKTt0aGlzLk4oKS5hcHBlbmRDaGlsZChiKTtPKHRoaXMscWsuY2FsbCh0aGlzKSxmdW5jdGlvbigpe1pjKGIpfSl9LHljOm9rLEFjOnBrLHpjOnFrLCQ6ZnVuY3Rpb24oYSxiKXthPWhkKGRrLHtNYTphLG1lc3NhZ2U6Yn0sbnVsbCx0aGlzLnMpO2xrLmNhbGwodGhpcyxhKX0saDptayxDYjpuayxDYzpmdW5jdGlvbigpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLXRvc1wiKX0sYmI6ZnVuY3Rpb24oKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS10b3MtbGlua1wiKX0sYWI6ZnVuY3Rpb24oKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1wcC1saW5rXCIpfSxEYzpmdW5jdGlvbigpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLXRvcy1saXN0XCIpfX0pO2Z1bmN0aW9uIHdrKGEsYixjKXthPWF8fHt9O2I9YS5WYTt2YXIgZD1hLmlhO2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLXNpZ24taW5cIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5TaWduIGluIHdpdGggZW1haWw8L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLXJlbGF0aXZlLXdyYXBwZXJcIj4nK1xuUWooYSkrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrKGI/WWoobnVsbCk6XCJcIikrUmoobnVsbCkrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyXCI+JysoZD9hayhjKTpaaihjKSkrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYSl9d2suYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2Uuc2lnbkluXCI7ZnVuY3Rpb24geGsoYSxiLGMpe2E9YXx8e307Yj1hLmlhO2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLXBhc3N3b3JkLXNpZ24taW5cIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5TaWduIGluPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj4nK1xuUWooYSkrV2ooKSsnPC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1saW5rc1wiPicrWGooKSsnPC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytTaigpKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrKGI/YWsoYyk6WmooYykpK1wiPC9kaXY+PC9mb3JtPjwvZGl2PlwiO3JldHVybiBCKGEpfXhrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnBhc3N3b3JkU2lnbkluXCI7ZnVuY3Rpb24geWsoYSxiLGMpe2E9YXx8e307dmFyIGQ9YS5UYjtiPWEuVGE7dmFyIGU9YS5pYSxmPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1wYXNzd29yZC1zaWduLXVwXCI+PGZvcm0gb25zdWJtaXQ9XCJyZXR1cm4gZmFsc2U7XCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+Q3JlYXRlIGFjY291bnQ8L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPicrXG5RaihhKTtkPyhhPWF8fHt9LGE9YS5uYW1lLGE9JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIj48bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbCBmaXJlYmFzZXVpLWxhYmVsXCIgZm9yPVwidWktc2lnbi1pbi1uYW1lLWlucHV0XCI+Rmlyc3QgJmFtcDsgbGFzdCBuYW1lPC9sYWJlbD48aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibmFtZVwiIGlkPVwidWktc2lnbi1pbi1uYW1lLWlucHV0XCIgYXV0b2NvbXBsZXRlPVwibmFtZVwiIGNsYXNzPVwibWRsLXRleHRmaWVsZF9faW5wdXQgZmlyZWJhc2V1aS1pbnB1dCBmaXJlYmFzZXVpLWlkLW5hbWVcIiB2YWx1ZT1cIicrdWQobnVsbCE9YT9hOlwiXCIpKydcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1lcnJvci13cmFwcGVyXCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLWVycm9yIGZpcmViYXNldWktdGV4dC1pbnB1dC1lcnJvciBmaXJlYmFzZXVpLWhpZGRlbiBmaXJlYmFzZXVpLWlkLW5hbWUtZXJyb3JcIj48L3A+PC9kaXY+JyxcbmE9QihhKSk6YT1cIlwiO2M9ZithK1ZqKG51bGwpKyc8L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nKyhiP1lqKG51bGwpOlwiXCIpK1RqKCkrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyXCI+JysoZT9hayhjKTpaaihjKSkrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYyl9eWsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UucGFzc3dvcmRTaWduVXBcIjtmdW5jdGlvbiB6ayhhLGIsYyl7YT1hfHx7fTtiPWEuVGE7YT0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcGFzc3dvcmQtcmVjb3ZlcnlcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5SZWNvdmVyIHBhc3N3b3JkPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dFwiPkdldCBpbnN0cnVjdGlvbnMgc2VudCB0byB0aGlzIGVtYWlsIHRoYXQgZXhwbGFpbiBob3cgdG8gcmVzZXQgeW91ciBwYXNzd29yZDwvcD4nK1xuUWooYSkrJzwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrKGI/WWoobnVsbCk6XCJcIikrUmooe2xhYmVsOkQoXCJTZW5kXCIpfSkrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyXCI+JytaaihjKStcIjwvZGl2PjwvZm9ybT48L2Rpdj5cIjtyZXR1cm4gQihhKX16ay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5wYXNzd29yZFJlY292ZXJ5XCI7ZnVuY3Rpb24gQWsoYSxiLGMpe2I9YS5HO3ZhciBkPVwiXCI7YT1cIkZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIHNlbnQgdG8gPHN0cm9uZz5cIisoQShhLmVtYWlsKStcIjwvc3Ryb25nPiB0byByZWNvdmVyIHlvdXIgcGFzc3dvcmRcIik7ZCs9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLXBhc3N3b3JkLXJlY292ZXJ5LWVtYWlsLXNlbnRcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5DaGVjayB5b3VyIGVtYWlsPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dFwiPicrXG5hKyc8L3A+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+JztiJiYoZCs9JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrUmooe2xhYmVsOkQoXCJEb25lXCIpfSkrXCI8L2Rpdj5cIik7ZCs9JzwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyXCI+JytaaihjKStcIjwvZGl2PjwvZGl2PlwiO3JldHVybiBCKGQpfUFrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnBhc3N3b3JkUmVjb3ZlcnlFbWFpbFNlbnRcIjtmdW5jdGlvbiBCayhhLGIsYyl7cmV0dXJuIEIoJzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWNhbGxiYWNrXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FsbGJhY2staW5kaWNhdG9yLWNvbnRhaW5lclwiPicrZmsobnVsbCxudWxsLGMpK1wiPC9kaXY+PC9kaXY+XCIpfUJrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLmNhbGxiYWNrXCI7XG5mdW5jdGlvbiBDayhhLGIsYyl7cmV0dXJuIEIoJzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2Utc3Bpbm5lclwiPicrZmsoe3RiOiEwfSxudWxsLGMpK1wiPC9kaXY+XCIpfUNrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnNwaW5uZXJcIjtmdW5jdGlvbiBEaygpe3JldHVybiBCKCc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWJsYW5rIGZpcmViYXNldWktdXNlLXNwaW5uZXJcIj48L2Rpdj4nKX1Eay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5ibGFua1wiO2Z1bmN0aW9uIEVrKGEsYixjKXtiPVwiXCI7YT1cIkEgc2lnbi1pbiBlbWFpbCB3aXRoIGFkZGl0aW9uYWwgaW5zdHJ1Y3Rpb25zIHdhcyBzZW50IHRvIDxzdHJvbmc+XCIrKEEoYS5lbWFpbCkrXCI8L3N0cm9uZz4uIENoZWNrIHlvdXIgZW1haWwgdG8gY29tcGxldGUgc2lnbi1pbi5cIik7dmFyIGQ9QignPGEgY2xhc3M9XCJmaXJlYmFzZXVpLWxpbmsgZmlyZWJhc2V1aS1pZC10cm91YmxlLWdldHRpbmctZW1haWwtbGlua1wiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj5Ucm91YmxlIGdldHRpbmcgZW1haWw/PC9hPicpO1xuYis9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWVtYWlsLWxpbmstc2lnbi1pbi1zZW50XCI+PGZvcm0gb25zdWJtaXQ9XCJyZXR1cm4gZmFsc2U7XCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+U2lnbi1pbiBlbWFpbCBzZW50PC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1lbWFpbC1zZW50XCI+PC9kaXY+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj4nK2ErJzwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWxpbmtzXCI+JytkKyc8L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1lqKHtsYWJlbDpEKFwiQmFja1wiKX0pKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrXG5aaihjKStcIjwvZGl2PjwvZm9ybT48L2Rpdj5cIjtyZXR1cm4gQihiKX1Fay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5lbWFpbExpbmtTaWduSW5TZW50XCI7ZnVuY3Rpb24gRmsoYSxiLGMpe2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWVtYWlsLW5vdC1yZWNlaXZlZFwiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlRyb3VibGUgZ2V0dGluZyBlbWFpbD88L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+VHJ5IHRoZXNlIGNvbW1vbiBmaXhlczo8dWw+PGxpPkNoZWNrIGlmIHRoZSBlbWFpbCB3YXMgbWFya2VkIGFzIHNwYW0gb3IgZmlsdGVyZWQuPC9saT48bGk+Q2hlY2sgeW91ciBpbnRlcm5ldCBjb25uZWN0aW9uLjwvbGk+PGxpPkNoZWNrIHRoYXQgeW91IGRpZCBub3QgbWlzc3BlbGwgeW91ciBlbWFpbC48L2xpPjxsaT5DaGVjayB0aGF0IHlvdXIgaW5ib3ggc3BhY2UgaXMgbm90IHJ1bm5pbmcgb3V0IG9yIG90aGVyIGluYm94IHNldHRpbmdzIHJlbGF0ZWQgaXNzdWVzLjwvbGk+PC91bD48L3A+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5JZiB0aGUgc3RlcHMgYWJvdmUgZGlkblxcJ3Qgd29yaywgeW91IGNhbiByZXNlbmQgdGhlIGVtYWlsLiBOb3RlIHRoYXQgdGhpcyB3aWxsIGRlYWN0aXZhdGUgdGhlIGxpbmsgaW4gdGhlIG9sZGVyIGVtYWlsLjwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWxpbmtzXCI+JytcbkIoJzxhIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktaWQtcmVzZW5kLWVtYWlsLWxpbmtcIiBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+UmVzZW5kPC9hPicpKyc8L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1lqKHtsYWJlbDpEKFwiQmFja1wiKX0pKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYSl9RmsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UuZW1haWxOb3RSZWNlaXZlZFwiO2Z1bmN0aW9uIEdrKGEsYixjKXthPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1lbWFpbC1saW5rLXNpZ24taW4tY29uZmlybWF0aW9uXCI+PGZvcm0gb25zdWJtaXQ9XCJyZXR1cm4gZmFsc2U7XCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+Q29uZmlybSBlbWFpbDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5Db25maXJtIHlvdXIgZW1haWwgdG8gY29tcGxldGUgc2lnbiBpbjwvcD48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1yZWxhdGl2ZS13cmFwcGVyXCI+JytcblFqKGEpKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1lqKG51bGwpK1JqKG51bGwpKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYSl9R2suYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UuZW1haWxMaW5rU2lnbkluQ29uZmlybWF0aW9uXCI7ZnVuY3Rpb24gSGsoKXt2YXIgYT0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtZGlmZmVyZW50LWRldmljZS1lcnJvclwiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPk5ldyBkZXZpY2Ugb3IgYnJvd3NlciBkZXRlY3RlZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5Ucnkgb3BlbmluZyB0aGUgbGluayB1c2luZyB0aGUgc2FtZSBkZXZpY2Ugb3IgYnJvd3NlciB3aGVyZSB5b3Ugc3RhcnRlZCB0aGUgc2lnbi1pbiBwcm9jZXNzLjwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1xuWWooe2xhYmVsOkQoXCJEaXNtaXNzXCIpfSkrXCI8L2Rpdj48L2Rpdj48L2Rpdj5cIjtyZXR1cm4gQihhKX1Iay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5kaWZmZXJlbnREZXZpY2VFcnJvclwiO2Z1bmN0aW9uIElrKCl7dmFyIGE9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWFub255bW91cy11c2VyLW1pc21hdGNoXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+U2Vzc2lvbiBlbmRlZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5UaGUgc2Vzc2lvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBzaWduLWluIHJlcXVlc3QgaGFzIGVpdGhlciBleHBpcmVkIG9yIHdhcyBjbGVhcmVkLjwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1xuWWooe2xhYmVsOkQoXCJEaXNtaXNzXCIpfSkrXCI8L2Rpdj48L2Rpdj48L2Rpdj5cIjtyZXR1cm4gQihhKX1Jay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5hbm9ueW1vdXNVc2VyTWlzbWF0Y2hcIjtmdW5jdGlvbiBKayhhLGIsYyl7Yj1cIlwiO2E9XCJZb3VcXHUyMDE5dmUgYWxyZWFkeSB1c2VkIDxzdHJvbmc+XCIrKEEoYS5lbWFpbCkrXCI8L3N0cm9uZz4gdG8gc2lnbiBpbi4gRW50ZXIgeW91ciBwYXNzd29yZCBmb3IgdGhhdCBhY2NvdW50LlwiKTtiKz0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcGFzc3dvcmQtbGlua2luZ1wiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlNpZ24gaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxoMiBjbGFzcz1cImZpcmViYXNldWktc3VidGl0bGVcIj5Zb3UgYWxyZWFkeSBoYXZlIGFuIGFjY291bnQ8L2gyPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+JytcbmErXCI8L3A+XCIrV2ooKSsnPC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1saW5rc1wiPicrWGooKSsnPC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytTaigpKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYil9SmsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UucGFzc3dvcmRMaW5raW5nXCI7ZnVuY3Rpb24gS2soYSxiLGMpe3ZhciBkPWEuZW1haWw7Yj1cIlwiO2E9XCJcIitnayhhLGMpO2E9RChhKTtkPVwiWW91XFx1MjAxOXZlIGFscmVhZHkgdXNlZCA8c3Ryb25nPlwiKyhBKGQpKyhcIjwvc3Ryb25nPi4gWW91IGNhbiBjb25uZWN0IHlvdXIgPHN0cm9uZz5cIisoQShhKSsoXCI8L3N0cm9uZz4gYWNjb3VudCB3aXRoIDxzdHJvbmc+XCIrKEEoZCkrXCI8L3N0cm9uZz4gYnkgc2lnbmluZyBpbiB3aXRoIGVtYWlsIGxpbmsgYmVsb3cuXCIpKSkpKTtcbmE9XCJGb3IgdGhpcyBmbG93IHRvIHN1Y2Nlc3NmdWxseSBjb25uZWN0IHlvdXIgXCIrKEEoYSkrXCIgYWNjb3VudCB3aXRoIHRoaXMgZW1haWwsIHlvdSBoYXZlIHRvIG9wZW4gdGhlIGxpbmsgb24gdGhlIHNhbWUgZGV2aWNlIG9yIGJyb3dzZXIuXCIpO2IrPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1lbWFpbC1saW5rLXNpZ24taW4tbGlua2luZ1wiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlNpZ24gaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxoMiBjbGFzcz1cImZpcmViYXNldWktc3VidGl0bGVcIj5Zb3UgYWxyZWFkeSBoYXZlIGFuIGFjY291bnQ8L2gyPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0IGZpcmViYXNldWktdGV4dC1qdXN0aWZ5XCI+JytcbmQrJzxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0IGZpcmViYXNldWktdGV4dC1qdXN0aWZ5XCI+JythKyc8L3A+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytTaigpKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYil9S2suYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UuZW1haWxMaW5rU2lnbkluTGlua2luZ1wiO2Z1bmN0aW9uIExrKGEsYixjKXtiPVwiXCI7dmFyIGQ9XCJcIitnayhhLGMpO2Q9RChkKTthPVwiWW91IG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gY29ubmVjdCA8c3Ryb25nPlwiKyhBKGQpK1wiPC9zdHJvbmc+IHRvIHlvdXIgZW1haWwgYWNjb3VudCBidXQgaGF2ZSBvcGVuZWQgdGhlIGxpbmsgb24gYSBkaWZmZXJlbnQgZGV2aWNlIHdoZXJlIHlvdSBhcmUgbm90IHNpZ25lZCBpbi5cIik7XG5kPVwiSWYgeW91IHN0aWxsIHdhbnQgdG8gY29ubmVjdCB5b3VyIDxzdHJvbmc+XCIrKEEoZCkrXCI8L3N0cm9uZz4gYWNjb3VudCwgb3BlbiB0aGUgbGluayBvbiB0aGUgc2FtZSBkZXZpY2Ugd2hlcmUgeW91IHN0YXJ0ZWQgc2lnbi1pbi4gT3RoZXJ3aXNlLCB0YXAgQ29udGludWUgdG8gc2lnbi1pbiBvbiB0aGlzIGRldmljZS5cIik7Yis9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWVtYWlsLWxpbmstc2lnbi1pbi1saW5raW5nLWRpZmZlcmVudC1kZXZpY2VcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5TaWduIGluPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dCBmaXJlYmFzZXVpLXRleHQtanVzdGlmeVwiPicrXG5hKyc8L3A+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHQgZmlyZWJhc2V1aS10ZXh0LWp1c3RpZnlcIj4nK2QrJzwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1VqKCkrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyXCI+JytaaihjKStcIjwvZGl2PjwvZm9ybT48L2Rpdj5cIjtyZXR1cm4gQihiKX1May5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5lbWFpbExpbmtTaWduSW5MaW5raW5nRGlmZmVyZW50RGV2aWNlXCI7ZnVuY3Rpb24gTWsoYSxiLGMpe3ZhciBkPWEuZW1haWw7Yj1cIlwiO2E9XCJcIitnayhhLGMpO2E9RChhKTtkPVwiWW91XFx1MjAxOXZlIGFscmVhZHkgdXNlZCA8c3Ryb25nPlwiKyhBKGQpKyhcIjwvc3Ryb25nPi4gU2lnbiBpbiB3aXRoIFwiKyhBKGEpK1wiIHRvIGNvbnRpbnVlLlwiKSkpO2IrPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1mZWRlcmF0ZWQtbGlua2luZ1wiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlNpZ24gaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxoMiBjbGFzcz1cImZpcmViYXNldWktc3VidGl0bGVcIj5Zb3UgYWxyZWFkeSBoYXZlIGFuIGFjY291bnQ8L2gyPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+JytcbmQrJzwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1JqKHtsYWJlbDpEKFwiU2lnbiBpbiB3aXRoIFwiK2EpfSkrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyXCI+JytaaihjKStcIjwvZGl2PjwvZm9ybT48L2Rpdj5cIjtyZXR1cm4gQihiKX1Nay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5mZWRlcmF0ZWRMaW5raW5nXCI7ZnVuY3Rpb24gTmsoYSxiLGMpe2E9YXx8e307dmFyIGQ9YS5rYztiPWEueWI7YT1hLkViO3ZhciBlPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS11bmF1dGhvcml6ZWQtdXNlclwiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPk5vdCBBdXRob3JpemVkPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dFwiPic7XG5kPyhkPVwiPHN0cm9uZz5cIisoQShkKStcIjwvc3Ryb25nPiBpcyBub3QgYXV0aG9yaXplZCB0byB2aWV3IHRoZSByZXF1ZXN0ZWQgcGFnZS5cIiksZSs9ZCk6ZSs9XCJVc2VyIGlzIG5vdCBhdXRob3JpemVkIHRvIHZpZXcgdGhlIHJlcXVlc3RlZCBwYWdlLlwiO2UrPVwiPC9wPlwiO2ImJihiPVwiUGxlYXNlIGNvbnRhY3QgPHN0cm9uZz5cIisoQShiKStcIjwvc3Ryb25nPiBmb3IgYXV0aG9yaXphdGlvbi5cIiksZSs9JzxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0IGZpcmViYXNldWktaWQtdW5hdXRob3JpemVkLXVzZXItYWRtaW4tZW1haWxcIj4nK2IrXCI8L3A+XCIpO2UrPSc8L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWxpbmtzXCI+JzthJiYoZSs9JzxhIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktaWQtdW5hdXRob3JpemVkLXVzZXItaGVscC1saW5rXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIHRhcmdldD1cIl9ibGFua1wiPkxlYXJuIE1vcmU8L2E+Jyk7XG5lKz0nPC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytZaih7bGFiZWw6RChcIkJhY2tcIil9KSsnPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1mb290ZXJcIj4nK1pqKGMpK1wiPC9kaXY+PC9mb3JtPjwvZGl2PlwiO3JldHVybiBCKGUpfU5rLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnVuYXV0aG9yaXplZFVzZXJcIjtmdW5jdGlvbiBPayhhLGIsYyl7Yj1cIlwiO2E9XCJUbyBjb250aW51ZSBzaWduIGluIHdpdGggPHN0cm9uZz5cIisoQShhLmVtYWlsKStcIjwvc3Ryb25nPiBvbiB0aGlzIGRldmljZSwgeW91IGhhdmUgdG8gcmVjb3ZlciB0aGUgcGFzc3dvcmQuXCIpO2IrPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS11bnN1cHBvcnRlZC1wcm92aWRlclwiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlNpZ24gaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+JytcbmErJzwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1lqKG51bGwpK1JqKHtsYWJlbDpEKFwiUmVjb3ZlciBwYXNzd29yZFwiKX0pKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYil9T2suYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UudW5zdXBwb3J0ZWRQcm92aWRlclwiO2Z1bmN0aW9uIFBrKGEpe3ZhciBiPVwiXCIsYz0nPHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5mb3IgPHN0cm9uZz4nKyhBKGEuZW1haWwpK1wiPC9zdHJvbmc+PC9wPlwiKTtiKz0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcGFzc3dvcmQtcmVzZXRcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5SZXNldCB5b3VyIHBhc3N3b3JkPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj4nK1xuYytWaihzZChhKSkrJzwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrVGooKStcIjwvZGl2PjwvZGl2PjwvZm9ybT48L2Rpdj5cIjtyZXR1cm4gQihiKX1Qay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5wYXNzd29yZFJlc2V0XCI7ZnVuY3Rpb24gUWsoYSl7YT1hfHx7fTthPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1wYXNzd29yZC1yZXNldC1zdWNjZXNzXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+UGFzc3dvcmQgY2hhbmdlZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5Zb3UgY2FuIG5vdyBzaWduIGluIHdpdGggeW91ciBuZXcgcGFzc3dvcmQ8L3A+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+JytcbihhLkc/JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrVWooKStcIjwvZGl2PlwiOlwiXCIpK1wiPC9kaXY+PC9kaXY+XCI7cmV0dXJuIEIoYSl9UWsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UucGFzc3dvcmRSZXNldFN1Y2Nlc3NcIjtmdW5jdGlvbiBSayhhKXthPWF8fHt9O2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLXBhc3N3b3JkLXJlc2V0LWZhaWx1cmVcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5UcnkgcmVzZXR0aW5nIHlvdXIgcGFzc3dvcmQgYWdhaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+WW91ciByZXF1ZXN0IHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQgaGFzIGV4cGlyZWQgb3IgdGhlIGxpbmsgaGFzIGFscmVhZHkgYmVlbiB1c2VkPC9wPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPicrXG4oYS5HPyc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1VqKCkrXCI8L2Rpdj5cIjpcIlwiKStcIjwvZGl2PjwvZGl2PlwiO3JldHVybiBCKGEpfVJrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnBhc3N3b3JkUmVzZXRGYWlsdXJlXCI7ZnVuY3Rpb24gU2soYSl7dmFyIGI9YS5HLGM9XCJcIjthPVwiWW91ciBzaWduLWluIGVtYWlsIGFkZHJlc3MgaGFzIGJlZW4gY2hhbmdlZCBiYWNrIHRvIDxzdHJvbmc+XCIrKEEoYS5lbWFpbCkrXCI8L3N0cm9uZz4uXCIpO2MrPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1lbWFpbC1jaGFuZ2UtcmV2b2tlLXN1Y2Nlc3NcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5VcGRhdGVkIGVtYWlsIGFkZHJlc3M8L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+JytcbmErJzwvcD48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dFwiPklmIHlvdSBkaWRuXFx1MjAxOXQgYXNrIHRvIGNoYW5nZSB5b3VyIHNpZ24taW4gZW1haWwsIGl0XFx1MjAxOXMgcG9zc2libGUgc29tZW9uZSBpcyB0cnlpbmcgdG8gYWNjZXNzIHlvdXIgYWNjb3VudCBhbmQgeW91IHNob3VsZCA8YSBjbGFzcz1cImZpcmViYXNldWktbGluayBmaXJlYmFzZXVpLWlkLXJlc2V0LXBhc3N3b3JkLWxpbmtcIiBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+Y2hhbmdlIHlvdXIgcGFzc3dvcmQgcmlnaHQgYXdheTwvYT4uPC9wPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPicrKGI/JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrVWooKStcIjwvZGl2PlwiOlwiXCIpK1wiPC9kaXY+PC9mb3JtPjwvZGl2PlwiO3JldHVybiBCKGMpfVNrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLmVtYWlsQ2hhbmdlUmV2b2tlU3VjY2Vzc1wiO2Z1bmN0aW9uIFRrKGEpe2E9XG5hfHx7fTthPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1lbWFpbC1jaGFuZ2UtcmV2b2tlLWZhaWx1cmVcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5VbmFibGUgdG8gdXBkYXRlIHlvdXIgZW1haWwgYWRkcmVzczwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5UaGVyZSB3YXMgYSBwcm9ibGVtIGNoYW5naW5nIHlvdXIgc2lnbi1pbiBlbWFpbCBiYWNrLjwvcD48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dFwiPklmIHlvdSB0cnkgYWdhaW4gYW5kIHN0aWxsIGNhblxcdTIwMTl0IHJlc2V0IHlvdXIgZW1haWwsIHRyeSBhc2tpbmcgeW91ciBhZG1pbmlzdHJhdG9yIGZvciBoZWxwLjwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj4nK1xuKGEuRz8nPGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytVaigpK1wiPC9kaXY+XCI6XCJcIikrXCI8L2Rpdj48L2Rpdj5cIjtyZXR1cm4gQihhKX1Uay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5lbWFpbENoYW5nZVJldm9rZUZhaWx1cmVcIjtmdW5jdGlvbiBVayhhKXthPWF8fHt9O2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWVtYWlsLXZlcmlmaWNhdGlvbi1zdWNjZXNzXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+WW91ciBlbWFpbCBoYXMgYmVlbiB2ZXJpZmllZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5Zb3UgY2FuIG5vdyBzaWduIGluIHdpdGggeW91ciBuZXcgYWNjb3VudDwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj4nK1xuKGEuRz8nPGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytVaigpK1wiPC9kaXY+XCI6XCJcIikrXCI8L2Rpdj48L2Rpdj5cIjtyZXR1cm4gQihhKX1Vay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5lbWFpbFZlcmlmaWNhdGlvblN1Y2Nlc3NcIjtmdW5jdGlvbiBWayhhKXthPWF8fHt9O2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLWVtYWlsLXZlcmlmaWNhdGlvbi1mYWlsdXJlXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+VHJ5IHZlcmlmeWluZyB5b3VyIGVtYWlsIGFnYWluPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48cCBjbGFzcz1cImZpcmViYXNldWktdGV4dFwiPllvdXIgcmVxdWVzdCB0byB2ZXJpZnkgeW91ciBlbWFpbCBoYXMgZXhwaXJlZCBvciB0aGUgbGluayBoYXMgYWxyZWFkeSBiZWVuIHVzZWQ8L3A+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+JytcbihhLkc/JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrVWooKStcIjwvZGl2PlwiOlwiXCIpK1wiPC9kaXY+PC9kaXY+XCI7cmV0dXJuIEIoYSl9VmsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UuZW1haWxWZXJpZmljYXRpb25GYWlsdXJlXCI7ZnVuY3Rpb24gWGsoYSl7dmFyIGI9YS5HLGM9XCJcIjthPVwiWW91IGNhbiBub3cgc2lnbiBpbiB3aXRoIHlvdXIgbmV3IGVtYWlsIDxzdHJvbmc+XCIrKEEoYS5lbWFpbCkrXCI8L3N0cm9uZz4uXCIpO2MrPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS12ZXJpZnktYW5kLWNoYW5nZS1lbWFpbC1zdWNjZXNzXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+WW91ciBlbWFpbCBoYXMgYmVlbiB2ZXJpZmllZCBhbmQgY2hhbmdlZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj4nK1xuYSsnPC9wPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPicrKGI/JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrVWooKStcIjwvZGl2PlwiOlwiXCIpK1wiPC9kaXY+PC9kaXY+XCI7cmV0dXJuIEIoYyl9WGsuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UudmVyaWZ5QW5kQ2hhbmdlRW1haWxTdWNjZXNzXCI7ZnVuY3Rpb24gWWsoYSl7YT1hfHx7fTthPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS12ZXJpZnktYW5kLWNoYW5nZS1lbWFpbC1mYWlsdXJlXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+VHJ5IHVwZGF0aW5nIHlvdXIgZW1haWwgYWdhaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+WW91ciByZXF1ZXN0IHRvIHZlcmlmeSBhbmQgdXBkYXRlIHlvdXIgZW1haWwgaGFzIGV4cGlyZWQgb3IgdGhlIGxpbmsgaGFzIGFscmVhZHkgYmVlbiB1c2VkLjwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj4nK1xuKGEuRz8nPGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytVaigpK1wiPC9kaXY+XCI6XCJcIikrXCI8L2Rpdj48L2Rpdj5cIjtyZXR1cm4gQihhKX1Zay5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS52ZXJpZnlBbmRDaGFuZ2VFbWFpbEZhaWx1cmVcIjtmdW5jdGlvbiBaayhhKXt2YXIgYj1hLmZhY3RvcklkLGM9YS5waG9uZU51bWJlcjthPWEuRzt2YXIgZD0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcmV2ZXJ0LXNlY29uZC1mYWN0b3ItYWRkaXRpb24tc3VjY2Vzc1wiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlJlbW92ZWQgc2Vjb25kIGZhY3RvcjwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj4nO1xuc3dpdGNoKGIpe2Nhc2UgXCJwaG9uZVwiOmI9XCJUaGUgPHN0cm9uZz5cIisoQShiKSsoXCIgXCIrKEEoYykrXCI8L3N0cm9uZz4gd2FzIHJlbW92ZWQgYXMgYSBzZWNvbmQgYXV0aGVudGljYXRpb24gc3RlcC5cIikpKTtkKz1iO2JyZWFrO2RlZmF1bHQ6ZCs9XCJUaGUgZGV2aWNlIG9yIGFwcCB3YXMgcmVtb3ZlZCBhcyBhIHNlY29uZCBhdXRoZW50aWNhdGlvbiBzdGVwLlwifWQrPSc8L3A+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5JZiB5b3UgZG9uXFwndCByZWNvZ25pemUgdGhpcyBkZXZpY2UsIHNvbWVvbmUgbWlnaHQgYmUgdHJ5aW5nIHRvIGFjY2VzcyB5b3VyIGFjY291bnQuIENvbnNpZGVyIDxhIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktaWQtcmVzZXQtcGFzc3dvcmQtbGlua1wiIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMClcIj5jaGFuZ2luZyB5b3VyIHBhc3N3b3JkIHJpZ2h0IGF3YXk8L2E+LjwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj4nK1xuKGE/JzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrVWooKStcIjwvZGl2PlwiOlwiXCIpK1wiPC9kaXY+PC9mb3JtPjwvZGl2PlwiO3JldHVybiBCKGQpfVprLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnJldmVydFNlY29uZEZhY3RvckFkZGl0aW9uU3VjY2Vzc1wiO2Z1bmN0aW9uICRrKGEpe2E9YXx8e307YT0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcmV2ZXJ0LXNlY29uZC1mYWN0b3ItYWRkaXRpb24tZmFpbHVyZVwiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPkNvdWxkblxcJ3QgcmVtb3ZlIHlvdXIgc2Vjb25kIGZhY3RvcjwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5Tb21ldGhpbmcgd2VudCB3cm9uZyByZW1vdmluZyB5b3VyIHNlY29uZCBmYWN0b3IuPC9wPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+VHJ5IHJlbW92aW5nIGl0IGFnYWluLiBJZiB0aGF0IGRvZXNuXFwndCB3b3JrLCBjb250YWN0IHN1cHBvcnQgZm9yIGFzc2lzdGFuY2UuPC9wPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPicrXG4oYS5HPyc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1VqKCkrXCI8L2Rpdj5cIjpcIlwiKStcIjwvZGl2PjwvZGl2PlwiO3JldHVybiBCKGEpfSRrLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnJldmVydFNlY29uZEZhY3RvckFkZGl0aW9uRmFpbHVyZVwiO2Z1bmN0aW9uIGFsKGEpe3ZhciBiPWEuemI7YT0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcmVjb3ZlcmFibGUtZXJyb3JcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5FcnJvciBlbmNvdW50ZXJlZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj4nK0EoYS5lcnJvck1lc3NhZ2UpKyc8L3A+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JztcbmImJihhKz1Saih7bGFiZWw6RChcIlJldHJ5XCIpfSkpO3JldHVybiBCKGErXCI8L2Rpdj48L2Rpdj48L2Rpdj5cIil9YWwuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UucmVjb3ZlcmFibGVFcnJvclwiO2Z1bmN0aW9uIGJsKGEpe2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLXVucmVjb3ZlcmFibGUtZXJyb3JcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5FcnJvciBlbmNvdW50ZXJlZDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj4nK0EoYS5lcnJvck1lc3NhZ2UpK1wiPC9wPjwvZGl2PjwvZGl2PlwiO3JldHVybiBCKGEpfWJsLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnVucmVjb3ZlcmFibGVFcnJvclwiO2Z1bmN0aW9uIGNsKGEsXG5iLGMpe3ZhciBkPWEuUWI7Yj1cIlwiO2E9XCJDb250aW51ZSB3aXRoIFwiKyhBKGEuamMpK1wiP1wiKTtkPVwiWW91IG9yaWdpbmFsbHkgd2FudGVkIHRvIHNpZ24gaW4gd2l0aCBcIitBKGQpO2IrPSc8ZGl2IGNsYXNzPVwibWRsLWNhcmQgbWRsLXNoYWRvdy0tMmRwIGZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktaWQtcGFnZS1lbWFpbC1taXNtYXRjaFwiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPlNpZ24gaW48L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxoMiBjbGFzcz1cImZpcmViYXNldWktc3VidGl0bGVcIj4nK2ErJzwvaDI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj4nK2QrJzwvcD48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWFjdGlvbnNcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1mb3JtLWFjdGlvbnNcIj4nK1xuWWoobnVsbCkrUmooe2xhYmVsOkQoXCJDb250aW51ZVwiKX0pKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCI7cmV0dXJuIEIoYil9Y2wuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2UuZW1haWxNaXNtYXRjaFwiO2Z1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0nPGRpdiBjbGFzcz1cImZpcmViYXNldWktY29udGFpbmVyIGZpcmViYXNldWktcGFnZS1wcm92aWRlci1zaWduLWluIGZpcmViYXNldWktaWQtcGFnZS1wcm92aWRlci1zaWduLWluIGZpcmViYXNldWktdXNlLXNwaW5uZXJcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48dWwgY2xhc3M9XCJmaXJlYmFzZXVpLWlkcC1saXN0XCI+JzthPWEuU2I7Yj1hLmxlbmd0aDtmb3IodmFyIGU9MDtlPGI7ZSsrKXt2YXIgZj17Z2E6YVtlXX0sZz1jO2Y9Znx8e307dmFyIGg9Zi5nYTtcbnZhciBrPWY7az1rfHx7fTt2YXIgcD1cIlwiO3N3aXRjaChrLmdhLnByb3ZpZGVySWQpe2Nhc2UgXCJnb29nbGUuY29tXCI6cCs9XCJmaXJlYmFzZXVpLWlkcC1nb29nbGVcIjticmVhaztjYXNlIFwiZ2l0aHViLmNvbVwiOnArPVwiZmlyZWJhc2V1aS1pZHAtZ2l0aHViXCI7YnJlYWs7Y2FzZSBcImZhY2Vib29rLmNvbVwiOnArPVwiZmlyZWJhc2V1aS1pZHAtZmFjZWJvb2tcIjticmVhaztjYXNlIFwidHdpdHRlci5jb21cIjpwKz1cImZpcmViYXNldWktaWRwLXR3aXR0ZXJcIjticmVhaztjYXNlIFwicGhvbmVcIjpwKz1cImZpcmViYXNldWktaWRwLXBob25lXCI7YnJlYWs7Y2FzZSBcImFub255bW91c1wiOnArPVwiZmlyZWJhc2V1aS1pZHAtYW5vbnltb3VzXCI7YnJlYWs7Y2FzZSBcInBhc3N3b3JkXCI6cCs9XCJmaXJlYmFzZXVpLWlkcC1wYXNzd29yZFwiO2JyZWFrO2RlZmF1bHQ6cCs9XCJmaXJlYmFzZXVpLWlkcC1nZW5lcmljXCJ9az0nPGJ1dHRvbiBjbGFzcz1cImZpcmViYXNldWktaWRwLWJ1dHRvbiBtZGwtYnV0dG9uIG1kbC1qcy1idXR0b24gbWRsLWJ1dHRvbi0tcmFpc2VkICcrXG51ZChDKHApKSsnIGZpcmViYXNldWktaWQtaWRwLWJ1dHRvblwiIGRhdGEtcHJvdmlkZXItaWQ9XCInK3VkKGgucHJvdmlkZXJJZCkrJ1wiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonO3A9KHA9Zil8fHt9O3A9cC5nYTtrPWsrdWQoRGQoQyhwLnRhP3AudGE6Zy53YVtwLnByb3ZpZGVySWRdP1wiXCIrZy53YVtwLnByb3ZpZGVySWRdOjA9PXAucHJvdmlkZXJJZC5pbmRleE9mKFwic2FtbC5cIik/XCJcIitnLndhLnNhbWw6MD09cC5wcm92aWRlcklkLmluZGV4T2YoXCJvaWRjLlwiKT9cIlwiK2cud2Eub2lkYzpcIlwiK2cud2EucGFzc3dvcmQpKSkrJ1wiPjxzcGFuIGNsYXNzPVwiZmlyZWJhc2V1aS1pZHAtaWNvbi13cmFwcGVyXCI+PGltZyBjbGFzcz1cImZpcmViYXNldWktaWRwLWljb25cIiBhbHQ9XCJcIiBzcmM9XCInO3ZhciB0PWY7cD1nO3Q9dHx8e307dD10LmdhO3A9cmQodC56YT96ZCh0LnphKTpwLnhhW3QucHJvdmlkZXJJZF0/emQocC54YVt0LnByb3ZpZGVySWRdKTowPT10LnByb3ZpZGVySWQuaW5kZXhPZihcInNhbWwuXCIpP1xuemQocC54YS5zYW1sKTowPT10LnByb3ZpZGVySWQuaW5kZXhPZihcIm9pZGMuXCIpP3pkKHAueGEub2lkYyk6emQocC54YS5wYXNzd29yZCkpO2s9ayt1ZCh6ZChwKSkrJ1wiPjwvc3Bhbj4nO1wicGFzc3dvcmRcIj09aC5wcm92aWRlcklkPyhrKz0nPHNwYW4gY2xhc3M9XCJmaXJlYmFzZXVpLWlkcC10ZXh0IGZpcmViYXNldWktaWRwLXRleHQtbG9uZ1wiPicsaC5WP2srPUEoaC5WKTpoLlM/KGY9XCJTaWduIGluIHdpdGggXCIrQShnayhmLGcpKSxrKz1mKTprKz1cIlNpZ24gaW4gd2l0aCBlbWFpbFwiLGsrPSc8L3NwYW4+PHNwYW4gY2xhc3M9XCJmaXJlYmFzZXVpLWlkcC10ZXh0IGZpcmViYXNldWktaWRwLXRleHQtc2hvcnRcIj4nLGs9aC5TP2srQShoLlMpOmsrXCJFbWFpbFwiLGsrPVwiPC9zcGFuPlwiKTpcInBob25lXCI9PWgucHJvdmlkZXJJZD8oays9JzxzcGFuIGNsYXNzPVwiZmlyZWJhc2V1aS1pZHAtdGV4dCBmaXJlYmFzZXVpLWlkcC10ZXh0LWxvbmdcIj4nLGguVj9rKz1BKGguVik6aC5TPyhmPVwiU2lnbiBpbiB3aXRoIFwiK1xuQShnayhmLGcpKSxrKz1mKTprKz1cIlNpZ24gaW4gd2l0aCBwaG9uZVwiLGsrPSc8L3NwYW4+PHNwYW4gY2xhc3M9XCJmaXJlYmFzZXVpLWlkcC10ZXh0IGZpcmViYXNldWktaWRwLXRleHQtc2hvcnRcIj4nLGs9aC5TP2srQShoLlMpOmsrXCJQaG9uZVwiLGsrPVwiPC9zcGFuPlwiKTpcImFub255bW91c1wiPT1oLnByb3ZpZGVySWQ/KGsrPSc8c3BhbiBjbGFzcz1cImZpcmViYXNldWktaWRwLXRleHQgZmlyZWJhc2V1aS1pZHAtdGV4dC1sb25nXCI+JyxoLlY/ays9QShoLlYpOmguUz8oZj1cIlNpZ24gaW4gd2l0aCBcIitBKGdrKGYsZykpLGsrPWYpOmsrPVwiQ29udGludWUgYXMgZ3Vlc3RcIixrKz0nPC9zcGFuPjxzcGFuIGNsYXNzPVwiZmlyZWJhc2V1aS1pZHAtdGV4dCBmaXJlYmFzZXVpLWlkcC10ZXh0LXNob3J0XCI+JyxrPWguUz9rK0EoaC5TKTprK1wiR3Vlc3RcIixrKz1cIjwvc3Bhbj5cIik6KGsrPSc8c3BhbiBjbGFzcz1cImZpcmViYXNldWktaWRwLXRleHQgZmlyZWJhc2V1aS1pZHAtdGV4dC1sb25nXCI+JyxoLlY/XG5rKz1BKGguVik6KHA9XCJTaWduIGluIHdpdGggXCIrQShnayhmLGcpKSxrKz1wKSxrKz0nPC9zcGFuPjxzcGFuIGNsYXNzPVwiZmlyZWJhc2V1aS1pZHAtdGV4dCBmaXJlYmFzZXVpLWlkcC10ZXh0LXNob3J0XCI+JysoaC5TP0EoaC5TKTpBKGdrKGYsZykpKStcIjwvc3Bhbj5cIik7aD1CKGsrXCI8L2J1dHRvbj5cIik7ZCs9JzxsaSBjbGFzcz1cImZpcmViYXNldWktbGlzdC1pdGVtXCI+JytoK1wiPC9saT5cIn1kKz0nPC91bD48L2Zvcm0+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1mb290ZXIgZmlyZWJhc2V1aS1wcm92aWRlci1zaWduLWluLWZvb3RlclwiPicrYWsoYykrXCI8L2Rpdj48L2Rpdj5cIjtyZXR1cm4gQihkKX1kbC5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5wcm92aWRlclNpZ25JblwiO2Z1bmN0aW9uIGVsKGEsYixjKXthPWF8fHt9O3ZhciBkPWEuR2IsZT1hLlZhO2I9YS5pYTthPWF8fHt9O2E9YS5BYTthPSc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1waG9uZS1udW1iZXJcIj48YnV0dG9uIGNsYXNzPVwiZmlyZWJhc2V1aS1pZC1jb3VudHJ5LXNlbGVjdG9yIGZpcmViYXNldWktY291bnRyeS1zZWxlY3RvciBtZGwtYnV0dG9uIG1kbC1qcy1idXR0b25cIj48c3BhbiBjbGFzcz1cImZpcmViYXNldWktZmxhZyBmaXJlYmFzZXVpLWNvdW50cnktc2VsZWN0b3ItZmxhZyBmaXJlYmFzZXVpLWlkLWNvdW50cnktc2VsZWN0b3ItZmxhZ1wiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImZpcmViYXNldWktaWQtY291bnRyeS1zZWxlY3Rvci1jb2RlXCI+PC9zcGFuPjwvYnV0dG9uPjxkaXYgY2xhc3M9XCJtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWwgZmlyZWJhc2V1aS10ZXh0ZmllbGQgZmlyZWJhc2V1aS1waG9uZS1pbnB1dC13cmFwcGVyXCI+PGxhYmVsIGNsYXNzPVwibWRsLXRleHRmaWVsZF9fbGFiZWwgZmlyZWJhc2V1aS1sYWJlbFwiIGZvcj1cInVpLXNpZ24taW4tcGhvbmUtbnVtYmVyLWlucHV0XCI+UGhvbmUgbnVtYmVyPC9sYWJlbD48aW5wdXQgdHlwZT1cInRlbFwiIG5hbWU9XCJwaG9uZU51bWJlclwiIGlkPVwidWktc2lnbi1pbi1waG9uZS1udW1iZXItaW5wdXRcIiBjbGFzcz1cIm1kbC10ZXh0ZmllbGRfX2lucHV0IGZpcmViYXNldWktaW5wdXQgZmlyZWJhc2V1aS1pZC1waG9uZS1udW1iZXJcIiB2YWx1ZT1cIicrXG51ZChudWxsIT1hP2E6XCJcIikrJ1wiPjwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWVycm9yLXdyYXBwZXJcIj48cCBjbGFzcz1cImZpcmViYXNldWktZXJyb3IgZmlyZWJhc2V1aS10ZXh0LWlucHV0LWVycm9yIGZpcmViYXNldWktaGlkZGVuIGZpcmViYXNldWktcGhvbmUtbnVtYmVyLWVycm9yIGZpcmViYXNldWktaWQtcGhvbmUtbnVtYmVyLWVycm9yXCI+PC9wPjwvZGl2Pic7YT0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcGhvbmUtc2lnbi1pbi1zdGFydFwiPjxmb3JtIG9uc3VibWl0PVwicmV0dXJuIGZhbHNlO1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtaGVhZGVyXCI+PGgxIGNsYXNzPVwiZmlyZWJhc2V1aS10aXRsZVwiPkVudGVyIHlvdXIgcGhvbmUgbnVtYmVyPC9oMT48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1yZWxhdGl2ZS13cmFwcGVyXCI+JytcbkIoYSk7dmFyIGY7ZD9mPUIoJzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLXJlY2FwdGNoYS13cmFwcGVyXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktcmVjYXB0Y2hhLWNvbnRhaW5lclwiPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWVycm9yLXdyYXBwZXIgZmlyZWJhc2V1aS1yZWNhcHRjaGEtZXJyb3Itd3JhcHBlclwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS1lcnJvciBmaXJlYmFzZXVpLWhpZGRlbiBmaXJlYmFzZXVpLWlkLXJlY2FwdGNoYS1lcnJvclwiPjwvcD48L2Rpdj48L2Rpdj4nKTpmPVwiXCI7Zj1hK2YrJzwvZGl2PjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrKGU/WWoobnVsbCk6XCJcIikrUmooe2xhYmVsOkQoXCJWZXJpZnlcIil9KSsnPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1mb290ZXJcIj4nO2I/KGI9JzxwIGNsYXNzPVwiZmlyZWJhc2V1aS10b3MgZmlyZWJhc2V1aS1waG9uZS10b3NcIj4nLFxuYj1jLkYmJmMuRD9iKydCeSB0YXBwaW5nIFZlcmlmeSwgeW91IGFyZSBpbmRpY2F0aW5nIHRoYXQgeW91IGFjY2VwdCBvdXIgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktdG9zLWxpbmtcIiB0YXJnZXQ9XCJfYmxhbmtcIj5UZXJtcyBvZiBTZXJ2aWNlPC9hPiBhbmQgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIGNsYXNzPVwiZmlyZWJhc2V1aS1saW5rIGZpcmViYXNldWktcHAtbGlua1wiIHRhcmdldD1cIl9ibGFua1wiPlByaXZhY3kgUG9saWN5PC9hPi4gQW4gU01TIG1heSBiZSBzZW50LiBNZXNzYWdlICZhbXA7IGRhdGEgcmF0ZXMgbWF5IGFwcGx5Lic6YitcIkJ5IHRhcHBpbmcgVmVyaWZ5LCBhbiBTTVMgbWF5IGJlIHNlbnQuIE1lc3NhZ2UgJmFtcDsgZGF0YSByYXRlcyBtYXkgYXBwbHkuXCIsYz1CKGIrXCI8L3A+XCIpKTpjPUIoJzxwIGNsYXNzPVwiZmlyZWJhc2V1aS10b3MgZmlyZWJhc2V1aS1waG9uZS1zbXMtbm90aWNlXCI+QnkgdGFwcGluZyBWZXJpZnksIGFuIFNNUyBtYXkgYmUgc2VudC4gTWVzc2FnZSAmYW1wOyBkYXRhIHJhdGVzIG1heSBhcHBseS48L3A+JykrXG5aaihjKTtyZXR1cm4gQihmK2MrXCI8L2Rpdj48L2Zvcm0+PC9kaXY+XCIpfWVsLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnBob25lU2lnbkluU3RhcnRcIjtmdW5jdGlvbiBmbChhLGIsYyl7YT1hfHx7fTtiPWEucGhvbmVOdW1iZXI7dmFyIGQ9XCJcIjthPSdFbnRlciB0aGUgNi1kaWdpdCBjb2RlIHdlIHNlbnQgdG8gPGEgY2xhc3M9XCJmaXJlYmFzZXVpLWxpbmsgZmlyZWJhc2V1aS1jaGFuZ2UtcGhvbmUtbnVtYmVyLWxpbmsgZmlyZWJhc2V1aS1pZC1jaGFuZ2UtcGhvbmUtbnVtYmVyLWxpbmtcIiBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCI+JmxybTsnKyhBKGIpK1wiPC9hPlwiKTtBKGIpO2I9ZDtkPUIoJzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRmaWVsZCBtZGwtdGV4dGZpZWxkIG1kbC1qcy10ZXh0ZmllbGQgbWRsLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIj48bGFiZWwgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19sYWJlbCBmaXJlYmFzZXVpLWxhYmVsXCIgZm9yPVwidWktc2lnbi1pbi1waG9uZS1jb25maXJtYXRpb24tY29kZS1pbnB1dFwiPjYtZGlnaXQgY29kZTwvbGFiZWw+PGlucHV0IHR5cGU9XCJudW1iZXJcIiBuYW1lPVwicGhvbmVDb25maXJtYXRpb25Db2RlXCIgaWQ9XCJ1aS1zaWduLWluLXBob25lLWNvbmZpcm1hdGlvbi1jb2RlLWlucHV0XCIgY2xhc3M9XCJtZGwtdGV4dGZpZWxkX19pbnB1dCBmaXJlYmFzZXVpLWlucHV0IGZpcmViYXNldWktaWQtcGhvbmUtY29uZmlybWF0aW9uLWNvZGVcIj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1lcnJvci13cmFwcGVyXCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLWVycm9yIGZpcmViYXNldWktdGV4dC1pbnB1dC1lcnJvciBmaXJlYmFzZXVpLWhpZGRlbiBmaXJlYmFzZXVpLWlkLXBob25lLWNvbmZpcm1hdGlvbi1jb2RlLWVycm9yXCI+PC9wPjwvZGl2PicpO1xuYz0nPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2UtcGhvbmUtc2lnbi1pbi1maW5pc2hcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5WZXJpZnkgeW91ciBwaG9uZSBudW1iZXI8L2gxPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtY29udGVudFwiPjxwIGNsYXNzPVwiZmlyZWJhc2V1aS10ZXh0XCI+JythK1wiPC9wPlwiK2QrJzwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtYWN0aW9uc1wiPjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWZvcm0tYWN0aW9uc1wiPicrWWoobnVsbCkrUmooe2xhYmVsOkQoXCJDb250aW51ZVwiKX0pKyc8L2Rpdj48L2Rpdj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWZvb3RlclwiPicrWmooYykrXCI8L2Rpdj48L2Zvcm0+XCI7XG5hPUIoJzxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLXJlc2VuZC1jb250YWluZXJcIj48c3BhbiBjbGFzcz1cImZpcmViYXNldWktaWQtcmVzZW5kLWNvdW50ZG93blwiPjwvc3Bhbj48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgY2xhc3M9XCJmaXJlYmFzZXVpLWlkLXJlc2VuZC1saW5rIGZpcmViYXNldWktaGlkZGVuIGZpcmViYXNldWktbGlua1wiPlJlc2VuZDwvYT48L2Rpdj4nKTtyZXR1cm4gQihiKyhjK2ErXCI8L2Rpdj5cIikpfWZsLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnBob25lU2lnbkluRmluaXNoXCI7ZnVuY3Rpb24gZ2woKXtyZXR1cm4gQignPGRpdiBjbGFzcz1cIm1kbC1jYXJkIG1kbC1zaGFkb3ctLTJkcCBmaXJlYmFzZXVpLWNvbnRhaW5lciBmaXJlYmFzZXVpLWlkLXBhZ2Utc2lnbi1vdXRcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWhlYWRlclwiPjxoMSBjbGFzcz1cImZpcmViYXNldWktdGl0bGVcIj5TaWduIE91dDwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PHAgY2xhc3M9XCJmaXJlYmFzZXVpLXRleHRcIj5Zb3UgYXJlIG5vdyBzdWNjZXNzZnVsbHkgc2lnbmVkIG91dC48L3A+PC9kaXY+PC9kaXY+Jyl9XG5nbC5hPVwiZmlyZWJhc2V1aS5hdXRoLnNveTIucGFnZS5zaWduT3V0XCI7ZnVuY3Rpb24gaGwoYSxiLGMpe3ZhciBkPSc8ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1wYWdlLXNlbGVjdC10ZW5hbnQgZmlyZWJhc2V1aS1pZC1wYWdlLXNlbGVjdC10ZW5hbnRcIj48ZGl2IGNsYXNzPVwiZmlyZWJhc2V1aS1jYXJkLWNvbnRlbnRcIj48Zm9ybSBvbnN1Ym1pdD1cInJldHVybiBmYWxzZTtcIj48dWwgY2xhc3M9XCJmaXJlYmFzZXVpLXRlbmFudC1saXN0XCI+JzthPWEuZWM7Yj1hLmxlbmd0aDtmb3IodmFyIGU9MDtlPGI7ZSsrKXt2YXIgZj1hW2VdO3ZhciBnPVwiXCI7dmFyIGg9QShmLmRpc3BsYXlOYW1lKSxrPWYudGVuYW50SWQ/Zi50ZW5hbnRJZDpcInRvcC1sZXZlbC1wcm9qZWN0XCI7az1EKGspO2crPSc8YnV0dG9uIGNsYXNzPVwiZmlyZWJhc2V1aS10ZW5hbnQtYnV0dG9uIG1kbC1idXR0b24gbWRsLWpzLWJ1dHRvbiBtZGwtYnV0dG9uLS1yYWlzZWQgZmlyZWJhc2V1aS10ZW5hbnQtc2VsZWN0aW9uLScrXG51ZChrKSsnIGZpcmViYXNldWktaWQtdGVuYW50LXNlbGVjdGlvbi1idXR0b25cIicrKGYudGVuYW50SWQ/J2RhdGEtdGVuYW50LWlkPVwiJyt1ZChmLnRlbmFudElkKSsnXCInOlwiXCIpKydzdHlsZT1cImJhY2tncm91bmQtY29sb3I6Jyt1ZChEZChmLnRhKSkrJ1wiPjxzcGFuIGNsYXNzPVwiZmlyZWJhc2V1aS1pZHAtaWNvbi13cmFwcGVyXCI+PGltZyBjbGFzcz1cImZpcmViYXNldWktaWRwLWljb25cIiBhbHQ9XCJcIiBzcmM9XCInK3VkKHpkKGYuemEpKSsnXCI+PC9zcGFuPjxzcGFuIGNsYXNzPVwiZmlyZWJhc2V1aS1pZHAtdGV4dCBmaXJlYmFzZXVpLWlkcC10ZXh0LWxvbmdcIj4nO2YuVj9nKz1BKGYuVik6KGY9XCJTaWduIGluIHRvIFwiK0EoZi5kaXNwbGF5TmFtZSksZys9Zik7Zz1CKGcrKCc8L3NwYW4+PHNwYW4gY2xhc3M9XCJmaXJlYmFzZXVpLWlkcC10ZXh0IGZpcmViYXNldWktaWRwLXRleHQtc2hvcnRcIj4nK2grXCI8L3NwYW4+PC9idXR0b24+XCIpKTtkKz0nPGxpIGNsYXNzPVwiZmlyZWJhc2V1aS1saXN0LWl0ZW1cIj4nK1xuZytcIjwvbGk+XCJ9ZCs9JzwvdWw+PC9mb3JtPjwvZGl2PjxkaXYgY2xhc3M9XCJmaXJlYmFzZXVpLWNhcmQtZm9vdGVyIGZpcmViYXNldWktcHJvdmlkZXItc2lnbi1pbi1mb290ZXJcIj4nK2FrKGMpK1wiPC9kaXY+PC9kaXY+XCI7cmV0dXJuIEIoZCl9aGwuYT1cImZpcmViYXNldWkuYXV0aC5zb3kyLnBhZ2Uuc2VsZWN0VGVuYW50XCI7ZnVuY3Rpb24gaWwoYSxiLGMpe2E9JzxkaXYgY2xhc3M9XCJtZGwtY2FyZCBtZGwtc2hhZG93LS0yZHAgZmlyZWJhc2V1aS1jb250YWluZXIgZmlyZWJhc2V1aS1pZC1wYWdlLXByb3ZpZGVyLW1hdGNoLWJ5LWVtYWlsXCI+PGZvcm0gb25zdWJtaXQ9XCJyZXR1cm4gZmFsc2U7XCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1oZWFkZXJcIj48aDEgY2xhc3M9XCJmaXJlYmFzZXVpLXRpdGxlXCI+U2lnbiBpbjwvaDE+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1jb250ZW50XCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktcmVsYXRpdmUtd3JhcHBlclwiPicrXG5RaihudWxsKSsnPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1hY3Rpb25zXCI+PGRpdiBjbGFzcz1cImZpcmViYXNldWktZm9ybS1hY3Rpb25zXCI+JytSaihudWxsKSsnPC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cImZpcmViYXNldWktY2FyZC1mb290ZXJcIj4nK2FrKGMpK1wiPC9kaXY+PC9mb3JtPjwvZGl2PlwiO3JldHVybiBCKGEpfWlsLmE9XCJmaXJlYmFzZXVpLmF1dGguc295Mi5wYWdlLnByb3ZpZGVyTWF0Y2hCeUVtYWlsXCI7ZnVuY3Rpb24gamwoKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1zdWJtaXRcIil9ZnVuY3Rpb24ga2woKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1zZWNvbmRhcnktbGlua1wiKX1mdW5jdGlvbiBsbChhLGIpe08odGhpcyxqbC5jYWxsKHRoaXMpLGZ1bmN0aW9uKGQpe2EoZCl9KTt2YXIgYz1rbC5jYWxsKHRoaXMpO2MmJmImJk8odGhpcyxjLGZ1bmN0aW9uKGQpe2IoZCl9KX1mdW5jdGlvbiBtbCgpe3JldHVybiBNKHRoaXMsXG5cImZpcmViYXNldWktaWQtcGFzc3dvcmRcIil9ZnVuY3Rpb24gbmwoKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1wYXNzd29yZC1lcnJvclwiKX1mdW5jdGlvbiBvbCgpe3ZhciBhPW1sLmNhbGwodGhpcyksYj1ubC5jYWxsKHRoaXMpO0pqKHRoaXMsYSxmdW5jdGlvbigpe1BqKGIpJiYoTihhLCEwKSxOaihiKSl9KX1mdW5jdGlvbiBwbCgpe3ZhciBhPW1sLmNhbGwodGhpcyk7dmFyIGI9bmwuY2FsbCh0aGlzKTtXaShhKT8oTihhLCEwKSxOaihiKSxiPSEwKTooTihhLCExKSxPaihiLEMoXCJFbnRlciB5b3VyIHBhc3N3b3JkXCIpLnRvU3RyaW5nKCkpLGI9ITEpO3JldHVybiBiP1dpKGEpOm51bGx9ZnVuY3Rpb24gcWwoYSxiLGMsZCxlLGYpe1AuY2FsbCh0aGlzLEprLHtlbWFpbDphfSxmLFwicGFzc3dvcmRMaW5raW5nXCIse0Y6ZCxEOmV9KTt0aGlzLnc9Yjt0aGlzLkg9Y31tKHFsLFApO3FsLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dGhpcy5QKCk7dGhpcy5NKHRoaXMudyx0aGlzLkgpO1xudmsodGhpcyx0aGlzLmkoKSx0aGlzLncpO3RoaXMuaSgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtxbC5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMudz1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07cWwucHJvdG90eXBlLmo9ZnVuY3Rpb24oKXtyZXR1cm4gV2koTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1lbWFpbFwiKSl9O3UocWwucHJvdG90eXBlLHtpOm1sLEI6bmwsUDpvbCx1OnBsLGVhOmpsLGJhOmtsLE06bGx9KTt2YXIgcmw9L15bK2EtekEtWjAtOV8uISMkJSYnKlxcLz0/XmB7fH1+LV0rQChbYS16QS1aMC05LV0rXFwuKStbYS16QS1aMC05XXsyLDYzfSQvO2Z1bmN0aW9uIHNsKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtZW1haWxcIil9ZnVuY3Rpb24gdGwoKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1lbWFpbC1lcnJvclwiKX1mdW5jdGlvbiB1bChhKXt2YXIgYj1zbC5jYWxsKHRoaXMpLGM9dGwuY2FsbCh0aGlzKTtKaih0aGlzLFxuYixmdW5jdGlvbigpe1BqKGMpJiYoTihiLCEwKSxOaihjKSl9KTthJiZLaih0aGlzLGIsZnVuY3Rpb24oKXthKCl9KX1mdW5jdGlvbiB2bCgpe3JldHVybiBVYShXaShzbC5jYWxsKHRoaXMpKXx8XCJcIil9ZnVuY3Rpb24gd2woKXt2YXIgYT1zbC5jYWxsKHRoaXMpO3ZhciBiPXRsLmNhbGwodGhpcyk7dmFyIGM9V2koYSl8fFwiXCI7Yz9ybC50ZXN0KGMpPyhOKGEsITApLE5qKGIpLGI9ITApOihOKGEsITEpLE9qKGIsQyhcIlRoYXQgZW1haWwgYWRkcmVzcyBpc24ndCBjb3JyZWN0XCIpLnRvU3RyaW5nKCkpLGI9ITEpOihOKGEsITEpLE9qKGIsQyhcIkVudGVyIHlvdXIgZW1haWwgYWRkcmVzcyB0byBjb250aW51ZVwiKS50b1N0cmluZygpKSxiPSExKTtyZXR1cm4gYj9VYShXaShhKSk6bnVsbH1mdW5jdGlvbiB4bChhLGIsYyxkLGUsZixnKXtQLmNhbGwodGhpcyx4ayx7ZW1haWw6YyxpYTohIWZ9LGcsXCJwYXNzd29yZFNpZ25JblwiLHtGOmQsRDplfSk7dGhpcy53PWE7dGhpcy5IPWJ9bSh4bCxQKTtcbnhsLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dGhpcy5QKCk7dGhpcy5lYSgpO3RoaXMuYmEodGhpcy53LHRoaXMuSCk7dWsodGhpcyx0aGlzLmwoKSx0aGlzLmkoKSk7dmsodGhpcyx0aGlzLmkoKSx0aGlzLncpO1dpKHRoaXMubCgpKT90aGlzLmkoKS5mb2N1cygpOnRoaXMubCgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTt4bC5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMuSD10aGlzLnc9bnVsbDtQLnByb3RvdHlwZS5vLmNhbGwodGhpcyl9O3UoeGwucHJvdG90eXBlLHtsOnNsLFU6dGwsUDp1bCxNOnZsLGo6d2wsaTptbCxCOm5sLGVhOm9sLHU6cGwsdWE6amwscGE6a2wsYmE6bGx9KTtmdW5jdGlvbiBSKGEsYixjLGQsZSxmKXtQLmNhbGwodGhpcyxhLGIsZCxlfHxcIm5vdGljZVwiLGYpO3RoaXMuaT1jfHxudWxsfXcoUixQKTtSLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dGhpcy5pJiYodGhpcy51KHRoaXMuaSksdGhpcy5sKCkuZm9jdXMoKSk7Ui5LLnYuY2FsbCh0aGlzKX07XG5SLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5pPW51bGw7Ui5LLm8uY2FsbCh0aGlzKX07dShSLnByb3RvdHlwZSx7bDpqbCx3OmtsLHU6bGx9KTtmdW5jdGlvbiB5bChhLGIsYyxkLGUpe1IuY2FsbCh0aGlzLEFrLHtlbWFpbDphLEc6ISFifSxiLGUsXCJwYXNzd29yZFJlY292ZXJ5RW1haWxTZW50XCIse0Y6YyxEOmR9KX13KHlsLFIpO2Z1bmN0aW9uIHpsKGEsYil7Ui5jYWxsKHRoaXMsVWsse0c6ISFhfSxhLGIsXCJlbWFpbFZlcmlmaWNhdGlvblN1Y2Nlc3NcIil9dyh6bCxSKTtmdW5jdGlvbiBBbChhLGIpe1IuY2FsbCh0aGlzLFZrLHtHOiEhYX0sYSxiLFwiZW1haWxWZXJpZmljYXRpb25GYWlsdXJlXCIpfXcoQWwsUik7ZnVuY3Rpb24gQmwoYSxiLGMpe1IuY2FsbCh0aGlzLFhrLHtlbWFpbDphLEc6ISFifSxiLGMsXCJ2ZXJpZnlBbmRDaGFuZ2VFbWFpbFN1Y2Nlc3NcIil9dyhCbCxSKTtmdW5jdGlvbiBDbChhLGIpe1IuY2FsbCh0aGlzLFlrLHtHOiEhYX0sYSxiLFwidmVyaWZ5QW5kQ2hhbmdlRW1haWxGYWlsdXJlXCIpfVxudyhDbCxSKTtmdW5jdGlvbiBEbChhLGIpe1IuY2FsbCh0aGlzLCRrLHtHOiEhYX0sYSxiLFwicmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb25GYWlsdXJlXCIpfXcoRGwsUik7ZnVuY3Rpb24gRWwoYSl7Ui5jYWxsKHRoaXMsZ2wsdm9pZCAwLHZvaWQgMCxhLFwic2lnbk91dFwiKX13KEVsLFIpO2Z1bmN0aW9uIEZsKGEsYil7Ui5jYWxsKHRoaXMsUWsse0c6ISFhfSxhLGIsXCJwYXNzd29yZFJlc2V0U3VjY2Vzc1wiKX13KEZsLFIpO2Z1bmN0aW9uIEdsKGEsYil7Ui5jYWxsKHRoaXMsUmsse0c6ISFhfSxhLGIsXCJwYXNzd29yZFJlc2V0RmFpbHVyZVwiKX13KEdsLFIpO2Z1bmN0aW9uIEhsKGEsYil7Ui5jYWxsKHRoaXMsVGsse0c6ISFhfSxhLGIsXCJlbWFpbENoYW5nZVJldm9rZUZhaWx1cmVcIil9dyhIbCxSKTtmdW5jdGlvbiBJbChhLGIsYyl7Ui5jYWxsKHRoaXMsYWwse2Vycm9yTWVzc2FnZTphLHpiOiEhYn0sYixjLFwicmVjb3ZlcmFibGVFcnJvclwiKX13KElsLFIpO2Z1bmN0aW9uIEpsKGEsYil7Ui5jYWxsKHRoaXMsXG5ibCx7ZXJyb3JNZXNzYWdlOmF9LHZvaWQgMCxiLFwidW5yZWNvdmVyYWJsZUVycm9yXCIpfXcoSmwsUik7ZnVuY3Rpb24gS2woYSl7aWYoXCJhdXRoL2ludmFsaWQtY3JlZGVudGlhbFwiPT09YS5jb2RlJiZhLm1lc3NhZ2UmJi0xIT09YS5tZXNzYWdlLmluZGV4T2YoXCJlcnJvcj1jb25zZW50X3JlcXVpcmVkXCIpKXJldHVybntjb2RlOlwiYXV0aC91c2VyLWNhbmNlbGxlZFwifTtpZihhLm1lc3NhZ2UmJi0xIT09YS5tZXNzYWdlLmluZGV4T2YoXCJIVFRQIENsb3VkIEZ1bmN0aW9uIHJldHVybmVkIGFuIGVycm9yOlwiKSl7dmFyIGI9SlNPTi5wYXJzZShhLm1lc3NhZ2Uuc3Vic3RyaW5nKGEubWVzc2FnZS5pbmRleE9mKFwie1wiKSxhLm1lc3NhZ2UubGFzdEluZGV4T2YoXCJ9XCIpKzEpKTtyZXR1cm57Y29kZTphLmNvZGUsbWVzc2FnZTpiJiZiLmVycm9yJiZiLmVycm9yLm1lc3NhZ2V8fGEubWVzc2FnZX19cmV0dXJuIGF9ZnVuY3Rpb24gTGwoYSxiLGMsZCl7ZnVuY3Rpb24gZShnKXtpZighZy5uYW1lfHxcblwiY2FuY2VsXCIhPWcubmFtZSl7YTp7dmFyIGg9Zy5tZXNzYWdlO3RyeXt2YXIgaz0oKEpTT04ucGFyc2UoaCkuZXJyb3J8fHt9KS5tZXNzYWdlfHxcIlwiKS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9pbnZhbGlkLisoYWNjZXNzfGlkKV90b2tlbi8pO2lmKGsmJmsubGVuZ3RoKXt2YXIgcD0hMDticmVhayBhfX1jYXRjaCh0KXt9cD0hMX1pZihwKWc9UShiKSxiLm0oKSxTKGEsZyx2b2lkIDAsQyhcIllvdXIgc2lnbi1pbiBzZXNzaW9uIGhhcyBleHBpcmVkLiBQbGVhc2UgdHJ5IGFnYWluLlwiKS50b1N0cmluZygpKTtlbHNle3A9ZyYmZy5tZXNzYWdlfHxcIlwiO2lmKGcuY29kZSl7aWYoXCJhdXRoL2VtYWlsLWFscmVhZHktaW4tdXNlXCI9PWcuY29kZXx8XCJhdXRoL2NyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2VcIj09Zy5jb2RlKXJldHVybjtwPVQoZyl9Yi5hKHApfX19TWwoYSk7aWYoZClyZXR1cm4gTmwoYSxjKSxGKCk7aWYoIWMuY3JlZGVudGlhbCl0aHJvdyBFcnJvcihcIk5vIGNyZWRlbnRpYWwgZm91bmQhXCIpO1xuaWYoIVUoYSkuY3VycmVudFVzZXImJiFjLnVzZXIpdGhyb3cgRXJyb3IoXCJVc2VyIG5vdCBsb2dnZWQgaW4uXCIpO3RyeXt2YXIgZj1PbChhLGMpfWNhdGNoKGcpe3JldHVybiBvZyhnLmNvZGV8fGcubWVzc2FnZSxnKSxiLmEoZy5jb2RlfHxnLm1lc3NhZ2UpLEYoKX1jPWYudGhlbihmdW5jdGlvbihnKXtObChhLGcpfSxlKS50aGVuKHZvaWQgMCxlKTtWKGEsZik7cmV0dXJuIEYoYyl9ZnVuY3Rpb24gTmwoYSxiKXtpZighYi51c2VyKXRocm93IEVycm9yKFwiTm8gdXNlciBmb3VuZFwiKTt2YXIgYz1NaShXKGEpKTtLaShXKGEpKSYmYyYmdGcoXCJCb3RoIHNpZ25JblN1Y2Nlc3MgYW5kIHNpZ25JblN1Y2Nlc3NXaXRoQXV0aFJlc3VsdCBjYWxsYmFja3MgYXJlIHByb3ZpZGVkLiBPbmx5IHNpZ25JblN1Y2Nlc3NXaXRoQXV0aFJlc3VsdCBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQuXCIpO2lmKGMpe2M9TWkoVyhhKSk7dmFyIGQ9eWgoWChhKSl8fHZvaWQgMDt3aChzaCxYKGEpKTt2YXIgZT0hMTtcbmlmKHFmKCkpe2lmKCFjfHxjKGIsZCkpZT0hMCxOYyh3aW5kb3cub3BlbmVyLmxvY2F0aW9uLFBsKGEsZCkpO2N8fHdpbmRvdy5jbG9zZSgpfWVsc2UgaWYoIWN8fGMoYixkKSllPSEwLE5jKHdpbmRvdy5sb2NhdGlvbixQbChhLGQpKTtlfHxhLnJlc2V0KCl9ZWxzZXtjPWIudXNlcjtiPWIuY3JlZGVudGlhbDtkPUtpKFcoYSkpO2U9eWgoWChhKSl8fHZvaWQgMDt3aChzaCxYKGEpKTt2YXIgZj0hMTtpZihxZigpKXtpZighZHx8ZChjLGIsZSkpZj0hMCxOYyh3aW5kb3cub3BlbmVyLmxvY2F0aW9uLFBsKGEsZSkpO2R8fHdpbmRvdy5jbG9zZSgpfWVsc2UgaWYoIWR8fGQoYyxiLGUpKWY9ITAsTmMod2luZG93LmxvY2F0aW9uLFBsKGEsZSkpO2Z8fGEucmVzZXQoKX19ZnVuY3Rpb24gUGwoYSxiKXthPWJ8fFcoYSkuYS5nZXQoXCJzaWduSW5TdWNjZXNzVXJsXCIpO2lmKCFhKXRocm93IEVycm9yKFwiTm8gcmVkaXJlY3QgVVJMIGhhcyBiZWVuIGZvdW5kLiBZb3UgbXVzdCBlaXRoZXIgc3BlY2lmeSBhIHNpZ25JblN1Y2Nlc3NVcmwgaW4gdGhlIGNvbmZpZ3VyYXRpb24sIHBhc3MgaW4gYSByZWRpcmVjdCBVUkwgdG8gdGhlIHdpZGdldCBVUkwsIG9yIHJldHVybiBmYWxzZSBmcm9tIHRoZSBjYWxsYmFjay5cIik7XG5yZXR1cm4gYX1mdW5jdGlvbiBUKGEpe3ZhciBiPXtjb2RlOmEuY29kZX07Yj1ifHx7fTt2YXIgYz1cIlwiO3N3aXRjaChiLmNvZGUpe2Nhc2UgXCJhdXRoL2VtYWlsLWFscmVhZHktaW4tdXNlXCI6Yys9XCJUaGUgZW1haWwgYWRkcmVzcyBpcyBhbHJlYWR5IHVzZWQgYnkgYW5vdGhlciBhY2NvdW50XCI7YnJlYWs7Y2FzZSBcImF1dGgvcmVxdWlyZXMtcmVjZW50LWxvZ2luXCI6Yys9TWQoKTticmVhaztjYXNlIFwiYXV0aC90b28tbWFueS1yZXF1ZXN0c1wiOmMrPVwiWW91IGhhdmUgZW50ZXJlZCBhbiBpbmNvcnJlY3QgcGFzc3dvcmQgdG9vIG1hbnkgdGltZXMuIFBsZWFzZSB0cnkgYWdhaW4gaW4gYSBmZXcgbWludXRlcy5cIjticmVhaztjYXNlIFwiYXV0aC91c2VyLWNhbmNlbGxlZFwiOmMrPVwiUGxlYXNlIGF1dGhvcml6ZSB0aGUgcmVxdWlyZWQgcGVybWlzc2lvbnMgdG8gc2lnbiBpbiB0byB0aGUgYXBwbGljYXRpb25cIjticmVhaztjYXNlIFwiYXV0aC91c2VyLW5vdC1mb3VuZFwiOmMrPVwiVGhhdCBlbWFpbCBhZGRyZXNzIGRvZXNuJ3QgbWF0Y2ggYW4gZXhpc3RpbmcgYWNjb3VudFwiO1xuYnJlYWs7Y2FzZSBcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCI6Yys9TWQoKTticmVhaztjYXNlIFwiYXV0aC93ZWFrLXBhc3N3b3JkXCI6Yys9XCJTdHJvbmcgcGFzc3dvcmRzIGhhdmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXJzIGFuZCBhIG1peCBvZiBsZXR0ZXJzIGFuZCBudW1iZXJzXCI7YnJlYWs7Y2FzZSBcImF1dGgvd3JvbmctcGFzc3dvcmRcIjpjKz1cIlRoZSBlbWFpbCBhbmQgcGFzc3dvcmQgeW91IGVudGVyZWQgZG9uJ3QgbWF0Y2hcIjticmVhaztjYXNlIFwiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI6Yys9XCJBIG5ldHdvcmsgZXJyb3IgaGFzIG9jY3VycmVkXCI7YnJlYWs7Y2FzZSBcImF1dGgvaW52YWxpZC1waG9uZS1udW1iZXJcIjpjKz1IZCgpO2JyZWFrO2Nhc2UgXCJhdXRoL2ludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGVcIjpjKz1DKFwiV3JvbmcgY29kZS4gVHJ5IGFnYWluLlwiKTticmVhaztjYXNlIFwiYXV0aC9jb2RlLWV4cGlyZWRcIjpjKz1cIlRoaXMgY29kZSBpcyBubyBsb25nZXIgdmFsaWRcIjtcbmJyZWFrO2Nhc2UgXCJhdXRoL2V4cGlyZWQtYWN0aW9uLWNvZGVcIjpjKz1cIlRoaXMgY29kZSBoYXMgZXhwaXJlZC5cIjticmVhaztjYXNlIFwiYXV0aC9pbnZhbGlkLWFjdGlvbi1jb2RlXCI6Yys9XCJUaGUgYWN0aW9uIGNvZGUgaXMgaW52YWxpZC4gVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBjb2RlIGlzIG1hbGZvcm1lZCwgZXhwaXJlZCwgb3IgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwifWlmKGI9QyhjKS50b1N0cmluZygpKXJldHVybiBiO3RyeXtyZXR1cm4gSlNPTi5wYXJzZShhLm1lc3NhZ2UpLG9nKFwiSW50ZXJuYWwgZXJyb3I6IFwiK2EubWVzc2FnZSx2b2lkIDApLEpkKCkudG9TdHJpbmcoKX1jYXRjaChkKXtyZXR1cm4gYS5tZXNzYWdlfX1mdW5jdGlvbiBRbChhLGIsYyl7dmFyIGQ9YWlbYl0mJmZpcmViYXNlLmF1dGhbYWlbYl1dP25ldyBmaXJlYmFzZS5hdXRoW2FpW2JdXTowPT1iLmluZGV4T2YoXCJzYW1sLlwiKT9uZXcgZmlyZWJhc2UuYXV0aC5TQU1MQXV0aFByb3ZpZGVyKGIpOm5ldyBmaXJlYmFzZS5hdXRoLk9BdXRoUHJvdmlkZXIoYik7XG5pZighZCl0aHJvdyBFcnJvcihcIkludmFsaWQgRmlyZWJhc2UgQXV0aCBwcm92aWRlciFcIik7dmFyIGU9d2koVyhhKSxiKTtpZihkLmFkZFNjb3BlKWZvcih2YXIgZj0wO2Y8ZS5sZW5ndGg7ZisrKWQuYWRkU2NvcGUoZVtmXSk7ZT14aShXKGEpLGIpfHx7fTtjJiYoYj09ZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQ/YT1cImxvZ2luX2hpbnRcIjpiPT1maXJlYmFzZS5hdXRoLkdpdGh1YkF1dGhQcm92aWRlci5QUk9WSURFUl9JRD9hPVwibG9naW5cIjphPShhPWlpKFcoYSksYikpJiZhLk9iLGEmJihlW2FdPWMpKTtkLnNldEN1c3RvbVBhcmFtZXRlcnMmJmQuc2V0Q3VzdG9tUGFyYW1ldGVycyhlKTtyZXR1cm4gZH1mdW5jdGlvbiBSbChhLGIsYyxkKXtmdW5jdGlvbiBlKCl7RGgobmV3IERnKGEuaC50ZW5hbnRJZHx8bnVsbCksWChhKSk7VihhLGIuSShyKGEuZGMsYSksW2tdLGZ1bmN0aW9uKCl7aWYoXCJmaWxlOlwiPT09KHdpbmRvdy5sb2NhdGlvbiYmd2luZG93LmxvY2F0aW9uLnByb3RvY29sKSlyZXR1cm4gVihhLFxuU2woYSkudGhlbihmdW5jdGlvbihwKXtiLm0oKTt3aChyaCxYKGEpKTtMKFwiY2FsbGJhY2tcIixhLGgsRihwKSl9LGYpKX0sZykpfWZ1bmN0aW9uIGYocCl7d2gocmgsWChhKSk7aWYoIXAubmFtZXx8XCJjYW5jZWxcIiE9cC5uYW1lKXN3aXRjaChwPUtsKHApLHAuY29kZSl7Y2FzZSBcImF1dGgvcG9wdXAtYmxvY2tlZFwiOmUoKTticmVhaztjYXNlIFwiYXV0aC9wb3B1cC1jbG9zZWQtYnktdXNlclwiOmNhc2UgXCJhdXRoL2NhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0XCI6YnJlYWs7Y2FzZSBcImF1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiOmJyZWFrO2Nhc2UgXCJhdXRoL25ldHdvcmstcmVxdWVzdC1mYWlsZWRcIjpjYXNlIFwiYXV0aC90b28tbWFueS1yZXF1ZXN0c1wiOmNhc2UgXCJhdXRoL3VzZXItY2FuY2VsbGVkXCI6Yi5hKFQocCkpO2JyZWFrO2Nhc2UgXCJhdXRoL2FkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uXCI6Yi5tKCk7cGkoVyhhKSk/TChcImhhbmRsZVVuYXV0aG9yaXplZFVzZXJcIixhLGgsbnVsbCxcbmMpOkwoXCJjYWxsYmFja1wiLGEsaCxkZihwKSk7YnJlYWs7ZGVmYXVsdDpiLm0oKSxMKFwiY2FsbGJhY2tcIixhLGgsZGYocCkpfX1mdW5jdGlvbiBnKHApe3doKHJoLFgoYSkpO3AubmFtZSYmXCJjYW5jZWxcIj09cC5uYW1lfHwob2coXCJzaWduSW5XaXRoUmVkaXJlY3Q6IFwiK3AuY29kZSx2b2lkIDApLHA9VChwKSxcImJsYW5rXCI9PWIuR2EmJkdpKFcoYSkpPyhiLm0oKSxMKFwicHJvdmlkZXJTaWduSW5cIixhLGgscCkpOmIuYShwKSl9dmFyIGg9UShiKSxrPVFsKGEsYyxkKTtIaShXKGEpKT09SWk/ZSgpOlYoYSxUbChhLGspLnRoZW4oZnVuY3Rpb24ocCl7Yi5tKCk7TChcImNhbGxiYWNrXCIsYSxoLEYocCkpfSxmKSl9ZnVuY3Rpb24gVWwoYSxiKXtWKGEsYi5JKHIoYS4kYixhKSxbXSxmdW5jdGlvbihjKXtiLm0oKTtyZXR1cm4gTGwoYSxiLGMsITApfSxmdW5jdGlvbihjKXtjLm5hbWUmJlwiY2FuY2VsXCI9PWMubmFtZXx8KG9nKFwiQ29udGludWVBc0d1ZXN0OiBcIitjLmNvZGUsdm9pZCAwKSxjPVQoYyksXG5iLmEoYykpfSkpfWZ1bmN0aW9uIFZsKGEsYixjKXtmdW5jdGlvbiBkKGYpe3ZhciBnPSExO2Y9Yi5JKHIoYS5hYyxhKSxbZl0sZnVuY3Rpb24oaCl7dmFyIGs9UShiKTtiLm0oKTtMKFwiY2FsbGJhY2tcIixhLGssRihoKSk7Zz0hMH0sZnVuY3Rpb24oaCl7aWYoIWgubmFtZXx8XCJjYW5jZWxcIiE9aC5uYW1lKWlmKCFofHxcImF1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiIT1oLmNvZGUpaWYoaCYmXCJhdXRoL2VtYWlsLWFscmVhZHktaW4tdXNlXCI9PWguY29kZSYmaC5lbWFpbCYmaC5jcmVkZW50aWFsKXt2YXIgaz1RKGIpO2IubSgpO0woXCJjYWxsYmFja1wiLGEsayxkZihoKSl9ZWxzZSBoJiZcImF1dGgvYWRtaW4tcmVzdHJpY3RlZC1vcGVyYXRpb25cIj09aC5jb2RlJiZwaShXKGEpKT8oaD1RKGIpLGIubSgpLEwoXCJoYW5kbGVVbmF1dGhvcml6ZWRVc2VyXCIsYSxoLG51bGwsZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpKTooaD1UKGgpLGIuYShoKSl9KTtcblYoYSxmKTtyZXR1cm4gZi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGd9LGZ1bmN0aW9uKCl7cmV0dXJuITF9KX1pZihjJiZjLmNyZWRlbnRpYWwmJmMuY2xpZW50SWQ9PT1saShXKGEpKSl7aWYod2koVyhhKSxmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkubGVuZ3RoKXt0cnl7dmFyIGU9SlNPTi5wYXJzZShhdG9iKGMuY3JlZGVudGlhbC5zcGxpdChcIi5cIilbMV0pKS5lbWFpbH1jYXRjaChmKXt9UmwoYSxiLGZpcmViYXNlLmF1dGguR29vZ2xlQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lELGUpO3JldHVybiBGKCEwKX1yZXR1cm4gZChmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5jcmVkZW50aWFsKGMuY3JlZGVudGlhbCkpfWMmJmIuYShDKFwiVGhlIHNlbGVjdGVkIGNyZWRlbnRpYWwgZm9yIHRoZSBhdXRoZW50aWNhdGlvbiBwcm92aWRlciBpcyBub3Qgc3VwcG9ydGVkIVwiKS50b1N0cmluZygpKTtyZXR1cm4gRighMSl9ZnVuY3Rpb24gV2woYSxcbmIpe3ZhciBjPWIuaigpLGQ9Yi51KCk7aWYoYylpZihkKXt2YXIgZT1maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLmNyZWRlbnRpYWwoYyxkKTtWKGEsYi5JKHIoYS5iYyxhKSxbYyxkXSxmdW5jdGlvbihmKXtyZXR1cm4gTGwoYSxiLHt1c2VyOmYudXNlcixjcmVkZW50aWFsOmUsb3BlcmF0aW9uVHlwZTpmLm9wZXJhdGlvblR5cGUsYWRkaXRpb25hbFVzZXJJbmZvOmYuYWRkaXRpb25hbFVzZXJJbmZvfSl9LGZ1bmN0aW9uKGYpe2lmKCFmLm5hbWV8fFwiY2FuY2VsXCIhPWYubmFtZSlzd2l0Y2goZi5jb2RlKXtjYXNlIFwiYXV0aC9lbWFpbC1hbHJlYWR5LWluLXVzZVwiOmJyZWFrO2Nhc2UgXCJhdXRoL2VtYWlsLWV4aXN0c1wiOk4oYi5sKCksITEpO09qKGIuVSgpLFQoZikpO2JyZWFrO2Nhc2UgXCJhdXRoL3Rvby1tYW55LXJlcXVlc3RzXCI6Y2FzZSBcImF1dGgvd3JvbmctcGFzc3dvcmRcIjpOKGIuaSgpLCExKTtPaihiLkIoKSxUKGYpKTticmVhaztkZWZhdWx0Om9nKFwidmVyaWZ5UGFzc3dvcmQ6IFwiK1xuZi5tZXNzYWdlLHZvaWQgMCksYi5hKFQoZikpfX0pKX1lbHNlIGIuaSgpLmZvY3VzKCk7ZWxzZSBiLmwoKS5mb2N1cygpfWZ1bmN0aW9uIFhsKGEpe2E9aGkoVyhhKSk7cmV0dXJuIDE9PWEubGVuZ3RoJiZhWzBdPT1maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEfWZ1bmN0aW9uIFlsKGEpe2E9aGkoVyhhKSk7cmV0dXJuIDE9PWEubGVuZ3RoJiZhWzBdPT1maXJlYmFzZS5hdXRoLlBob25lQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEfWZ1bmN0aW9uIFMoYSxiLGMsZCl7WGwoYSk/ZD9MKFwic2lnbkluXCIsYSxiLGMsZCk6WmwoYSxiLGMpOmEmJllsKGEpJiYhZD9MKFwicGhvbmVTaWduSW5TdGFydFwiLGEsYik6YSYmR2koVyhhKSkmJiFkP0woXCJmZWRlcmF0ZWRSZWRpcmVjdFwiLGEsYixjKTpMKFwicHJvdmlkZXJTaWduSW5cIixhLGIsZCxjKX1mdW5jdGlvbiAkbChhLGIsYyxkKXt2YXIgZT1RKGIpO1YoYSxiLkkocihVKGEpLmZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsLFxuVShhKSksW2NdLGZ1bmN0aW9uKGYpe2IubSgpO2FtKGEsZSxmLGMsZCl9LGZ1bmN0aW9uKGYpe2Y9VChmKTtiLmEoZil9KSl9ZnVuY3Rpb24gYW0oYSxiLGMsZCxlLGYpe2MubGVuZ3RofHxEaShXKGEpKSYmIURpKFcoYSkpP01hKGMsZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5FTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRCk/TChcInBhc3N3b3JkU2lnbkluXCIsYSxiLGQsZik6MT09Yy5sZW5ndGgmJmNbMF09PT1maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q/RGkoVyhhKSk/TChcInNlbmRFbWFpbExpbmtGb3JTaWduSW5cIixhLGIsZCxmdW5jdGlvbigpe0woXCJzaWduSW5cIixhLGIpfSk6TChcInVuc3VwcG9ydGVkUHJvdmlkZXJcIixhLGIsZCk6KGM9WmgoYyxoaShXKGEpKSkpPyhCaChuZXcgQWcoZCksWChhKSksTChcImZlZGVyYXRlZFNpZ25JblwiLGEsYixkLGMsZSkpOkwoXCJ1bnN1cHBvcnRlZFByb3ZpZGVyXCIsYSxiLFxuZCk6b2koVyhhKSk/TChcImhhbmRsZVVuYXV0aG9yaXplZFVzZXJcIixhLGIsZCxmaXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEKTpEaShXKGEpKT9MKFwic2VuZEVtYWlsTGlua0ZvclNpZ25JblwiLGEsYixkLGZ1bmN0aW9uKCl7TChcInNpZ25JblwiLGEsYil9KTpMKFwicGFzc3dvcmRTaWduVXBcIixhLGIsZCx2b2lkIDAsdm9pZCAwLGYpfWZ1bmN0aW9uIGJtKGEsYixjLGQsZSxmKXt2YXIgZz1RKGIpO1YoYSxiLkkocihhLkliLGEpLFtjLGZdLGZ1bmN0aW9uKCl7Yi5tKCk7TChcImVtYWlsTGlua1NpZ25JblNlbnRcIixhLGcsYyxkLGYpfSxlKSl9ZnVuY3Rpb24gWmwoYSxiLGMpe2M/TChcInByZWZpbGxlZEVtYWlsU2lnbkluXCIsYSxiLGMpOkwoXCJzaWduSW5cIixhLGIpfWZ1bmN0aW9uIGNtKCl7cmV0dXJuIHRiKHRmKCksXCJvb2JDb2RlXCIpfWZ1bmN0aW9uIGRtKCl7dmFyIGE9dGIodGYoKSxcImNvbnRpbnVlVXJsXCIpO3JldHVybiBhP2Z1bmN0aW9uKCl7TmMod2luZG93LmxvY2F0aW9uLFxuYSl9Om51bGx9ZnVuY3Rpb24gZW0oYSxiKXtQLmNhbGwodGhpcyxJayx2b2lkIDAsYixcImFub255bW91c1VzZXJNaXNtYXRjaFwiKTt0aGlzLmk9YX1tKGVtLFApO2VtLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztPKHRoaXMsdGhpcy5sKCksZnVuY3Rpb24oKXthLmkoKX0pO3RoaXMubCgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtlbS5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMuaT1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07dShlbS5wcm90b3R5cGUse2w6a2x9KTtLLmFub255bW91c1VzZXJNaXNtYXRjaD1mdW5jdGlvbihhLGIpe3ZhciBjPW5ldyBlbShmdW5jdGlvbigpe2MubSgpO1MoYSxiKX0pO2MucmVuZGVyKGIpO1koYSxjKX07ZnVuY3Rpb24gZm0oYSl7UC5jYWxsKHRoaXMsQmssdm9pZCAwLGEsXCJjYWxsYmFja1wiKX1tKGZtLFApO2ZtLnByb3RvdHlwZS5JPWZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBhLmFwcGx5KG51bGwsXG5iKS50aGVuKGMsZCl9O2Z1bmN0aW9uIGdtKGEsYixjKXtpZihjLnVzZXIpe3ZhciBkPXt1c2VyOmMudXNlcixjcmVkZW50aWFsOmMuY3JlZGVudGlhbCxvcGVyYXRpb25UeXBlOmMub3BlcmF0aW9uVHlwZSxhZGRpdGlvbmFsVXNlckluZm86Yy5hZGRpdGlvbmFsVXNlckluZm99LGU9emgoWChhKSksZj1lJiZlLmc7aWYoZiYmIWhtKGMudXNlcixmKSlpbShhLGIsZCk7ZWxzZXt2YXIgZz1lJiZlLmE7Zz9WKGEsYy51c2VyLmxpbmtXaXRoQ3JlZGVudGlhbChnKS50aGVuKGZ1bmN0aW9uKGgpe2Q9e3VzZXI6aC51c2VyLGNyZWRlbnRpYWw6ZyxvcGVyYXRpb25UeXBlOmgub3BlcmF0aW9uVHlwZSxhZGRpdGlvbmFsVXNlckluZm86aC5hZGRpdGlvbmFsVXNlckluZm99O2ptKGEsYixkKX0sZnVuY3Rpb24oaCl7a20oYSxiLGgpfSkpOmptKGEsYixkKX19ZWxzZSBjPVEoYiksYi5tKCksQWgoWChhKSksUyhhLGMpfWZ1bmN0aW9uIGptKGEsYixjKXtBaChYKGEpKTtMbChhLGIsYyl9ZnVuY3Rpb24ga20oYSxcbmIsYyl7dmFyIGQ9UShiKTtBaChYKGEpKTtjPVQoYyk7Yi5tKCk7UyhhLGQsdm9pZCAwLGMpfWZ1bmN0aW9uIGxtKGEsYixjLGQpe3ZhciBlPVEoYik7VihhLFUoYSkuZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwoYykudGhlbihmdW5jdGlvbihmKXtiLm0oKTtmLmxlbmd0aD9NYShmLGZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuRU1BSUxfUEFTU1dPUkRfU0lHTl9JTl9NRVRIT0QpP0woXCJwYXNzd29yZExpbmtpbmdcIixhLGUsYyk6MT09Zi5sZW5ndGgmJmZbMF09PT1maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q/TChcImVtYWlsTGlua1NpZ25JbkxpbmtpbmdcIixhLGUsYyk6KGY9WmgoZixoaShXKGEpKSkpP0woXCJmZWRlcmF0ZWRMaW5raW5nXCIsYSxlLGMsZixkKTooQWgoWChhKSksTChcInVuc3VwcG9ydGVkUHJvdmlkZXJcIixhLGUsYykpOihBaChYKGEpKSxMKFwicGFzc3dvcmRSZWNvdmVyeVwiLGEsZSxjLCExLEtkKCkudG9TdHJpbmcoKSkpfSxcbmZ1bmN0aW9uKGYpe2ttKGEsYixmKX0pKX1mdW5jdGlvbiBpbShhLGIsYyl7dmFyIGQ9UShiKTtWKGEsbW0oYSkudGhlbihmdW5jdGlvbigpe2IubSgpO0woXCJlbWFpbE1pc21hdGNoXCIsYSxkLGMpfSxmdW5jdGlvbihlKXtlLm5hbWUmJlwiY2FuY2VsXCI9PWUubmFtZXx8KGU9VChlLmNvZGUpLGIuYShlKSl9KSl9ZnVuY3Rpb24gaG0oYSxiKXtpZihiPT1hLmVtYWlsKXJldHVybiEwO2lmKGEucHJvdmlkZXJEYXRhKWZvcih2YXIgYz0wO2M8YS5wcm92aWRlckRhdGEubGVuZ3RoO2MrKylpZihiPT1hLnByb3ZpZGVyRGF0YVtjXS5lbWFpbClyZXR1cm4hMDtyZXR1cm4hMX1LLmNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uZXcgZm07ZC5yZW5kZXIoYik7WShhLGQpO2M9Y3x8U2woYSk7VihhLGMudGhlbihmdW5jdGlvbihlKXtnbShhLGQsZSl9LGZ1bmN0aW9uKGUpe2lmKChlPUtsKGUpKSYmKFwiYXV0aC9hY2NvdW50LWV4aXN0cy13aXRoLWRpZmZlcmVudC1jcmVkZW50aWFsXCI9PVxuZS5jb2RlfHxcImF1dGgvZW1haWwtYWxyZWFkeS1pbi11c2VcIj09ZS5jb2RlKSYmZS5lbWFpbCYmZS5jcmVkZW50aWFsKUJoKG5ldyBBZyhlLmVtYWlsLGUuY3JlZGVudGlhbCksWChhKSksbG0oYSxkLGUuZW1haWwpO2Vsc2UgaWYoZSYmXCJhdXRoL3VzZXItY2FuY2VsbGVkXCI9PWUuY29kZSl7dmFyIGY9emgoWChhKSksZz1UKGUpO2YmJmYuYT9sbShhLGQsZi5nLGcpOmY/JGwoYSxkLGYuZyxnKTprbShhLGQsZSl9ZWxzZSBlJiZcImF1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiPT1lLmNvZGV8fChlJiZcImF1dGgvb3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiPT1lLmNvZGUmJlhsKGEpP2dtKGEsZCx7dXNlcjpudWxsLGNyZWRlbnRpYWw6bnVsbH0pOmUmJlwiYXV0aC9hZG1pbi1yZXN0cmljdGVkLW9wZXJhdGlvblwiPT1lLmNvZGUmJnBpKFcoYSkpPyhkLm0oKSxBaChYKGEpKSxMKFwiaGFuZGxlVW5hdXRob3JpemVkVXNlclwiLGEsYixudWxsLG51bGwpKTpcbmttKGEsZCxlKSl9KSl9O2Z1bmN0aW9uIG5tKGEsYil7UC5jYWxsKHRoaXMsSGssdm9pZCAwLGIsXCJkaWZmZXJlbnREZXZpY2VFcnJvclwiKTt0aGlzLmk9YX1tKG5tLFApO25tLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztPKHRoaXMsdGhpcy5sKCksZnVuY3Rpb24oKXthLmkoKX0pO3RoaXMubCgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtubS5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMuaT1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07dShubS5wcm90b3R5cGUse2w6a2x9KTtLLmRpZmZlcmVudERldmljZUVycm9yPWZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IG5tKGZ1bmN0aW9uKCl7Yy5tKCk7UyhhLGIpfSk7Yy5yZW5kZXIoYik7WShhLGMpfTtmdW5jdGlvbiBvbShhLGIsYyxkKXtQLmNhbGwodGhpcyxTayx7ZW1haWw6YSxHOiEhY30sZCxcImVtYWlsQ2hhbmdlUmV2b2tlXCIpO3RoaXMubD1iO3RoaXMuaT1jfHxudWxsfW0ob20sUCk7XG5vbS5wcm90b3R5cGUudj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7Tyh0aGlzLE0odGhpcyxcImZpcmViYXNldWktaWQtcmVzZXQtcGFzc3dvcmQtbGlua1wiKSxmdW5jdGlvbigpe2EubCgpfSk7dGhpcy5pJiYodGhpcy53KHRoaXMuaSksdGhpcy51KCkuZm9jdXMoKSk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtvbS5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMubD10aGlzLmk9bnVsbDtQLnByb3RvdHlwZS5vLmNhbGwodGhpcyl9O3Uob20ucHJvdG90eXBlLHt1OmpsLEI6a2wsdzpsbH0pO2Z1bmN0aW9uIHBtKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtbmV3LXBhc3N3b3JkXCIpfWZ1bmN0aW9uIHFtKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtcGFzc3dvcmQtdG9nZ2xlXCIpfWZ1bmN0aW9uIHJtKCl7dGhpcy5SYT0hdGhpcy5SYTt2YXIgYT1xbS5jYWxsKHRoaXMpLGI9cG0uY2FsbCh0aGlzKTt0aGlzLlJhPyhiLnR5cGU9XCJ0ZXh0XCIsVWkoYSxcImZpcmViYXNldWktaW5wdXQtdG9nZ2xlLW9mZlwiKSxcblZpKGEsXCJmaXJlYmFzZXVpLWlucHV0LXRvZ2dsZS1vblwiKSk6KGIudHlwZT1cInBhc3N3b3JkXCIsVWkoYSxcImZpcmViYXNldWktaW5wdXQtdG9nZ2xlLW9uXCIpLFZpKGEsXCJmaXJlYmFzZXVpLWlucHV0LXRvZ2dsZS1vZmZcIikpO2IuZm9jdXMoKX1mdW5jdGlvbiBzbSgpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLW5ldy1wYXNzd29yZC1lcnJvclwiKX1mdW5jdGlvbiB0bSgpe3RoaXMuUmE9ITE7dmFyIGE9cG0uY2FsbCh0aGlzKTthLnR5cGU9XCJwYXNzd29yZFwiO3ZhciBiPXNtLmNhbGwodGhpcyk7SmoodGhpcyxhLGZ1bmN0aW9uKCl7UGooYikmJihOKGEsITApLE5qKGIpKX0pO3ZhciBjPXFtLmNhbGwodGhpcyk7VWkoYyxcImZpcmViYXNldWktaW5wdXQtdG9nZ2xlLW9uXCIpO1ZpKGMsXCJmaXJlYmFzZXVpLWlucHV0LXRvZ2dsZS1vZmZcIik7TGoodGhpcyxhLGZ1bmN0aW9uKCl7VWkoYyxcImZpcmViYXNldWktaW5wdXQtdG9nZ2xlLWZvY3VzXCIpO1ZpKGMsXCJmaXJlYmFzZXVpLWlucHV0LXRvZ2dsZS1ibHVyXCIpfSk7XG5Naih0aGlzLGEsZnVuY3Rpb24oKXtVaShjLFwiZmlyZWJhc2V1aS1pbnB1dC10b2dnbGUtYmx1clwiKTtWaShjLFwiZmlyZWJhc2V1aS1pbnB1dC10b2dnbGUtZm9jdXNcIil9KTtPKHRoaXMsYyxyKHJtLHRoaXMpKX1mdW5jdGlvbiB1bSgpe3ZhciBhPXBtLmNhbGwodGhpcyk7dmFyIGI9c20uY2FsbCh0aGlzKTtXaShhKT8oTihhLCEwKSxOaihiKSxiPSEwKTooTihhLCExKSxPaihiLEMoXCJFbnRlciB5b3VyIHBhc3N3b3JkXCIpLnRvU3RyaW5nKCkpLGI9ITEpO3JldHVybiBiP1dpKGEpOm51bGx9ZnVuY3Rpb24gdm0oYSxiLGMpe1AuY2FsbCh0aGlzLFBrLHtlbWFpbDphfSxjLFwicGFzc3dvcmRSZXNldFwiKTt0aGlzLmw9Yn1tKHZtLFApO3ZtLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dGhpcy5IKCk7dGhpcy5CKHRoaXMubCk7dmsodGhpcyx0aGlzLmkoKSx0aGlzLmwpO3RoaXMuaSgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTt2bS5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMubD1cbm51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KHZtLnByb3RvdHlwZSx7aTpwbSx3OnNtLE06cW0sSDp0bSx1OnVtLFU6amwsUDprbCxCOmxsfSk7ZnVuY3Rpb24gd20oYSxiLGMsZCxlKXtQLmNhbGwodGhpcyxaayx7ZmFjdG9ySWQ6YSxwaG9uZU51bWJlcjpjfHxudWxsLEc6ISFkfSxlLFwicmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb25TdWNjZXNzXCIpO3RoaXMubD1iO3RoaXMuaT1kfHxudWxsfW0od20sUCk7d20ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO08odGhpcyxNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLXJlc2V0LXBhc3N3b3JkLWxpbmtcIiksZnVuY3Rpb24oKXthLmwoKX0pO3RoaXMuaSYmKHRoaXMudyh0aGlzLmkpLHRoaXMudSgpLmZvY3VzKCkpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07d20ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmw9dGhpcy5pPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KHdtLnByb3RvdHlwZSx7dTpqbCxcbkI6a2wsdzpsbH0pO2Z1bmN0aW9uIHhtKGEsYixjLGQsZSl7dmFyIGY9Yy51KCk7ZiYmVihhLGMuSShyKFUoYSkuY29uZmlybVBhc3N3b3JkUmVzZXQsVShhKSksW2QsZl0sZnVuY3Rpb24oKXtjLm0oKTt2YXIgZz1uZXcgRmwoZSk7Zy5yZW5kZXIoYik7WShhLGcpfSxmdW5jdGlvbihnKXt5bShhLGIsYyxnKX0pKX1mdW5jdGlvbiB5bShhLGIsYyxkKXtcImF1dGgvd2Vhay1wYXNzd29yZFwiPT0oZCYmZC5jb2RlKT8oYT1UKGQpLE4oYy5pKCksITEpLE9qKGMudygpLGEpLGMuaSgpLmZvY3VzKCkpOihjJiZjLm0oKSxjPW5ldyBHbCxjLnJlbmRlcihiKSxZKGEsYykpfWZ1bmN0aW9uIHptKGEsYixjKXt2YXIgZD1uZXcgb20oYyxmdW5jdGlvbigpe1YoYSxkLkkocihVKGEpLnNlbmRQYXNzd29yZFJlc2V0RW1haWwsVShhKSksW2NdLGZ1bmN0aW9uKCl7ZC5tKCk7ZD1uZXcgeWwoYyx2b2lkIDAsSChXKGEpKSxKKFcoYSkpKTtkLnJlbmRlcihiKTtZKGEsZCl9LGZ1bmN0aW9uKCl7ZC5hKElkKCkudG9TdHJpbmcoKSl9KSl9KTtcbmQucmVuZGVyKGIpO1koYSxkKX1mdW5jdGlvbiBBbShhLGIsYyxkKXt2YXIgZT1uZXcgd20oZC5mYWN0b3JJZCxmdW5jdGlvbigpe2UuSShyKFUoYSkuc2VuZFBhc3N3b3JkUmVzZXRFbWFpbCxVKGEpKSxbY10sZnVuY3Rpb24oKXtlLm0oKTtlPW5ldyB5bChjLHZvaWQgMCxIKFcoYSkpLEooVyhhKSkpO2UucmVuZGVyKGIpO1koYSxlKX0sZnVuY3Rpb24oKXtlLmEoSWQoKS50b1N0cmluZygpKX0pfSxkLnBob25lTnVtYmVyKTtlLnJlbmRlcihiKTtZKGEsZSl9Sy5wYXNzd29yZFJlc2V0PWZ1bmN0aW9uKGEsYixjLGQpe1YoYSxVKGEpLnZlcmlmeVBhc3N3b3JkUmVzZXRDb2RlKGMpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIGY9bmV3IHZtKGUsZnVuY3Rpb24oKXt4bShhLGIsZixjLGQpfSk7Zi5yZW5kZXIoYik7WShhLGYpfSxmdW5jdGlvbigpe3ltKGEsYil9KSl9O0suZW1haWxDaGFuZ2VSZXZvY2F0aW9uPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1udWxsO1YoYSxVKGEpLmNoZWNrQWN0aW9uQ29kZShjKS50aGVuKGZ1bmN0aW9uKGUpe2Q9XG5lLmRhdGEuZW1haWw7cmV0dXJuIFUoYSkuYXBwbHlBY3Rpb25Db2RlKGMpfSkudGhlbihmdW5jdGlvbigpe3ptKGEsYixkKX0sZnVuY3Rpb24oKXt2YXIgZT1uZXcgSGw7ZS5yZW5kZXIoYik7WShhLGUpfSkpfTtLLmVtYWlsVmVyaWZpY2F0aW9uPWZ1bmN0aW9uKGEsYixjLGQpe1YoYSxVKGEpLmFwcGx5QWN0aW9uQ29kZShjKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGU9bmV3IHpsKGQpO2UucmVuZGVyKGIpO1koYSxlKX0sZnVuY3Rpb24oKXt2YXIgZT1uZXcgQWw7ZS5yZW5kZXIoYik7WShhLGUpfSkpfTtLLnJldmVydFNlY29uZEZhY3RvckFkZGl0aW9uPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1udWxsLGU9bnVsbDtWKGEsVShhKS5jaGVja0FjdGlvbkNvZGUoYykudGhlbihmdW5jdGlvbihmKXtkPWYuZGF0YS5lbWFpbDtlPWYuZGF0YS5tdWx0aUZhY3RvckluZm87cmV0dXJuIFUoYSkuYXBwbHlBY3Rpb25Db2RlKGMpfSkudGhlbihmdW5jdGlvbigpe0FtKGEsYixkLGUpfSxmdW5jdGlvbigpe3ZhciBmPVxubmV3IERsO2YucmVuZGVyKGIpO1koYSxmKX0pKX07Sy52ZXJpZnlBbmRDaGFuZ2VFbWFpbD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1udWxsO1YoYSxVKGEpLmNoZWNrQWN0aW9uQ29kZShjKS50aGVuKGZ1bmN0aW9uKGYpe2U9Zi5kYXRhLmVtYWlsO3JldHVybiBVKGEpLmFwcGx5QWN0aW9uQ29kZShjKX0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgZj1uZXcgQmwoZSxkKTtmLnJlbmRlcihiKTtZKGEsZil9LGZ1bmN0aW9uKCl7dmFyIGY9bmV3IENsO2YucmVuZGVyKGIpO1koYSxmKX0pKX07ZnVuY3Rpb24gQm0oYSxiKXt0cnl7dmFyIGM9XCJudW1iZXJcIj09dHlwZW9mIGEuc2VsZWN0aW9uU3RhcnR9Y2F0Y2goZCl7Yz0hMX1jPyhhLnNlbGVjdGlvblN0YXJ0PWIsYS5zZWxlY3Rpb25FbmQ9Yik6eiYmIW1jKFwiOVwiKSYmKFwidGV4dGFyZWFcIj09YS50eXBlJiYoYj1hLnZhbHVlLnN1YnN0cmluZygwLGIpLnJlcGxhY2UoLyhcXHJcXG58XFxyfFxcbikvZyxcIlxcblwiKS5sZW5ndGgpLGE9YS5jcmVhdGVUZXh0UmFuZ2UoKSxcbmEuY29sbGFwc2UoITApLGEubW92ZShcImNoYXJhY3RlclwiLGIpLGEuc2VsZWN0KCkpfWZ1bmN0aW9uIENtKGEsYixjLGQsZSxmKXtQLmNhbGwodGhpcyxHayx7ZW1haWw6Y30sZixcImVtYWlsTGlua1NpZ25JbkNvbmZpcm1hdGlvblwiLHtGOmQsRDplfSk7dGhpcy5sPWE7dGhpcy51PWJ9bShDbSxQKTtDbS5wcm90b3R5cGUudj1mdW5jdGlvbigpe3RoaXMudyh0aGlzLmwpO3RoaXMuQih0aGlzLmwsdGhpcy51KTt0aGlzLmkoKS5mb2N1cygpO0JtKHRoaXMuaSgpLCh0aGlzLmkoKS52YWx1ZXx8XCJcIikubGVuZ3RoKTtQLnByb3RvdHlwZS52LmNhbGwodGhpcyl9O0NtLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy51PXRoaXMubD1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07dShDbS5wcm90b3R5cGUse2k6c2wsTTp0bCx3OnVsLEg6dmwsajp3bCxVOmpsLFA6a2wsQjpsbH0pO0suZW1haWxMaW5rQ29uZmlybWF0aW9uPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXt2YXIgZz1uZXcgQ20oZnVuY3Rpb24oKXt2YXIgaD1cbmcuaigpO2g/KGcubSgpLGQoYSxiLGgsYykpOmcuaSgpLmZvY3VzKCl9LGZ1bmN0aW9uKCl7Zy5tKCk7UyhhLGIsZXx8dm9pZCAwKX0sZXx8dm9pZCAwLEgoVyhhKSksSihXKGEpKSk7Zy5yZW5kZXIoYik7WShhLGcpO2YmJmcuYShmKX07ZnVuY3Rpb24gRG0oYSxiLGMsZCxlKXtQLmNhbGwodGhpcyxMayx7Z2E6YX0sZSxcImVtYWlsTGlua1NpZ25JbkxpbmtpbmdEaWZmZXJlbnREZXZpY2VcIix7RjpjLEQ6ZH0pO3RoaXMuaT1ifW0oRG0sUCk7RG0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLnUodGhpcy5pKTt0aGlzLmwoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07RG0ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmk9bnVsbDtQLnByb3RvdHlwZS5vLmNhbGwodGhpcyl9O3UoRG0ucHJvdG90eXBlLHtsOmpsLHU6bGx9KTtLLmVtYWlsTGlua05ld0RldmljZUxpbmtpbmc9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IFBiKGMpO2M9ZS5hLmEuZ2V0KHguUFJPVklERVJfSUQpfHxcbm51bGw7VGIoZSxudWxsKTtpZihjKXt2YXIgZj1uZXcgRG0oaWkoVyhhKSxjKSxmdW5jdGlvbigpe2YubSgpO2QoYSxiLGUudG9TdHJpbmcoKSl9LEgoVyhhKSksSihXKGEpKSk7Zi5yZW5kZXIoYik7WShhLGYpfWVsc2UgUyhhLGIpfTtmdW5jdGlvbiBFbShhKXtQLmNhbGwodGhpcyxEayx2b2lkIDAsYSxcImJsYW5rXCIpfW0oRW0sUCk7ZnVuY3Rpb24gRm0oYSxiLGMsZCxlKXt2YXIgZj1uZXcgRW0sZz1uZXcgUGIoYyksaD1nLmEuYS5nZXQoeC4kYSl8fFwiXCIsaz1nLmEuYS5nZXQoeC5TYSl8fFwiXCIscD1cIjFcIj09PWcuYS5hLmdldCh4LlFhKSx0PVNiKGcpLEk9Zy5hLmEuZ2V0KHguUFJPVklERVJfSUQpfHxudWxsO2c9Zy5hLmEuZ2V0KHgudmIpfHxudWxsO0dtKGEsZyk7dmFyIENhPSF2aCh0aCxYKGEpKSxXaz1kfHxFaChrLFgoYSkpLGxkPShkPUZoKGssWChhKSkpJiZkLmE7SSYmbGQmJmxkLnByb3ZpZGVySWQhPT1JJiYobGQ9bnVsbCk7Zi5yZW5kZXIoYik7WShhLGYpO1YoYSxmLkkoZnVuY3Rpb24oKXt2YXIgeWE9XG5GKG51bGwpO3lhPXQmJkNhfHxDYSYmcD9kZihFcnJvcihcImFub255bW91cy11c2VyLW5vdC1mb3VuZFwiKSk6SG0oYSxjKS50aGVuKGZ1bmN0aW9uKHdnKXtpZihJJiYhbGQpdGhyb3cgRXJyb3IoXCJwZW5kaW5nLWNyZWRlbnRpYWwtbm90LWZvdW5kXCIpO3JldHVybiB3Z30pO3ZhciBtZD1udWxsO3JldHVybiB5YS50aGVuKGZ1bmN0aW9uKHdnKXttZD13ZztyZXR1cm4gZT9udWxsOlUoYSkuY2hlY2tBY3Rpb25Db2RlKGgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBtZH0pfSxbXSxmdW5jdGlvbih5YSl7V2s/SW0oYSxmLFdrLGMsbGQseWEpOnA/KGYubSgpLEwoXCJkaWZmZXJlbnREZXZpY2VFcnJvclwiLGEsYikpOihmLm0oKSxMKFwiZW1haWxMaW5rQ29uZmlybWF0aW9uXCIsYSxiLGMsSm0pKX0sZnVuY3Rpb24oeWEpe3ZhciBtZD12b2lkIDA7aWYoIXlhfHwheWEubmFtZXx8XCJjYW5jZWxcIiE9eWEubmFtZSlzd2l0Y2goZi5tKCkseWEmJnlhLm1lc3NhZ2Upe2Nhc2UgXCJhbm9ueW1vdXMtdXNlci1ub3QtZm91bmRcIjpMKFwiZGlmZmVyZW50RGV2aWNlRXJyb3JcIixcbmEsYik7YnJlYWs7Y2FzZSBcImFub255bW91cy11c2VyLW1pc21hdGNoXCI6TChcImFub255bW91c1VzZXJNaXNtYXRjaFwiLGEsYik7YnJlYWs7Y2FzZSBcInBlbmRpbmctY3JlZGVudGlhbC1ub3QtZm91bmRcIjpMKFwiZW1haWxMaW5rTmV3RGV2aWNlTGlua2luZ1wiLGEsYixjLEttKTticmVhaztkZWZhdWx0OnlhJiYobWQ9VCh5YSkpLFMoYSxiLHZvaWQgMCxtZCl9fSkpfWZ1bmN0aW9uIEptKGEsYixjLGQpe0ZtKGEsYixkLGMsITApfWZ1bmN0aW9uIEttKGEsYixjKXtGbShhLGIsYyl9ZnVuY3Rpb24gSW0oYSxiLGMsZCxlLGYpe3ZhciBnPVEoYik7Yi4kKFwibWRsLXNwaW5uZXIgbWRsLXNwaW5uZXItLXNpbmdsZS1jb2xvciBtZGwtanMtc3Bpbm5lciBpcy1hY3RpdmUgZmlyZWJhc2V1aS1wcm9ncmVzcy1kaWFsb2ctbG9hZGluZy1pY29uXCIsQyhcIlNpZ25pbmcgaW4uLi5cIikudG9TdHJpbmcoKSk7dmFyIGg9bnVsbDtlPShmP0xtKGEsZixjLGQsZSk6TW0oYSxjLGQsZSkpLnRoZW4oZnVuY3Rpb24oayl7d2godWgsXG5YKGEpKTt3aCh0aCxYKGEpKTtiLmgoKTtiLiQoXCJmaXJlYmFzZXVpLWljb24tZG9uZVwiLEMoXCJTaWduZWQgaW4hXCIpLnRvU3RyaW5nKCkpO2g9c2V0VGltZW91dChmdW5jdGlvbigpe2IuaCgpO0xsKGEsYixrLCEwKX0sMUUzKTtWKGEsZnVuY3Rpb24oKXtiJiYoYi5oKCksYi5tKCkpO2NsZWFyVGltZW91dChoKX0pfSxmdW5jdGlvbihrKXtiLmgoKTtiLm0oKTtpZighay5uYW1lfHxcImNhbmNlbFwiIT1rLm5hbWUpe2s9S2woayk7dmFyIHA9VChrKTtcImF1dGgvZW1haWwtYWxyZWFkeS1pbi11c2VcIj09ay5jb2RlfHxcImF1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiPT1rLmNvZGU/KHdoKHVoLFgoYSkpLHdoKHRoLFgoYSkpKTpcImF1dGgvaW52YWxpZC1lbWFpbFwiPT1rLmNvZGU/KHA9QyhcIlRoZSBlbWFpbCBwcm92aWRlZCBkb2VzIG5vdCBtYXRjaCB0aGUgY3VycmVudCBzaWduLWluIHNlc3Npb24uXCIpLnRvU3RyaW5nKCksTChcImVtYWlsTGlua0NvbmZpcm1hdGlvblwiLGEsZyxkLEptLFxubnVsbCxwKSk6UyhhLGcsYyxwKX19KTtWKGEsZSl9Sy5lbWFpbExpbmtTaWduSW5DYWxsYmFjaz1GbTtmdW5jdGlvbiBObShhLGIsYyxkLGUsZil7UC5jYWxsKHRoaXMsS2sse2VtYWlsOmEsZ2E6Yn0sZixcImVtYWlsTGlua1NpZ25JbkxpbmtpbmdcIix7RjpkLEQ6ZX0pO3RoaXMuaT1jfW0oTm0sUCk7Tm0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLnUodGhpcy5pKTt0aGlzLmwoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07Tm0ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmk9bnVsbDtQLnByb3RvdHlwZS5vLmNhbGwodGhpcyl9O3UoTm0ucHJvdG90eXBlLHtsOmpsLHU6bGx9KTtmdW5jdGlvbiBPbShhLGIsYyxkKXt2YXIgZT1RKGIpO2JtKGEsYixjLGZ1bmN0aW9uKCl7UyhhLGUsYyl9LGZ1bmN0aW9uKGYpe2lmKCFmLm5hbWV8fFwiY2FuY2VsXCIhPWYubmFtZSl7dmFyIGc9VChmKTtmJiZcImF1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiPT1mLmNvZGU/XG5iLmEoZyk6KGIubSgpLFMoYSxlLGMsZykpfX0sZCl9Sy5lbWFpbExpbmtTaWduSW5MaW5raW5nPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD16aChYKGEpKTtBaChYKGEpKTtpZihkKXt2YXIgZT1kLmEucHJvdmlkZXJJZCxmPW5ldyBObShjLGlpKFcoYSksZSksZnVuY3Rpb24oKXtPbShhLGYsYyxkKX0sSChXKGEpKSxKKFcoYSkpKTtmLnJlbmRlcihiKTtZKGEsZil9ZWxzZSBTKGEsYil9O2Z1bmN0aW9uIFBtKGEsYixjLGQsZSxmKXtQLmNhbGwodGhpcyxFayx7ZW1haWw6YX0sZixcImVtYWlsTGlua1NpZ25JblNlbnRcIix7RjpkLEQ6ZX0pO3RoaXMudT1iO3RoaXMuaT1jfW0oUG0sUCk7UG0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO08odGhpcyx0aGlzLmwoKSxmdW5jdGlvbigpe2EuaSgpfSk7Tyh0aGlzLE0odGhpcyxcImZpcmViYXNldWktaWQtdHJvdWJsZS1nZXR0aW5nLWVtYWlsLWxpbmtcIiksZnVuY3Rpb24oKXthLnUoKX0pO3RoaXMubCgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtcblBtLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5pPXRoaXMudT1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07dShQbS5wcm90b3R5cGUse2w6a2x9KTtLLmVtYWlsTGlua1NpZ25JblNlbnQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1uZXcgUG0oYyxmdW5jdGlvbigpe2YubSgpO0woXCJlbWFpbE5vdFJlY2VpdmVkXCIsYSxiLGMsZCxlKX0sZnVuY3Rpb24oKXtmLm0oKTtkKCl9LEgoVyhhKSksSihXKGEpKSk7Zi5yZW5kZXIoYik7WShhLGYpfTtmdW5jdGlvbiBRbShhLGIsYyxkLGUsZixnKXtQLmNhbGwodGhpcyxjbCx7amM6YSxRYjpifSxnLFwiZW1haWxNaXNtYXRjaFwiLHtGOmUsRDpmfSk7dGhpcy5sPWM7dGhpcy5pPWR9bShRbSxQKTtRbS5wcm90b3R5cGUudj1mdW5jdGlvbigpe3RoaXMudyh0aGlzLmwsdGhpcy5pKTt0aGlzLnUoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07UW0ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmk9bnVsbDtQLnByb3RvdHlwZS5vLmNhbGwodGhpcyl9O1xudShRbS5wcm90b3R5cGUse3U6amwsQjprbCx3OmxsfSk7Sy5lbWFpbE1pc21hdGNoPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD16aChYKGEpKTtpZihkKXt2YXIgZT1uZXcgUW0oYy51c2VyLmVtYWlsLGQuZyxmdW5jdGlvbigpe3ZhciBmPWU7QWgoWChhKSk7TGwoYSxmLGMpfSxmdW5jdGlvbigpe3ZhciBmPWMuY3JlZGVudGlhbC5wcm92aWRlcklkLGc9UShlKTtlLm0oKTtkLmE/TChcImZlZGVyYXRlZExpbmtpbmdcIixhLGcsZC5nLGYpOkwoXCJmZWRlcmF0ZWRTaWduSW5cIixhLGcsZC5nLGYpfSxIKFcoYSkpLEooVyhhKSkpO2UucmVuZGVyKGIpO1koYSxlKX1lbHNlIFMoYSxiKX07ZnVuY3Rpb24gUm0oYSxiLGMsZCxlKXtQLmNhbGwodGhpcyxGayx2b2lkIDAsZSxcImVtYWlsTm90UmVjZWl2ZWRcIix7RjpjLEQ6ZH0pO3RoaXMubD1hO3RoaXMuaT1ifW0oUm0sUCk7Um0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO08odGhpcyx0aGlzLnUoKSxmdW5jdGlvbigpe2EuaSgpfSk7XG5PKHRoaXMsdGhpcy5EYSgpLGZ1bmN0aW9uKCl7YS5sKCl9KTt0aGlzLnUoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07Um0ucHJvdG90eXBlLkRhPWZ1bmN0aW9uKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtcmVzZW5kLWVtYWlsLWxpbmtcIil9O1JtLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5pPXRoaXMubD1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07dShSbS5wcm90b3R5cGUse3U6a2x9KTtLLmVtYWlsTm90UmVjZWl2ZWQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1uZXcgUm0oZnVuY3Rpb24oKXtibShhLGYsYyxkLGZ1bmN0aW9uKGcpe2c9VChnKTtmLmEoZyl9LGUpfSxmdW5jdGlvbigpe2YubSgpO1MoYSxiLGMpfSxIKFcoYSkpLEooVyhhKSkpO2YucmVuZGVyKGIpO1koYSxmKX07ZnVuY3Rpb24gU20oYSxiLGMsZCxlLGYpe1AuY2FsbCh0aGlzLE1rLHtlbWFpbDphLGdhOmJ9LGYsXCJmZWRlcmF0ZWRMaW5raW5nXCIse0Y6ZCxEOmV9KTtcbnRoaXMuaT1jfW0oU20sUCk7U20ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLnUodGhpcy5pKTt0aGlzLmwoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07U20ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmk9bnVsbDtQLnByb3RvdHlwZS5vLmNhbGwodGhpcyl9O3UoU20ucHJvdG90eXBlLHtsOmpsLHU6bGx9KTtLLmZlZGVyYXRlZExpbmtpbmc9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj16aChYKGEpKTtpZihmJiZmLmEpe3ZhciBnPW5ldyBTbShjLGlpKFcoYSksZCksZnVuY3Rpb24oKXtSbChhLGcsZCxjKX0sSChXKGEpKSxKKFcoYSkpKTtnLnJlbmRlcihiKTtZKGEsZyk7ZSYmZy5hKGUpfWVsc2UgUyhhLGIpfTtLLmZlZGVyYXRlZFJlZGlyZWN0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1uZXcgRW07ZC5yZW5kZXIoYik7WShhLGQpO2I9aGkoVyhhKSlbMF07UmwoYSxkLGIsYyl9O0suZmVkZXJhdGVkU2lnbkluPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XG5uZXcgU20oYyxpaShXKGEpLGQpLGZ1bmN0aW9uKCl7UmwoYSxmLGQsYyl9LEgoVyhhKSksSihXKGEpKSk7Zi5yZW5kZXIoYik7WShhLGYpO2UmJmYuYShlKX07ZnVuY3Rpb24gVG0oYSxiLGMsZCl7dmFyIGU9Yi51KCk7ZT9WKGEsYi5JKHIoYS5YYixhKSxbYyxlXSxmdW5jdGlvbihmKXtmPWYudXNlci5saW5rV2l0aENyZWRlbnRpYWwoZCkudGhlbihmdW5jdGlvbihnKXtyZXR1cm4gTGwoYSxiLHt1c2VyOmcudXNlcixjcmVkZW50aWFsOmQsb3BlcmF0aW9uVHlwZTpnLm9wZXJhdGlvblR5cGUsYWRkaXRpb25hbFVzZXJJbmZvOmcuYWRkaXRpb25hbFVzZXJJbmZvfSl9KTtWKGEsZik7cmV0dXJuIGZ9LGZ1bmN0aW9uKGYpe2lmKCFmLm5hbWV8fFwiY2FuY2VsXCIhPWYubmFtZSlzd2l0Y2goZi5jb2RlKXtjYXNlIFwiYXV0aC93cm9uZy1wYXNzd29yZFwiOk4oYi5pKCksITEpO09qKGIuQigpLFQoZikpO2JyZWFrO2Nhc2UgXCJhdXRoL3Rvby1tYW55LXJlcXVlc3RzXCI6Yi5hKFQoZikpO2JyZWFrO1xuZGVmYXVsdDpvZyhcInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkOiBcIitmLm1lc3NhZ2Usdm9pZCAwKSxiLmEoVChmKSl9fSkpOmIuaSgpLmZvY3VzKCl9Sy5wYXNzd29yZExpbmtpbmc9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXpoKFgoYSkpO0FoKFgoYSkpO3ZhciBlPWQmJmQuYTtpZihlKXt2YXIgZj1uZXcgcWwoYyxmdW5jdGlvbigpe1RtKGEsZixjLGUpfSxmdW5jdGlvbigpe2YubSgpO0woXCJwYXNzd29yZFJlY292ZXJ5XCIsYSxiLGMpfSxIKFcoYSkpLEooVyhhKSkpO2YucmVuZGVyKGIpO1koYSxmKX1lbHNlIFMoYSxiKX07ZnVuY3Rpb24gVW0oYSxiLGMsZCxlLGYpe1AuY2FsbCh0aGlzLHprLHtlbWFpbDpjLFRhOiEhYn0sZixcInBhc3N3b3JkUmVjb3ZlcnlcIix7RjpkLEQ6ZX0pO3RoaXMubD1hO3RoaXMudT1ifW0oVW0sUCk7VW0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLkIoKTt0aGlzLkgodGhpcy5sLHRoaXMudSk7V2kodGhpcy5pKCkpfHx0aGlzLmkoKS5mb2N1cygpO1xudmsodGhpcyx0aGlzLmkoKSx0aGlzLmwpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07VW0ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLnU9dGhpcy5sPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KFVtLnByb3RvdHlwZSx7aTpzbCx3OnRsLEI6dWwsTTp2bCxqOndsLFU6amwsUDprbCxIOmxsfSk7ZnVuY3Rpb24gVm0oYSxiKXt2YXIgYz1iLmooKTtpZihjKXt2YXIgZD1RKGIpO1YoYSxiLkkocihVKGEpLnNlbmRQYXNzd29yZFJlc2V0RW1haWwsVShhKSksW2NdLGZ1bmN0aW9uKCl7Yi5tKCk7dmFyIGU9bmV3IHlsKGMsZnVuY3Rpb24oKXtlLm0oKTtTKGEsZCl9LEgoVyhhKSksSihXKGEpKSk7ZS5yZW5kZXIoZCk7WShhLGUpfSxmdW5jdGlvbihlKXtOKGIuaSgpLCExKTtPaihiLncoKSxUKGUpKX0pKX1lbHNlIGIuaSgpLmZvY3VzKCl9Sy5wYXNzd29yZFJlY292ZXJ5PWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9bmV3IFVtKGZ1bmN0aW9uKCl7Vm0oYSxmKX0sXG5kP3ZvaWQgMDpmdW5jdGlvbigpe2YubSgpO1MoYSxiKX0sYyxIKFcoYSkpLEooVyhhKSkpO2YucmVuZGVyKGIpO1koYSxmKTtlJiZmLmEoZSl9O0sucGFzc3dvcmRTaWduSW49ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IHhsKGZ1bmN0aW9uKCl7V2woYSxlKX0sZnVuY3Rpb24oKXt2YXIgZj1lLk0oKTtlLm0oKTtMKFwicGFzc3dvcmRSZWNvdmVyeVwiLGEsYixmKX0sYyxIKFcoYSkpLEooVyhhKSksZCk7ZS5yZW5kZXIoYik7WShhLGUpfTtmdW5jdGlvbiBXbSgpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLW5hbWVcIil9ZnVuY3Rpb24gWG0oKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1uYW1lLWVycm9yXCIpfWZ1bmN0aW9uIFltKGEsYixjLGQsZSxmLGcsaCxrKXtQLmNhbGwodGhpcyx5ayx7ZW1haWw6ZCxUYjphLG5hbWU6ZSxUYTohIWMsaWE6ISFofSxrLFwicGFzc3dvcmRTaWduVXBcIix7RjpmLEQ6Z30pO3RoaXMudz1iO3RoaXMuSD1jO3RoaXMuQj1hfW0oWW0sUCk7XG5ZbS5wcm90b3R5cGUudj1mdW5jdGlvbigpe3RoaXMuZWEoKTt0aGlzLkImJnRoaXMuSmEoKTt0aGlzLnVhKCk7dGhpcy5wYSh0aGlzLncsdGhpcy5IKTt0aGlzLkI/KHVrKHRoaXMsdGhpcy5pKCksdGhpcy51KCkpLHVrKHRoaXMsdGhpcy51KCksdGhpcy5sKCkpKTp1ayh0aGlzLHRoaXMuaSgpLHRoaXMubCgpKTt0aGlzLncmJnZrKHRoaXMsdGhpcy5sKCksdGhpcy53KTtXaSh0aGlzLmkoKSk/dGhpcy5CJiYhV2kodGhpcy51KCkpP3RoaXMudSgpLmZvY3VzKCk6dGhpcy5sKCkuZm9jdXMoKTp0aGlzLmkoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07WW0ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLkg9dGhpcy53PW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KFltLnByb3RvdHlwZSx7aTpzbCxVOnRsLGVhOnVsLGpiOnZsLGo6d2wsdTpXbSxCYzpYbSxKYTpmdW5jdGlvbigpe3ZhciBhPVdtLmNhbGwodGhpcyksYj1YbS5jYWxsKHRoaXMpO0pqKHRoaXMsXG5hLGZ1bmN0aW9uKCl7UGooYikmJihOKGEsITApLE5qKGIpKX0pfSxNOmZ1bmN0aW9uKCl7dmFyIGE9V20uY2FsbCh0aGlzKTt2YXIgYj1YbS5jYWxsKHRoaXMpO3ZhciBjPVdpKGEpO2M9IS9eW1xcc1xceGEwXSokLy50ZXN0KG51bGw9PWM/XCJcIjpTdHJpbmcoYykpO04oYSxjKTtjPyhOaihiKSxiPSEwKTooT2ooYixDKFwiRW50ZXIgeW91ciBhY2NvdW50IG5hbWVcIikudG9TdHJpbmcoKSksYj0hMSk7cmV0dXJuIGI/VWEoV2koYSkpOm51bGx9LGw6cG0sYmE6c20sbGI6cW0sdWE6dG0sUDp1bSxOYjpqbCxNYjprbCxwYTpsbH0pO2Z1bmN0aW9uIFptKGEsYil7dmFyIGM9Q2koVyhhKSksZD1iLmooKSxlPW51bGw7YyYmKGU9Yi5NKCkpO3ZhciBmPWIuUCgpO2lmKGQpe2lmKGMpaWYoZSllPWNiKGUpO2Vsc2V7Yi51KCkuZm9jdXMoKTtyZXR1cm59aWYoZil7dmFyIGc9ZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5jcmVkZW50aWFsKGQsZik7VihhLGIuSShyKGEuWWIsYSksW2QsZl0sXG5mdW5jdGlvbihoKXt2YXIgaz17dXNlcjpoLnVzZXIsY3JlZGVudGlhbDpnLG9wZXJhdGlvblR5cGU6aC5vcGVyYXRpb25UeXBlLGFkZGl0aW9uYWxVc2VySW5mbzpoLmFkZGl0aW9uYWxVc2VySW5mb307cmV0dXJuIGM/KGg9aC51c2VyLnVwZGF0ZVByb2ZpbGUoe2Rpc3BsYXlOYW1lOmV9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIExsKGEsYixrKX0pLFYoYSxoKSxoKTpMbChhLGIsayl9LGZ1bmN0aW9uKGgpe2lmKCFoLm5hbWV8fFwiY2FuY2VsXCIhPWgubmFtZSl7dmFyIGs9S2woaCk7aD1UKGspO3N3aXRjaChrLmNvZGUpe2Nhc2UgXCJhdXRoL2VtYWlsLWFscmVhZHktaW4tdXNlXCI6cmV0dXJuICRtKGEsYixkLGspO2Nhc2UgXCJhdXRoL3Rvby1tYW55LXJlcXVlc3RzXCI6aD1DKFwiVG9vIG1hbnkgYWNjb3VudCByZXF1ZXN0cyBhcmUgY29taW5nIGZyb20geW91ciBJUCBhZGRyZXNzLiBUcnkgYWdhaW4gaW4gYSBmZXcgbWludXRlcy5cIikudG9TdHJpbmcoKTtjYXNlIFwiYXV0aC9vcGVyYXRpb24tbm90LWFsbG93ZWRcIjpjYXNlIFwiYXV0aC93ZWFrLXBhc3N3b3JkXCI6TihiLmwoKSxcbiExKTtPaihiLmJhKCksaCk7YnJlYWs7Y2FzZSBcImF1dGgvYWRtaW4tcmVzdHJpY3RlZC1vcGVyYXRpb25cIjpwaShXKGEpKT8oaD1RKGIpLGIubSgpLEwoXCJoYW5kbGVVbmF1dGhvcml6ZWRVc2VyXCIsYSxoLGQsZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCkpOmIuYShoKTticmVhaztkZWZhdWx0Oms9XCJzZXRBY2NvdW50SW5mbzogXCIrYWgoayksb2coayx2b2lkIDApLGIuYShoKX19fSkpfWVsc2UgYi5sKCkuZm9jdXMoKX1lbHNlIGIuaSgpLmZvY3VzKCl9ZnVuY3Rpb24gJG0oYSxiLGMsZCl7ZnVuY3Rpb24gZSgpe3ZhciBnPVQoZCk7TihiLmkoKSwhMSk7T2ooYi5VKCksZyk7Yi5pKCkuZm9jdXMoKX12YXIgZj1VKGEpLmZldGNoU2lnbkluTWV0aG9kc0ZvckVtYWlsKGMpLnRoZW4oZnVuY3Rpb24oZyl7Zy5sZW5ndGg/ZSgpOihnPVEoYiksYi5tKCksTChcInBhc3N3b3JkUmVjb3ZlcnlcIixhLGcsYywhMSxLZCgpLnRvU3RyaW5nKCkpKX0sZnVuY3Rpb24oKXtlKCl9KTtcblYoYSxmKTtyZXR1cm4gZn1LLnBhc3N3b3JkU2lnblVwPWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtmdW5jdGlvbiBnKCl7aC5tKCk7UyhhLGIpfXZhciBoPW5ldyBZbShDaShXKGEpKSxmdW5jdGlvbigpe1ptKGEsaCl9LGU/dm9pZCAwOmcsYyxkLEgoVyhhKSksSihXKGEpKSxmKTtoLnJlbmRlcihiKTtZKGEsaCl9O2Z1bmN0aW9uIGFuKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtcGhvbmUtY29uZmlybWF0aW9uLWNvZGVcIil9ZnVuY3Rpb24gYm4oKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1waG9uZS1jb25maXJtYXRpb24tY29kZS1lcnJvclwiKX1mdW5jdGlvbiBjbigpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLXJlc2VuZC1jb3VudGRvd25cIil9ZnVuY3Rpb24gZG4oYSxiLGMsZCxlLGYsZyxoLGspe1AuY2FsbCh0aGlzLGZsLHtwaG9uZU51bWJlcjplfSxrLFwicGhvbmVTaWduSW5GaW5pc2hcIix7RjpnLEQ6aH0pO3RoaXMuamI9Zjt0aGlzLmk9bmV3IGhqKDFFMyk7XG50aGlzLkI9Zjt0aGlzLlA9YTt0aGlzLmw9Yjt0aGlzLkg9Yzt0aGlzLk09ZH1tKGRuLFApO2RuLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGE9dGhpczt0aGlzLlUodGhpcy5qYik7a2UodGhpcy5pLFwidGlja1wiLHRoaXMudywhMSx0aGlzKTt0aGlzLmkuc3RhcnQoKTtPKHRoaXMsTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1jaGFuZ2UtcGhvbmUtbnVtYmVyLWxpbmtcIiksZnVuY3Rpb24oKXthLlAoKX0pO08odGhpcyx0aGlzLkRhKCksZnVuY3Rpb24oKXthLk0oKX0pO3RoaXMuSmEodGhpcy5sKTt0aGlzLmVhKHRoaXMubCx0aGlzLkgpO3RoaXMudSgpLmZvY3VzKCk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtkbi5wcm90b3R5cGUubz1mdW5jdGlvbigpe3RoaXMuTT10aGlzLkg9dGhpcy5sPXRoaXMuUD1udWxsO2lqKHRoaXMuaSk7c2UodGhpcy5pLFwidGlja1wiLHRoaXMudyk7dGhpcy5pPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTtkbi5wcm90b3R5cGUudz1mdW5jdGlvbigpey0tdGhpcy5CO1xuMDx0aGlzLkI/dGhpcy5VKHRoaXMuQik6KGlqKHRoaXMuaSksc2UodGhpcy5pLFwidGlja1wiLHRoaXMudyksdGhpcy51YSgpLHRoaXMubGIoKSl9O3UoZG4ucHJvdG90eXBlLHt1OmFuLHBhOmJuLEphOmZ1bmN0aW9uKGEpe3ZhciBiPWFuLmNhbGwodGhpcyksYz1ibi5jYWxsKHRoaXMpO0pqKHRoaXMsYixmdW5jdGlvbigpe1BqKGMpJiYoTihiLCEwKSxOaihjKSl9KTthJiZLaih0aGlzLGIsZnVuY3Rpb24oKXthKCl9KX0sYmE6ZnVuY3Rpb24oKXt2YXIgYT1VYShXaShhbi5jYWxsKHRoaXMpKXx8XCJcIik7cmV0dXJuL15cXGR7Nn0kLy50ZXN0KGEpP2E6bnVsbH0sRmI6Y24sVTpmdW5jdGlvbihhKXskYyhjbi5jYWxsKHRoaXMpLEMoXCJSZXNlbmQgY29kZSBpbiBcIisoKDk8YT9cIjA6XCI6XCIwOjBcIikrYSkpLnRvU3RyaW5nKCkpfSx1YTpmdW5jdGlvbigpe05qKHRoaXMuRmIoKSl9LERhOmZ1bmN0aW9uKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtcmVzZW5kLWxpbmtcIil9LGxiOmZ1bmN0aW9uKCl7T2oodGhpcy5EYSgpKX0sXG5OYjpqbCxNYjprbCxlYTpsbH0pO2Z1bmN0aW9uIGVuKGEsYixjLGQpe2Z1bmN0aW9uIGUoZyl7Yi51KCkuZm9jdXMoKTtOKGIudSgpLCExKTtPaihiLnBhKCksZyl9dmFyIGY9Yi5iYSgpO2Y/KGIuJChcIm1kbC1zcGlubmVyIG1kbC1zcGlubmVyLS1zaW5nbGUtY29sb3IgbWRsLWpzLXNwaW5uZXIgaXMtYWN0aXZlIGZpcmViYXNldWktcHJvZ3Jlc3MtZGlhbG9nLWxvYWRpbmctaWNvblwiLEMoXCJWZXJpZnlpbmcuLi5cIikudG9TdHJpbmcoKSksVihhLGIuSShyKGQuY29uZmlybSxkKSxbZl0sZnVuY3Rpb24oZyl7Yi5oKCk7Yi4kKFwiZmlyZWJhc2V1aS1pY29uLWRvbmVcIixDKFwiVmVyaWZpZWQhXCIpLnRvU3RyaW5nKCkpO3ZhciBoPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLmgoKTtiLm0oKTt2YXIgaz17dXNlcjpmbihhKS5jdXJyZW50VXNlcixjcmVkZW50aWFsOm51bGwsb3BlcmF0aW9uVHlwZTpnLm9wZXJhdGlvblR5cGUsYWRkaXRpb25hbFVzZXJJbmZvOmcuYWRkaXRpb25hbFVzZXJJbmZvfTtcbkxsKGEsYixrLCEwKX0sMUUzKTtWKGEsZnVuY3Rpb24oKXtiJiZiLmgoKTtjbGVhclRpbWVvdXQoaCl9KX0sZnVuY3Rpb24oZyl7aWYoZy5uYW1lJiZcImNhbmNlbFwiPT1nLm5hbWUpYi5oKCk7ZWxzZXt2YXIgaD1LbChnKTtnPVQoaCk7c3dpdGNoKGguY29kZSl7Y2FzZSBcImF1dGgvY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiOmIuaCgpO2JyZWFrO2Nhc2UgXCJhdXRoL2NvZGUtZXhwaXJlZFwiOmg9UShiKTtiLmgoKTtiLm0oKTtMKFwicGhvbmVTaWduSW5TdGFydFwiLGEsaCxjLGcpO2JyZWFrO2Nhc2UgXCJhdXRoL21pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIjpjYXNlIFwiYXV0aC9pbnZhbGlkLXZlcmlmaWNhdGlvbi1jb2RlXCI6Yi5oKCk7ZShnKTticmVhaztkZWZhdWx0OmIuaCgpLGIuYShnKX19fSkpKTplKEMoXCJXcm9uZyBjb2RlLiBUcnkgYWdhaW4uXCIpLnRvU3RyaW5nKCkpfUsucGhvbmVTaWduSW5GaW5pc2g9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnPW5ldyBkbihmdW5jdGlvbigpe2cubSgpO1xuTChcInBob25lU2lnbkluU3RhcnRcIixhLGIsYyl9LGZ1bmN0aW9uKCl7ZW4oYSxnLGMsZSl9LGZ1bmN0aW9uKCl7Zy5tKCk7UyhhLGIpfSxmdW5jdGlvbigpe2cubSgpO0woXCJwaG9uZVNpZ25JblN0YXJ0XCIsYSxiLGMpfSxZaChjKSxkLEgoVyhhKSksSihXKGEpKSk7Zy5yZW5kZXIoYik7WShhLGcpO2YmJmcuYShmKX07dmFyIGduPSF6JiYhKHkoXCJTYWZhcmlcIikmJiEoWGIoKXx8eShcIkNvYXN0XCIpfHx5KFwiT3BlcmFcIil8fHkoXCJFZGdlXCIpfHx5KFwiRmlyZWZveFwiKXx8eShcIkZ4aU9TXCIpfHx5KFwiU2lsa1wiKXx8eShcIkFuZHJvaWRcIikpKTtmdW5jdGlvbiBobihhLGIpe2lmKC8tW2Etel0vLnRlc3QoYikpcmV0dXJuIG51bGw7aWYoZ24mJmEuZGF0YXNldCl7aWYoISgheShcIkFuZHJvaWRcIil8fFhiKCl8fHkoXCJGaXJlZm94XCIpfHx5KFwiRnhpT1NcIil8fHkoXCJPcGVyYVwiKXx8eShcIlNpbGtcIil8fGIgaW4gYS5kYXRhc2V0KSlyZXR1cm4gbnVsbDthPWEuZGF0YXNldFtiXTtyZXR1cm4gdm9pZCAwPT09XG5hP251bGw6YX1yZXR1cm4gYS5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiK1N0cmluZyhiKS5yZXBsYWNlKC8oW0EtWl0pL2csXCItJDFcIikudG9Mb3dlckNhc2UoKSl9ZnVuY3Rpb24gam4oYSxiLGMpe3ZhciBkPXRoaXM7YT1oZChlayx7aXRlbXM6YX0sbnVsbCx0aGlzLnMpO2xrLmNhbGwodGhpcyxhLCEwLCEwKTtjJiYoYz1rbihhLGMpKSYmKGMuZm9jdXMoKSxCaihjLGEpKTtPKHRoaXMsYSxmdW5jdGlvbihlKXtpZihlPShlPWFkKGUudGFyZ2V0LFwiZmlyZWJhc2V1aS1pZC1saXN0LWJveC1kaWFsb2ctYnV0dG9uXCIpKSYmaG4oZSxcImxpc3Rib3hpZFwiKSltay5jYWxsKGQpLGIoZSl9KX1mdW5jdGlvbiBrbihhLGIpe2E9KGF8fGRvY3VtZW50KS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkJVVFRPTlwiKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKylpZihobihhW2NdLFwibGlzdGJveGlkXCIpPT09YilyZXR1cm4gYVtjXTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBsbigpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLXBob25lLW51bWJlclwiKX1cbmZ1bmN0aW9uIG1uKCl7cmV0dXJuIE0odGhpcyxcImZpcmViYXNldWktaWQtY291bnRyeS1zZWxlY3RvclwiKX1mdW5jdGlvbiBubigpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLWlkLXBob25lLW51bWJlci1lcnJvclwiKX1mdW5jdGlvbiBvbihhLGIpe3ZhciBjPWEuYSxkPXBuKFwiMS1VUy0wXCIsYyksZT1udWxsO2ImJnBuKGIsYyk/ZT1iOmQ/ZT1cIjEtVVMtMFwiOmU9MDxjLmxlbmd0aD9jWzBdLmM6bnVsbDtpZighZSl0aHJvdyBFcnJvcihcIk5vIGF2YWlsYWJsZSBkZWZhdWx0IGNvdW50cnlcIik7cW4uY2FsbCh0aGlzLGUsYSl9ZnVuY3Rpb24gcG4oYSxiKXthPVFoKGEpO3JldHVybiEoIWF8fCFNYShiLGEpKX1mdW5jdGlvbiBybihhKXtyZXR1cm4gYS5tYXAoZnVuY3Rpb24oYil7cmV0dXJue2lkOmIuYyxNYTpcImZpcmViYXNldWktZmxhZyBcIitzbihiKSxsYWJlbDpiLm5hbWUrXCIgXCIrKFwiXFx1MjAwZStcIitiLmIpfX0pfWZ1bmN0aW9uIHNuKGEpe3JldHVyblwiZmlyZWJhc2V1aS1mbGFnLVwiK1xuYS5mfWZ1bmN0aW9uIHRuKGEpe3ZhciBiPXRoaXM7am4uY2FsbCh0aGlzLHJuKGEuYSksZnVuY3Rpb24oYyl7cW4uY2FsbChiLGMsYSwhMCk7Yi5PKCkuZm9jdXMoKX0sdGhpcy5CYSl9ZnVuY3Rpb24gcW4oYSxiLGMpe3ZhciBkPVFoKGEpO2QmJihjJiYoYz1VYShXaShsbi5jYWxsKHRoaXMpKXx8XCJcIiksYj1QaChiLGMpLGIubGVuZ3RoJiZiWzBdLmIhPWQuYiYmKGM9XCIrXCIrZC5iK2Muc3Vic3RyKGJbMF0uYi5sZW5ndGgrMSksWGkobG4uY2FsbCh0aGlzKSxjKSkpLGI9UWgodGhpcy5CYSksdGhpcy5CYT1hLGE9TSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1jb3VudHJ5LXNlbGVjdG9yLWZsYWdcIiksYiYmVmkoYSxzbihiKSksVWkoYSxzbihkKSksJGMoTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1jb3VudHJ5LXNlbGVjdG9yLWNvZGVcIiksXCJcXHUyMDBlK1wiK2QuYikpfWZ1bmN0aW9uIHVuKGEsYixjLGQsZSxmLGcsaCxrLHApe1AuY2FsbCh0aGlzLGVsLHtHYjpiLEFhOmt8fG51bGwsVmE6ISFjLGlhOiEhZn0sXG5wLFwicGhvbmVTaWduSW5TdGFydFwiLHtGOmQsRDplfSk7dGhpcy5IPWh8fG51bGw7dGhpcy5NPWI7dGhpcy5sPWE7dGhpcy53PWN8fG51bGw7dGhpcy5wYT1nfHxudWxsfW0odW4sUCk7dW4ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLmVhKHRoaXMucGEsdGhpcy5IKTt0aGlzLlAodGhpcy5sLHRoaXMud3x8dm9pZCAwKTt0aGlzLk18fHVrKHRoaXMsdGhpcy5PKCksdGhpcy5pKCkpO3ZrKHRoaXMsdGhpcy5pKCksdGhpcy5sKTt0aGlzLk8oKS5mb2N1cygpO0JtKHRoaXMuTygpLCh0aGlzLk8oKS52YWx1ZXx8XCJcIikubGVuZ3RoKTtQLnByb3RvdHlwZS52LmNhbGwodGhpcyl9O3VuLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy53PXRoaXMubD1udWxsO1AucHJvdG90eXBlLm8uY2FsbCh0aGlzKX07dSh1bi5wcm90b3R5cGUse0NiOm5rLE86bG4sQjpubixlYTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcyxlPWxuLmNhbGwodGhpcyksZj1tbi5jYWxsKHRoaXMpLGc9bm4uY2FsbCh0aGlzKSxcbmg9YXx8Vmgsaz1oLmE7aWYoMD09ay5sZW5ndGgpdGhyb3cgRXJyb3IoXCJObyBhdmFpbGFibGUgY291bnRyaWVzIHByb3ZpZGVkLlwiKTtvbi5jYWxsKGQsaCxiKTtPKHRoaXMsZixmdW5jdGlvbigpe3RuLmNhbGwoZCxoKX0pO0pqKHRoaXMsZSxmdW5jdGlvbigpe1BqKGcpJiYoTihlLCEwKSxOaihnKSk7dmFyIHA9VWEoV2koZSl8fFwiXCIpLHQ9UWgodGhpcy5CYSksST1QaChoLHApO3A9cG4oXCIxLVVTLTBcIixrKTtJLmxlbmd0aCYmSVswXS5iIT10LmImJih0PUlbMF0scW4uY2FsbChkLFwiMVwiPT10LmImJnA/XCIxLVVTLTBcIjp0LmMsaCkpfSk7YyYmS2oodGhpcyxlLGZ1bmN0aW9uKCl7YygpfSl9LFU6ZnVuY3Rpb24oYSl7dmFyIGI9VWEoV2kobG4uY2FsbCh0aGlzKSl8fFwiXCIpO2E9YXx8Vmg7dmFyIGM9YS5hLGQ9UGgoVmgsYik7aWYoZC5sZW5ndGgmJiFNYShjLGRbMF0pKXRocm93IFhpKGxuLmNhbGwodGhpcykpLGxuLmNhbGwodGhpcykuZm9jdXMoKSxPaihubi5jYWxsKHRoaXMpLEMoXCJUaGUgY291bnRyeSBjb2RlIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWQuXCIpLnRvU3RyaW5nKCkpLFxuRXJyb3IoXCJUaGUgY291bnRyeSBjb2RlIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO2M9UWgodGhpcy5CYSk7ZC5sZW5ndGgmJmRbMF0uYiE9Yy5iJiZxbi5jYWxsKHRoaXMsZFswXS5jLGEpO2QubGVuZ3RoJiYoYj1iLnN1YnN0cihkWzBdLmIubGVuZ3RoKzEpKTtyZXR1cm4gYj9uZXcgV2godGhpcy5CYSxiKTpudWxsfSxKYTptbixiYTpmdW5jdGlvbigpe3JldHVybiBNKHRoaXMsXCJmaXJlYmFzZXVpLXJlY2FwdGNoYS1jb250YWluZXJcIil9LHU6ZnVuY3Rpb24oKXtyZXR1cm4gTSh0aGlzLFwiZmlyZWJhc2V1aS1pZC1yZWNhcHRjaGEtZXJyb3JcIil9LGk6amwsdWE6a2wsUDpsbH0pO2Z1bmN0aW9uIHZuKGEsYixjLGQpe3RyeXt2YXIgZT1iLlUoUWkpfWNhdGNoKGYpe3JldHVybn1lP09pPyhiLiQoXCJtZGwtc3Bpbm5lciBtZGwtc3Bpbm5lci0tc2luZ2xlLWNvbG9yIG1kbC1qcy1zcGlubmVyIGlzLWFjdGl2ZSBmaXJlYmFzZXVpLXByb2dyZXNzLWRpYWxvZy1sb2FkaW5nLWljb25cIixcbkMoXCJWZXJpZnlpbmcuLi5cIikudG9TdHJpbmcoKSksVihhLGIuSShyKGEuY2MsYSksW1loKGUpLGNdLGZ1bmN0aW9uKGYpe3ZhciBnPVEoYik7Yi4kKFwiZmlyZWJhc2V1aS1pY29uLWRvbmVcIixDKFwiQ29kZSBzZW50IVwiKS50b1N0cmluZygpKTt2YXIgaD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yi5oKCk7Yi5tKCk7TChcInBob25lU2lnbkluRmluaXNoXCIsYSxnLGUsMTUsZil9LDFFMyk7VihhLGZ1bmN0aW9uKCl7YiYmYi5oKCk7Y2xlYXJUaW1lb3V0KGgpfSl9LGZ1bmN0aW9uKGYpe2IuaCgpO2lmKCFmLm5hbWV8fFwiY2FuY2VsXCIhPWYubmFtZSl7Z3JlY2FwdGNoYS5yZXNldChSaSk7T2k9bnVsbDt2YXIgZz1mJiZmLm1lc3NhZ2V8fFwiXCI7aWYoZi5jb2RlKXN3aXRjaChmLmNvZGUpe2Nhc2UgXCJhdXRoL3Rvby1tYW55LXJlcXVlc3RzXCI6Zz1DKFwiVGhpcyBwaG9uZSBudW1iZXIgaGFzIGJlZW4gdXNlZCB0b28gbWFueSB0aW1lc1wiKS50b1N0cmluZygpO2JyZWFrO2Nhc2UgXCJhdXRoL2ludmFsaWQtcGhvbmUtbnVtYmVyXCI6Y2FzZSBcImF1dGgvbWlzc2luZy1waG9uZS1udW1iZXJcIjpiLk8oKS5mb2N1cygpO1xuT2ooYi5CKCksSGQoKS50b1N0cmluZygpKTtyZXR1cm47Y2FzZSBcImF1dGgvYWRtaW4tcmVzdHJpY3RlZC1vcGVyYXRpb25cIjppZihwaShXKGEpKSl7Zj1RKGIpO2IubSgpO0woXCJoYW5kbGVVbmF1dGhvcml6ZWRVc2VyXCIsYSxmLFloKGUpLGZpcmViYXNlLmF1dGguUGhvbmVBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQpO3JldHVybn1nPVQoZik7YnJlYWs7ZGVmYXVsdDpnPVQoZil9Yi5hKGcpfX0pKSk6UGk/T2ooYi51KCksQyhcIlNvbHZlIHRoZSByZUNBUFRDSEFcIikudG9TdHJpbmcoKSk6IVBpJiZkJiZiLmkoKS5jbGljaygpOihiLk8oKS5mb2N1cygpLE9qKGIuQigpLEhkKCkudG9TdHJpbmcoKSkpfUsucGhvbmVTaWduSW5TdGFydD1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1xaShXKGEpKXx8e307T2k9bnVsbDtQaT0hKGUmJlwiaW52aXNpYmxlXCI9PT1lLnNpemUpO3ZhciBmPVlsKGEpLGc9emkoVyhhKSksaD1mP3lpKFcoYSkpOm51bGw7Zz1jJiZjLmF8fGcmJmcuY3x8bnVsbDtjPWMmJlxuYy5BYXx8aDsoaD1BaShXKGEpKSkmJlVoKGgpO1FpPWg/bmV3IE9oKEFpKFcoYSkpKTpWaDt2YXIgaz1uZXcgdW4oZnVuY3Rpb24odCl7dm4oYSxrLHAsISghdHx8IXQua2V5Q29kZSkpfSxQaSxmP251bGw6ZnVuY3Rpb24oKXtwLmNsZWFyKCk7ay5tKCk7UyhhLGIpfSxIKFcoYSkpLEooVyhhKSksZixRaSxnLGMpO2sucmVuZGVyKGIpO1koYSxrKTtkJiZrLmEoZCk7ZS5jYWxsYmFjaz1mdW5jdGlvbih0KXtrLnUoKSYmTmooay51KCkpO09pPXQ7UGl8fHZuKGEsayxwKX07ZVtcImV4cGlyZWQtY2FsbGJhY2tcIl09ZnVuY3Rpb24oKXtPaT1udWxsfTt2YXIgcD1uZXcgZmlyZWJhc2UuYXV0aC5SZWNhcHRjaGFWZXJpZmllcihQaT9rLmJhKCk6ay5pKCksZSxmbihhKS5hcHApO1YoYSxrLkkocihwLnJlbmRlcixwKSxbXSxmdW5jdGlvbih0KXtSaT10fSxmdW5jdGlvbih0KXt0Lm5hbWUmJlwiY2FuY2VsXCI9PXQubmFtZXx8KHQ9VCh0KSxrLm0oKSxTKGEsYix2b2lkIDAsdCkpfSkpfTtLLnByZWZpbGxlZEVtYWlsU2lnbkluPVxuZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW5ldyBFbTtkLnJlbmRlcihiKTtZKGEsZCk7VihhLGQuSShyKFUoYSkuZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwsVShhKSksW2NdLGZ1bmN0aW9uKGUpe2QubSgpO3ZhciBmPSEoIVhsKGEpfHwhd24oYSkpO2FtKGEsYixlLGMsdm9pZCAwLGYpfSxmdW5jdGlvbihlKXtlPVQoZSk7ZC5tKCk7TChcInNpZ25JblwiLGEsYixjLGUpfSkpfTtmdW5jdGlvbiB4bihhLGIsYyxkLGUpe1AuY2FsbCh0aGlzLGRsLHtTYjpifSxlLFwicHJvdmlkZXJTaWduSW5cIix7RjpjLEQ6ZH0pO3RoaXMuaT1hfW0oeG4sUCk7eG4ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLmwodGhpcy5pKTtQLnByb3RvdHlwZS52LmNhbGwodGhpcyl9O3huLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5pPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KHhuLnByb3RvdHlwZSx7bDpmdW5jdGlvbihhKXtmdW5jdGlvbiBiKGcpe2EoZyl9Zm9yKHZhciBjPXRoaXMuZz9cblRjKFwiZmlyZWJhc2V1aS1pZC1pZHAtYnV0dG9uXCIsdGhpcy5nfHx0aGlzLnMuYSk6W10sZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9aG4oZSxcInByb3ZpZGVySWRcIik7Tyh0aGlzLGUsemEoYixmKSl9fX0pO0sucHJvdmlkZXJTaWduSW49ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IHhuKGZ1bmN0aW9uKGYpe2Y9PWZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuUFJPVklERVJfSUQ/KGUubSgpLFpsKGEsYixkKSk6Zj09ZmlyZWJhc2UuYXV0aC5QaG9uZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRD8oZS5tKCksTChcInBob25lU2lnbkluU3RhcnRcIixhLGIpKTpcImFub255bW91c1wiPT1mP1VsKGEsZSk6UmwoYSxlLGYsZCk7WihhKTthLmwuY2FuY2VsKCl9LGppKFcoYSkpLEgoVyhhKSksSihXKGEpKSk7ZS5yZW5kZXIoYik7WShhLGUpO2MmJmUuYShjKTt5bihhKX07Sy5zZW5kRW1haWxMaW5rRm9yU2lnbkluPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW5ldyBmbTtcbmUucmVuZGVyKGIpO1koYSxlKTtibShhLGUsYyxkLGZ1bmN0aW9uKGYpe2UubSgpO2YmJlwiYXV0aC9hZG1pbi1yZXN0cmljdGVkLW9wZXJhdGlvblwiPT1mLmNvZGUmJnBpKFcoYSkpP0woXCJoYW5kbGVVbmF1dGhvcml6ZWRVc2VyXCIsYSxiLGMsZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCk6KGY9VChmKSxMKFwic2lnbkluXCIsYSxiLGMsZikpfSl9O2Z1bmN0aW9uIHpuKGEsYixjLGQsZSxmLGcpe1AuY2FsbCh0aGlzLHdrLHtlbWFpbDpjLFZhOiEhYixpYTohIWZ9LGcsXCJzaWduSW5cIix7RjpkLEQ6ZX0pO3RoaXMuaT1hO3RoaXMudT1ifW0oem4sUCk7em4ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLncodGhpcy5pKTt0aGlzLkIodGhpcy5pLHRoaXMudXx8dm9pZCAwKTt0aGlzLmwoKS5mb2N1cygpO0JtKHRoaXMubCgpLCh0aGlzLmwoKS52YWx1ZXx8XCJcIikubGVuZ3RoKTtQLnByb3RvdHlwZS52LmNhbGwodGhpcyl9O3puLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy51PVxudGhpcy5pPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KHpuLnByb3RvdHlwZSx7bDpzbCxNOnRsLHc6dWwsSDp2bCxqOndsLFU6amwsUDprbCxCOmxsfSk7Sy5zaWduSW49ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WGwoYSksZj1uZXcgem4oZnVuY3Rpb24oKXt2YXIgZz1mLGg9Zy5qKCl8fFwiXCI7aCYmJGwoYSxnLGgpfSxlP251bGw6ZnVuY3Rpb24oKXtmLm0oKTtTKGEsYixjKX0sYyxIKFcoYSkpLEooVyhhKSksZSk7Zi5yZW5kZXIoYik7WShhLGYpO2QmJmYuYShkKX07ZnVuY3Rpb24gQW4oYSxiLGMsZCxlLGYsZyl7UC5jYWxsKHRoaXMsTmsse2tjOmEseWI6YyxFYjohIWR9LGcsXCJ1bmF1dGhvcml6ZWRVc2VyXCIse0Y6ZSxEOmZ9KTt0aGlzLmw9Yjt0aGlzLmk9ZH1tKEFuLFApO0FuLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPU0odGhpcyxcImZpcmViYXNldWktaWQtdW5hdXRob3JpemVkLXVzZXItaGVscC1saW5rXCIpO3RoaXMuaSYmYiYmTyh0aGlzLFxuYixmdW5jdGlvbigpe2EuaSgpfSk7Tyh0aGlzLHRoaXMudSgpLGZ1bmN0aW9uKCl7YS5sKCl9KTt0aGlzLnUoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07QW4ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmk9dGhpcy5sPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KEFuLnByb3RvdHlwZSx7dTprbH0pO0suaGFuZGxlVW5hdXRob3JpemVkVXNlcj1mdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKCl7UyhhLGIpfWQ9PT1maXJlYmFzZS5hdXRoLkVtYWlsQXV0aFByb3ZpZGVyLlBST1ZJREVSX0lEP2U9ZnVuY3Rpb24oKXtabChhLGIpfTpkPT09ZmlyZWJhc2UuYXV0aC5QaG9uZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCYmKGU9ZnVuY3Rpb24oKXtMKFwicGhvbmVTaWduSW5TdGFydFwiLGEsYil9KTt2YXIgZj1udWxsLGc9bnVsbDtkPT09ZmlyZWJhc2UuYXV0aC5FbWFpbEF1dGhQcm92aWRlci5QUk9WSURFUl9JRCYmb2koVyhhKSk/KGY9dWkoVyhhKSksXG5nPXZpKFcoYSkpKTpwaShXKGEpKSYmKGY9c2koVyhhKSksZz10aShXKGEpKSk7dmFyIGg9bmV3IEFuKGMsZnVuY3Rpb24oKXtoLm0oKTtlKCl9LGYsZyxIKFcoYSkpLEooVyhhKSkpO2gucmVuZGVyKGIpO1koYSxoKX07ZnVuY3Rpb24gQm4oYSxiLGMsZCxlLGYpe1AuY2FsbCh0aGlzLE9rLHtlbWFpbDphfSxmLFwidW5zdXBwb3J0ZWRQcm92aWRlclwiLHtGOmQsRDplfSk7dGhpcy5sPWI7dGhpcy5pPWN9bShCbixQKTtCbi5wcm90b3R5cGUudj1mdW5jdGlvbigpe3RoaXMudyh0aGlzLmwsdGhpcy5pKTt0aGlzLnUoKS5mb2N1cygpO1AucHJvdG90eXBlLnYuY2FsbCh0aGlzKX07Qm4ucHJvdG90eXBlLm89ZnVuY3Rpb24oKXt0aGlzLmk9dGhpcy5sPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KEJuLnByb3RvdHlwZSx7dTpqbCxCOmtsLHc6bGx9KTtLLnVuc3VwcG9ydGVkUHJvdmlkZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW5ldyBCbihjLGZ1bmN0aW9uKCl7ZC5tKCk7TChcInBhc3N3b3JkUmVjb3ZlcnlcIixcbmEsYixjKX0sZnVuY3Rpb24oKXtkLm0oKTtTKGEsYixjKX0sSChXKGEpKSxKKFcoYSkpKTtkLnJlbmRlcihiKTtZKGEsZCl9O2Z1bmN0aW9uIENuKGEsYil7dGhpcy4kPSExO3ZhciBjPURuKGIpO2lmKEVuW2NdKXRocm93IEVycm9yKCdBbiBBdXRoVUkgaW5zdGFuY2UgYWxyZWFkeSBleGlzdHMgZm9yIHRoZSBrZXkgXCInK2MrJ1wiJyk7RW5bY109dGhpczt0aGlzLmE9YTt0aGlzLnU9bnVsbDt0aGlzLlk9ITE7Rm4odGhpcy5hKTt0aGlzLmg9ZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCh7YXBpS2V5OmEuYXBwLm9wdGlvbnMuYXBpS2V5LGF1dGhEb21haW46YS5hcHAub3B0aW9ucy5hdXRoRG9tYWlufSxhLmFwcC5uYW1lK1wiLWZpcmViYXNldWktdGVtcFwiKS5hdXRoKCk7aWYoYT1hLmVtdWxhdG9yQ29uZmlnKWM9YS5wb3J0LHRoaXMuaC51c2VFbXVsYXRvcihhLnByb3RvY29sK1wiOi8vXCIrYS5ob3N0KyhudWxsPT09Yz9cIlwiOlwiOlwiK2MpLGEub3B0aW9ucyk7Rm4odGhpcy5oKTt0aGlzLmguc2V0UGVyc2lzdGVuY2UmJlxudGhpcy5oLnNldFBlcnNpc3RlbmNlKGZpcmViYXNlLmF1dGguQXV0aC5QZXJzaXN0ZW5jZS5TRVNTSU9OKTt0aGlzLm9hPWI7dGhpcy5jYT1uZXcgYmk7dGhpcy5nPXRoaXMuVD10aGlzLmk9dGhpcy5KPXRoaXMuTz1udWxsO3RoaXMucz1bXTt0aGlzLlo9ITE7dGhpcy5sPVBmLlhhKCk7dGhpcy5qPXRoaXMuQz1udWxsO3RoaXMuZGE9dGhpcy5BPSExfWZ1bmN0aW9uIEZuKGEpe2EmJmEuSU5URVJOQUwmJmEuSU5URVJOQUwubG9nRnJhbWV3b3JrJiZhLklOVEVSTkFMLmxvZ0ZyYW1ld29yayhcIkZpcmViYXNlVUktd2ViXCIpfXZhciBFbj17fTtmdW5jdGlvbiBEbihhKXtyZXR1cm4gYXx8XCJbREVGQVVMVF1cIn1mdW5jdGlvbiBTbChhKXtaKGEpO2EuaXx8KGEuaT1HbihhLGZ1bmN0aW9uKGIpe3JldHVybiBiJiYhemgoWChhKSk/RihmbihhKS5nZXRSZWRpcmVjdFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGN9LGZ1bmN0aW9uKGMpe2lmKGMmJlwiYXV0aC9lbWFpbC1hbHJlYWR5LWluLXVzZVwiPT1cbmMuY29kZSYmYy5lbWFpbCYmYy5jcmVkZW50aWFsKXRocm93IGM7cmV0dXJuIEhuKGEsYyl9KSk6RihVKGEpLmdldFJlZGlyZWN0UmVzdWx0KCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gZGkoVyhhKSkmJiFjLnVzZXImJmEuaiYmIWEuai5pc0Fub255bW91cz9mbihhKS5nZXRSZWRpcmVjdFJlc3VsdCgpOmN9KSl9KSk7cmV0dXJuIGEuaX1mdW5jdGlvbiBZKGEsYil7WihhKTthLmc9Yn12YXIgSW49bnVsbDtmdW5jdGlvbiBVKGEpe1ooYSk7cmV0dXJuIGEuaH1mdW5jdGlvbiBmbihhKXtaKGEpO3JldHVybiBhLmF9ZnVuY3Rpb24gWChhKXtaKGEpO3JldHVybiBhLm9hfWZ1bmN0aW9uIHduKGEpe1ooYSk7cmV0dXJuIGEuTz9hLk8uZW1haWxIaW50OnZvaWQgMH1sPUNuLnByb3RvdHlwZTtsLm5iPWZ1bmN0aW9uKCl7Wih0aGlzKTtyZXR1cm4hIUNoKFgodGhpcykpfHxKbih0ZigpKX07ZnVuY3Rpb24gSm4oYSl7YT1uZXcgUGIoYSk7cmV0dXJuXCJzaWduSW5cIj09PShhLmEuYS5nZXQoeC51Yil8fFxubnVsbCkmJiEhYS5hLmEuZ2V0KHguJGEpfWwuc3RhcnQ9ZnVuY3Rpb24oYSxiKXtLbih0aGlzLGEsYil9O2Z1bmN0aW9uIEtuKGEsYixjLGQpe1ooYSk7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmEubGFuZ3VhZ2VDb2RlJiYoYS51PWEuYS5sYW5ndWFnZUNvZGUpO3ZhciBlPVwiZW5cIi5yZXBsYWNlKC9fL2csXCItXCIpO2EuYS5sYW5ndWFnZUNvZGU9ZTthLmgubGFuZ3VhZ2VDb2RlPWU7YS5ZPSEwO1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5hLnRlbmFudElkJiYoYS5oLnRlbmFudElkPWEuYS50ZW5hbnRJZCk7YS5pYihjKTthLk89ZHx8bnVsbDt2YXIgZj1uLmRvY3VtZW50O2EuQz9hLkMudGhlbihmdW5jdGlvbigpe1wiY29tcGxldGVcIj09Zi5yZWFkeVN0YXRlP0xuKGEsYik6bGUod2luZG93LFwibG9hZFwiLGZ1bmN0aW9uKCl7TG4oYSxiKX0pfSk6XCJjb21wbGV0ZVwiPT1mLnJlYWR5U3RhdGU/TG4oYSxiKTpsZSh3aW5kb3csXCJsb2FkXCIsZnVuY3Rpb24oKXtMbihhLGIpfSl9ZnVuY3Rpb24gTG4oYSxcbmIpe3ZhciBjPXNmKGIsXCJDb3VsZCBub3QgZmluZCB0aGUgRmlyZWJhc2VVSSB3aWRnZXQgZWxlbWVudCBvbiB0aGUgcGFnZS5cIik7Yy5zZXRBdHRyaWJ1dGUoXCJsYW5nXCIsXCJlblwiLnJlcGxhY2UoL18vZyxcIi1cIikpO2lmKEluKXt2YXIgZD1JbjtaKGQpO3poKFgoZCkpJiZ0ZyhcIlVJIFdpZGdldCBpcyBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBwYWdlIGFuZCBpcyBwZW5kaW5nIHNvbWUgdXNlciBpbnRlcmFjdGlvbi4gT25seSBvbmUgd2lkZ2V0IGluc3RhbmNlIGNhbiBiZSByZW5kZXJlZCBwZXIgcGFnZS4gVGhlIHByZXZpb3VzIGluc3RhbmNlIGhhcyBiZWVuIGF1dG9tYXRpY2FsbHkgcmVzZXQuXCIpO0luLnJlc2V0KCl9SW49YTthLlQ9YztNbihhLGMpO2lmKGpoKG5ldyBraCkmJmpoKG5ldyBsaCkpe2I9c2YoYixcIkNvdWxkIG5vdCBmaW5kIHRoZSBGaXJlYmFzZVVJIHdpZGdldCBlbGVtZW50IG9uIHRoZSBwYWdlLlwiKTtjPXRmKCk7ZD1KaChXKGEpLmEsXCJxdWVyeVBhcmFtZXRlckZvclNpZ25JblN1Y2Nlc3NVcmxcIik7XG5jPShjPXRiKGMsZCkpP3pjKEJjKGMpKS50b1N0cmluZygpOm51bGw7YTp7ZD10ZigpO3ZhciBlPUJpKFcoYSkpO2Q9dGIoZCxlKXx8XCJcIjtmb3IoZiBpbiBOaSlpZihOaVtmXS50b0xvd2VyQ2FzZSgpPT1kLnRvTG93ZXJDYXNlKCkpe3ZhciBmPU5pW2ZdO2JyZWFrIGF9Zj1cImNhbGxiYWNrXCJ9c3dpdGNoKGYpe2Nhc2UgXCJjYWxsYmFja1wiOmMmJihmPVgoYSkseGgoc2gsYyxmKSk7YS5uYigpP0woXCJjYWxsYmFja1wiLGEsYik6UyhhLGIsd24oYSkpO2JyZWFrO2Nhc2UgXCJyZXNldFBhc3N3b3JkXCI6TChcInBhc3N3b3JkUmVzZXRcIixhLGIsY20oKSxkbSgpKTticmVhaztjYXNlIFwicmVjb3ZlckVtYWlsXCI6TChcImVtYWlsQ2hhbmdlUmV2b2NhdGlvblwiLGEsYixjbSgpKTticmVhaztjYXNlIFwicmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb25cIjpMKFwicmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb25cIixhLGIsY20oKSk7YnJlYWs7Y2FzZSBcInZlcmlmeUVtYWlsXCI6TChcImVtYWlsVmVyaWZpY2F0aW9uXCIsXG5hLGIsY20oKSxkbSgpKTticmVhaztjYXNlIFwidmVyaWZ5QW5kQ2hhbmdlRW1haWxcIjpMKFwidmVyaWZ5QW5kQ2hhbmdlRW1haWxcIixhLGIsY20oKSxkbSgpKTticmVhaztjYXNlIFwic2lnbkluXCI6TChcImVtYWlsTGlua1NpZ25JbkNhbGxiYWNrXCIsYSxiLHRmKCkpO05uKCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmMmJihmPVgoYSkseGgoc2gsYyxmKSk7UyhhLGIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmhhbmRsZWQgd2lkZ2V0IG9wZXJhdGlvbi5cIik7fWI9VyhhKTsoYj1MaShiKS51aVNob3dufHxudWxsKSYmYigpfWVsc2UgYj1zZihiLFwiQ291bGQgbm90IGZpbmQgdGhlIEZpcmViYXNlVUkgd2lkZ2V0IGVsZW1lbnQgb24gdGhlIHBhZ2UuXCIpLGY9bmV3IEpsKEMoXCJUaGUgYnJvd3NlciB5b3UgYXJlIHVzaW5nIGRvZXMgbm90IHN1cHBvcnQgV2ViIFN0b3JhZ2UuIFBsZWFzZSB0cnkgYWdhaW4gaW4gYSBkaWZmZXJlbnQgYnJvd3Nlci5cIikudG9TdHJpbmcoKSksZi5yZW5kZXIoYiksXG5ZKGEsZik7Yj1hLmcmJlwiYmxhbmtcIj09YS5nLkdhJiZHaShXKGEpKTtDaChYKGEpKSYmIWImJihiPUNoKFgoYSkpLEdtKGEsYi5hKSx3aChyaCxYKGEpKSl9ZnVuY3Rpb24gR24oYSxiKXtpZihhLkEpcmV0dXJuIGIoT24oYSkpO1YoYSxmdW5jdGlvbigpe2EuQT0hMX0pO2lmKGRpKFcoYSkpKXt2YXIgYz1uZXcgVmUoZnVuY3Rpb24oZCl7VihhLGEuYS5vbkF1dGhTdGF0ZUNoYW5nZWQoZnVuY3Rpb24oZSl7YS5qPWU7YS5BfHwoYS5BPSEwLGQoYihPbihhKSkpKX0pKX0pO1YoYSxjKTtyZXR1cm4gY31hLkE9ITA7cmV0dXJuIGIobnVsbCl9ZnVuY3Rpb24gT24oYSl7WihhKTtyZXR1cm4gZGkoVyhhKSkmJmEuaiYmYS5qLmlzQW5vbnltb3VzP2EuajpudWxsfWZ1bmN0aW9uIFYoYSxiKXtaKGEpO2lmKGIpe2Eucy5wdXNoKGIpO3ZhciBjPWZ1bmN0aW9uKCl7UWEoYS5zLGZ1bmN0aW9uKGQpe3JldHVybiBkPT1ifSl9O1wiZnVuY3Rpb25cIiE9dHlwZW9mIGImJmIudGhlbihjLGMpfX1sLkRiPVxuZnVuY3Rpb24oKXtaKHRoaXMpO3RoaXMuWj0hMH07ZnVuY3Rpb24gUG4oYSl7WihhKTt2YXIgYjsoYj1hLlopfHwoYT1XKGEpLGE9eGkoYSxmaXJlYmFzZS5hdXRoLkdvb2dsZUF1dGhQcm92aWRlci5QUk9WSURFUl9JRCksYj0hKCFhfHxcInNlbGVjdF9hY2NvdW50XCIhPT1hLnByb21wdCkpO3JldHVybiBifWZ1bmN0aW9uIE1sKGEpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgYS5hLmxhbmd1YWdlQ29kZSYmYS5ZJiYoYS5ZPSExLGEuYS5sYW5ndWFnZUNvZGU9YS51KX1mdW5jdGlvbiBHbShhLGIpe2EuYS50ZW5hbnRJZD1iO2EuaC50ZW5hbnRJZD1ifWwucmVzZXQ9ZnVuY3Rpb24oKXtaKHRoaXMpO3ZhciBhPXRoaXM7dGhpcy5UJiZ0aGlzLlQucmVtb3ZlQXR0cmlidXRlKFwibGFuZ1wiKTt0aGlzLkomJkRlKHRoaXMuSik7TWwodGhpcyk7dGhpcy5PPW51bGw7Tm4oKTt3aChyaCxYKHRoaXMpKTtaKHRoaXMpO3RoaXMubC5jYW5jZWwoKTt0aGlzLmk9Rih7dXNlcjpudWxsLGNyZWRlbnRpYWw6bnVsbH0pO1xuSW49PXRoaXMmJihJbj1udWxsKTt0aGlzLlQ9bnVsbDtmb3IodmFyIGI9MDtiPHRoaXMucy5sZW5ndGg7YisrKWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuc1tiXSl0aGlzLnNbYl0oKTtlbHNlIHRoaXMuc1tiXS5jYW5jZWwmJnRoaXMuc1tiXS5jYW5jZWwoKTt0aGlzLnM9W107QWgoWCh0aGlzKSk7dGhpcy5nJiYodGhpcy5nLm0oKSx0aGlzLmc9bnVsbCk7dGhpcy5MPW51bGw7dGhpcy5oJiYodGhpcy5DPW1tKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXthLkM9bnVsbH0sZnVuY3Rpb24oKXthLkM9bnVsbH0pKX07ZnVuY3Rpb24gTW4oYSxiKXthLkw9bnVsbDthLko9bmV3IEVlKGIpO2EuSi5yZWdpc3RlcigpO2tlKGEuSixcInBhZ2VFbnRlclwiLGZ1bmN0aW9uKGMpe2M9YyYmYy5wYWdlSWQ7aWYoYS5MIT1jKXt2YXIgZD1XKGEpOyhkPUxpKGQpLnVpQ2hhbmdlZHx8bnVsbCkmJmQoYS5MLGMpO2EuTD1jfX0pfWwuaWI9ZnVuY3Rpb24oYSl7Wih0aGlzKTt2YXIgYj10aGlzLmNhLGM7Zm9yKGMgaW4gYSl0cnl7SWgoYi5hLFxuYyxhW2NdKX1jYXRjaChkKXtvZygnSW52YWxpZCBjb25maWc6IFwiJytjKydcIicsdm9pZCAwKX1mYyYmSWgoYi5hLFwicG9wdXBNb2RlXCIsITEpO0FpKGIpOyF0aGlzLmRhJiZLaShXKHRoaXMpKSYmKHRnKFwic2lnbkluU3VjY2VzcyBjYWxsYmFjayBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHNpZ25JblN1Y2Nlc3NXaXRoQXV0aFJlc3VsdCBjYWxsYmFjayBpbnN0ZWFkLlwiKSx0aGlzLmRhPSEwKX07ZnVuY3Rpb24gVyhhKXtaKGEpO3JldHVybiBhLmNhfWwuV2I9ZnVuY3Rpb24oKXtaKHRoaXMpO3ZhciBhPVcodGhpcyksYj1KaChhLmEsXCJ3aWRnZXRVcmxcIik7YT1CaShhKTt2YXIgYz1iLnNlYXJjaChzYik7Zm9yKHZhciBkPTAsZSxmPVtdOzA8PShlPXJiKGIsZCxhLGMpKTspZi5wdXNoKGIuc3Vic3RyaW5nKGQsZSkpLGQ9TWF0aC5taW4oYi5pbmRleE9mKFwiJlwiLGUpKzF8fGMsYyk7Zi5wdXNoKGIuc3Vic3RyKGQpKTtiPWYuam9pbihcIlwiKS5yZXBsYWNlKHViLFwiJDFcIik7Yz1cIj1cIitlbmNvZGVVUklDb21wb25lbnQoXCJzZWxlY3RcIik7XG4oYSs9Yyk/KGM9Yi5pbmRleE9mKFwiI1wiKSwwPmMmJihjPWIubGVuZ3RoKSxkPWIuaW5kZXhPZihcIj9cIiksMD5kfHxkPmM/KGQ9YyxlPVwiXCIpOmU9Yi5zdWJzdHJpbmcoZCsxLGMpLGI9W2Iuc3Vic3RyKDAsZCksZSxiLnN1YnN0cihjKV0sYz1iWzFdLGJbMV09YT9jP2MrXCImXCIrYTphOmMsYz1iWzBdKyhiWzFdP1wiP1wiK2JbMV06XCJcIikrYlsyXSk6Yz1iO1codGhpcykuYS5nZXQoXCJwb3B1cE1vZGVcIik/KGE9KHdpbmRvdy5zY3JlZW4uYXZhaWxIZWlnaHQtNjAwKS8yLGI9KHdpbmRvdy5zY3JlZW4uYXZhaWxXaWR0aC01MDApLzIsYz1jfHxcImFib3V0OmJsYW5rXCIsYT17d2lkdGg6NTAwLGhlaWdodDo2MDAsdG9wOjA8YT9hOjAsbGVmdDowPGI/YjowLGxvY2F0aW9uOiEwLHJlc2l6YWJsZTohMCxzdGF0dXNiYXI6ITAsdG9vbGJhcjohMX0sYS50YXJnZXQ9YS50YXJnZXR8fGMudGFyZ2V0fHxcImdvb2dsZV9wb3B1cFwiLGEud2lkdGg9YS53aWR0aHx8NjkwLGEuaGVpZ2h0PWEuaGVpZ2h0fHw1MDAsXG4oYT1wZihjLGEpKSYmYS5mb2N1cygpKTpOYyh3aW5kb3cubG9jYXRpb24sYyl9O2Z1bmN0aW9uIFooYSl7aWYoYS4kKXRocm93IEVycm9yKFwiQXV0aFVJIGluc3RhbmNlIGlzIGRlbGV0ZWQhXCIpO31sLldhPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztaKHRoaXMpO3JldHVybiB0aGlzLmguYXBwLmRlbGV0ZSgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYj1EbihYKGEpKTtkZWxldGUgRW5bYl07YS5yZXNldCgpO2EuJD0hMH0pfTtmdW5jdGlvbiB5bihhKXtaKGEpO3RyeXtRZihhLmwsbGkoVyhhKSksUG4oYSkpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGEuZz9WbChhLGEuZyxiKTohMX0pfWNhdGNoKGIpe319bC5JYj1mdW5jdGlvbihhLGIpe1oodGhpcyk7dmFyIGM9dGhpcyxkPXZmKCk7aWYoIURpKFcodGhpcykpKXJldHVybiBkZihFcnJvcihcIkVtYWlsIGxpbmsgc2lnbi1pbiBzaG91bGQgYmUgZW5hYmxlZCB0byB0cmlnZ2VyIGVtYWlsIHNlbmRpbmcuXCIpKTt2YXIgZT1GaShXKHRoaXMpKSxcbmY9bmV3IFBiKGUudXJsKTtRYihmLGQpO2ImJmIuYSYmKEdoKGQsYixYKHRoaXMpKSxUYihmLGIuYS5wcm92aWRlcklkKSk7UmIoZixFaShXKHRoaXMpKSk7cmV0dXJuIEduKHRoaXMsZnVuY3Rpb24oZyl7ZyYmKChnPWcudWlkKT9mLmEuYS5zZXQoeC5QYSxnKTpOYihmLmEuYSx4LlBhKSk7ZS51cmw9Zi50b1N0cmluZygpO3JldHVybiBVKGMpLnNlbmRTaWduSW5MaW5rVG9FbWFpbChhLGUpfSkudGhlbihmdW5jdGlvbigpe3ZhciBnPVgoYyksaD17fTtoLmVtYWlsPWE7eGgodGgsWWcoZCxKU09OLnN0cmluZ2lmeShoKSksZyl9LGZ1bmN0aW9uKGcpe3doKHVoLFgoYykpO3doKHRoLFgoYykpO3Rocm93IGc7fSl9O2Z1bmN0aW9uIEhtKGEsYil7dmFyIGM9U2IobmV3IFBiKGIpKTtpZighYylyZXR1cm4gRihudWxsKTtiPW5ldyBWZShmdW5jdGlvbihkLGUpe3ZhciBmPWZuKGEpLm9uQXV0aFN0YXRlQ2hhbmdlZChmdW5jdGlvbihnKXtmKCk7ZyYmZy5pc0Fub255bW91cyYmZy51aWQ9PT1cbmM/ZChnKTpnJiZnLmlzQW5vbnltb3VzJiZnLnVpZCE9PWM/ZShFcnJvcihcImFub255bW91cy11c2VyLW1pc21hdGNoXCIpKTplKEVycm9yKFwiYW5vbnltb3VzLXVzZXItbm90LWZvdW5kXCIpKX0pO1YoYSxmKX0pO1YoYSxiKTtyZXR1cm4gYn1mdW5jdGlvbiBMbShhLGIsYyxkLGUpe1ooYSk7dmFyIGY9ZXx8bnVsbCxnPWZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbFdpdGhMaW5rKGMsZCk7Yz1mP1UoYSkuc2lnbkluV2l0aEVtYWlsTGluayhjLGQpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGgudXNlci5saW5rV2l0aENyZWRlbnRpYWwoZil9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG1tKGEpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBIbihhLHtjb2RlOlwiYXV0aC9lbWFpbC1hbHJlYWR5LWluLXVzZVwifSxmKX0pOlUoYSkuZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwoYykudGhlbihmdW5jdGlvbihoKXtyZXR1cm4gaC5sZW5ndGg/SG4oYSx7Y29kZTpcImF1dGgvZW1haWwtYWxyZWFkeS1pbi11c2VcIn0sXG5nKTpiLmxpbmtXaXRoQ3JlZGVudGlhbChnKX0pO1YoYSxjKTtyZXR1cm4gY31mdW5jdGlvbiBNbShhLGIsYyxkKXtaKGEpO3ZhciBlPWR8fG51bGwsZjtiPVUoYSkuc2lnbkluV2l0aEVtYWlsTGluayhiLGMpLnRoZW4oZnVuY3Rpb24oZyl7Zj17dXNlcjpnLnVzZXIsY3JlZGVudGlhbDpudWxsLG9wZXJhdGlvblR5cGU6Zy5vcGVyYXRpb25UeXBlLGFkZGl0aW9uYWxVc2VySW5mbzpnLmFkZGl0aW9uYWxVc2VySW5mb307aWYoZSlyZXR1cm4gZy51c2VyLmxpbmtXaXRoQ3JlZGVudGlhbChlKS50aGVuKGZ1bmN0aW9uKGgpe2Y9e3VzZXI6aC51c2VyLGNyZWRlbnRpYWw6ZSxvcGVyYXRpb25UeXBlOmYub3BlcmF0aW9uVHlwZSxhZGRpdGlvbmFsVXNlckluZm86aC5hZGRpdGlvbmFsVXNlckluZm99fSl9KS50aGVuKGZ1bmN0aW9uKCl7bW0oYSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGZuKGEpLnVwZGF0ZUN1cnJlbnRVc2VyKGYudXNlcil9KS50aGVuKGZ1bmN0aW9uKCl7Zi51c2VyPVxuZm4oYSkuY3VycmVudFVzZXI7cmV0dXJuIGZ9KTtWKGEsYik7cmV0dXJuIGJ9ZnVuY3Rpb24gTm4oKXt2YXIgYT10ZigpO2lmKEpuKGEpKXthPW5ldyBQYihhKTtmb3IodmFyIGIgaW4geCl4Lmhhc093blByb3BlcnR5KGIpJiZOYihhLmEuYSx4W2JdKTtiPXtzdGF0ZTpcInNpZ25JblwiLG1vZGU6XCJlbWFpbExpbmtcIixvcGVyYXRpb246XCJjbGVhclwifTt2YXIgYz1uLmRvY3VtZW50LnRpdGxlO24uaGlzdG9yeSYmbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZSYmbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZShiLGMsYS50b1N0cmluZygpKX19bC5iYz1mdW5jdGlvbihhLGIpe1oodGhpcyk7dmFyIGM9dGhpcztyZXR1cm4gVSh0aGlzKS5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChhLGIpLnRoZW4oZnVuY3Rpb24oZCl7cmV0dXJuIEduKGMsZnVuY3Rpb24oZSl7cmV0dXJuIGU/bW0oYykudGhlbihmdW5jdGlvbigpe3JldHVybiBIbihjLHtjb2RlOlwiYXV0aC9lbWFpbC1hbHJlYWR5LWluLXVzZVwifSxcbmZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChhLGIpKX0pOmR9KX0pfTtsLlliPWZ1bmN0aW9uKGEsYil7Wih0aGlzKTt2YXIgYz10aGlzO3JldHVybiBHbih0aGlzLGZ1bmN0aW9uKGQpe2lmKGQpe3ZhciBlPWZpcmViYXNlLmF1dGguRW1haWxBdXRoUHJvdmlkZXIuY3JlZGVudGlhbChhLGIpO3JldHVybiBkLmxpbmtXaXRoQ3JlZGVudGlhbChlKX1yZXR1cm4gVShjKS5jcmVhdGVVc2VyV2l0aEVtYWlsQW5kUGFzc3dvcmQoYSxiKX0pfTtsLmFjPWZ1bmN0aW9uKGEpe1oodGhpcyk7dmFyIGI9dGhpcztyZXR1cm4gR24odGhpcyxmdW5jdGlvbihjKXtyZXR1cm4gYz9jLmxpbmtXaXRoQ3JlZGVudGlhbChhKS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBkfSxmdW5jdGlvbihkKXtpZihkJiZcImF1dGgvZW1haWwtYWxyZWFkeS1pbi11c2VcIj09ZC5jb2RlJiZkLmVtYWlsJiZkLmNyZWRlbnRpYWwpdGhyb3cgZDtyZXR1cm4gSG4oYixkLGEpfSk6VShiKS5zaWduSW5XaXRoQ3JlZGVudGlhbChhKX0pfTtcbmZ1bmN0aW9uIFRsKGEsYil7WihhKTtyZXR1cm4gR24oYSxmdW5jdGlvbihjKXtyZXR1cm4gYyYmIXpoKFgoYSkpP2MubGlua1dpdGhQb3B1cChiKS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBkfSxmdW5jdGlvbihkKXtpZihkJiZcImF1dGgvZW1haWwtYWxyZWFkeS1pbi11c2VcIj09ZC5jb2RlJiZkLmVtYWlsJiZkLmNyZWRlbnRpYWwpdGhyb3cgZDtyZXR1cm4gSG4oYSxkKX0pOlUoYSkuc2lnbkluV2l0aFBvcHVwKGIpfSl9bC5kYz1mdW5jdGlvbihhKXtaKHRoaXMpO3ZhciBiPXRoaXMsYz10aGlzLmk7dGhpcy5pPW51bGw7cmV0dXJuIEduKHRoaXMsZnVuY3Rpb24oZCl7cmV0dXJuIGQmJiF6aChYKGIpKT9kLmxpbmtXaXRoUmVkaXJlY3QoYSk6VShiKS5zaWduSW5XaXRoUmVkaXJlY3QoYSl9KS50aGVuKGZ1bmN0aW9uKCl7fSxmdW5jdGlvbihkKXtiLmk9Yzt0aHJvdyBkO30pfTtsLmNjPWZ1bmN0aW9uKGEsYil7Wih0aGlzKTt2YXIgYz10aGlzO3JldHVybiBHbih0aGlzLGZ1bmN0aW9uKGQpe3JldHVybiBkP1xuZC5saW5rV2l0aFBob25lTnVtYmVyKGEsYikudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gbmV3IFNmKGUsZnVuY3Rpb24oZil7aWYoXCJhdXRoL2NyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2VcIj09Zi5jb2RlKXJldHVybiBIbihjLGYpO3Rocm93IGY7fSl9KTpmbihjKS5zaWduSW5XaXRoUGhvbmVOdW1iZXIoYSxiKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgU2YoZSl9KX0pfTtsLiRiPWZ1bmN0aW9uKCl7Wih0aGlzKTtyZXR1cm4gZm4odGhpcykuc2lnbkluQW5vbnltb3VzbHkoKX07ZnVuY3Rpb24gT2woYSxiKXtaKGEpO3JldHVybiBHbihhLGZ1bmN0aW9uKGMpe2lmKGEuaiYmIWEuai5pc0Fub255bW91cyYmZGkoVyhhKSkmJiFVKGEpLmN1cnJlbnRVc2VyKXJldHVybiBtbShhKS50aGVuKGZ1bmN0aW9uKCl7XCJwYXNzd29yZFwiPT1iLmNyZWRlbnRpYWwucHJvdmlkZXJJZCYmKGIuY3JlZGVudGlhbD1udWxsKTtyZXR1cm4gYn0pO2lmKGMpcmV0dXJuIG1tKGEpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYy5saW5rV2l0aENyZWRlbnRpYWwoYi5jcmVkZW50aWFsKX0pLnRoZW4oZnVuY3Rpb24oZCl7Yi51c2VyPVxuZC51c2VyO2IuY3JlZGVudGlhbD1kLmNyZWRlbnRpYWw7Yi5vcGVyYXRpb25UeXBlPWQub3BlcmF0aW9uVHlwZTtiLmFkZGl0aW9uYWxVc2VySW5mbz1kLmFkZGl0aW9uYWxVc2VySW5mbztyZXR1cm4gYn0sZnVuY3Rpb24oZCl7aWYoZCYmXCJhdXRoL2VtYWlsLWFscmVhZHktaW4tdXNlXCI9PWQuY29kZSYmZC5lbWFpbCYmZC5jcmVkZW50aWFsKXRocm93IGQ7cmV0dXJuIEhuKGEsZCxiLmNyZWRlbnRpYWwpfSk7aWYoIWIudXNlcil0aHJvdyBFcnJvcignSW50ZXJuYWwgZXJyb3I6IEFuIGluY29tcGF0aWJsZSBvciBvdXRkYXRlZCB2ZXJzaW9uIG9mIFwiZmlyZWJhc2UuanNcIiBtYXkgYmUgdXNlZC4nKTtyZXR1cm4gbW0oYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBmbihhKS51cGRhdGVDdXJyZW50VXNlcihiLnVzZXIpfSkudGhlbihmdW5jdGlvbigpe2IudXNlcj1mbihhKS5jdXJyZW50VXNlcjtiLm9wZXJhdGlvblR5cGU9XCJzaWduSW5cIjtiLmNyZWRlbnRpYWwmJmIuY3JlZGVudGlhbC5wcm92aWRlcklkJiZcblwicGFzc3dvcmRcIj09Yi5jcmVkZW50aWFsLnByb3ZpZGVySWQmJihiLmNyZWRlbnRpYWw9bnVsbCk7cmV0dXJuIGJ9KX0pfWwuWGI9ZnVuY3Rpb24oYSxiKXtaKHRoaXMpO3JldHVybiBVKHRoaXMpLnNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkKGEsYil9O2Z1bmN0aW9uIG1tKGEpe1ooYSk7cmV0dXJuIFUoYSkuc2lnbk91dCgpfWZ1bmN0aW9uIEhuKGEsYixjKXtaKGEpO2lmKGImJmIuY29kZSYmKFwiYXV0aC9lbWFpbC1hbHJlYWR5LWluLXVzZVwiPT1iLmNvZGV8fFwiYXV0aC9jcmVkZW50aWFsLWFscmVhZHktaW4tdXNlXCI9PWIuY29kZSkpe3ZhciBkPWVpKFcoYSkpO3JldHVybiBGKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBkKG5ldyBOZChcImFub255bW91cy11cGdyYWRlLW1lcmdlLWNvbmZsaWN0XCIsbnVsbCxjfHxiLmNyZWRlbnRpYWwpKX0pLnRoZW4oZnVuY3Rpb24oKXthLmcmJihhLmcubSgpLGEuZz1udWxsKTt0aHJvdyBiO30pfXJldHVybiBkZihiKX1mdW5jdGlvbiBRbihhLFxuYixjLGQpe1AuY2FsbCh0aGlzLGlsLHZvaWQgMCxkLFwicHJvdmlkZXJNYXRjaEJ5RW1haWxcIix7RjpiLEQ6Y30pO3RoaXMuaT1hfW0oUW4sUCk7UW4ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt0aGlzLnUodGhpcy5pKTt0aGlzLncodGhpcy5pKTt0aGlzLmwoKS5mb2N1cygpO0JtKHRoaXMubCgpLCh0aGlzLmwoKS52YWx1ZXx8XCJcIikubGVuZ3RoKTtQLnByb3RvdHlwZS52LmNhbGwodGhpcyl9O1FuLnByb3RvdHlwZS5vPWZ1bmN0aW9uKCl7dGhpcy5pPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTt1KFFuLnByb3RvdHlwZSx7bDpzbCxIOnRsLHU6dWwsQjp2bCxqOndsLE06amwsdzpsbH0pO2Z1bmN0aW9uIFJuKGEsYixjLGQsZSl7UC5jYWxsKHRoaXMsaGwse2VjOmJ9LGUsXCJzZWxlY3RUZW5hbnRcIix7RjpjLEQ6ZH0pO3RoaXMuaT1hfW0oUm4sUCk7Um4ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtTbih0aGlzLHRoaXMuaSk7UC5wcm90b3R5cGUudi5jYWxsKHRoaXMpfTtSbi5wcm90b3R5cGUubz1cbmZ1bmN0aW9uKCl7dGhpcy5pPW51bGw7UC5wcm90b3R5cGUuby5jYWxsKHRoaXMpfTtmdW5jdGlvbiBTbihhLGIpe2Z1bmN0aW9uIGMoaCl7YihoKX1mb3IodmFyIGQ9YS5nP1RjKFwiZmlyZWJhc2V1aS1pZC10ZW5hbnQtc2VsZWN0aW9uLWJ1dHRvblwiLGEuZ3x8YS5zLmEpOltdLGU9MDtlPGQubGVuZ3RoO2UrKyl7dmFyIGY9ZFtlXSxnPWhuKGYsXCJ0ZW5hbnRJZFwiKTtPKGEsZix6YShjLGcpKX19ZnVuY3Rpb24gVG4oYSl7UC5jYWxsKHRoaXMsQ2ssdm9pZCAwLGEsXCJzcGlubmVyXCIpfW0oVG4sUCk7ZnVuY3Rpb24gVW4oYSl7dGhpcy5hPW5ldyBIaDtHKHRoaXMuYSxcImF1dGhEb21haW5cIik7Ryh0aGlzLmEsXCJkaXNwbGF5TW9kZVwiLFZuKTtHKHRoaXMuYSxcInRlbmFudHNcIik7Ryh0aGlzLmEsXCJjYWxsYmFja3NcIik7Ryh0aGlzLmEsXCJ0b3NVcmxcIik7Ryh0aGlzLmEsXCJwcml2YWN5UG9saWN5VXJsXCIpO2Zvcih2YXIgYiBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYikpdHJ5e0loKHRoaXMuYSxcbmIsYVtiXSl9Y2F0Y2goYyl7b2coJ0ludmFsaWQgY29uZmlnOiBcIicrYisnXCInLHZvaWQgMCl9fWZ1bmN0aW9uIFduKGEpe2E9YS5hLmdldChcImRpc3BsYXlNb2RlXCIpO2Zvcih2YXIgYiBpbiBYbilpZihYbltiXT09PWEpcmV0dXJuIFhuW2JdO3JldHVybiBWbn1mdW5jdGlvbiBZbihhKXtyZXR1cm4gYS5hLmdldChcImNhbGxiYWNrc1wiKXx8e319ZnVuY3Rpb24gWm4oYSl7dmFyIGI9YS5hLmdldChcInRvc1VybFwiKXx8bnVsbDthPWEuYS5nZXQoXCJwcml2YWN5UG9saWN5VXJsXCIpfHxudWxsO2ImJiFhJiZ0ZyhcIlByaXZhY3kgUG9saWN5IFVSTCBpcyBtaXNzaW5nLCB0aGUgbGluayB3aWxsIG5vdCBiZSBkaXNwbGF5ZWQuXCIpO2lmKGImJmEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gZnVuY3Rpb24oKXtyZihiKX19cmV0dXJuIG51bGx9ZnVuY3Rpb24gJG4oYSl7dmFyIGI9YS5hLmdldChcInRvc1VybFwiKXx8bnVsbCxjPVxuYS5hLmdldChcInByaXZhY3lQb2xpY3lVcmxcIil8fG51bGw7YyYmIWImJnRnKFwiVGVybXMgb2YgU2VydmljZSBVUkwgaXMgbWlzc2luZywgdGhlIGxpbmsgd2lsbCBub3QgYmUgZGlzcGxheWVkLlwiKTtpZihiJiZjKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYylyZXR1cm4gYztpZihcInN0cmluZ1wiPT09dHlwZW9mIGMpcmV0dXJuIGZ1bmN0aW9uKCl7cmYoYyl9fXJldHVybiBudWxsfWZ1bmN0aW9uIGFvKGEsYil7YT1hLmEuZ2V0KFwidGVuYW50c1wiKTtpZighYXx8IWEuaGFzT3duUHJvcGVydHkoYikmJiFhLmhhc093blByb3BlcnR5KGJvKSl0aHJvdyBFcnJvcihcIkludmFsaWQgdGVuYW50IGNvbmZpZ3VyYXRpb24hXCIpO31mdW5jdGlvbiBjbyhhLGIsYyl7YT1hLmEuZ2V0KFwidGVuYW50c1wiKTtpZighYSl0aHJvdyBFcnJvcihcIkludmFsaWQgdGVuYW50IGNvbmZpZ3VyYXRpb24hXCIpO3ZhciBkPVtdO2E9YVtiXXx8YVtib107aWYoIWEpcmV0dXJuIG9nKFwiSW52YWxpZCB0ZW5hbnQgY29uZmlndXJhdGlvbjogXCIrXG4oYitcIiBpcyBub3QgY29uZmlndXJlZCFcIiksdm9pZCAwKSxkO2I9YS5zaWduSW5PcHRpb25zO2lmKCFiKXRocm93IEVycm9yKFwiSW52YWxpZCB0ZW5hbnQgY29uZmlndXJhdGlvbjogc2lnbkluT3B0aW9ucyBhcmUgaW52YWxpZCFcIik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZSlkLnB1c2goZSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGUucHJvdmlkZXIpe3ZhciBmPWUuaGQ7ZiYmYz8oZiBpbnN0YW5jZW9mIFJlZ0V4cD9mOm5ldyBSZWdFeHAoXCJAXCIrZi5yZXBsYWNlKFwiLlwiLFwiXFxcXC5cIikrXCIkXCIpKS50ZXN0KGMpJiZkLnB1c2goZS5wcm92aWRlcik6ZC5wdXNoKGUucHJvdmlkZXIpfWVsc2UgZT1cIkludmFsaWQgdGVuYW50IGNvbmZpZ3VyYXRpb246IHNpZ25Jbk9wdGlvbiBcIisoSlNPTi5zdHJpbmdpZnkoZSkrXCIgaXMgaW52YWxpZCFcIiksb2coZSx2b2lkIDApfSk7cmV0dXJuIGR9ZnVuY3Rpb24gZW8oYSxiLGMpe2E9Zm8oYSxiKTsoYj1hLnNpZ25Jbk9wdGlvbnMpJiZcbmMmJihiPWIuZmlsdGVyKGZ1bmN0aW9uKGQpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZD9jLmluY2x1ZGVzKGQpOmMuaW5jbHVkZXMoZC5wcm92aWRlcil9KSxhLnNpZ25Jbk9wdGlvbnM9Yik7cmV0dXJuIGF9ZnVuY3Rpb24gZm8oYSxiKXt2YXIgYz1nbzt2YXIgZD12b2lkIDA9PT1kP3t9OmQ7YW8oYSxiKTthPWEuYS5nZXQoXCJ0ZW5hbnRzXCIpO3JldHVybiB3ZihhW2JdfHxhW2JvXSxjLGQpfXZhciBnbz1bXCJpbW1lZGlhdGVGZWRlcmF0ZWRSZWRpcmVjdFwiLFwicHJpdmFjeVBvbGljeVVybFwiLFwic2lnbkluRmxvd1wiLFwic2lnbkluT3B0aW9uc1wiLFwidG9zVXJsXCJdLFZuPVwib3B0aW9uRmlyc3RcIixYbj17cGM6Vm4sb2M6XCJpZGVudGlmaWVyRmlyc3RcIn0sYm89XCIqXCI7ZnVuY3Rpb24gaG8oYSxiKXt2YXIgYz10aGlzO3RoaXMucz1zZihhKTt0aGlzLmE9e307T2JqZWN0LmtleXMoYikuZm9yRWFjaChmdW5jdGlvbihkKXtjLmFbZF09bmV3IFVuKGJbZF0pfSk7dGhpcy5vYj10aGlzLmc9dGhpcy5BPVxudGhpcy5oPXRoaXMuaT10aGlzLmo9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxhbmd1YWdlQ29kZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYn0sc2V0OmZ1bmN0aW9uKGQpe3RoaXMub2I9ZHx8bnVsbH0sZW51bWVyYWJsZTohMX0pfWw9aG8ucHJvdG90eXBlO2wuVWI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO2lvKHRoaXMpO3ZhciBkPWEuYXBpS2V5O3JldHVybiBuZXcgVmUoZnVuY3Rpb24oZSxmKXtpZihjLmEuaGFzT3duUHJvcGVydHkoZCkpe3ZhciBnPVluKGMuYVtkXSkuc2VsZWN0VGVuYW50VWlIaWRkZW58fG51bGw7aWYoV24oYy5hW2RdKT09PVZuKXt2YXIgaD1bXTtiLmZvckVhY2goZnVuY3Rpb24odCl7dD10fHxcIl9cIjt2YXIgST1jLmFbZF0uYS5nZXQoXCJ0ZW5hbnRzXCIpO2lmKCFJKXRocm93IEVycm9yKFwiSW52YWxpZCB0ZW5hbnQgY29uZmlndXJhdGlvbiFcIik7KEk9SVt0XXx8SVtib10pP3Q9e3RlbmFudElkOlwiX1wiIT09dD90Om51bGwsVjpJLmZ1bGxMYWJlbHx8XG5udWxsLGRpc3BsYXlOYW1lOkkuZGlzcGxheU5hbWUsemE6SS5pY29uVXJsLHRhOkkuYnV0dG9uQ29sb3J9OihvZyhcIkludmFsaWQgdGVuYW50IGNvbmZpZ3VyYXRpb246IFwiKyh0K1wiIGlzIG5vdCBjb25maWd1cmVkIVwiKSx2b2lkIDApLHQ9bnVsbCk7dCYmaC5wdXNoKHQpfSk7dmFyIGs9ZnVuY3Rpb24odCl7dD17dGVuYW50SWQ6dCxwcm92aWRlcklkczpjbyhjLmFbZF0sdHx8XCJfXCIpfTtlKHQpfTtpZigxPT09aC5sZW5ndGgpe2soaFswXS50ZW5hbnRJZCk7cmV0dXJufWMuZz1uZXcgUm4oZnVuY3Rpb24odCl7aW8oYyk7ZyYmZygpO2sodCl9LGgsWm4oYy5hW2RdKSwkbihjLmFbZF0pKX1lbHNlIGMuZz1uZXcgUW4oZnVuY3Rpb24oKXt2YXIgdD1jLmcuaigpO2lmKHQpe2Zvcih2YXIgST0wO0k8Yi5sZW5ndGg7SSsrKXt2YXIgQ2E9Y28oYy5hW2RdLGJbSV18fFwiX1wiLHQpO2lmKDAhPT1DYS5sZW5ndGgpe3Q9e3RlbmFudElkOmJbSV0scHJvdmlkZXJJZHM6Q2EsZW1haWw6dH07aW8oYyk7XG5nJiZnKCk7ZSh0KTtyZXR1cm59fWMuZy5hKExkKHtjb2RlOlwibm8tbWF0Y2hpbmctdGVuYW50LWZvci1lbWFpbFwifSkudG9TdHJpbmcoKSl9fSxabihjLmFbZF0pLCRuKGMuYVtkXSkpO2MuZy5yZW5kZXIoYy5zKTsoZj1ZbihjLmFbZF0pLnNlbGVjdFRlbmFudFVpU2hvd258fG51bGwpJiZmKCl9ZWxzZXt2YXIgcD1FcnJvcihcIkludmFsaWQgcHJvamVjdCBjb25maWd1cmF0aW9uOiBBUEkga2V5IGlzIGludmFsaWQhXCIpO3AuY29kZT1cImludmFsaWQtY29uZmlndXJhdGlvblwiO2MucGIocCk7ZihwKX19KX07bC5QYj1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmEuaGFzT3duUHJvcGVydHkoYSkpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb2plY3QgY29uZmlndXJhdGlvbjogQVBJIGtleSBpcyBpbnZhbGlkIVwiKTt2YXIgYz1ifHx2b2lkIDA7YW8odGhpcy5hW2FdLGJ8fFwiX1wiKTt0cnl7dGhpcy5pPWZpcmViYXNlLmFwcChjKS5hdXRoKCl9Y2F0Y2goZSl7dmFyIGQ9dGhpcy5hW2FdLmEuZ2V0KFwiYXV0aERvbWFpblwiKTtcbmlmKCFkKXRocm93IEVycm9yKFwiSW52YWxpZCBwcm9qZWN0IGNvbmZpZ3VyYXRpb246IGF1dGhEb21haW4gaXMgcmVxdWlyZWQhXCIpO2E9ZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcCh7YXBpS2V5OmEsYXV0aERvbWFpbjpkfSxjKTthLmF1dGgoKS50ZW5hbnRJZD1iO3RoaXMuaT1hLmF1dGgoKX1yZXR1cm4gdGhpcy5pfTtsLlpiPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gbmV3IFZlKGZ1bmN0aW9uKGQsZSl7ZnVuY3Rpb24gZihJLENhKXtjLmo9bmV3IENuKGEpO0tuKGMuaixjLnMsSSxDYSl9dmFyIGc9YS5hcHAub3B0aW9ucy5hcGlLZXk7Yy5hLmhhc093blByb3BlcnR5KGcpfHxlKEVycm9yKFwiSW52YWxpZCBwcm9qZWN0IGNvbmZpZ3VyYXRpb246IEFQSSBrZXkgaXMgaW52YWxpZCFcIikpO3ZhciBoPWVvKGMuYVtnXSxhLnRlbmFudElkfHxcIl9cIixiJiZiLnByb3ZpZGVySWRzKTtpbyhjKTtlPXtzaWduSW5TdWNjZXNzV2l0aEF1dGhSZXN1bHQ6ZnVuY3Rpb24oSSl7ZChJKTtcbnJldHVybiExfX07dmFyIGs9WW4oYy5hW2ddKS5zaWduSW5VaVNob3dufHxudWxsLHA9ITE7ZS51aUNoYW5nZWQ9ZnVuY3Rpb24oSSxDYSl7bnVsbD09PUkmJlwiY2FsbGJhY2tcIj09PUNhPygoST1WYyhcImZpcmViYXNldWktaWQtcGFnZS1jYWxsYmFja1wiLGMucykpJiZOaihJKSxjLmg9bmV3IFRuLGMuaC5yZW5kZXIoYy5zKSk6cHx8bnVsbD09PUkmJlwic3Bpbm5lclwiPT09Q2F8fFwiYmxhbmtcIj09PUNhfHwoYy5oJiYoYy5oLm0oKSxjLmg9bnVsbCkscD0hMCxrJiZrKGEudGVuYW50SWQpKX07aC5jYWxsYmFja3M9ZTtoLmNyZWRlbnRpYWxIZWxwZXI9XCJub25lXCI7dmFyIHQ7YiYmYi5lbWFpbCYmKHQ9e2VtYWlsSGludDpiLmVtYWlsfSk7Yy5qP2Muai5XYSgpLnRoZW4oZnVuY3Rpb24oKXtmKGgsdCl9KTpmKGgsdCl9KX07bC5yZXNldD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIEYoKS50aGVuKGZ1bmN0aW9uKCl7YS5qJiZhLmouV2EoKX0pLnRoZW4oZnVuY3Rpb24oKXthLmo9bnVsbDtcbmlvKGEpfSl9O2wuVmI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3RoaXMuaHx8dGhpcy5BfHwodGhpcy5BPXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aW8oYSk7YS5oPW5ldyBUbjthLmc9YS5oO2EuaC5yZW5kZXIoYS5zKTthLkE9bnVsbH0sNTAwKSl9O2wubWI9ZnVuY3Rpb24oKXt3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuQSk7dGhpcy5BPW51bGw7dGhpcy5oJiYodGhpcy5oLm0oKSx0aGlzLmg9bnVsbCl9O2wuQmI9ZnVuY3Rpb24oKXtpbyh0aGlzKTt0aGlzLmc9bmV3IEVsO3RoaXMuZy5yZW5kZXIodGhpcy5zKTtyZXR1cm4gRigpfTtmdW5jdGlvbiBpbyhhKXthLmomJmEuai5yZXNldCgpO2EubWIoKTthLmcmJmEuZy5tKCl9bC5wYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9TGQoe2NvZGU6YS5jb2RlfSkudG9TdHJpbmcoKXx8YS5tZXNzYWdlO2lvKHRoaXMpO3ZhciBkO2EucmV0cnkmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJldHJ5JiYoZD1mdW5jdGlvbigpe2IucmVzZXQoKTtcbmEucmV0cnkoKX0pO3RoaXMuZz1uZXcgSWwoYyxkKTt0aGlzLmcucmVuZGVyKHRoaXMucyl9O2wuUmI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gRigpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLmkmJmIuaS5hcHAub3B0aW9ucy5hcGlLZXk7aWYoIWIuYS5oYXNPd25Qcm9wZXJ0eShjKSl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvamVjdCBjb25maWd1cmF0aW9uOiBBUEkga2V5IGlzIGludmFsaWQhXCIpO2FvKGIuYVtjXSxhLnRlbmFudElkfHxcIl9cIik7aWYoIWIuaS5jdXJyZW50VXNlcnx8Yi5pLmN1cnJlbnRVc2VyLnVpZCE9PWEudWlkKXRocm93IEVycm9yKFwiVGhlIHVzZXIgYmVpbmcgcHJvY2Vzc2VkIGRvZXMgbm90IG1hdGNoIHRoZSBzaWduZWQgaW4gdXNlciFcIik7cmV0dXJuKGM9WW4oYi5hW2NdKS5iZWZvcmVTaWduSW5TdWNjZXNzfHxudWxsKT9jKGEpOmF9KS50aGVuKGZ1bmN0aW9uKGMpe2lmKGMudWlkIT09YS51aWQpdGhyb3cgRXJyb3IoXCJVc2VyIHdpdGggbWlzbWF0Y2hpbmcgVUlEIHJldHVybmVkLlwiKTtcbnJldHVybiBjfSl9O3YoXCJmaXJlYmFzZXVpLmF1dGguRmlyZWJhc2VVaUhhbmRsZXJcIixobyk7dihcImZpcmViYXNldWkuYXV0aC5GaXJlYmFzZVVpSGFuZGxlci5wcm90b3R5cGUuc2VsZWN0VGVuYW50XCIsaG8ucHJvdG90eXBlLlViKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkZpcmViYXNlVWlIYW5kbGVyLnByb3RvdHlwZS5nZXRBdXRoXCIsaG8ucHJvdG90eXBlLlBiKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkZpcmViYXNlVWlIYW5kbGVyLnByb3RvdHlwZS5zdGFydFNpZ25JblwiLGhvLnByb3RvdHlwZS5aYik7dihcImZpcmViYXNldWkuYXV0aC5GaXJlYmFzZVVpSGFuZGxlci5wcm90b3R5cGUucmVzZXRcIixoby5wcm90b3R5cGUucmVzZXQpO3YoXCJmaXJlYmFzZXVpLmF1dGguRmlyZWJhc2VVaUhhbmRsZXIucHJvdG90eXBlLnNob3dQcm9ncmVzc0JhclwiLGhvLnByb3RvdHlwZS5WYik7dihcImZpcmViYXNldWkuYXV0aC5GaXJlYmFzZVVpSGFuZGxlci5wcm90b3R5cGUuaGlkZVByb2dyZXNzQmFyXCIsXG5oby5wcm90b3R5cGUubWIpO3YoXCJmaXJlYmFzZXVpLmF1dGguRmlyZWJhc2VVaUhhbmRsZXIucHJvdG90eXBlLmNvbXBsZXRlU2lnbk91dFwiLGhvLnByb3RvdHlwZS5CYik7dihcImZpcmViYXNldWkuYXV0aC5GaXJlYmFzZVVpSGFuZGxlci5wcm90b3R5cGUuaGFuZGxlRXJyb3JcIixoby5wcm90b3R5cGUucGIpO3YoXCJmaXJlYmFzZXVpLmF1dGguRmlyZWJhc2VVaUhhbmRsZXIucHJvdG90eXBlLnByb2Nlc3NVc2VyXCIsaG8ucHJvdG90eXBlLlJiKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSVwiLENuKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSS5nZXRJbnN0YW5jZVwiLGZ1bmN0aW9uKGEpe2E9RG4oYSk7cmV0dXJuIEVuW2FdP0VuW2FdOm51bGx9KTt2KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSS5wcm90b3R5cGUuZGlzYWJsZUF1dG9TaWduSW5cIixDbi5wcm90b3R5cGUuRGIpO3YoXCJmaXJlYmFzZXVpLmF1dGguQXV0aFVJLnByb3RvdHlwZS5zdGFydFwiLENuLnByb3RvdHlwZS5zdGFydCk7XG52KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSS5wcm90b3R5cGUuc2V0Q29uZmlnXCIsQ24ucHJvdG90eXBlLmliKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSS5wcm90b3R5cGUuc2lnbkluXCIsQ24ucHJvdG90eXBlLldiKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSS5wcm90b3R5cGUucmVzZXRcIixDbi5wcm90b3R5cGUucmVzZXQpO3YoXCJmaXJlYmFzZXVpLmF1dGguQXV0aFVJLnByb3RvdHlwZS5kZWxldGVcIixDbi5wcm90b3R5cGUuV2EpO3YoXCJmaXJlYmFzZXVpLmF1dGguQXV0aFVJLnByb3RvdHlwZS5pc1BlbmRpbmdSZWRpcmVjdFwiLENuLnByb3RvdHlwZS5uYik7dihcImZpcmViYXNldWkuYXV0aC5BdXRoVUlFcnJvclwiLE5kKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkF1dGhVSUVycm9yLnByb3RvdHlwZS50b0pTT05cIixOZC5wcm90b3R5cGUudG9KU09OKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkNyZWRlbnRpYWxIZWxwZXIuR09PR0xFX1lPTE9cIixuaSk7dihcImZpcmViYXNldWkuYXV0aC5DcmVkZW50aWFsSGVscGVyLk5PTkVcIixcbmNpKTt2KFwiZmlyZWJhc2V1aS5hdXRoLkFub255bW91c0F1dGhQcm92aWRlci5QUk9WSURFUl9JRFwiLFwiYW5vbnltb3VzXCIpO1ZlLnByb3RvdHlwZVtcImNhdGNoXCJdPVZlLnByb3RvdHlwZS5DYTtWZS5wcm90b3R5cGVbXCJmaW5hbGx5XCJdPVZlLnByb3RvdHlwZS5mY30pLmFwcGx5KHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiP2dsb2JhbDp0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp3aW5kb3cpOyBpZih0eXBlb2Ygd2luZG93IT09J3VuZGVmaW5lZCcpe3dpbmRvdy5kaWFsb2dQb2x5ZmlsbD1yZXF1aXJlKCdkaWFsb2ctcG9seWZpbGwnKTt9fSkoKTttb2R1bGUuZXhwb3J0cz1maXJlYmFzZXVpO1xuIiwgIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IG5hbWUsIHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG4iLCAiZXhwb3J0IHsgQSBhcyBBY3Rpb25Db2RlT3BlcmF0aW9uLCBhYyBhcyBBY3Rpb25Db2RlVVJMLCBHIGFzIEF1dGhDcmVkZW50aWFsLCBDIGFzIEF1dGhFcnJvckNvZGVzLCBIIGFzIEVtYWlsQXV0aENyZWRlbnRpYWwsIEwgYXMgRW1haWxBdXRoUHJvdmlkZXIsIE0gYXMgRmFjZWJvb2tBdXRoUHJvdmlkZXIsIEYgYXMgRmFjdG9ySWQsIFEgYXMgR2l0aHViQXV0aFByb3ZpZGVyLCBOIGFzIEdvb2dsZUF1dGhQcm92aWRlciwgSSBhcyBPQXV0aENyZWRlbnRpYWwsIFQgYXMgT0F1dGhQcm92aWRlciwgTyBhcyBPcGVyYXRpb25UeXBlLCBKIGFzIFBob25lQXV0aENyZWRlbnRpYWwsIFAgYXMgUGhvbmVBdXRoUHJvdmlkZXIsIG0gYXMgUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvciwgbyBhcyBQcm92aWRlcklkLCBSIGFzIFJlY2FwdGNoYVZlcmlmaWVyLCBVIGFzIFNBTUxBdXRoUHJvdmlkZXIsIFMgYXMgU2lnbkluTWV0aG9kLCBWIGFzIFR3aXR0ZXJBdXRoUHJvdmlkZXIsIGExIGFzIGFwcGx5QWN0aW9uQ29kZSwgYiBhcyBicm93c2VyTG9jYWxQZXJzaXN0ZW5jZSwgayBhcyBicm93c2VyUG9wdXBSZWRpcmVjdFJlc29sdmVyLCBhIGFzIGJyb3dzZXJTZXNzaW9uUGVyc2lzdGVuY2UsIGEyIGFzIGNoZWNrQWN0aW9uQ29kZSwgYTAgYXMgY29uZmlybVBhc3N3b3JkUmVzZXQsIEUgYXMgY29ubmVjdEF1dGhFbXVsYXRvciwgYTQgYXMgY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkLCB6IGFzIGRlYnVnRXJyb3JNYXAsIHkgYXMgZGVsZXRlVXNlciwgYTkgYXMgZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWwsIGFrIGFzIGdldEFkZGl0aW9uYWxVc2VySW5mbywgbiBhcyBnZXRBdXRoLCBhaCBhcyBnZXRJZFRva2VuLCBhaSBhcyBnZXRJZFRva2VuUmVzdWx0LCBhbSBhcyBnZXRNdWx0aUZhY3RvclJlc29sdmVyLCBqIGFzIGdldFJlZGlyZWN0UmVzdWx0LCBLIGFzIGluTWVtb3J5UGVyc2lzdGVuY2UsIGkgYXMgaW5kZXhlZERCTG9jYWxQZXJzaXN0ZW5jZSwgRCBhcyBpbml0aWFsaXplQXV0aCwgYTcgYXMgaXNTaWduSW5XaXRoRW1haWxMaW5rLCBZIGFzIGxpbmtXaXRoQ3JlZGVudGlhbCwgbCBhcyBsaW5rV2l0aFBob25lTnVtYmVyLCBkIGFzIGxpbmtXaXRoUG9wdXAsIGcgYXMgbGlua1dpdGhSZWRpcmVjdCwgYW4gYXMgbXVsdGlGYWN0b3IsIHQgYXMgb25BdXRoU3RhdGVDaGFuZ2VkLCBxIGFzIG9uSWRUb2tlbkNoYW5nZWQsIGFkIGFzIHBhcnNlQWN0aW9uQ29kZVVSTCwgQiBhcyBwcm9kRXJyb3JNYXAsIFogYXMgcmVhdXRoZW50aWNhdGVXaXRoQ3JlZGVudGlhbCwgciBhcyByZWF1dGhlbnRpY2F0ZVdpdGhQaG9uZU51bWJlciwgZSBhcyByZWF1dGhlbnRpY2F0ZVdpdGhQb3B1cCwgaCBhcyByZWF1dGhlbnRpY2F0ZVdpdGhSZWRpcmVjdCwgYWwgYXMgcmVsb2FkLCBhYSBhcyBzZW5kRW1haWxWZXJpZmljYXRpb24sICQgYXMgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbCwgYTYgYXMgc2VuZFNpZ25JbkxpbmtUb0VtYWlsLCBwIGFzIHNldFBlcnNpc3RlbmNlLCBXIGFzIHNpZ25JbkFub255bW91c2x5LCBYIGFzIHNpZ25JbldpdGhDcmVkZW50aWFsLCBfIGFzIHNpZ25JbldpdGhDdXN0b21Ub2tlbiwgYTUgYXMgc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQsIGE4IGFzIHNpZ25JbldpdGhFbWFpbExpbmssIHMgYXMgc2lnbkluV2l0aFBob25lTnVtYmVyLCBjIGFzIHNpZ25JbldpdGhQb3B1cCwgZiBhcyBzaWduSW5XaXRoUmVkaXJlY3QsIHggYXMgc2lnbk91dCwgYWogYXMgdW5saW5rLCB3IGFzIHVwZGF0ZUN1cnJlbnRVc2VyLCBhZiBhcyB1cGRhdGVFbWFpbCwgYWcgYXMgdXBkYXRlUGFzc3dvcmQsIHUgYXMgdXBkYXRlUGhvbmVOdW1iZXIsIGFlIGFzIHVwZGF0ZVByb2ZpbGUsIHYgYXMgdXNlRGV2aWNlTGFuZ3VhZ2UsIGFiIGFzIHZlcmlmeUJlZm9yZVVwZGF0ZUVtYWlsLCBhMyBhcyB2ZXJpZnlQYXNzd29yZFJlc2V0Q29kZSB9IGZyb20gJy4vaW5kZXgtMTY3OWEyYjIuanMnO1xuaW1wb3J0ICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0ICd0c2xpYic7XG5pbXBvcnQgJ0BmaXJlYmFzZS9sb2dnZXInO1xuaW1wb3J0ICdAZmlyZWJhc2UvY29tcG9uZW50Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwgImV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgYXBpS2V5OiBcIkFJemFTeUNGQmt2YlJnSFNhcXo0OE9kc2cyVWdyam53Mlo1c3B3a1wiLFxuICAgIGF1dGhEb21haW46IFwiYWlybGlmdC1kZXYtOWU2YmQuZmlyZWJhc2VhcHAuY29tXCIsXG4gICAgcHJvamVjdElkOiBcImFpcmxpZnQtZGV2LTllNmJkXCIsXG4gICAgYXBwSWQ6IFwiMTo0MzY4MDk1NTI5ODM6d2ViOmNlYjU2ZGYyNTM4ZWFiOWNhMjdmMTJcIixcbiAgICBkYXRhYmFzZVVybDogXCJodHRwczovL2FpcmxpZnQtZGV2LTllNmJkLmZpcmViYXNlaW8uY29tXCJcbn1cblxuLy8gQVBJX0tFWSA9IFwiQUl6YVN5Q0ZCa3ZiUmdIU2FxejQ4T2RzZzJVZ3JqbncyWjVzcHdrXCIsXG4vLyBBVVRIX0RPTUFJTiA9IFwiYWlybGlmdC1kZXYtOWU2YmQuZmlyZWJhc2VhcHAuY29tXCIsXG4vLyBEQVRBQkFTRV9VUkwgPSBcImh0dHBzOi8vYWlybGlmdC1kZXYtOWU2YmQuZmlyZWJhc2Vpby5jb21cIixcbi8vIFBST0pFQ1RfSUQgPSBcImFpcmxpZnQtZGV2LTllNmJkXCIsXG4vLyBTVE9SQUdFX0JVQ0tFVCA9IFwiYWlybGlmdC1kZXYtOWU2YmQuYXBwc3BvdC5jb21cIixcbi8vIE1FU1NBR0lOR19TRU5ERVJfSUQgPSBcIjQzNjgwOTU1Mjk4M1wiLFxuLy8gQVBQX0lEID0gXCIxOjQzNjgwOTU1Mjk4Mzp3ZWI6Y2ViNTZkZjI1MzhlYWI5Y2EyN2YxMlwiLFxuLy8gTUVBU1VSRU1FTlRfSUQgPSBcIkctQlJQR1o4REJMNFwiIiwgImltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tICdmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgZ2V0QXV0aCB9IGZyb20gJ2ZpcmViYXNlL2F1dGgnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vZmlyZWJhc2UuY29uZmlnJztcbnZhciBmaXJlYmFzZXVpID0gcmVxdWlyZSgnZmlyZWJhc2V1aScpO1xuXG4vLyBjb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcbi8vICAgICBhcGlLZXk6IHByb2Nlc3MuZW52LkFQSV9LRVksXG4vLyAgICAgYXV0aERvbWFpbjogcHJvY2Vzcy5lbnYuQVVUSF9ET01BSU4sXG4vLyAgICAgZGF0YWJhc2VVUkw6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCxcbi8vICAgICBwcm9qZWN0SWQ6IHByb2Nlc3MuZW52LlBST0pFQ1RfSUQsXG4vLyAgICAgbWVzc2FnaW5nU2VuZGVySWQ6IHByb2Nlc3MuZW52Lk1FU1NBR0lOR19TRU5ERVJfSUQsXG4vLyAgICAgYXBwSWQ6IHByb2Nlc3MuZW52LkFQUF9JRCxcbi8vICAgICBtZWFzdXJlbWVudElkOiBwcm9jZXNzLmVudi5NRUFTVVJFTUVOVF9JRCxcbi8vIH07XG5cbmNvbnN0IGFwcCA9IGluaXRpYWxpemVBcHAoY29uZmlnKTtcbmNvbnN0IGF1dGggPSBnZXRBdXRoKGFwcCk7XG52YXIgdWkgPSBuZXcgZmlyZWJhc2V1aS5hdXRoLkF1dGhVSShhdXRoKTtcblxudWkuc3RhcnQoJyNmaXJlYmFzZXVpLWF1dGgtY29udGFpbmVyJywge1xuICAgIGNhbGxiYWNrczoge1xuICAgICAgICBzaWduSW5TdWNjZXNzV2l0aEF1dGhSZXN1bHQ6IGFzeW5jIGZ1bmN0aW9uIChhdXRoUmVzdWx0LCByZWRpcmVjdFVybCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2pzb24nKS5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdG9rZW46IGF3YWl0IGF1dGguY3VycmVudFVzZXIuZ2V0SWRUb2tlbigpLFxuICAgICAgICAgICAgICAgIHVzZXI6IGF1dGguY3VycmVudFVzZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHVpU2hvd246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb2FkZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzaWduSW5GbG93OiAncG9wdXAnLFxuICAgIC8vIHNpZ25JblN1Y2Nlc3NVcmw6ICc8dXJsLXRvLXJlZGlyZWN0LXRvLW9uLXN1Y2Nlc3M+JyxcbiAgICBzaWduSW5PcHRpb25zOiBbXG4gICAgICAgICdmYWNlYm9vay5jb20nLFxuICAgICAgICAnYXBwbGUuY29tJyxcbiAgICAgICAgJ2dvb2dsZS5jb20nXG4gICAgXSxcbiAgICAvLyB0b3NVcmw6ICc8eW91ci10b3MtdXJsPicsXG4gICAgLy8gcHJpdmFjeVBvbGljeVVybDogJzx5b3VyLXByaXZhY3ktcG9saWN5LXVybD4nXG59KTsiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JHc0MyQixRQUFpQixRQUFlO0FBQ3pELFFBQUksQ0FBRSxtQkFBa0IsU0FBUztBQUMvQixhQUFPOztBQUdULFlBQVEsT0FBTztXQUNSO0FBR0gsY0FBTSxZQUFZO0FBQ2xCLGVBQU8sSUFBSSxLQUFLLFVBQVU7V0FFdkI7QUFDSCxZQUFJLFdBQVcsUUFBVztBQUN4QixtQkFBUzs7QUFFWDtXQUNHO0FBRUgsaUJBQVM7QUFDVDs7QUFJQSxlQUFPOztBQUdYLGVBQVcs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LEtBQUcsTUFBTSxVQUFVLFNBQU8sU0FBUyxHQUFFLEdBQUU7QUFBQyxtQkFBTyxNQUFNLFVBQVUsT0FBTyxLQUFLLEdBQUUsR0FBRTtBQUFBLGNBQVMsU0FBUyxHQUFFLEdBQUU7QUFBQyxxQkFBUSxJQUFFLEVBQUUsUUFBTyxJQUFFLElBQUcsSUFBRSxHQUFFLElBQUUsRUFBRSxLQUFHLEVBQUUsTUFBTSxNQUFJLEdBQUUsSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLGtCQUFHLEtBQUssR0FBRTtBQUFDLG9CQUFJLElBQUUsRUFBRTtBQUFHLGtCQUFFLEtBQUssUUFBTyxHQUFFLEdBQUUsTUFBSyxHQUFFLE9BQUs7QUFBQTtBQUFHLG1CQUFPO0FBQUEsYUFBRyxLQUFHLE1BQU0sVUFBVSxNQUFJLFNBQVMsR0FBRSxHQUFFO0FBQUMsbUJBQU8sTUFBTSxVQUFVLElBQUksS0FBSyxHQUFFLEdBQUU7QUFBQSxjQUFTLFNBQVMsR0FBRSxHQUFFO0FBQUMscUJBQVEsSUFBRSxFQUFFLFFBQU8sSUFBRSxNQUFNLElBQUcsSUFBRSxFQUFFLEtBQUcsRUFBRSxNQUFNLE1BQUksR0FBRSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksbUJBQUssS0FBSSxHQUFFLEtBQUcsRUFBRSxLQUFLLFFBQU8sRUFBRSxJQUFHLEdBQUU7QUFBSSxtQkFBTztBQUFBLGFBQUcsS0FBRyxNQUFNLFVBQVUsT0FDbmdCLFNBQVMsR0FBRSxHQUFFO0FBQUMsbUJBQU8sTUFBTSxVQUFVLEtBQUssS0FBSyxHQUFFLEdBQUU7QUFBQSxjQUFTLFNBQVMsR0FBRSxHQUFFO0FBQUMscUJBQVEsSUFBRSxFQUFFLFFBQU8sSUFBRSxFQUFFLEtBQUcsRUFBRSxNQUFNLE1BQUksR0FBRSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUcsS0FBSyxLQUFHLEVBQUUsS0FBSyxRQUFPLEVBQUUsSUFBRyxHQUFFO0FBQUcsdUJBQU07QUFBRyxtQkFBTTtBQUFBO0FBQUksc0JBQVksR0FBRSxHQUFFO0FBQUMsbUJBQU8sS0FBRyxHQUFHLEdBQUU7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QUFJLEdBQUcsUUFBTyxJQUFFLEVBQUUsR0FBRSxHQUFHLEVBQUUsR0FBRSxNQUFLLFFBQU8sRUFBRSxFQUFFLElBQUcsRUFBRSxLQUFJLEVBQUUsS0FBSSxFQUFFLEVBQUUsU0FBTyxJQUFFLEVBQUUsS0FBRyxHQUFHO0FBQUE7QUFBSyxZQUFFLFFBQU0sV0FBVTtBQUFDLGlCQUFLLElBQUUsS0FBSyxJQUFFO0FBQUssaUJBQUssSUFBRTtBQUFBO0FBQUcsc0JBQVksR0FBRSxHQUFFO0FBQUMsZUFBRztBQUFHLGdCQUFFLEdBQUcsR0FBRTtBQUFHLG1CQUFPLEdBQUcsRUFBRSxFQUFFLEdBQUU7QUFBQTtBQUFHLFlBQUUsVUFBUSxTQUFTLEdBQUUsR0FBRTtBQUFDLGVBQUc7QUFBTSxpQkFBSyxFQUFFLFFBQVEsU0FBUyxHQUMxZixHQUFFO0FBQUMsaUJBQUcsR0FBRSxTQUFTLEdBQUU7QUFBQyxrQkFBRSxLQUFLLEdBQUUsR0FBRSxHQUFFO0FBQUEsaUJBQU87QUFBQSxlQUFPO0FBQUE7QUFBTyxZQUFFLEtBQUcsV0FBVTtBQUFDLGVBQUc7QUFBTSxxQkFBUSxJQUFFLEtBQUssRUFBRSxNQUFLLElBQUUsS0FBSyxFQUFFLE1BQUssSUFBRSxJQUFHLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTztBQUFJLHVCQUFRLElBQUUsRUFBRSxJQUFHLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTztBQUFJLGtCQUFFLEtBQUssRUFBRTtBQUFJLG1CQUFPO0FBQUE7QUFBRyxZQUFFLEtBQUcsU0FBUyxHQUFFO0FBQUMsZUFBRztBQUFNLGdCQUFJLElBQUU7QUFBRyxnQkFBRyxFQUFFO0FBQUcsaUJBQUcsTUFBSyxNQUFLLEtBQUUsR0FBRyxHQUFFLEtBQUssRUFBRSxJQUFJLEdBQUcsTUFBSztBQUFBLGlCQUFVO0FBQUMsa0JBQUUsS0FBSyxFQUFFO0FBQUssdUJBQVEsSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPO0FBQUksb0JBQUUsR0FBRyxHQUFFLEVBQUU7QUFBQTtBQUFJLG1CQUFPO0FBQUE7QUFBRyxZQUFF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LE1BQUssSUFBRyxzQ0FBcUMsQ0FBQyxLQUFJLElBQUU7QUFBVSxtQkFBTztBQUFBO0FBQUUsY0FBSSxLQUFHO0FBQUEsWUFBQyxNQUFPO0FBQUEsWUFBTyxLQUFLO0FBQUEsWUFBTyxNQUFLO0FBQUEsWUFBUSxNQUFPO0FBQUEsWUFBUSxNQUFLO0FBQUEsWUFBUSxNQUFLO0FBQUEsWUFBUSxLQUFJO0FBQUEsWUFBUSxLQUFJO0FBQUEsWUFBUyxLQUFJO0FBQUEsWUFBUSxLQUFJO0FBQUEsWUFBUSxLQUFJO0FBQUEsWUFBUSxLQUFJO0FBQUEsWUFDOWUsS0FBSTtBQUFBLFlBQU8sS0FBSTtBQUFBLFlBQVEsS0FBSTtBQUFBLFlBQU8sS0FBSTtBQUFBLFlBQVEsUUFBUztBQUFBLFlBQVMsUUFBUztBQUFBLFlBQVMsVUFBUztBQUFBLFlBQVUsVUFBUztBQUFBO0FBQVcsc0JBQVksR0FBRTtBQUFDLG1CQUFPLEdBQUc7QUFBQTtBQUFHLGNBQUksS0FBRztBQUFBLFlBQUMsTUFBTztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sUUFBUztBQUFBLFlBQU0sTUFBSztBQUFBLFlBQU0sS0FBSztBQUFBLFlBQU0sTUFBSztBQUFBLFlBQU0sTUFBTztBQUFBLFlBQU0sTUFBSztBQUFBLFlBQU0sTUFBSztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQU0sS0FBUztBQUFBLFlBQ3RmLEtBQVM7QUFBQSxZQUFNLEtBQVM7QUFBQSxZQUFNLFFBQVM7QUFBQSxZQUFNLEtBQVM7QUFBQSxZQUFNLEtBQVM7QUFBQSxZQUFNLEtBQVM7QUFBQSxZQUFNLEtB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QUFLLElBQUUsS0FBSSxNQUFJO0FBQUcsZ0JBQUUsT0FBSztBQUFBO0FBQUUsbUJBQU87QUFBQTtBQUFFLHNCQUFZLEdBQUU7QUFBQyxtQkFBTyxHQUFHLEdBQUUsU0FBUyxHQUFFO0FBQUMsa0JBQUUsRUFBRSxTQUFTO0FBQUkscUJBQU8sSUFBRSxFQUFFLFNBQU8sSUFBRSxNQUFJO0FBQUEsZUFBSSxLQUFLO0FBQUE7QUFBSSxzQkFBWSxHQUFFO0FBQUMsaUJBQUssSUFBRTtBQUFFLGlCQUFLLElBQUUsS0FBSyxFQUFFLFNBQU87QUFBRSxpQkFBSyxJQUFFLEtBQUssSUFBRTtBQUFFLGlCQUFLLElBQUUsQ0FBQyxJQUFHLElBQUcsSUFBRztBQUFJLGlCQUFLLElBQUUsQ0FBQyxJQUFHLElBQUcsSUFBRztBQUFJLGlCQUFLLElBQUUsTUFBTSxLQUFJLE1BQUssSUFBRTtBQUFJLGlCQUFJLElBQUUsR0FBRSxJQUFFLEtBQUssR0FBRTtBQUFJLG1CQUFLLEVBQUUsS0FBRyxDQUFDLEtBQUssRUFBRSxJQUFFLElBQUcsS0FBSyxFQUFFLElBQUUsSUFBRSxJQUFHLEtBQUssRUFBRSxJQUFFLElBQUUsSUFBRyxLQUFLLEVBQUUsSUFBRSxJQUFFO0FBQUksZ0JBQUksSUFBRSxNQUFNO0FBQUcsaUJBQUksSUFBRSxLQUFLLEdBQUUsSUFBRSxLQUFJLE1BQUssSUFBRSxJQUFHLEtBQUk7QUFBQyxnQkFBRSxLQUFHLEtBQUssRUFBRSxJQUFFLEdBQUc7QUFBRyxnQkFBRSxLQUFHLEtBQUssRUFBRSxJQUFFLEdBQUc7QUFBRyxnQkFBRSxLQUNuZixLQUFLLEVBQUUsSUFBRSxHQUFHO0FBQUcsZ0JBQUUsS0FBRyxLQUFLLEVBQUUsSUFBRSxHQUFHO0FBQUcsa0JBQUcsQUFBRyxJQUFFLEtBQUssS0FBVixHQUFZO0FBQUMsb0JBQUksSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFHLGtCQUFFLEtBQUcsRUFBRTtBQUFHLGtCQUFFLEtBQUcsRUFBRTtBQUFHLGtCQUFFLEtBQUcsRUFBRTtBQUFHLGtCQUFFLEtBQUc7QUFBRSxtQkFBRztBQUFHLGtCQUFFLE1BQUksR0FBRyxJQUFFLEtBQUssR0FBRztBQUFHLGtCQUFFLE1BQUksR0FBRyxJQUFFLEtBQUssR0FBRztBQUFHLGtCQUFFLE1BQUksR0FBRyxJQUFFLEtBQUssR0FBRztBQUFHLGtCQUFFLE1BQUksR0FBRyxJQUFFLEtBQUssR0FBRztBQUFBO0FBQVEsb0JBQUUsS0FBSyxLQUFHLEFBQUcsSUFBRSxLQUFLLEtBQVYsS0FBYSxHQUFHO0FBQUcsbUJBQUssRUFBRSxLQUFHLE1BQU07QUFBRyxtQkFBSyxFQUFFLEdBQUcsS0FBRyxLQUFLLEVBQUUsSUFBRSxLQUFLLEdBQUcsS0FBRyxFQUFFO0FBQUcsbUJBQUssRUFBRSxHQUFHLEtBQUcsS0FBSyxFQUFFLElBQUUsS0FBSyxHQUFHLEtBQUcsRUFBRTtBQUFHLG1CQUFLLEVBQUUsR0FBRyxLQUFHLEtBQUssRUFBRSxJQUFFLEtBQUssR0FBRyxLQUFHLEVBQUU7QUFBRyxtQkFBSyxFQUFFLEdBQUcsS0FBRyxLQUFLLEVBQUUsSUFBRSxLQUFLLEdBQUcsS0FBRyxFQUFFO0FBQUE7QUFBQTtBQUFJLGFBQUcsVUFBVSxJQUFFO0FBQUcsY0FBSSxLQUFHLEdBQUcsVUFBVSxJQUFFO0FBQUUsc0JBQVksR0FBRSxHQUFFO0FBQUMscUJBQVEsR0FBRSxJQUFFLEdBQUUsSUFBRSxJQUFHO0FBQUksdUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLG9CQUN6ZixJQUFFLElBQUUsR0FBRSxJQUFFLEVBQUUsSUFBRyxFQUFFLEVBQUUsR0FBRyxLQUFHO0FBQUE7QUFBRSxzQkFBWSxHQUFFO0FBQUMscUJBQVEsSUFBRSxJQUFHLElBQUUsR0FBRSxJQUFFLElBQUc7QUFBSSx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUUsSUFBRSxJQUFFLEtBQUcsRUFBRSxFQUFFLEdBQUc7QUFBRyxtQkFBTztBQUFBO0FBQUUsc0JBQVksR0FBRSxHQUFFO0FBQUMscUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLHVCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUU7QUFBSSxrQkFBRSxFQUFFLEdBQUcsTUFBSSxFQUFFLEVBQUUsSUFBRSxJQUFFLEdBQUc7QUFBQTtBQUFHLHNCQUFZLEdBQUUsR0FBRTtBQUFDLHFCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUU7QUFBSSx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUUsRUFBRSxHQUFHLEtBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRztBQUFBO0FBQUksc0JBQVksR0FBRTtBQUFDLHFCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUU7QUFBSSx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUUsRUFBRSxHQUFHLEtBQUcsRUFBRSxFQUFFLEdBQUc7QUFBRyxpQkFBSSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksbUJBQUksSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLGtCQUFFLEVBQUUsR0FBRyxLQUFHLEVBQUUsRUFBRSxHQUFJLEtBQUUsS0FBRztBQUFBO0FBQUksc0JBQVksR0FBRTtBQUFDLHFCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUU7QUFBSSx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUUsRUFBRSxHQUFJLEtBQUUsS0FBRyxNQUFJLEVBQUUsRUFBRSxHQUFHO0FBQUcsaUJBQUksSUFBRSxHQUFFLElBQ3BmLEdBQUU7QUFBSSxtQkFBSSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUUsRUFBRSxHQUFHLEtBQUcsRUFBRSxFQUFFLEdBQUc7QUFBQTtBQUFHLHNCQUFZLEdBQUU7QUFBQyxjQUFFLEtBQUcsR0FBRyxFQUFFO0FBQUksY0FBRSxLQUFHLEdBQUcsRUFBRTtBQUFJLGNBQUUsS0FBRyxHQUFHLEVBQUU7QUFBSSxjQUFFLEtBQUcsR0FBRyxFQUFFO0FBQUE7QUFBSSxjQUFJLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUU7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUU7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQ25mO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQ3BmO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxhQUFJLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQ2xmO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLGFBQUssS0FBRyxDQUFDLENBQUMsR0FBRSxHQUFFLEdBQUUsSUFBRyxDQUFDLEdBQUUsR0FBRSxHQUFFLElBQUcsQ0FBQyxHQUFFLEdBQUUsR0FBRSxJQUFHLENBQUMsR0FBRSxHQUFFLEdBQUUsSUFBRztBQUFBLFlBQUM7QUFBQSxZQUFFO0FBQUEsWUFBRTtBQUFBLFlBQ25mO0FBQUEsYUFBRyxDQUFDLElBQUcsR0FBRSxHQUFFLElBQUcsQ0FBQyxJQUFHLEdBQUUsR0FBRSxJQUFHLENBQUMsSUFBRyxHQUFFLEdBQUUsSUFBRyxDQUFDLEtBQUksR0FBRSxHQUFFLElBQUcsQ0FBQyxJQUFHLEdBQUUsR0FBRSxJQUFHLENBQUMsSUFBRyxHQUFFLEdBQUUsS0FBSSxLQUFHO0FBQUEsWUFBQztBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQ3BmO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxhQUFLLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRTtBQUFBLFlBQ2xmO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQ2xmO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxhQUFJLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFDcGY7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUNqZjtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxhQUFJLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFDamY7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUNsZjtBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxhQUFLLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUNsZjtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFDcGY7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxhQUFLLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQ25mO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUU7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRTtBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBRztBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFFO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBRztBQUFBLFlBQUc7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFHO0FBQUEsWUFBSTtBQUFBLFlBQ25mO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQSxZQUFJO0FBQUEsWUFBSTtBQUFBLFlBQUk7QUFBQTtBQUFLLHNCQUFZLEdBQUUsR0FBRTtBQUFDLGdCQUFFLElBQUksR0FBRyxHQUFHO0FBQUksZ0JBQUUsR0FBRztBQUFHLHFCQUFRLElBQUUsRUFBRSxPQUFPLEdBQUUsS0FBSSxJQUFFLElBQUcsR0FBRSxFQUFFLFVBQVE7QUFBQyxrQkFBRSxLQUFHLEVBQUU7QUFBTyx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksa0JBQUUsS0FBSztBQUFHLGtCQUFFO0FBQUUsaUJBQUcsR0FBRTtBQUFHLGlCQUFHLEdBQUU7QUFBRyxtQkFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLEdBQUUsRUFBRSxHQUFFO0FBQUMsbUJBQUcsR0FBRTtBQUFJLG1CQUFHO0FBQUcsb0JBQUUsRUFBRTtBQUFFLHlCQUFRLElBQUUsRUFBRSxFQUFFLElBQUcsSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLG9CQUFFLEtBQUcsRUFBRSxHQUFHLElBQUcsRUFBRSxLQUFHLEVBQUUsR0FBRyxJQUFHLEVBQUUsS0FBRyxFQUFFLEdBQUcsSUFBRyxFQUFFLEtBQUcsRUFBRSxHQUFHLElBQUcsRUFBRSxHQUFHLEtBQUcsR0FBRyxFQUFFLE1BQUksR0FBRyxFQUFFLE1BQUksRUFBRSxLQUFHLEVBQUUsSUFBRyxFQUFFLEdBQUcsS0FBRyxFQUFFLEtBQUcsR0FBRyxFQUFFLE1BQUksR0FBRyxFQUFFLE1BQUksRUFBRSxJQUFHLEVBQUUsR0FBRyxLQUFHLEVBQUUsS0FBRyxFQUFFLEtBQUcsR0FBRyxFQUFFLE1BQUksR0FBRyxFQUFFLEtBQUksRUFBRSxHQUFHLEtBQUcsR0FBRyxFQUFFLE1BQUksRUFBRSxLQUFHLEVBQUUsS0FBRyxHQUFHLEVBQUU7QUFBSSxtQkFBRyxHQUFFO0FBQUE7QUFBRyxp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LFlBQU0sRUFBQyxNQUFLLGVBQWMsR0FBRSxXQUFVLEdBQUUsTUFBSyxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssVUFBUyxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxTQUFRLEdBQUUsV0FBVSxHQUFFLE1BQUssR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFdBQVUsR0FBRSxVQUFTLEdBQUUsS0FBSSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssU0FBUSxHQUFFLFdBQVUsR0FBRSxNQUFLLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxVQUFTLEdBQUUsV0FBVSxHQUFFLE1BQUssR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFVBQVMsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssY0FBYSxHQUFFLFVBQVMsR0FBRSxLQUFJLEdBQUU7QUFBQSxZQUFNO0FBQUEsY0FBQyxNQUFLO0FBQUEsY0FBUSxHQUFFO0FBQUEsY0FBVyxHQUFFO0FBQUEsY0FDcGYsR0FBRTtBQUFBO0FBQUEsWUFBTSxFQUFDLE1BQUssWUFBVyxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxVQUFTLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFVBQVMsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssVUFBUyxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxVQUFTLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLGNBQWEsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssUUFBTyxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxVQUFTLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFdBQVUsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssV0FBVSxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxXQUFVLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU07QUFBQSxjQUFDLE1BQUs7QUFBQSxjQUN6ZixHQUFFO0FBQUEsY0FBVyxHQUFFO0FBQUEsY0FBTSxHQUFFO0FBQUE7QUFBQSxZQUFNLEVBQUMsTUFBSyxpQkFBZ0IsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssYUFBWSxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxjQUFhLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFNBQVEsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssYUFBWSxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxjQUFhLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFVBQVMsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssWUFBVyxHQUFFLFdBQVUsR0FBRSxNQUFLLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxZQUFXLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFFBQU8sR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTTtBQUFBLGNBQUMsTUFBSztBQUFBLGNBQy9lLEdBQUU7QUFBQSxjQUFXLEdBQUU7QUFBQSxjQUFNLEdBQUU7QUFBQTtBQUFBLFlBQU0sRUFBQyxNQUFLLG9CQUFtQixHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxjQUFhLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLGNBQWEsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssYUFBWSxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxXQUFVLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFVBQVMsR0FBRSxXQUFVLEdBQUUsTUFBSyxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssY0FBYSxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxXQUFVLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFVBQVMsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssWUFBVyxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNO0FBQUEsY0FBQyxNQUFLO0FBQUEsY0FDdGYsR0FBRTtBQUFBLGNBQVcsR0FBRTtBQUFBLGNBQU0sR0FBRTtBQUFBO0FBQUEsWUFBTSxFQUFDLE1BQUssY0FBYSxHQUFFLFVBQVMsR0FBRSxLQUFJLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxXQUFVLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLGNBQWEsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssbUJBQWtCLEdBQUUsV0FBVSxHQUFFLE1BQUssR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLFdBQVUsR0FBRSxZQUFXLEdBQUUsT0FBTSxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssU0FBUSxHQUFFLFlBQVcsR0FBRSxPQUFNLEdBQUU7QUFBQSxZQUFNLEVBQUMsTUFBSyxTQUFRLEdBQUUsWUFBVyxHQUFFLE9BQU0sR0FBRTtBQUFBLFlBQU0sRUFBQyxNQUFLLGVBQWMsR0FBRSxXQUFVLEdBQUUsTUFBSyxHQUFFO0FBQUEsWUFBTSxFQUFDLE1BQUssaUJBQWdCLEdBQUUsWUFBVyxHQUFFLE9B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
